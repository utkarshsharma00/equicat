Initialized ConformerDataset with 2 conformer ensembles
Retrieved conformer ensemble 22_i with 8 conformers
Atomic Numbers: tensor([ 6,  6,  6,  6,  6,  6,  1,  6,  6,  6,  6,  1,  1,  1,  1,  6,  6,  6,
         6,  6,  6,  1,  6,  6,  6,  6,  1,  1,  1,  1,  8,  8, 15,  8,  8,  1,
         6,  7,  6,  1,  6,  1,  6,  1,  6,  6,  1,  6,  6,  7,  6,  1,  6,  1,
         6,  1,  6,  6,  1,  6])

Processing Conformer Ensemble: 22_i
Number of conformers in this ensemble: 8

Batch 1 in Ensemble: 22_i
Number of conformers in this batch: 8
Unique Atomic Numbers: [6, 1, 8, 15, 7]
Average number of neighbors: 20.27
Processing batch of 8 conformers
Initialized CustomNonLinearReadout with input irreps: 32x0e+32x1o
EQUICATPlusNonLinearReadout(
  (equicat): EQUICAT(
    (model): MACE(
      (node_embedding): LinearNodeEmbeddingBlock(
        (linear): Linear(5x0e -> 32x0e | 160 weights)
      )
      (radial_embedding): RadialEmbeddingBlock(
        (bessel_fn): BesselBasis(r_max=5.0, num_basis=8, trainable=False)
        (cutoff_fn): PolynomialCutoff(p=6.0, r_max=5.0)
      )
      (spherical_harmonics): SphericalHarmonics()
      (atomic_energies_fn): AtomicEnergiesBlock(energies=[0.0000, 0.0000, 0.0000, 0.0000, 0.0000])
      (interactions): ModuleList(
        (0): RealAgnosticResidualInteractionBlock(
          (linear_up): Linear(32x0e -> 32x0e | 1024 weights)
          (conv_tp): TensorProduct(32x0e x 1x0e+1x1o+1x2e -> 32x0e+32x1o+32x2e | 96 paths | 96 weights)
          (conv_tp_weights): FullyConnectedNet[8, 64, 64, 64, 96]
          (linear): Linear(32x0e+32x1o+32x2e -> 32x0e+32x1o+32x2e | 3072 weights)
          (skip_tp): FullyConnectedTensorProduct(32x0e x 5x0e -> 32x0e+32x1o | 5120 paths | 5120 weights)
          (reshape): reshape_irreps()
        )
        (1): RealAgnosticResidualInteractionBlock(
          (linear_up): Linear(32x0e+32x1o -> 32x0e+32x1o | 2048 weights)
          (conv_tp): TensorProduct(32x0e+32x1o x 1x0e+1x1o+1x2e -> 64x0e+96x1o+64x2e | 224 paths | 224 weights)
          (conv_tp_weights): FullyConnectedNet[8, 64, 64, 64, 224]
          (linear): Linear(64x0e+96x1o+64x2e -> 32x0e+32x1o+32x2e | 7168 weights)
          (skip_tp): FullyConnectedTensorProduct(32x0e+32x1o x 5x0e -> 32x0e | 5120 paths | 5120 weights)
          (reshape): reshape_irreps()
        )
      )
      (products): ModuleList(
        (0): EquivariantProductBasisBlock(
          (symmetric_contractions): SymmetricContraction(
            (contractions): ModuleList(
              (0): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 5x3x32]
                    (1): Parameter containing: [torch.float32 of size 5x1x32]
                )
                (graph_opt_main): GraphModule()
              )
              (1): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 5x4x32]
                    (1): Parameter containing: [torch.float32 of size 5x1x32]
                )
                (graph_opt_main): GraphModule()
              )
            )
          )
          (linear): Linear(32x0e+32x1o -> 32x0e+32x1o | 2048 weights)
        )
        (1): EquivariantProductBasisBlock(
          (symmetric_contractions): SymmetricContraction(
            (contractions): ModuleList(
              (0): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 5x3x32]
                    (1): Parameter containing: [torch.float32 of size 5x1x32]
                )
                (graph_opt_main): GraphModule()
              )
            )
          )
          (linear): Linear(32x0e -> 32x0e | 1024 weights)
        )
      )
      (readouts): ModuleList(
        (0): LinearReadoutBlock(
          (linear): Linear(32x0e+32x1o -> 1x0e | 32 weights)
        )
        (1): NonLinearReadoutBlock(
          (linear_1): Linear(32x0e -> 16x0e | 512 weights)
          (non_linearity): Activation [x] (16x0e -> 16x0e)
          (linear_2): Linear(16x0e -> 1x0e | 16 weights)
        )
      )
    )
  )
  (non_linear_readout): CustomNonLinearReadout(
    (linear_1): Linear(32x0e+32x1o -> 16x0e+16x1o | 1024 weights)
    (non_linearity_1): Activation [x ] (16x0e+16x1o -> 16x0e+16x1o)
    (linear_2): Linear(16x0e+16x1o -> 16x0e+16x1o | 512 weights)
    (non_linearity_2): Activation [x ] (16x0e+16x1o -> 16x0e+16x1o)
    (linear_3): Linear(16x0e+16x1o -> 8x0e+8x1o | 256 weights)
  )
)
positions shape: torch.Size([60, 3])
edge_index shape: torch.Size([2, 1220])
shifts shape: torch.Size([1220, 3])
sender shape: torch.Size([1220])
receiver shape: torch.Size([1220])
Edge attributes shape: torch.Size([1220, 9])
Edge attributes tensor([[ 1.0000,  1.2118,  1.0010,  ...,  0.0023, -0.9405, -0.6060],
        [ 1.0000, -0.2260,  1.7166,  ...,  2.1763, -0.1070, -0.0315],
        [ 1.0000,  1.4180, -0.7132,  ..., -0.5493,  0.6384, -0.9876],
        ...,
        [ 1.0000,  1.2027,  1.0085,  ...,  0.0192,  0.9535, -0.5875],
        [ 1.0000,  1.2044,  1.0083,  ...,  0.0187,  0.9501, -0.5924],
        [ 1.0000,  0.7658,  0.0455,  ..., -1.1157,  0.0912,  1.1780]])
Edge features shape: torch.Size([1220, 8])
Edge features tensor([[ 1.6813e-01, -6.4328e-02, -1.4352e-01,  ..., -1.5669e-01,
         -3.7943e-02,  1.7121e-01],
        [ 3.4387e-01,  4.3202e-01,  1.9888e-01,  ..., -3.5521e-01,
         -1.8520e-02,  3.3194e-01],
        [ 3.4489e-01,  4.3766e-01,  2.1049e-01,  ..., -3.7120e-01,
         -4.4118e-02,  3.1521e-01],
        ...,
        [ 1.6314e-01, -6.8672e-02, -1.3424e-01,  ..., -1.5950e-01,
         -1.4405e-02,  1.6556e-01],
        [ 2.4333e-02, -3.7859e-02,  3.4569e-02,  ...,  3.1159e-02,
         -3.8688e-02,  2.9034e-02],
        [ 5.0244e-06, -1.0025e-05,  1.4976e-05,  ..., -2.9303e-05,
          3.3825e-05, -3.8183e-05]])
Node attributes shape: torch.Size([60, 5])
Node attributes tensor([[1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 0., 1., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([160])
Initial node features shape: torch.Size([60, 32])
Initial node features tensor([[ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        ...,
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [-0.0978, -0.0333,  0.1609,  ...,  0.9091,  0.0698,  0.1118],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([60, 32])
Tensor product weights shape: torch.Size([1220, 96])
Tensor Product Weights tensor([[ 4.4976e-02, -2.4794e-02,  9.6753e-02,  ...,  1.1421e-01,
         -5.0562e-02, -6.2704e-02],
        [ 3.0567e-01,  8.6655e-02, -3.8822e-01,  ..., -1.7561e-01,
         -1.3076e-01,  1.6344e-01],
        [ 2.9807e-01,  9.9300e-02, -4.0267e-01,  ..., -1.8451e-01,
         -1.2152e-01,  1.6337e-01],
        ...,
        [ 4.0584e-02, -1.7559e-02,  9.1782e-02,  ...,  1.1783e-01,
         -4.2403e-02, -4.2173e-02],
        [-3.0833e-03,  2.5893e-02, -7.6778e-03,  ..., -6.5909e-03,
          5.8055e-04, -3.7722e-02],
        [-1.5545e-05, -2.6411e-07, -1.1836e-05,  ...,  1.5659e-05,
         -1.2868e-06,  3.4099e-05]], grad_fn=<MmBackward0>)
Message shape: torch.Size([60, 288])
Message tensor([[ 0.1467, -0.0132,  0.8686,  ..., -0.0887, -0.0231, -0.0754],
        [ 0.2012, -0.0824,  0.2956,  ...,  0.0411, -0.1788, -0.0235],
        [ 0.0808, -0.0394,  0.6610,  ...,  0.1088,  0.1030, -0.1994],
        ...,
        [-0.0349,  0.1131,  1.0582,  ...,  0.1064, -0.3055,  0.1032],
        [ 0.0287,  0.0189,  0.4764,  ..., -0.1137,  0.0259, -0.0220],
        [ 0.2186, -0.0225,  0.7126,  ...,  0.1112,  0.2737, -0.1688]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([60, 32, 9])
Node features shape torch.Size([60, 128])
Node features tensor([[-1.7945e-01, -1.2503e-01, -2.8290e-01,  ..., -4.4687e-02,
         -3.4567e-04,  1.9777e-02],
        [-1.5392e-01, -2.1430e-01, -2.3417e-01,  ...,  1.3213e-01,
          4.4085e-02, -1.5858e-01],
        [-1.7012e-01, -1.2551e-01, -2.3339e-01,  ..., -2.7369e-02,
         -3.1807e-02, -1.4286e-02],
        ...,
        [-1.8364e-01, -3.8424e-02, -3.9871e-01,  ..., -4.0819e-02,
         -8.4476e-02,  9.6443e-02],
        [ 2.5363e-01,  7.9510e-02,  1.2416e-01,  ..., -3.4421e-02,
          9.1181e-03,  1.3829e-01],
        [-1.3136e-01, -1.6530e-01, -2.8181e-01,  ..., -1.0615e-02,
          4.8692e-02, -1.7007e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([60, 128])
Input shape to CustomNonLinearReadout: torch.Size([60, 128])
Final output shape after NonLinearReadout: torch.Size([60, 32])
Conformer embeddings shape: torch.Size([60, 32])
positions shape: torch.Size([60, 3])
edge_index shape: torch.Size([2, 1222])
shifts shape: torch.Size([1222, 3])
sender shape: torch.Size([1222])
receiver shape: torch.Size([1222])
Edge attributes shape: torch.Size([1222, 9])
Edge attributes tensor([[ 1.0000e+00,  1.2129e+00,  1.0020e+00,  ...,  4.4091e-03,
         -9.3724e-01, -6.1070e-01],
        [ 1.0000e+00, -2.2682e-01,  1.7165e+00,  ...,  2.1760e+00,
         -1.0665e-01, -3.1714e-02],
        [ 1.0000e+00,  1.4202e+00, -7.1201e-01,  ..., -5.5124e-01,
          6.3417e-01, -9.9476e-01],
        ...,
        [ 1.0000e+00,  1.2138e+00,  1.0003e+00,  ...,  6.7013e-04,
          9.3662e-01, -6.1149e-01],
        [ 1.0000e+00,  1.2145e+00,  9.9878e-01,  ..., -2.7237e-03,
          9.3652e-01, -6.1153e-01],
        [ 1.0000e+00,  1.1439e+00,  1.2958e+00,  ...,  7.5918e-01,
         -1.8723e-01, -8.3651e-01]])
Edge features shape: torch.Size([1222, 8])
Edge features tensor([[ 0.1681, -0.0644, -0.1434,  ..., -0.1567, -0.0377,  0.1712],
        [ 0.3439,  0.4320,  0.1989,  ..., -0.3552, -0.0185,  0.3319],
        [ 0.3449,  0.4376,  0.2105,  ..., -0.3712, -0.0440,  0.3153],
        ...,
        [ 0.1634, -0.0685, -0.1347,  ..., -0.1594, -0.0155,  0.1659],
        [ 0.0244, -0.0380,  0.0346,  ...,  0.0314, -0.0388,  0.0289],
        [ 0.2233,  0.0127, -0.2226,  ...,  0.0378, -0.2190, -0.0502]])
Node attributes shape: torch.Size([60, 5])
Node attributes tensor([[1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 0., 1., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([160])
Initial node features shape: torch.Size([60, 32])
Initial node features tensor([[ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        ...,
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [-0.0978, -0.0333,  0.1609,  ...,  0.9091,  0.0698,  0.1118],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([60, 32])
Tensor product weights shape: torch.Size([1222, 96])
Tensor Product Weights tensor([[ 0.0449, -0.0247,  0.0967,  ...,  0.1142, -0.0505, -0.0625],
        [ 0.3057,  0.0867, -0.3882,  ..., -0.1756, -0.1308,  0.1634],
        [ 0.2981,  0.0993, -0.4026,  ..., -0.1845, -0.1215,  0.1634],
        ...,
        [ 0.0408, -0.0179,  0.0920,  ...,  0.1177, -0.0428, -0.0431],
        [-0.0031,  0.0260, -0.0078,  ..., -0.0066,  0.0006, -0.0378],
        [ 0.0878, -0.0726,  0.0271,  ...,  0.0370, -0.1408, -0.1960]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([60, 288])
Message tensor([[ 0.1468, -0.0132,  0.8682,  ..., -0.0888, -0.0220, -0.0766],
        [ 0.2009, -0.0817,  0.2946,  ...,  0.0408, -0.1774, -0.0229],
        [ 0.0808, -0.0397,  0.6613,  ...,  0.1083,  0.1035, -0.1996],
        ...,
        [-0.0225,  0.1196,  0.9547,  ..., -0.1834, -0.1551,  0.3333],
        [ 0.0405,  0.0283,  0.3528,  ...,  0.2119,  0.0158,  0.0541],
        [ 0.2180, -0.0233,  0.7133,  ...,  0.0403,  0.3078, -0.1121]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([60, 32, 9])
Node features shape torch.Size([60, 128])
Node features tensor([[-0.1794, -0.1251, -0.2828,  ..., -0.0447, -0.0004,  0.0197],
        [-0.1537, -0.2143, -0.2334,  ...,  0.1330,  0.0440, -0.1580],
        [-0.1701, -0.1255, -0.2334,  ..., -0.0274, -0.0318, -0.0144],
        ...,
        [-0.1255, -0.0461, -0.3860,  ..., -0.0495,  0.0442, -0.1321],
        [ 0.3159,  0.0518,  0.1253,  ...,  0.0807,  0.0393, -0.0983],
        [-0.1316, -0.1667, -0.2794,  ..., -0.0138,  0.0315,  0.0144]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([60, 128])
Input shape to CustomNonLinearReadout: torch.Size([60, 128])
Final output shape after NonLinearReadout: torch.Size([60, 32])
Conformer embeddings shape: torch.Size([60, 32])
positions shape: torch.Size([60, 3])
edge_index shape: torch.Size([2, 1218])
shifts shape: torch.Size([1218, 3])
sender shape: torch.Size([1218])
receiver shape: torch.Size([1218])
Edge attributes shape: torch.Size([1218, 9])
Edge attributes tensor([[ 1.0000,  1.2139,  0.9982,  ..., -0.0041, -0.9381, -0.6091],
        [ 1.0000, -0.2237,  1.7167,  ...,  2.1771, -0.1156, -0.0306],
        [ 1.0000,  1.4181, -0.7167,  ..., -0.5438,  0.6379, -0.9913],
        ...,
        [ 1.0000,  0.2834,  0.8746,  ..., -0.2628,  1.6574,  1.3390],
        [ 1.0000,  1.1859,  1.0091,  ...,  0.0205,  0.9881, -0.5365],
        [ 1.0000,  1.1856,  1.0082,  ...,  0.0184,  0.9895, -0.5343]])
Edge features shape: torch.Size([1218, 8])
Edge features tensor([[ 0.1682, -0.0642, -0.1437,  ..., -0.1566, -0.0385,  0.1713],
        [ 0.3439,  0.4320,  0.1988,  ..., -0.3552, -0.0185,  0.3320],
        [ 0.3449,  0.4377,  0.2106,  ..., -0.3713, -0.0443,  0.3151],
        ...,
        [ 0.0749, -0.0823,  0.0156,  ...,  0.0308,  0.0534, -0.0895],
        [ 0.1641, -0.0678, -0.1361,  ..., -0.1591, -0.0190,  0.1670],
        [ 0.0248, -0.0384,  0.0348,  ...,  0.0321, -0.0392,  0.0286]])
Node attributes shape: torch.Size([60, 5])
Node attributes tensor([[1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 0., 1., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([160])
Initial node features shape: torch.Size([60, 32])
Initial node features tensor([[ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        ...,
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [-0.0978, -0.0333,  0.1609,  ...,  0.9091,  0.0698,  0.1118],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([60, 32])
Tensor product weights shape: torch.Size([1218, 96])
Tensor Product Weights tensor([[ 0.0451, -0.0250,  0.0968,  ...,  0.1141, -0.0508, -0.0632],
        [ 0.3057,  0.0866, -0.3882,  ..., -0.1756, -0.1308,  0.1634],
        [ 0.2980,  0.0994, -0.4028,  ..., -0.1846, -0.1215,  0.1634],
        ...,
        [-0.0245,  0.0711, -0.0546,  ...,  0.0399,  0.0312,  0.0748],
        [ 0.0415, -0.0190,  0.0929,  ...,  0.1172, -0.0440, -0.0463],
        [-0.0032,  0.0266, -0.0081,  ..., -0.0067,  0.0008, -0.0380]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([60, 288])
Message tensor([[ 0.1468, -0.0130,  0.8685,  ..., -0.0889, -0.0223, -0.0756],
        [ 0.2006, -0.0820,  0.2964,  ...,  0.0443, -0.1765, -0.0216],
        [ 0.0807, -0.0386,  0.6598,  ...,  0.1084,  0.1017, -0.2005],
        ...,
        [-0.0753,  0.1035,  1.0675,  ..., -0.1864,  0.3022,  0.2055],
        [-0.0033, -0.0463,  0.5283,  ...,  0.0374, -0.0953, -0.0785],
        [ 0.2217, -0.0316,  0.7327,  ...,  0.1680,  0.1414,  0.0086]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([60, 32, 9])
Node features shape torch.Size([60, 128])
Node features tensor([[-1.7943e-01, -1.2502e-01, -2.8289e-01,  ..., -4.4729e-02,
         -2.7589e-04,  1.9716e-02],
        [-1.5354e-01, -2.1308e-01, -2.3382e-01,  ...,  1.3185e-01,
          4.3541e-02, -1.5867e-01],
        [-1.7051e-01, -1.2554e-01, -2.3425e-01,  ..., -2.7269e-02,
         -3.1845e-02, -1.4532e-02],
        ...,
        [-1.5390e-01, -8.0802e-03, -3.1934e-01,  ...,  1.6200e-02,
         -2.7065e-02, -1.2595e-01],
        [ 1.8610e-01,  1.1622e-01,  7.8831e-02,  ..., -1.4753e-02,
          8.2262e-02, -8.3282e-02],
        [-1.3170e-01, -1.6902e-01, -2.8659e-01,  ..., -1.8643e-02,
          3.9889e-02,  1.1513e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([60, 128])
Input shape to CustomNonLinearReadout: torch.Size([60, 128])
Final output shape after NonLinearReadout: torch.Size([60, 32])
Conformer embeddings shape: torch.Size([60, 32])
positions shape: torch.Size([60, 3])
edge_index shape: torch.Size([2, 1218])
shifts shape: torch.Size([1218, 3])
sender shape: torch.Size([1218])
receiver shape: torch.Size([1218])
Edge attributes shape: torch.Size([1218, 9])
Edge attributes tensor([[ 1.0000,  1.2122,  0.9982,  ..., -0.0041, -0.9418, -0.6037],
        [ 1.0000, -0.2238,  1.7168,  ...,  2.1771, -0.1151, -0.0306],
        [ 1.0000,  1.4157, -0.7168,  ..., -0.5436,  0.6424, -0.9826],
        ...,
        [ 1.0000,  0.2729,  0.8828,  ..., -0.2466,  1.6697,  1.3372],
        [ 1.0000,  1.1815,  1.0114,  ...,  0.0256,  0.9953, -0.5261],
        [ 1.0000,  1.1812,  1.0105,  ...,  0.0235,  0.9967, -0.5238]])
Edge features shape: torch.Size([1218, 8])
Edge features tensor([[ 0.1682, -0.0642, -0.1437,  ..., -0.1566, -0.0384,  0.1713],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3550, -0.0182,  0.3322],
        [ 0.3449,  0.4377,  0.2105,  ..., -0.3712, -0.0441,  0.3152],
        ...,
        [ 0.0749, -0.0823,  0.0156,  ...,  0.0308,  0.0534, -0.0895],
        [ 0.1641, -0.0678, -0.1361,  ..., -0.1591, -0.0191,  0.1670],
        [ 0.0248, -0.0384,  0.0348,  ...,  0.0321, -0.0392,  0.0286]])
Node attributes shape: torch.Size([60, 5])
Node attributes tensor([[1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 0., 1., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([160])
Initial node features shape: torch.Size([60, 32])
Initial node features tensor([[ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        ...,
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [-0.0978, -0.0333,  0.1609,  ...,  0.9091,  0.0698,  0.1118],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([60, 32])
Tensor product weights shape: torch.Size([1218, 96])
Tensor Product Weights tensor([[ 0.0451, -0.0249,  0.0968,  ...,  0.1141, -0.0507, -0.0631],
        [ 0.3058,  0.0865, -0.3880,  ..., -0.1755, -0.1309,  0.1634],
        [ 0.2981,  0.0993, -0.4027,  ..., -0.1845, -0.1215,  0.1634],
        ...,
        [-0.0245,  0.0711, -0.0546,  ...,  0.0399,  0.0312,  0.0748],
        [ 0.0415, -0.0190,  0.0929,  ...,  0.1172, -0.0440, -0.0463],
        [-0.0032,  0.0266, -0.0081,  ..., -0.0067,  0.0008, -0.0380]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([60, 288])
Message tensor([[ 0.1466, -0.0129,  0.8681,  ..., -0.0896, -0.0232, -0.0765],
        [ 0.2003, -0.0834,  0.2997,  ...,  0.0445, -0.1758, -0.0194],
        [ 0.0807, -0.0385,  0.6598,  ...,  0.1082,  0.1011, -0.1992],
        ...,
        [-0.0752,  0.1037,  1.0666,  ..., -0.1817,  0.3063,  0.2037],
        [-0.0031, -0.0461,  0.5256,  ...,  0.0411, -0.0983, -0.0759],
        [ 0.2218, -0.0317,  0.7329,  ...,  0.1695,  0.1404,  0.0126]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([60, 32, 9])
Node features shape torch.Size([60, 128])
Node features tensor([[-0.1794, -0.1252, -0.2831,  ..., -0.0444, -0.0004,  0.0200],
        [-0.1547, -0.2129, -0.2347,  ...,  0.1314,  0.0430, -0.1590],
        [-0.1705, -0.1255, -0.2341,  ..., -0.0273, -0.0317, -0.0145],
        ...,
        [-0.1537, -0.0079, -0.3189,  ...,  0.0177, -0.0278, -0.1254],
        [ 0.1851,  0.1179,  0.0795,  ..., -0.0131,  0.0817, -0.0833],
        [-0.1317, -0.1688, -0.2870,  ..., -0.0185,  0.0396,  0.0112]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([60, 128])
Input shape to CustomNonLinearReadout: torch.Size([60, 128])
Final output shape after NonLinearReadout: torch.Size([60, 32])
Conformer embeddings shape: torch.Size([60, 32])
positions shape: torch.Size([60, 3])
edge_index shape: torch.Size([2, 1222])
shifts shape: torch.Size([1222, 3])
sender shape: torch.Size([1222])
receiver shape: torch.Size([1222])
Edge attributes shape: torch.Size([1222, 9])
Edge attributes tensor([[ 1.0000e+00,  1.2122e+00,  1.0019e+00,  ...,  4.1434e-03,
         -9.3886e-01, -6.0834e-01],
        [ 1.0000e+00, -2.2627e-01,  1.7166e+00,  ...,  2.1763e+00,
         -1.0468e-01, -3.1609e-02],
        [ 1.0000e+00,  1.4184e+00, -7.1235e-01,  ..., -5.5069e-01,
          6.3761e-01, -9.8836e-01],
        ...,
        [ 1.0000e+00,  1.2113e+00,  1.0019e+00,  ...,  4.3611e-03,
          9.4059e-01, -6.0585e-01],
        [ 1.0000e+00,  1.2119e+00,  1.0005e+00,  ...,  1.0890e-03,
          9.4057e-01, -6.0577e-01],
        [ 1.0000e+00,  1.1384e+00,  1.3009e+00,  ...,  7.7413e-01,
         -1.8208e-01, -8.2887e-01]])
Edge features shape: torch.Size([1222, 8])
Edge features tensor([[ 0.1681, -0.0644, -0.1434,  ..., -0.1567, -0.0377,  0.1712],
        [ 0.3439,  0.4320,  0.1988,  ..., -0.3552, -0.0185,  0.3320],
        [ 0.3449,  0.4377,  0.2105,  ..., -0.3713, -0.0443,  0.3151],
        ...,
        [ 0.1634, -0.0685, -0.1346,  ..., -0.1594, -0.0154,  0.1659],
        [ 0.0244, -0.0380,  0.0346,  ...,  0.0314, -0.0388,  0.0290],
        [ 0.2233,  0.0126, -0.2225,  ...,  0.0377, -0.2190, -0.0501]])
Node attributes shape: torch.Size([60, 5])
Node attributes tensor([[1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 0., 1., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([160])
Initial node features shape: torch.Size([60, 32])
Initial node features tensor([[ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        ...,
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [-0.0978, -0.0333,  0.1609,  ...,  0.9091,  0.0698,  0.1118],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([60, 32])
Tensor product weights shape: torch.Size([1222, 96])
Tensor Product Weights tensor([[ 0.0449, -0.0247,  0.0967,  ...,  0.1143, -0.0505, -0.0625],
        [ 0.3057,  0.0866, -0.3882,  ..., -0.1756, -0.1308,  0.1634],
        [ 0.2980,  0.0994, -0.4027,  ..., -0.1846, -0.1215,  0.1634],
        ...,
        [ 0.0408, -0.0179,  0.0920,  ...,  0.1177, -0.0428, -0.0431],
        [-0.0031,  0.0260, -0.0078,  ..., -0.0066,  0.0006, -0.0378],
        [ 0.0877, -0.0726,  0.0271,  ...,  0.0370, -0.1408, -0.1960]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([60, 288])
Message tensor([[ 0.1467, -0.0133,  0.8682,  ..., -0.0892, -0.0230, -0.0774],
        [ 0.2009, -0.0824,  0.2956,  ...,  0.0415, -0.1777, -0.0223],
        [ 0.0808, -0.0396,  0.6614,  ...,  0.1084,  0.1036, -0.1990],
        ...,
        [-0.0219,  0.1199,  0.9535,  ..., -0.1787, -0.1575,  0.3350],
        [ 0.0409,  0.0289,  0.3533,  ...,  0.2154,  0.0171,  0.0582],
        [ 0.2180, -0.0232,  0.7132,  ...,  0.0392,  0.3087, -0.1114]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([60, 32, 9])
Node features shape torch.Size([60, 128])
Node features tensor([[-0.1794, -0.1252, -0.2829,  ..., -0.0444, -0.0004,  0.0199],
        [-0.1538, -0.2143, -0.2337,  ...,  0.1328,  0.0437, -0.1581],
        [-0.1701, -0.1255, -0.2333,  ..., -0.0274, -0.0317, -0.0143],
        ...,
        [-0.1251, -0.0460, -0.3867,  ..., -0.0496,  0.0448, -0.1319],
        [ 0.3161,  0.0515,  0.1256,  ...,  0.0805,  0.0408, -0.0980],
        [-0.1316, -0.1666, -0.2797,  ..., -0.0136,  0.0312,  0.0142]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([60, 128])
Input shape to CustomNonLinearReadout: torch.Size([60, 128])
Final output shape after NonLinearReadout: torch.Size([60, 32])
Conformer embeddings shape: torch.Size([60, 32])
positions shape: torch.Size([60, 3])
edge_index shape: torch.Size([2, 1210])
shifts shape: torch.Size([1210, 3])
sender shape: torch.Size([1210])
receiver shape: torch.Size([1210])
Edge attributes shape: torch.Size([1210, 9])
Edge attributes tensor([[ 1.0000,  1.2137,  0.9966,  ..., -0.0077, -0.9400, -0.6063],
        [ 1.0000, -0.2224,  1.7169,  ...,  2.1775, -0.1193, -0.0300],
        [ 1.0000,  1.4164, -0.7187,  ..., -0.5405,  0.6410, -0.9868],
        ...,
        [ 1.0000,  1.1622,  1.0233,  ...,  0.0528,  1.0252, -0.4831],
        [ 1.0000,  1.1641,  1.0221,  ...,  0.0499,  1.0223, -0.4873],
        [ 1.0000,  0.0584,  0.8414,  ..., -0.3265,  1.6433,  1.4751]])
Edge features shape: torch.Size([1210, 8])
Edge features tensor([[ 1.6831e-01, -6.4159e-02, -1.4386e-01,  ..., -1.5654e-01,
         -3.8826e-02,  1.7134e-01],
        [ 3.4387e-01,  4.3197e-01,  1.9879e-01,  ..., -3.5508e-01,
         -1.8325e-02,  3.3206e-01],
        [ 3.4490e-01,  4.3767e-01,  2.1051e-01,  ..., -3.7123e-01,
         -4.4173e-02,  3.1517e-01],
        ...,
        [ 1.6395e-01, -6.7995e-02, -1.3575e-01,  ..., -1.5922e-01,
         -1.8173e-02,  1.6675e-01],
        [ 2.4694e-02, -3.8323e-02,  3.4780e-02,  ...,  3.1929e-02,
         -3.9064e-02,  2.8695e-02],
        [ 5.4784e-06, -1.0929e-05,  1.6324e-05,  ..., -3.1907e-05,
          3.6812e-05, -4.1531e-05]])
Node attributes shape: torch.Size([60, 5])
Node attributes tensor([[1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 0., 1., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([160])
Initial node features shape: torch.Size([60, 32])
Initial node features tensor([[ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        ...,
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [-0.0978, -0.0333,  0.1609,  ...,  0.9091,  0.0698,  0.1118],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([60, 32])
Tensor product weights shape: torch.Size([1210, 96])
Tensor Product Weights tensor([[ 4.5130e-02, -2.5055e-02,  9.6906e-02,  ...,  1.1406e-01,
         -5.0868e-02, -6.3460e-02],
        [ 3.0572e-01,  8.6558e-02, -3.8811e-01,  ..., -1.7553e-01,
         -1.3083e-01,  1.6344e-01],
        [ 2.9805e-01,  9.9327e-02, -4.0270e-01,  ..., -1.8453e-01,
         -1.2150e-01,  1.6337e-01],
        ...,
        [ 4.1327e-02, -1.8756e-02,  9.2694e-02,  ...,  1.1730e-01,
         -4.3712e-02, -4.5512e-02],
        [-3.1467e-03,  2.6421e-02, -8.0267e-03,  ..., -6.6913e-03,
          7.5078e-04, -3.7908e-02],
        [-1.6925e-05, -2.8535e-07, -1.2878e-05,  ...,  1.7050e-05,
         -1.4065e-06,  3.7103e-05]], grad_fn=<MmBackward0>)
Message shape: torch.Size([60, 288])
Message tensor([[ 0.1467, -0.0128,  0.8686,  ..., -0.0890, -0.0230, -0.0751],
        [ 0.2005, -0.0833,  0.2986,  ...,  0.0441, -0.1770, -0.0226],
        [ 0.0806, -0.0383,  0.6593,  ...,  0.1085,  0.1007, -0.2009],
        ...,
        [-0.0527,  0.0905,  1.0740,  ..., -0.3211,  0.0202, -0.1190],
        [-0.0084, -0.0399,  0.5398,  ..., -0.0245,  0.0395,  0.1738],
        [ 0.2226, -0.0329,  0.7356,  ...,  0.1589,  0.0609, -0.0919]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([60, 32, 9])
Node features shape torch.Size([60, 128])
Node features tensor([[-1.7948e-01, -1.2501e-01, -2.8300e-01,  ..., -4.4708e-02,
         -2.6423e-04,  1.9812e-02],
        [-1.5400e-01, -2.1272e-01, -2.3433e-01,  ...,  1.3102e-01,
          4.3510e-02, -1.5908e-01],
        [-1.7065e-01, -1.2549e-01, -2.3440e-01,  ..., -2.7150e-02,
         -3.1809e-02, -1.4642e-02],
        ...,
        [-1.5748e-01, -3.7307e-02, -3.7708e-01,  ..., -1.3312e-01,
         -1.5807e-02,  5.2895e-02],
        [ 2.3649e-01,  3.4109e-02,  6.2149e-02,  ..., -5.8854e-02,
         -2.6514e-02,  5.1552e-02],
        [-1.3285e-01, -1.6819e-01, -2.8945e-01,  ...,  4.2600e-03,
          3.4575e-02, -1.7599e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([60, 128])
Input shape to CustomNonLinearReadout: torch.Size([60, 128])
Final output shape after NonLinearReadout: torch.Size([60, 32])
Conformer embeddings shape: torch.Size([60, 32])
positions shape: torch.Size([60, 3])
edge_index shape: torch.Size([2, 1210])
shifts shape: torch.Size([1210, 3])
sender shape: torch.Size([1210])
receiver shape: torch.Size([1210])
Edge attributes shape: torch.Size([1210, 9])
Edge attributes tensor([[ 1.0000,  1.2124,  0.9971,  ..., -0.0065, -0.9424, -0.6028],
        [ 1.0000, -0.2226,  1.7169,  ...,  2.1776, -0.1165, -0.0302],
        [ 1.0000,  1.4147, -0.7182,  ..., -0.5414,  0.6442, -0.9802],
        ...,
        [ 1.0000,  1.1637,  1.0232,  ...,  0.0524,  1.0222, -0.4876],
        [ 1.0000,  1.1657,  1.0219,  ...,  0.0495,  1.0192, -0.4919],
        [ 1.0000,  0.0612,  0.8418,  ..., -0.3257,  1.6437,  1.4742]])
Edge features shape: torch.Size([1210, 8])
Edge features tensor([[ 1.6830e-01, -6.4170e-02, -1.4384e-01,  ..., -1.5655e-01,
         -3.8769e-02,  1.7133e-01],
        [ 3.4386e-01,  4.3194e-01,  1.9872e-01,  ..., -3.5499e-01,
         -1.8186e-02,  3.3215e-01],
        [ 3.4489e-01,  4.3767e-01,  2.1051e-01,  ..., -3.7122e-01,
         -4.4161e-02,  3.1518e-01],
        ...,
        [ 1.6394e-01, -6.8001e-02, -1.3574e-01,  ..., -1.5922e-01,
         -1.8138e-02,  1.6674e-01],
        [ 2.4695e-02, -3.8325e-02,  3.4781e-02,  ...,  3.1932e-02,
         -3.9065e-02,  2.8693e-02],
        [ 5.4936e-06, -1.0959e-05,  1.6370e-05,  ..., -3.1996e-05,
          3.6916e-05, -4.1649e-05]])
Node attributes shape: torch.Size([60, 5])
Node attributes tensor([[1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 0., 1., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([160])
Initial node features shape: torch.Size([60, 32])
Initial node features tensor([[ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        ...,
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [-0.0978, -0.0333,  0.1609,  ...,  0.9091,  0.0698,  0.1118],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([60, 32])
Tensor product weights shape: torch.Size([1210, 96])
Tensor Product Weights tensor([[ 4.5120e-02, -2.5038e-02,  9.6896e-02,  ...,  1.1407e-01,
         -5.0848e-02, -6.3411e-02],
        [ 3.0576e-01,  8.6488e-02, -3.8803e-01,  ..., -1.7548e-01,
         -1.3088e-01,  1.6344e-01],
        [ 2.9806e-01,  9.9321e-02, -4.0269e-01,  ..., -1.8452e-01,
         -1.2151e-01,  1.6337e-01],
        ...,
        [ 4.1321e-02, -1.8745e-02,  9.2686e-02,  ...,  1.1730e-01,
         -4.3700e-02, -4.5482e-02],
        [-3.1470e-03,  2.6423e-02, -8.0281e-03,  ..., -6.6917e-03,
          7.5148e-04, -3.7909e-02],
        [-1.6972e-05, -2.8623e-07, -1.2914e-05,  ...,  1.7098e-05,
         -1.4103e-06,  3.7208e-05]], grad_fn=<MmBackward0>)
Message shape: torch.Size([60, 288])
Message tensor([[ 0.1466, -0.0128,  0.8684,  ..., -0.0893, -0.0240, -0.0755],
        [ 0.2009, -0.0836,  0.2988,  ...,  0.0460, -0.1782, -0.0223],
        [ 0.0806, -0.0382,  0.6593,  ...,  0.1087,  0.1007, -0.2000],
        ...,
        [-0.0528,  0.0904,  1.0744,  ..., -0.3211,  0.0202, -0.1183],
        [-0.0085, -0.0400,  0.5404,  ..., -0.0245,  0.0395,  0.1730],
        [ 0.2226, -0.0330,  0.7357,  ...,  0.1586,  0.0602, -0.0928]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([60, 32, 9])
Node features shape torch.Size([60, 128])
Node features tensor([[-1.7948e-01, -1.2510e-01, -2.8314e-01,  ..., -4.4509e-02,
         -3.6034e-04,  2.0007e-02],
        [-1.5367e-01, -2.1280e-01, -2.3464e-01,  ...,  1.3068e-01,
          4.3441e-02, -1.5919e-01],
        [-1.7065e-01, -1.2546e-01, -2.3431e-01,  ..., -2.7153e-02,
         -3.1794e-02, -1.4534e-02],
        ...,
        [-1.5756e-01, -3.7250e-02, -3.7697e-01,  ..., -1.3300e-01,
         -1.5779e-02,  5.3109e-02],
        [ 2.3629e-01,  3.4101e-02,  6.2127e-02,  ..., -5.8841e-02,
         -2.6498e-02,  5.1379e-02],
        [-1.3289e-01, -1.6826e-01, -2.8951e-01,  ...,  4.1662e-03,
          3.4651e-02, -1.7676e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([60, 128])
Input shape to CustomNonLinearReadout: torch.Size([60, 128])
Final output shape after NonLinearReadout: torch.Size([60, 32])
Conformer embeddings shape: torch.Size([60, 32])
positions shape: torch.Size([60, 3])
edge_index shape: torch.Size([2, 1212])
shifts shape: torch.Size([1212, 3])
sender shape: torch.Size([1212])
receiver shape: torch.Size([1212])
Edge attributes shape: torch.Size([1212, 9])
Edge attributes tensor([[ 1.0000,  1.2138,  1.0025,  ...,  0.0055, -0.9347, -0.6143],
        [ 1.0000, -0.2269,  1.7165,  ...,  2.1760, -0.1054, -0.0318],
        [ 1.0000,  1.4208, -0.7115,  ..., -0.5521,  0.6331, -0.9963],
        ...,
        [ 1.0000,  1.3487,  0.9030,  ..., -0.2063, -0.7048, -0.9383],
        [ 1.0000,  1.2333,  0.9753,  ..., -0.0545,  0.9147, -0.6412],
        [ 1.0000,  1.2332,  0.9744,  ..., -0.0566,  0.9155, -0.6398]])
Edge features shape: torch.Size([1212, 8])
Edge features tensor([[ 1.6801e-01, -6.4432e-02, -1.4331e-01,  ..., -1.5679e-01,
         -3.7394e-02,  1.7113e-01],
        [ 3.4387e-01,  4.3200e-01,  1.9885e-01,  ..., -3.5517e-01,
         -1.8466e-02,  3.3197e-01],
        [ 3.4490e-01,  4.3769e-01,  2.1054e-01,  ..., -3.7127e-01,
         -4.4233e-02,  3.1513e-01],
        ...,
        [ 5.2545e-06, -1.0483e-05,  1.5660e-05,  ..., -3.0625e-05,
          3.5343e-05, -3.9886e-05],
        [ 1.6428e-01, -6.7715e-02, -1.3637e-01,  ..., -1.5908e-01,
         -1.9718e-02,  1.6721e-01],
        [ 2.4851e-02, -3.8524e-02,  3.4870e-02,  ...,  3.2263e-02,
         -3.9221e-02,  2.8538e-02]])
Node attributes shape: torch.Size([60, 5])
Node attributes tensor([[1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 0., 1., 0.],
        [0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([160])
Initial node features shape: torch.Size([60, 32])
Initial node features tensor([[ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        ...,
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756],
        [-0.0978, -0.0333,  0.1609,  ...,  0.9091,  0.0698,  0.1118],
        [ 0.3270, -0.0620, -0.0418,  ...,  0.0215, -0.0139, -0.2756]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([60, 32])
Tensor product weights shape: torch.Size([1212, 96])
Tensor Product Weights tensor([[ 4.4880e-02, -2.4632e-02,  9.6656e-02,  ...,  1.1430e-01,
         -5.0372e-02, -6.2234e-02],
        [ 3.0569e-01,  8.6628e-02, -3.8819e-01,  ..., -1.7559e-01,
         -1.3078e-01,  1.6344e-01],
        [ 2.9803e-01,  9.9356e-02, -4.0273e-01,  ..., -1.8455e-01,
         -1.2148e-01,  1.6337e-01],
        ...,
        [-1.6246e-05, -2.7501e-07, -1.2365e-05,  ...,  1.6365e-05,
         -1.3472e-06,  3.5626e-05],
        [ 4.1628e-02, -1.9243e-02,  9.3055e-02,  ...,  1.1708e-01,
         -4.4249e-02, -4.6875e-02],
        [-3.1756e-03,  2.6651e-02, -8.1809e-03,  ..., -6.7330e-03,
          8.2605e-04, -3.7982e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([60, 288])
Message tensor([[ 0.1468, -0.0134,  0.8679,  ..., -0.0896, -0.0213, -0.0788],
        [ 0.2004, -0.0808,  0.2929,  ...,  0.0427, -0.1747, -0.0212],
        [ 0.0809, -0.0400,  0.6618,  ...,  0.1075,  0.1035, -0.1988],
        ...,
        [-0.0704,  0.1050,  1.0471,  ..., -0.3195,  0.1068,  0.2267],
        [-0.0190, -0.0284,  0.5314,  ..., -0.0096,  0.0074, -0.2635],
        [ 0.2183, -0.0299,  0.7250,  ...,  0.1235,  0.2198, -0.0821]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([60, 32, 9])
Node features shape torch.Size([60, 128])
Node features tensor([[-0.1792, -0.1253, -0.2828,  ..., -0.0445, -0.0005,  0.0198],
        [-0.1527, -0.2141, -0.2319,  ...,  0.1340,  0.0436, -0.1573],
        [-0.1702, -0.1256, -0.2338,  ..., -0.0276, -0.0316, -0.0144],
        ...,
        [-0.1438, -0.0182, -0.3253,  ..., -0.0204, -0.0086, -0.1404],
        [ 0.2412,  0.0262,  0.0604,  ..., -0.0033,  0.0367, -0.0808],
        [-0.1316, -0.1701, -0.2791,  ..., -0.0189,  0.0414,  0.0148]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([60, 128])
Input shape to CustomNonLinearReadout: torch.Size([60, 128])
Final output shape after NonLinearReadout: torch.Size([60, 32])
Conformer embeddings shape: torch.Size([60, 32])
process_conformer_ensemble input shape: torch.Size([8, 60, 32])
Num conformers: 8, Num atoms: 60, Total dim: 32
Scalar dim: 8, Vector dim: 8
mean_pooling:
  Scalar shape: torch.Size([8, 60, 8])
  Vector shape: torch.Size([8, 60, 8, 3])
  Scalar: tensor([[[-0.0069,  0.2011, -0.0619,  ...,  0.0364, -0.1195,  0.0251],
         [-0.0575,  0.2030, -0.0542,  ...,  0.0619, -0.0691,  0.0310],
         [-0.0023,  0.1837, -0.0362,  ...,  0.0857, -0.1115,  0.0095],
         ...,
         [-0.0397,  0.0967, -0.0215,  ..., -0.0406, -0.0478,  0.0613],
         [-0.0287,  0.1093, -0.0196,  ...,  0.0851,  0.0198,  0.0749],
         [-0.0009,  0.1845, -0.0481,  ...,  0.0522, -0.1140,  0.0023]],

        [[-0.0069,  0.2011, -0.0619,  ...,  0.0364, -0.1195,  0.0251],
         [-0.0575,  0.2030, -0.0542,  ...,  0.0619, -0.0691,  0.0310],
         [-0.0023,  0.1837, -0.0362,  ...,  0.0857, -0.1115,  0.0095],
         ...,
         [-0.0397,  0.0967, -0.0215,  ..., -0.0406, -0.0478,  0.0613],
         [-0.0287,  0.1093, -0.0196,  ...,  0.0851,  0.0198,  0.0749],
         [-0.0009,  0.1845, -0.0481,  ...,  0.0522, -0.1140,  0.0023]],

        [[-0.0069,  0.2011, -0.0619,  ...,  0.0364, -0.1195,  0.0251],
         [-0.0575,  0.2030, -0.0542,  ...,  0.0619, -0.0691,  0.0310],
         [-0.0023,  0.1837, -0.0362,  ...,  0.0857, -0.1115,  0.0095],
         ...,
         [-0.0397,  0.0967, -0.0215,  ..., -0.0406, -0.0478,  0.0613],
         [-0.0287,  0.1093, -0.0196,  ...,  0.0851,  0.0198,  0.0749],
         [-0.0009,  0.1845, -0.0481,  ...,  0.0522, -0.1140,  0.0023]],

        ...,

        [[-0.0069,  0.2011, -0.0619,  ...,  0.0364, -0.1195,  0.0251],
         [-0.0575,  0.2030, -0.0542,  ...,  0.0619, -0.0691,  0.0310],
         [-0.0023,  0.1837, -0.0362,  ...,  0.0857, -0.1115,  0.0095],
         ...,
         [-0.0397,  0.0967, -0.0215,  ..., -0.0406, -0.0478,  0.0613],
         [-0.0287,  0.1093, -0.0196,  ...,  0.0851,  0.0198,  0.0749],
         [-0.0009,  0.1845, -0.0481,  ...,  0.0522, -0.1140,  0.0023]],

        [[-0.0069,  0.2011, -0.0619,  ...,  0.0364, -0.1195,  0.0251],
         [-0.0575,  0.2030, -0.0542,  ...,  0.0619, -0.0691,  0.0310],
         [-0.0023,  0.1837, -0.0362,  ...,  0.0857, -0.1115,  0.0095],
         ...,
         [-0.0397,  0.0967, -0.0215,  ..., -0.0406, -0.0478,  0.0613],
         [-0.0287,  0.1093, -0.0196,  ...,  0.0851,  0.0198,  0.0749],
         [-0.0009,  0.1845, -0.0481,  ...,  0.0522, -0.1140,  0.0023]],

        [[-0.0069,  0.2011, -0.0619,  ...,  0.0364, -0.1195,  0.0251],
         [-0.0575,  0.2030, -0.0542,  ...,  0.0619, -0.0691,  0.0310],
         [-0.0023,  0.1837, -0.0362,  ...,  0.0857, -0.1115,  0.0095],
         ...,
         [-0.0397,  0.0967, -0.0215,  ..., -0.0406, -0.0478,  0.0613],
         [-0.0287,  0.1093, -0.0196,  ...,  0.0851,  0.0198,  0.0749],
         [-0.0009,  0.1845, -0.0481,  ...,  0.0522, -0.1140,  0.0023]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[ 0.0051, -0.0857,  0.0036],
          [ 0.0063, -0.0947,  0.0043],
          [-0.0692,  0.1685,  0.0091],
          ...,
          [-0.0004,  0.0032,  0.0024],
          [-0.0029, -0.0435,  0.0019],
          [-0.0235, -0.1537,  0.0190]],

         [[ 0.1408,  0.1140, -0.1068],
          [ 0.1352,  0.0773, -0.0771],
          [-0.0412, -0.0230, -0.0120],
          ...,
          [-0.0862, -0.0813,  0.0423],
          [-0.0243, -0.0429,  0.0012],
          [ 0.2380,  0.1570, -0.1988]],

         [[-0.0157,  0.0724,  0.0092],
          [-0.0459,  0.0697, -0.0246],
          [ 0.0548, -0.1859,  0.0693],
          ...,
          [ 0.0044, -0.0591,  0.0204],
          [-0.0440,  0.0402, -0.0254],
          [-0.0607,  0.0832,  0.0171]],

         ...,

         [[-0.0793, -0.0435, -0.0759],
          [-0.0417, -0.0229, -0.0618],
          [ 0.0392,  0.0529,  0.0465],
          ...,
          [ 0.0817,  0.0456,  0.0612],
          [ 0.0123,  0.0243,  0.0264],
          [-0.1475, -0.0752, -0.1744]],

         [[-0.1033, -0.1450, -0.0951],
          [ 0.0176,  0.0459, -0.0117],
          [-0.0229, -0.0717, -0.0021],
          ...,
          [ 0.0418,  0.0533,  0.0357],
          [-0.0073,  0.0285,  0.0022],
          [-0.0723, -0.0508, -0.1185]],

         [[ 0.0058,  0.0049,  0.0102],
          [-0.0279,  0.0320, -0.0126],
          [ 0.0618, -0.0224,  0.0505],
          ...,
          [-0.0152, -0.0061, -0.0096],
          [-0.0325,  0.0441, -0.0093],
          [-0.0051,  0.0155,  0.0116]]],


        [[[ 0.0051, -0.0857,  0.0036],
          [ 0.0063, -0.0947,  0.0043],
          [-0.0692,  0.1685,  0.0091],
          ...,
          [-0.0004,  0.0032,  0.0024],
          [-0.0029, -0.0435,  0.0019],
          [-0.0235, -0.1537,  0.0190]],

         [[ 0.1408,  0.1140, -0.1068],
          [ 0.1352,  0.0773, -0.0771],
          [-0.0412, -0.0230, -0.0120],
          ...,
          [-0.0862, -0.0813,  0.0423],
          [-0.0243, -0.0429,  0.0012],
          [ 0.2380,  0.1570, -0.1988]],

         [[-0.0157,  0.0724,  0.0092],
          [-0.0459,  0.0697, -0.0246],
          [ 0.0548, -0.1859,  0.0693],
          ...,
          [ 0.0044, -0.0591,  0.0204],
          [-0.0440,  0.0402, -0.0254],
          [-0.0607,  0.0832,  0.0171]],

         ...,

         [[-0.0793, -0.0435, -0.0759],
          [-0.0417, -0.0229, -0.0618],
          [ 0.0392,  0.0529,  0.0465],
          ...,
          [ 0.0817,  0.0456,  0.0612],
          [ 0.0123,  0.0243,  0.0264],
          [-0.1475, -0.0752, -0.1744]],

         [[-0.1033, -0.1450, -0.0951],
          [ 0.0176,  0.0459, -0.0117],
          [-0.0229, -0.0717, -0.0021],
          ...,
          [ 0.0418,  0.0533,  0.0357],
          [-0.0073,  0.0285,  0.0022],
          [-0.0723, -0.0508, -0.1185]],

         [[ 0.0058,  0.0049,  0.0102],
          [-0.0279,  0.0320, -0.0126],
          [ 0.0618, -0.0224,  0.0505],
          ...,
          [-0.0152, -0.0061, -0.0096],
          [-0.0325,  0.0441, -0.0093],
          [-0.0051,  0.0155,  0.0116]]],


        [[[ 0.0051, -0.0857,  0.0036],
          [ 0.0063, -0.0947,  0.0043],
          [-0.0692,  0.1685,  0.0091],
          ...,
          [-0.0004,  0.0032,  0.0024],
          [-0.0029, -0.0435,  0.0019],
          [-0.0235, -0.1537,  0.0190]],

         [[ 0.1408,  0.1140, -0.1068],
          [ 0.1352,  0.0773, -0.0771],
          [-0.0412, -0.0230, -0.0120],
          ...,
          [-0.0862, -0.0813,  0.0423],
          [-0.0243, -0.0429,  0.0012],
          [ 0.2380,  0.1570, -0.1988]],

         [[-0.0157,  0.0724,  0.0092],
          [-0.0459,  0.0697, -0.0246],
          [ 0.0548, -0.1859,  0.0693],
          ...,
          [ 0.0044, -0.0591,  0.0204],
          [-0.0440,  0.0402, -0.0254],
          [-0.0607,  0.0832,  0.0171]],

         ...,

         [[-0.0793, -0.0435, -0.0759],
          [-0.0417, -0.0229, -0.0618],
          [ 0.0392,  0.0529,  0.0465],
          ...,
          [ 0.0817,  0.0456,  0.0612],
          [ 0.0123,  0.0243,  0.0264],
          [-0.1475, -0.0752, -0.1744]],

         [[-0.1033, -0.1450, -0.0951],
          [ 0.0176,  0.0459, -0.0117],
          [-0.0229, -0.0717, -0.0021],
          ...,
          [ 0.0418,  0.0533,  0.0357],
          [-0.0073,  0.0285,  0.0022],
          [-0.0723, -0.0508, -0.1185]],

         [[ 0.0058,  0.0049,  0.0102],
          [-0.0279,  0.0320, -0.0126],
          [ 0.0618, -0.0224,  0.0505],
          ...,
          [-0.0152, -0.0061, -0.0096],
          [-0.0325,  0.0441, -0.0093],
          [-0.0051,  0.0155,  0.0116]]],


        ...,


        [[[ 0.0051, -0.0857,  0.0036],
          [ 0.0063, -0.0947,  0.0043],
          [-0.0692,  0.1685,  0.0091],
          ...,
          [-0.0004,  0.0032,  0.0024],
          [-0.0029, -0.0435,  0.0019],
          [-0.0235, -0.1537,  0.0190]],

         [[ 0.1408,  0.1140, -0.1068],
          [ 0.1352,  0.0773, -0.0771],
          [-0.0412, -0.0230, -0.0120],
          ...,
          [-0.0862, -0.0813,  0.0423],
          [-0.0243, -0.0429,  0.0012],
          [ 0.2380,  0.1570, -0.1988]],

         [[-0.0157,  0.0724,  0.0092],
          [-0.0459,  0.0697, -0.0246],
          [ 0.0548, -0.1859,  0.0693],
          ...,
          [ 0.0044, -0.0591,  0.0204],
          [-0.0440,  0.0402, -0.0254],
          [-0.0607,  0.0832,  0.0171]],

         ...,

         [[-0.0793, -0.0435, -0.0759],
          [-0.0417, -0.0229, -0.0618],
          [ 0.0392,  0.0529,  0.0465],
          ...,
          [ 0.0817,  0.0456,  0.0612],
          [ 0.0123,  0.0243,  0.0264],
          [-0.1475, -0.0752, -0.1744]],

         [[-0.1033, -0.1450, -0.0951],
          [ 0.0176,  0.0459, -0.0117],
          [-0.0229, -0.0717, -0.0021],
          ...,
          [ 0.0418,  0.0533,  0.0357],
          [-0.0073,  0.0285,  0.0022],
          [-0.0723, -0.0508, -0.1185]],

         [[ 0.0058,  0.0049,  0.0102],
          [-0.0279,  0.0320, -0.0126],
          [ 0.0618, -0.0224,  0.0505],
          ...,
          [-0.0152, -0.0061, -0.0096],
          [-0.0325,  0.0441, -0.0093],
          [-0.0051,  0.0155,  0.0116]]],


        [[[ 0.0051, -0.0857,  0.0036],
          [ 0.0063, -0.0947,  0.0043],
          [-0.0692,  0.1685,  0.0091],
          ...,
          [-0.0004,  0.0032,  0.0024],
          [-0.0029, -0.0435,  0.0019],
          [-0.0235, -0.1537,  0.0190]],

         [[ 0.1408,  0.1140, -0.1068],
          [ 0.1352,  0.0773, -0.0771],
          [-0.0412, -0.0230, -0.0120],
          ...,
          [-0.0862, -0.0813,  0.0423],
          [-0.0243, -0.0429,  0.0012],
          [ 0.2380,  0.1570, -0.1988]],

         [[-0.0157,  0.0724,  0.0092],
          [-0.0459,  0.0697, -0.0246],
          [ 0.0548, -0.1859,  0.0693],
          ...,
          [ 0.0044, -0.0591,  0.0204],
          [-0.0440,  0.0402, -0.0254],
          [-0.0607,  0.0832,  0.0171]],

         ...,

         [[-0.0793, -0.0435, -0.0759],
          [-0.0417, -0.0229, -0.0618],
          [ 0.0392,  0.0529,  0.0465],
          ...,
          [ 0.0817,  0.0456,  0.0612],
          [ 0.0123,  0.0243,  0.0264],
          [-0.1475, -0.0752, -0.1744]],

         [[-0.1033, -0.1450, -0.0951],
          [ 0.0176,  0.0459, -0.0117],
          [-0.0229, -0.0717, -0.0021],
          ...,
          [ 0.0418,  0.0533,  0.0357],
          [-0.0073,  0.0285,  0.0022],
          [-0.0723, -0.0508, -0.1185]],

         [[ 0.0058,  0.0049,  0.0102],
          [-0.0279,  0.0320, -0.0126],
          [ 0.0618, -0.0224,  0.0505],
          ...,
          [-0.0152, -0.0061, -0.0096],
          [-0.0325,  0.0441, -0.0093],
          [-0.0051,  0.0155,  0.0116]]],


        [[[ 0.0051, -0.0857,  0.0036],
          [ 0.0063, -0.0947,  0.0043],
          [-0.0692,  0.1685,  0.0091],
          ...,
          [-0.0004,  0.0032,  0.0024],
          [-0.0029, -0.0435,  0.0019],
          [-0.0235, -0.1537,  0.0190]],

         [[ 0.1408,  0.1140, -0.1068],
          [ 0.1352,  0.0773, -0.0771],
          [-0.0412, -0.0230, -0.0120],
          ...,
          [-0.0862, -0.0813,  0.0423],
          [-0.0243, -0.0429,  0.0012],
          [ 0.2380,  0.1570, -0.1988]],

         [[-0.0157,  0.0724,  0.0092],
          [-0.0459,  0.0697, -0.0246],
          [ 0.0548, -0.1859,  0.0693],
          ...,
          [ 0.0044, -0.0591,  0.0204],
          [-0.0440,  0.0402, -0.0254],
          [-0.0607,  0.0832,  0.0171]],

         ...,

         [[-0.0793, -0.0435, -0.0759],
          [-0.0417, -0.0229, -0.0618],
          [ 0.0392,  0.0529,  0.0465],
          ...,
          [ 0.0817,  0.0456,  0.0612],
          [ 0.0123,  0.0243,  0.0264],
          [-0.1475, -0.0752, -0.1744]],

         [[-0.1033, -0.1450, -0.0951],
          [ 0.0176,  0.0459, -0.0117],
          [-0.0229, -0.0717, -0.0021],
          ...,
          [ 0.0418,  0.0533,  0.0357],
          [-0.0073,  0.0285,  0.0022],
          [-0.0723, -0.0508, -0.1185]],

         [[ 0.0058,  0.0049,  0.0102],
          [-0.0279,  0.0320, -0.0126],
          [ 0.0618, -0.0224,  0.0505],
          ...,
          [-0.0152, -0.0061, -0.0096],
          [-0.0325,  0.0441, -0.0093],
          [-0.0051,  0.0155,  0.0116]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[-0.0069,  0.2011, -0.0619,  0.1402,  0.1557,  0.0364, -0.1195,  0.0251],
        [-0.0575,  0.2030, -0.0542,  0.1629,  0.2042,  0.0619, -0.0691,  0.0310],
        [-0.0023,  0.1837, -0.0362,  0.1949,  0.1450,  0.0857, -0.1115,  0.0095],
        [ 0.0201,  0.1474,  0.0148,  0.1713,  0.1058,  0.0901, -0.0628,  0.0286],
        [-0.0259,  0.1905, -0.0750,  0.1981,  0.1809,  0.0606, -0.1356, -0.0032]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[ 5.1055e-03, -8.5677e-02,  3.6338e-03],
         [ 6.2616e-03, -9.4697e-02,  4.2919e-03],
         [-6.9213e-02,  1.6849e-01,  9.1266e-03],
         [ 3.8217e-02, -1.0628e-01, -7.6897e-03],
         [ 1.3093e-03, -9.9712e-03, -5.3083e-03],
         [-4.3525e-04,  3.1514e-03,  2.4427e-03],
         [-2.8879e-03, -4.3534e-02,  1.9057e-03],
         [-2.3497e-02, -1.5374e-01,  1.8987e-02]],

        [[ 1.4076e-01,  1.1403e-01, -1.0682e-01],
         [ 1.3519e-01,  7.7340e-02, -7.7066e-02],
         [-4.1185e-02, -2.2963e-02, -1.2029e-02],
         [ 1.1574e-01,  1.0310e-01, -3.2726e-02],
         [-1.1191e-01, -6.6304e-02,  1.2148e-01],
         [-8.6159e-02, -8.1321e-02,  4.2285e-02],
         [-2.4324e-02, -4.2900e-02,  1.1590e-03],
         [ 2.3803e-01,  1.5703e-01, -1.9879e-01]],

        [[-1.5733e-02,  7.2354e-02,  9.2082e-03],
         [-4.5889e-02,  6.9703e-02, -2.4634e-02],
         [ 5.4809e-02, -1.8585e-01,  6.9350e-02],
         [-2.4333e-02,  1.5063e-01, -4.2634e-02],
         [-9.9608e-03,  1.2807e-02, -8.2160e-03],
         [ 4.4123e-03, -5.9083e-02,  2.0397e-02],
         [-4.4028e-02,  4.0211e-02, -2.5350e-02],
         [-6.0717e-02,  8.3229e-02,  1.7085e-02]],

        [[ 2.2993e-02, -1.5964e-01, -1.2358e-02],
         [ 2.0527e-02, -1.6936e-01,  1.7293e-02],
         [-7.4480e-05,  8.3283e-02, -3.0204e-02],
         [ 3.1936e-02, -6.3782e-02, -7.9367e-03],
         [-3.4092e-03,  8.8264e-02, -4.0847e-03],
         [-5.0079e-02,  1.0254e-01,  1.6077e-02],
         [-1.7409e-02,  4.4245e-02,  1.8520e-02],
         [ 5.2406e-02, -4.3031e-01, -3.6593e-03]],

        [[-2.3127e-02,  2.3077e-02, -1.5180e-02],
         [ 2.1766e-02, -5.5272e-02, -9.6271e-03],
         [-4.4287e-02,  1.1470e-01, -8.4987e-03],
         [-2.9777e-02, -2.1527e-02,  4.8958e-03],
         [-9.7862e-03, -4.8283e-02,  1.6785e-02],
         [ 1.6043e-02, -4.2246e-02,  1.0166e-02],
         [ 1.2437e-02, -6.3794e-02, -7.8191e-03],
         [ 6.9239e-03,  6.0933e-03, -3.4478e-02]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
deep_sets:
  Scalar shape: torch.Size([8, 60, 8])
  Vector shape: torch.Size([8, 60, 8, 3])
  Scalar: tensor([[[-0.1247,  0.0746,  0.0512,  ..., -0.0396, -0.0481, -0.1011],
         [-0.1246,  0.0748,  0.0507,  ..., -0.0398, -0.0480, -0.1010],
         [-0.1246,  0.0749,  0.0507,  ..., -0.0397, -0.0480, -0.1011],
         ...,
         [-0.1249,  0.0743,  0.0518,  ..., -0.0391, -0.0483, -0.1010],
         [-0.1247,  0.0750,  0.0511,  ..., -0.0394, -0.0482, -0.1005],
         [-0.1247,  0.0747,  0.0510,  ..., -0.0396, -0.0480, -0.1012]],

        [[-0.1247,  0.0746,  0.0512,  ..., -0.0396, -0.0481, -0.1011],
         [-0.1246,  0.0748,  0.0507,  ..., -0.0398, -0.0480, -0.1010],
         [-0.1246,  0.0749,  0.0507,  ..., -0.0397, -0.0480, -0.1011],
         ...,
         [-0.1249,  0.0743,  0.0518,  ..., -0.0391, -0.0483, -0.1010],
         [-0.1247,  0.0750,  0.0511,  ..., -0.0394, -0.0482, -0.1005],
         [-0.1247,  0.0747,  0.0510,  ..., -0.0396, -0.0480, -0.1012]],

        [[-0.1247,  0.0746,  0.0512,  ..., -0.0396, -0.0481, -0.1011],
         [-0.1246,  0.0748,  0.0507,  ..., -0.0398, -0.0480, -0.1010],
         [-0.1246,  0.0749,  0.0507,  ..., -0.0397, -0.0480, -0.1011],
         ...,
         [-0.1249,  0.0743,  0.0518,  ..., -0.0391, -0.0483, -0.1010],
         [-0.1247,  0.0750,  0.0511,  ..., -0.0394, -0.0482, -0.1005],
         [-0.1247,  0.0747,  0.0510,  ..., -0.0396, -0.0480, -0.1012]],

        ...,

        [[-0.1247,  0.0746,  0.0512,  ..., -0.0396, -0.0481, -0.1011],
         [-0.1246,  0.0748,  0.0507,  ..., -0.0398, -0.0480, -0.1010],
         [-0.1246,  0.0749,  0.0507,  ..., -0.0397, -0.0480, -0.1011],
         ...,
         [-0.1249,  0.0743,  0.0518,  ..., -0.0391, -0.0483, -0.1010],
         [-0.1247,  0.0750,  0.0511,  ..., -0.0394, -0.0482, -0.1005],
         [-0.1247,  0.0747,  0.0510,  ..., -0.0396, -0.0480, -0.1012]],

        [[-0.1247,  0.0746,  0.0512,  ..., -0.0396, -0.0481, -0.1011],
         [-0.1246,  0.0748,  0.0507,  ..., -0.0398, -0.0480, -0.1010],
         [-0.1246,  0.0749,  0.0507,  ..., -0.0397, -0.0480, -0.1011],
         ...,
         [-0.1249,  0.0743,  0.0518,  ..., -0.0391, -0.0483, -0.1010],
         [-0.1247,  0.0750,  0.0511,  ..., -0.0394, -0.0482, -0.1005],
         [-0.1247,  0.0747,  0.0510,  ..., -0.0396, -0.0480, -0.1012]],

        [[-0.1247,  0.0746,  0.0512,  ..., -0.0396, -0.0481, -0.1011],
         [-0.1246,  0.0748,  0.0507,  ..., -0.0398, -0.0480, -0.1010],
         [-0.1246,  0.0749,  0.0507,  ..., -0.0397, -0.0480, -0.1011],
         ...,
         [-0.1249,  0.0743,  0.0518,  ..., -0.0391, -0.0483, -0.1010],
         [-0.1247,  0.0750,  0.0511,  ..., -0.0394, -0.0482, -0.1005],
         [-0.1247,  0.0747,  0.0510,  ..., -0.0396, -0.0480, -0.1012]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[-0.0898,  0.1115, -0.0278],
          [ 0.0200, -0.0857,  0.0088],
          [ 0.0115,  0.0877,  0.0312],
          ...,
          [ 0.0848, -0.0953, -0.0333],
          [-0.0460,  0.1087,  0.0353],
          [ 0.0450, -0.0031,  0.0601]],

         [[-0.0897,  0.1101, -0.0261],
          [ 0.0200, -0.0869,  0.0089],
          [ 0.0107,  0.0876,  0.0306],
          ...,
          [ 0.0855, -0.0954, -0.0345],
          [-0.0466,  0.1075,  0.0352],
          [ 0.0460, -0.0034,  0.0608]],

         [[-0.0900,  0.1110, -0.0268],
          [ 0.0195, -0.0860,  0.0090],
          [ 0.0113,  0.0870,  0.0319],
          ...,
          [ 0.0835, -0.0961, -0.0338],
          [-0.0454,  0.1094,  0.0365],
          [ 0.0456, -0.0028,  0.0616]],

         ...,

         [[-0.0903,  0.1116, -0.0274],
          [ 0.0197, -0.0856,  0.0085],
          [ 0.0114,  0.0870,  0.0318],
          ...,
          [ 0.0837, -0.0955, -0.0334],
          [-0.0457,  0.1089,  0.0357],
          [ 0.0454, -0.0029,  0.0613]],

         [[-0.0902,  0.1119, -0.0280],
          [ 0.0201, -0.0857,  0.0088],
          [ 0.0113,  0.0872,  0.0315],
          ...,
          [ 0.0840, -0.0956, -0.0332],
          [-0.0460,  0.1090,  0.0359],
          [ 0.0450, -0.0031,  0.0609]],

         [[-0.0899,  0.1113, -0.0270],
          [ 0.0198, -0.0861,  0.0088],
          [ 0.0116,  0.0873,  0.0316],
          ...,
          [ 0.0842, -0.0957, -0.0338],
          [-0.0458,  0.1086,  0.0357],
          [ 0.0454, -0.0031,  0.0609]]],


        [[[-0.0898,  0.1115, -0.0278],
          [ 0.0200, -0.0857,  0.0088],
          [ 0.0115,  0.0877,  0.0312],
          ...,
          [ 0.0848, -0.0953, -0.0333],
          [-0.0460,  0.1087,  0.0353],
          [ 0.0450, -0.0031,  0.0601]],

         [[-0.0897,  0.1101, -0.0261],
          [ 0.0200, -0.0869,  0.0089],
          [ 0.0107,  0.0876,  0.0306],
          ...,
          [ 0.0855, -0.0954, -0.0345],
          [-0.0466,  0.1075,  0.0352],
          [ 0.0460, -0.0034,  0.0608]],

         [[-0.0900,  0.1110, -0.0268],
          [ 0.0195, -0.0860,  0.0090],
          [ 0.0113,  0.0870,  0.0319],
          ...,
          [ 0.0835, -0.0961, -0.0338],
          [-0.0454,  0.1094,  0.0365],
          [ 0.0456, -0.0028,  0.0616]],

         ...,

         [[-0.0903,  0.1116, -0.0274],
          [ 0.0197, -0.0856,  0.0085],
          [ 0.0114,  0.0870,  0.0318],
          ...,
          [ 0.0837, -0.0955, -0.0334],
          [-0.0457,  0.1089,  0.0357],
          [ 0.0454, -0.0029,  0.0613]],

         [[-0.0902,  0.1119, -0.0280],
          [ 0.0201, -0.0857,  0.0088],
          [ 0.0113,  0.0872,  0.0315],
          ...,
          [ 0.0840, -0.0956, -0.0332],
          [-0.0460,  0.1090,  0.0359],
          [ 0.0450, -0.0031,  0.0609]],

         [[-0.0899,  0.1113, -0.0270],
          [ 0.0198, -0.0861,  0.0088],
          [ 0.0116,  0.0873,  0.0316],
          ...,
          [ 0.0842, -0.0957, -0.0338],
          [-0.0458,  0.1086,  0.0357],
          [ 0.0454, -0.0031,  0.0609]]],


        [[[-0.0898,  0.1115, -0.0278],
          [ 0.0200, -0.0857,  0.0088],
          [ 0.0115,  0.0877,  0.0312],
          ...,
          [ 0.0848, -0.0953, -0.0333],
          [-0.0460,  0.1087,  0.0353],
          [ 0.0450, -0.0031,  0.0601]],

         [[-0.0897,  0.1101, -0.0261],
          [ 0.0200, -0.0869,  0.0089],
          [ 0.0107,  0.0876,  0.0306],
          ...,
          [ 0.0855, -0.0954, -0.0345],
          [-0.0466,  0.1075,  0.0352],
          [ 0.0460, -0.0034,  0.0608]],

         [[-0.0900,  0.1110, -0.0268],
          [ 0.0195, -0.0860,  0.0090],
          [ 0.0113,  0.0870,  0.0319],
          ...,
          [ 0.0835, -0.0961, -0.0338],
          [-0.0454,  0.1094,  0.0365],
          [ 0.0456, -0.0028,  0.0616]],

         ...,

         [[-0.0903,  0.1116, -0.0274],
          [ 0.0197, -0.0856,  0.0085],
          [ 0.0114,  0.0870,  0.0318],
          ...,
          [ 0.0837, -0.0955, -0.0334],
          [-0.0457,  0.1089,  0.0357],
          [ 0.0454, -0.0029,  0.0613]],

         [[-0.0902,  0.1119, -0.0280],
          [ 0.0201, -0.0857,  0.0088],
          [ 0.0113,  0.0872,  0.0315],
          ...,
          [ 0.0840, -0.0956, -0.0332],
          [-0.0460,  0.1090,  0.0359],
          [ 0.0450, -0.0031,  0.0609]],

         [[-0.0899,  0.1113, -0.0270],
          [ 0.0198, -0.0861,  0.0088],
          [ 0.0116,  0.0873,  0.0316],
          ...,
          [ 0.0842, -0.0957, -0.0338],
          [-0.0458,  0.1086,  0.0357],
          [ 0.0454, -0.0031,  0.0609]]],


        ...,


        [[[-0.0898,  0.1115, -0.0278],
          [ 0.0200, -0.0857,  0.0088],
          [ 0.0115,  0.0877,  0.0312],
          ...,
          [ 0.0848, -0.0953, -0.0333],
          [-0.0460,  0.1087,  0.0353],
          [ 0.0450, -0.0031,  0.0601]],

         [[-0.0897,  0.1101, -0.0261],
          [ 0.0200, -0.0869,  0.0089],
          [ 0.0107,  0.0876,  0.0306],
          ...,
          [ 0.0855, -0.0954, -0.0345],
          [-0.0466,  0.1075,  0.0352],
          [ 0.0460, -0.0034,  0.0608]],

         [[-0.0900,  0.1110, -0.0268],
          [ 0.0195, -0.0860,  0.0090],
          [ 0.0113,  0.0870,  0.0319],
          ...,
          [ 0.0835, -0.0961, -0.0338],
          [-0.0454,  0.1094,  0.0365],
          [ 0.0456, -0.0028,  0.0616]],

         ...,

         [[-0.0903,  0.1116, -0.0274],
          [ 0.0197, -0.0856,  0.0085],
          [ 0.0114,  0.0870,  0.0318],
          ...,
          [ 0.0837, -0.0955, -0.0334],
          [-0.0457,  0.1089,  0.0357],
          [ 0.0454, -0.0029,  0.0613]],

         [[-0.0902,  0.1119, -0.0280],
          [ 0.0201, -0.0857,  0.0088],
          [ 0.0113,  0.0872,  0.0315],
          ...,
          [ 0.0840, -0.0956, -0.0332],
          [-0.0460,  0.1090,  0.0359],
          [ 0.0450, -0.0031,  0.0609]],

         [[-0.0899,  0.1113, -0.0270],
          [ 0.0198, -0.0861,  0.0088],
          [ 0.0116,  0.0873,  0.0316],
          ...,
          [ 0.0842, -0.0957, -0.0338],
          [-0.0458,  0.1086,  0.0357],
          [ 0.0454, -0.0031,  0.0609]]],


        [[[-0.0898,  0.1115, -0.0278],
          [ 0.0200, -0.0857,  0.0088],
          [ 0.0115,  0.0877,  0.0312],
          ...,
          [ 0.0848, -0.0953, -0.0333],
          [-0.0460,  0.1087,  0.0353],
          [ 0.0450, -0.0031,  0.0601]],

         [[-0.0897,  0.1101, -0.0261],
          [ 0.0200, -0.0869,  0.0089],
          [ 0.0107,  0.0876,  0.0306],
          ...,
          [ 0.0855, -0.0954, -0.0345],
          [-0.0466,  0.1075,  0.0352],
          [ 0.0460, -0.0034,  0.0608]],

         [[-0.0900,  0.1110, -0.0268],
          [ 0.0195, -0.0860,  0.0090],
          [ 0.0113,  0.0870,  0.0319],
          ...,
          [ 0.0835, -0.0961, -0.0338],
          [-0.0454,  0.1094,  0.0365],
          [ 0.0456, -0.0028,  0.0616]],

         ...,

         [[-0.0903,  0.1116, -0.0274],
          [ 0.0197, -0.0856,  0.0085],
          [ 0.0114,  0.0870,  0.0318],
          ...,
          [ 0.0837, -0.0955, -0.0334],
          [-0.0457,  0.1089,  0.0357],
          [ 0.0454, -0.0029,  0.0613]],

         [[-0.0902,  0.1119, -0.0280],
          [ 0.0201, -0.0857,  0.0088],
          [ 0.0113,  0.0872,  0.0315],
          ...,
          [ 0.0840, -0.0956, -0.0332],
          [-0.0460,  0.1090,  0.0359],
          [ 0.0450, -0.0031,  0.0609]],

         [[-0.0899,  0.1113, -0.0270],
          [ 0.0198, -0.0861,  0.0088],
          [ 0.0116,  0.0873,  0.0316],
          ...,
          [ 0.0842, -0.0957, -0.0338],
          [-0.0458,  0.1086,  0.0357],
          [ 0.0454, -0.0031,  0.0609]]],


        [[[-0.0898,  0.1115, -0.0278],
          [ 0.0200, -0.0857,  0.0088],
          [ 0.0115,  0.0877,  0.0312],
          ...,
          [ 0.0848, -0.0953, -0.0333],
          [-0.0460,  0.1087,  0.0353],
          [ 0.0450, -0.0031,  0.0601]],

         [[-0.0897,  0.1101, -0.0261],
          [ 0.0200, -0.0869,  0.0089],
          [ 0.0107,  0.0876,  0.0306],
          ...,
          [ 0.0855, -0.0954, -0.0345],
          [-0.0466,  0.1075,  0.0352],
          [ 0.0460, -0.0034,  0.0608]],

         [[-0.0900,  0.1110, -0.0268],
          [ 0.0195, -0.0860,  0.0090],
          [ 0.0113,  0.0870,  0.0319],
          ...,
          [ 0.0835, -0.0961, -0.0338],
          [-0.0454,  0.1094,  0.0365],
          [ 0.0456, -0.0028,  0.0616]],

         ...,

         [[-0.0903,  0.1116, -0.0274],
          [ 0.0197, -0.0856,  0.0085],
          [ 0.0114,  0.0870,  0.0318],
          ...,
          [ 0.0837, -0.0955, -0.0334],
          [-0.0457,  0.1089,  0.0357],
          [ 0.0454, -0.0029,  0.0613]],

         [[-0.0902,  0.1119, -0.0280],
          [ 0.0201, -0.0857,  0.0088],
          [ 0.0113,  0.0872,  0.0315],
          ...,
          [ 0.0840, -0.0956, -0.0332],
          [-0.0460,  0.1090,  0.0359],
          [ 0.0450, -0.0031,  0.0609]],

         [[-0.0899,  0.1113, -0.0270],
          [ 0.0198, -0.0861,  0.0088],
          [ 0.0116,  0.0873,  0.0316],
          ...,
          [ 0.0842, -0.0957, -0.0338],
          [-0.0458,  0.1086,  0.0357],
          [ 0.0454, -0.0031,  0.0609]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[-0.1247,  0.0746,  0.0512, -0.0656, -0.1630, -0.0396, -0.0481, -0.1011],
        [-0.1246,  0.0748,  0.0507, -0.0657, -0.1630, -0.0398, -0.0480, -0.1010],
        [-0.1246,  0.0749,  0.0507, -0.0656, -0.1630, -0.0397, -0.0480, -0.1011],
        [-0.1246,  0.0749,  0.0507, -0.0655, -0.1629, -0.0397, -0.0480, -0.1010],
        [-0.1247,  0.0747,  0.0508, -0.0658, -0.1631, -0.0396, -0.0480, -0.1012]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[-0.0898,  0.1115, -0.0278],
         [ 0.0200, -0.0857,  0.0088],
         [ 0.0115,  0.0877,  0.0312],
         [-0.0648,  0.0101, -0.0721],
         [-0.0775, -0.0594, -0.0779],
         [ 0.0848, -0.0953, -0.0333],
         [-0.0460,  0.1087,  0.0353],
         [ 0.0450, -0.0031,  0.0601]],

        [[-0.0897,  0.1101, -0.0261],
         [ 0.0200, -0.0869,  0.0089],
         [ 0.0107,  0.0876,  0.0306],
         [-0.0648,  0.0104, -0.0713],
         [-0.0773, -0.0606, -0.0783],
         [ 0.0855, -0.0954, -0.0345],
         [-0.0466,  0.1075,  0.0352],
         [ 0.0460, -0.0034,  0.0608]],

        [[-0.0900,  0.1110, -0.0268],
         [ 0.0195, -0.0860,  0.0090],
         [ 0.0113,  0.0870,  0.0319],
         [-0.0650,  0.0095, -0.0717],
         [-0.0769, -0.0598, -0.0780],
         [ 0.0835, -0.0961, -0.0338],
         [-0.0454,  0.1094,  0.0365],
         [ 0.0456, -0.0028,  0.0616]],

        [[-0.0902,  0.1117, -0.0271],
         [ 0.0209, -0.0858,  0.0090],
         [ 0.0123,  0.0881,  0.0307],
         [-0.0639,  0.0102, -0.0723],
         [-0.0774, -0.0594, -0.0779],
         [ 0.0859, -0.0946, -0.0336],
         [-0.0467,  0.1069,  0.0336],
         [ 0.0448, -0.0044,  0.0586]],

        [[-0.0899,  0.1111, -0.0270],
         [ 0.0196, -0.0860,  0.0088],
         [ 0.0113,  0.0875,  0.0315],
         [-0.0648,  0.0099, -0.0718],
         [-0.0773, -0.0597, -0.0779],
         [ 0.0843, -0.0957, -0.0338],
         [-0.0456,  0.1089,  0.0360],
         [ 0.0453, -0.0031,  0.0608]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
self_attention:
  Scalar shape: torch.Size([8, 60, 8])
  Vector shape: torch.Size([8, 60, 8, 3])
  Scalar: tensor([[[ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         ...,
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200]],

        [[ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         ...,
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200]],

        [[ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         ...,
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200]],

        ...,

        [[ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         ...,
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200]],

        [[ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         ...,
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200]],

        [[ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         ...,
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200],
         [ 0.0921, -0.1160,  0.1492,  ...,  0.0955, -0.1330, -0.0200]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         ...,

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]]],


        [[[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         ...,

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]]],


        [[[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         ...,

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]]],


        ...,


        [[[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         ...,

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]]],


        [[[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         ...,

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]]],


        [[[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         ...,

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]],

         [[-0.0627,  0.0286, -0.0017],
          [ 0.0672,  0.0368, -0.0597],
          [-0.0719,  0.0374, -0.0750],
          ...,
          [ 0.1223,  0.1650, -0.0264],
          [ 0.0825, -0.0403, -0.0647],
          [ 0.0288, -0.0663,  0.0007]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[ 0.0921, -0.1160,  0.1492,  0.0152,  0.2031,  0.0955, -0.1330, -0.0200],
        [ 0.0921, -0.1160,  0.1492,  0.0152,  0.2031,  0.0955, -0.1330, -0.0200],
        [ 0.0921, -0.1160,  0.1492,  0.0152,  0.2031,  0.0955, -0.1330, -0.0200],
        [ 0.0921, -0.1160,  0.1492,  0.0152,  0.2031,  0.0955, -0.1330, -0.0200],
        [ 0.0921, -0.1160,  0.1492,  0.0152,  0.2031,  0.0955, -0.1330, -0.0200]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[-0.0627,  0.0286, -0.0017],
         [ 0.0672,  0.0368, -0.0597],
         [-0.0719,  0.0374, -0.0750],
         [ 0.1237, -0.0215, -0.0033],
         [-0.0510, -0.0329,  0.0825],
         [ 0.1223,  0.1650, -0.0264],
         [ 0.0825, -0.0403, -0.0647],
         [ 0.0288, -0.0663,  0.0007]],

        [[-0.0627,  0.0286, -0.0017],
         [ 0.0672,  0.0368, -0.0597],
         [-0.0719,  0.0374, -0.0750],
         [ 0.1237, -0.0215, -0.0033],
         [-0.0510, -0.0329,  0.0825],
         [ 0.1223,  0.1650, -0.0264],
         [ 0.0825, -0.0403, -0.0647],
         [ 0.0288, -0.0663,  0.0007]],

        [[-0.0627,  0.0286, -0.0017],
         [ 0.0672,  0.0368, -0.0597],
         [-0.0719,  0.0374, -0.0750],
         [ 0.1237, -0.0215, -0.0033],
         [-0.0510, -0.0329,  0.0825],
         [ 0.1223,  0.1650, -0.0264],
         [ 0.0825, -0.0403, -0.0647],
         [ 0.0288, -0.0663,  0.0007]],

        [[-0.0627,  0.0286, -0.0017],
         [ 0.0672,  0.0368, -0.0597],
         [-0.0719,  0.0374, -0.0750],
         [ 0.1237, -0.0215, -0.0033],
         [-0.0510, -0.0329,  0.0825],
         [ 0.1223,  0.1650, -0.0264],
         [ 0.0825, -0.0403, -0.0647],
         [ 0.0288, -0.0663,  0.0007]],

        [[-0.0627,  0.0286, -0.0017],
         [ 0.0672,  0.0368, -0.0597],
         [-0.0719,  0.0374, -0.0750],
         [ 0.1237, -0.0215, -0.0033],
         [-0.0510, -0.0329,  0.0825],
         [ 0.1223,  0.1650, -0.0264],
         [ 0.0825, -0.0403, -0.0647],
         [ 0.0288, -0.0663,  0.0007]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
==================================================

Finished processing Conformer Ensemble: 22_i
==================================================
Retrieved conformer ensemble 234_vi with 100 conformers
Atomic Numbers: tensor([ 6,  6,  6,  6,  6,  6,  1,  6,  6,  6,  6,  6,  6,  1,  8,  8, 15,  6,
         6,  6,  6,  1,  1,  1,  1,  1,  1,  1,  1,  6,  6,  6,  6,  1,  1,  1,
         1,  1,  1,  1,  1,  8,  8,  1,  6,  1,  6,  8,  6,  1,  1,  1,  6,  1,
         6,  6,  1,  6,  1,  1,  1,  6,  1,  1,  1,  6,  6,  6,  1,  6,  1,  1,
         1,  6,  1,  1,  1,  6,  1,  6,  8,  6,  1,  1,  1,  6,  1,  6,  6,  1,
         6,  1,  1,  1,  6,  1,  1,  1,  6,  6,  6,  1,  6,  1,  1,  1,  6,  1,
         1,  1])

Processing Conformer Ensemble: 234_vi
Number of conformers in this ensemble: 100

Batch 2 in Ensemble: 234_vi
Number of conformers in this batch: 16
Unique Atomic Numbers: [6, 1, 8, 15]
Average number of neighbors: 25.91
Processing batch of 16 conformers
Initialized CustomNonLinearReadout with input irreps: 32x0e+32x1o
EQUICATPlusNonLinearReadout(
  (equicat): EQUICAT(
    (model): MACE(
      (node_embedding): LinearNodeEmbeddingBlock(
        (linear): Linear(4x0e -> 32x0e | 128 weights)
      )
      (radial_embedding): RadialEmbeddingBlock(
        (bessel_fn): BesselBasis(r_max=5.0, num_basis=8, trainable=False)
        (cutoff_fn): PolynomialCutoff(p=6.0, r_max=5.0)
      )
      (spherical_harmonics): SphericalHarmonics()
      (atomic_energies_fn): AtomicEnergiesBlock(energies=[0.0000, 0.0000, 0.0000, 0.0000])
      (interactions): ModuleList(
        (0): RealAgnosticResidualInteractionBlock(
          (linear_up): Linear(32x0e -> 32x0e | 1024 weights)
          (conv_tp): TensorProduct(32x0e x 1x0e+1x1o+1x2e -> 32x0e+32x1o+32x2e | 96 paths | 96 weights)
          (conv_tp_weights): FullyConnectedNet[8, 64, 64, 64, 96]
          (linear): Linear(32x0e+32x1o+32x2e -> 32x0e+32x1o+32x2e | 3072 weights)
          (skip_tp): FullyConnectedTensorProduct(32x0e x 4x0e -> 32x0e+32x1o | 4096 paths | 4096 weights)
          (reshape): reshape_irreps()
        )
        (1): RealAgnosticResidualInteractionBlock(
          (linear_up): Linear(32x0e+32x1o -> 32x0e+32x1o | 2048 weights)
          (conv_tp): TensorProduct(32x0e+32x1o x 1x0e+1x1o+1x2e -> 64x0e+96x1o+64x2e | 224 paths | 224 weights)
          (conv_tp_weights): FullyConnectedNet[8, 64, 64, 64, 224]
          (linear): Linear(64x0e+96x1o+64x2e -> 32x0e+32x1o+32x2e | 7168 weights)
          (skip_tp): FullyConnectedTensorProduct(32x0e+32x1o x 4x0e -> 32x0e | 4096 paths | 4096 weights)
          (reshape): reshape_irreps()
        )
      )
      (products): ModuleList(
        (0): EquivariantProductBasisBlock(
          (symmetric_contractions): SymmetricContraction(
            (contractions): ModuleList(
              (0): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x3x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
              (1): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x4x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
            )
          )
          (linear): Linear(32x0e+32x1o -> 32x0e+32x1o | 2048 weights)
        )
        (1): EquivariantProductBasisBlock(
          (symmetric_contractions): SymmetricContraction(
            (contractions): ModuleList(
              (0): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x3x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
            )
          )
          (linear): Linear(32x0e -> 32x0e | 1024 weights)
        )
      )
      (readouts): ModuleList(
        (0): LinearReadoutBlock(
          (linear): Linear(32x0e+32x1o -> 1x0e | 32 weights)
        )
        (1): NonLinearReadoutBlock(
          (linear_1): Linear(32x0e -> 16x0e | 512 weights)
          (non_linearity): Activation [x] (16x0e -> 16x0e)
          (linear_2): Linear(16x0e -> 1x0e | 16 weights)
        )
      )
    )
  )
  (non_linear_readout): CustomNonLinearReadout(
    (linear_1): Linear(32x0e+32x1o -> 16x0e+16x1o | 1024 weights)
    (non_linearity_1): Activation [x ] (16x0e+16x1o -> 16x0e+16x1o)
    (linear_2): Linear(16x0e+16x1o -> 16x0e+16x1o | 512 weights)
    (non_linearity_2): Activation [x ] (16x0e+16x1o -> 16x0e+16x1o)
    (linear_3): Linear(16x0e+16x1o -> 8x0e+8x1o | 256 weights)
  )
)
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2862])
shifts shape: torch.Size([2862, 3])
sender shape: torch.Size([2862])
receiver shape: torch.Size([2862])
Edge attributes shape: torch.Size([2862, 9])
Edge attributes tensor([[ 1.0000e+00,  1.2419e+00,  9.7804e-01,  ..., -4.8568e-02,
         -8.9387e-01, -6.7202e-01],
        [ 1.0000e+00, -1.6187e-01,  1.7245e+00,  ...,  2.2068e+00,
          1.8845e-03, -1.6913e-02],
        [ 1.0000e+00,  1.3925e+00, -7.3618e-01,  ..., -5.1210e-01,
          6.8461e-01, -9.1678e-01],
        ...,
        [ 1.0000e+00,  1.2820e+00, -3.2823e-02,  ..., -1.1168e+00,
          4.9331e-02, -1.8613e-01],
        [ 1.0000e+00, -1.9650e-01,  1.7155e+00,  ...,  2.1724e+00,
          2.9964e-01, -1.3110e-02],
        [ 1.0000e+00,  1.3623e+00,  1.0541e+00,  ...,  1.2430e-01,
          2.4719e-01, -1.1766e+00]])
Edge features shape: torch.Size([2862, 8])
Edge features tensor([[ 0.1680, -0.0645, -0.1432,  ..., -0.1568, -0.0372,  0.1711],
        [ 0.3439,  0.4320,  0.1988,  ..., -0.3551, -0.0184,  0.3320],
        [ 0.3448,  0.4373,  0.2098,  ..., -0.3703, -0.0426,  0.3162],
        ...,
        [ 0.3129,  0.2810, -0.0606,  ...,  0.1193,  0.3478,  0.1930],
        [ 0.1137, -0.0906, -0.0415,  ..., -0.0782,  0.1194, -0.0170],
        [ 0.3127,  0.2800, -0.0619,  ...,  0.1219,  0.3477,  0.1894]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        ...,
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2862, 96])
Tensor Product Weights tensor([[-0.0313, -0.0284,  0.1262,  ..., -0.1238, -0.0606, -0.0809],
        [ 0.0721,  0.1333,  0.1623,  ..., -0.0614, -0.0766, -0.2061],
        [ 0.0751,  0.1414,  0.1583,  ..., -0.0594, -0.0767, -0.2086],
        ...,
        [ 0.0254, -0.0359,  0.1811,  ...,  0.0289, -0.0011, -0.0189],
        [ 0.0494, -0.0247,  0.1094,  ..., -0.0031, -0.0060, -0.0228],
        [ 0.0254, -0.0364,  0.1805,  ...,  0.0304, -0.0006, -0.0173]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.1618, -0.0542,  0.1156,  ...,  0.0676,  0.0102, -0.0963],
        [ 0.1496, -0.0924, -0.3011,  ...,  0.0946,  0.0336, -0.0637],
        [ 0.1925, -0.0116,  0.1690,  ...,  0.0784, -0.0448, -0.0738],
        ...,
        [-0.0269, -0.0380,  0.0503,  ...,  0.0127, -0.0136,  0.0119],
        [-0.0583, -0.0736, -0.0724,  ..., -0.0040,  0.0566,  0.0169],
        [-0.0514, -0.0811,  0.0191,  ...,  0.0078,  0.0128, -0.0522]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 2.8690e-01, -6.1154e-01, -2.7481e-01,  ..., -7.0288e-02,
         -2.6484e-01,  3.6947e-02],
        [ 4.2409e-02, -3.2129e-01, -1.6553e-02,  ...,  1.0141e-01,
          1.9542e-02, -7.4370e-02],
        [ 2.2229e-01, -5.0521e-01, -1.0675e-01,  ..., -1.5847e-01,
          3.8982e-02,  8.6701e-02],
        ...,
        [-2.0598e-01, -4.2320e-01,  8.9849e-02,  ..., -1.2081e-01,
          8.6486e-02, -1.3652e-01],
        [ 1.3063e-02, -5.5434e-01,  2.7843e-01,  ..., -5.6240e-05,
          1.6830e-01, -2.4789e-01],
        [-1.2168e-01, -4.8758e-01,  2.3270e-01,  ...,  3.1781e-02,
          7.4882e-02, -8.8990e-03]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2872])
shifts shape: torch.Size([2872, 3])
sender shape: torch.Size([2872])
receiver shape: torch.Size([2872])
Edge attributes shape: torch.Size([2872, 9])
Edge attributes tensor([[ 1.0000,  1.2526,  0.9636,  ..., -0.0799, -0.8818, -0.6885],
        [ 1.0000, -0.1651,  1.7236,  ...,  2.2033, -0.1017, -0.0162],
        [ 1.0000,  1.4082, -0.7492,  ..., -0.4905,  0.6529, -0.9859],
        ...,
        [ 1.0000, -1.2934, -0.0065,  ..., -1.1180, -0.0096, -0.2233],
        [ 1.0000,  0.5470,  1.6079,  ...,  1.7725, -0.7050, -0.1187],
        [ 1.0000, -0.7698,  1.4011,  ...,  1.0769,  1.2057, -0.0957]])
Edge features shape: torch.Size([2872, 8])
Edge features tensor([[ 0.1677, -0.0647, -0.1427,  ..., -0.1570, -0.0358,  0.1709],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3553, -0.0187,  0.3318],
        [ 0.3448,  0.4373,  0.2098,  ..., -0.3702, -0.0426,  0.3163],
        ...,
        [ 0.3130,  0.2812, -0.0603,  ...,  0.1188,  0.3478,  0.1937],
        [ 0.0008, -0.0016,  0.0022,  ..., -0.0032,  0.0031, -0.0028],
        [ 0.0301, -0.0450,  0.0372,  ...,  0.0426, -0.0422,  0.0205]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        ...,
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2872, 96])
Tensor Product Weights tensor([[-3.0789e-02, -2.8550e-02,  1.2660e-01,  ..., -1.2339e-01,
         -6.0470e-02, -8.0977e-02],
        [ 7.2151e-02,  1.3344e-01,  1.6224e-01,  ..., -6.1382e-02,
         -7.6566e-02, -2.0610e-01],
        [ 7.5060e-02,  1.4142e-01,  1.5828e-01,  ..., -5.9414e-02,
         -7.6683e-02, -2.0857e-01],
        ...,
        [ 2.5426e-02, -3.5789e-02,  1.8123e-01,  ...,  2.8638e-02,
         -1.1436e-03, -1.9236e-02],
        [-3.3501e-04,  2.5608e-03, -1.5813e-04,  ..., -1.7509e-04,
         -6.7766e-04,  1.4227e-03],
        [ 2.4252e-02,  3.9691e-03, -1.6770e-02,  ...,  1.1264e-02,
         -8.1106e-03,  8.3268e-03]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.1850, -0.0484,  0.1174,  ...,  0.0673,  0.0094, -0.0957],
        [ 0.1509, -0.0945, -0.2989,  ...,  0.0965,  0.0282, -0.0658],
        [ 0.1351, -0.0271,  0.1636,  ...,  0.0747, -0.0422, -0.0810],
        ...,
        [-0.0215, -0.0407,  0.0497,  ...,  0.0116, -0.0126,  0.0131],
        [-0.0570, -0.0829,  0.0196,  ...,  0.0079,  0.0144, -0.0526],
        [-0.0571, -0.0734, -0.0726,  ..., -0.0057,  0.0552,  0.0169]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 2.8440e-01, -6.0172e-01, -2.3955e-01,  ..., -4.6211e-02,
         -1.8296e-01,  9.6665e-02],
        [ 5.6486e-02, -3.2123e-01, -4.2163e-02,  ...,  1.4612e-01,
         -1.0367e-03, -3.0626e-02],
        [ 2.2519e-01, -5.1139e-01, -1.5178e-01,  ..., -1.9615e-01,
         -1.4709e-02,  1.0944e-01],
        ...,
        [-2.1195e-01, -4.1841e-01,  1.0033e-01,  ..., -1.2387e-01,
          8.7226e-02, -1.3949e-01],
        [-1.2537e-01, -4.9349e-01,  2.2925e-01,  ...,  3.2233e-02,
          7.5786e-02, -5.6726e-03],
        [ 1.6617e-02, -5.5320e-01,  2.7273e-01,  ...,  2.5149e-04,
          1.7560e-01, -2.4080e-01]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2858])
shifts shape: torch.Size([2858, 3])
sender shape: torch.Size([2858])
receiver shape: torch.Size([2858])
Edge attributes shape: torch.Size([2858, 9])
Edge attributes tensor([[ 1.0000e+00,  1.2420e+00,  9.7812e-01,  ..., -4.8394e-02,
         -8.9364e-01, -6.7236e-01],
        [ 1.0000e+00, -1.6265e-01,  1.7244e+00,  ...,  2.2065e+00,
         -4.3096e-04, -1.7076e-02],
        [ 1.0000e+00,  1.3944e+00, -7.3581e-01,  ..., -5.1272e-01,
          6.8125e-01, -9.2302e-01],
        ...,
        [ 1.0000e+00,  1.2785e+00, -3.1442e-02,  ..., -1.1169e+00,
          4.7412e-02, -1.7452e-01],
        [ 1.0000e+00, -1.9762e-01,  1.7154e+00,  ...,  2.1720e+00,
          2.9887e-01, -1.3454e-02],
        [ 1.0000e+00,  1.3614e+00,  1.0560e+00,  ...,  1.2884e-01,
          2.4162e-01, -1.1761e+00]])
Edge features shape: torch.Size([2858, 8])
Edge features tensor([[ 0.1680, -0.0645, -0.1432,  ..., -0.1568, -0.0371,  0.1711],
        [ 0.3439,  0.4320,  0.1988,  ..., -0.3551, -0.0184,  0.3320],
        [ 0.3448,  0.4374,  0.2099,  ..., -0.3704, -0.0428,  0.3161],
        ...,
        [ 0.3130,  0.2811, -0.0605,  ...,  0.1192,  0.3478,  0.1931],
        [ 0.1136, -0.0906, -0.0412,  ..., -0.0778,  0.1194, -0.0175],
        [ 0.3127,  0.2800, -0.0619,  ...,  0.1219,  0.3477,  0.1895]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        ...,
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2858, 96])
Tensor Product Weights tensor([[-0.0313, -0.0284,  0.1263,  ..., -0.1238, -0.0606, -0.0809],
        [ 0.0721,  0.1333,  0.1623,  ..., -0.0614, -0.0766, -0.2061],
        [ 0.0751,  0.1415,  0.1582,  ..., -0.0594, -0.0767, -0.2086],
        ...,
        [ 0.0254, -0.0359,  0.1811,  ...,  0.0289, -0.0011, -0.0190],
        [ 0.0495, -0.0247,  0.1092,  ..., -0.0028, -0.0059, -0.0225],
        [ 0.0254, -0.0364,  0.1805,  ...,  0.0304, -0.0006, -0.0174]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.1617, -0.0542,  0.1156,  ...,  0.0675,  0.0100, -0.0969],
        [ 0.1483, -0.0924, -0.3017,  ...,  0.0946,  0.0332, -0.0640],
        [ 0.1926, -0.0117,  0.1690,  ...,  0.0783, -0.0448, -0.0742],
        ...,
        [-0.0270, -0.0380,  0.0503,  ...,  0.0126, -0.0137,  0.0118],
        [-0.0584, -0.0737, -0.0712,  ..., -0.0039,  0.0564,  0.0173],
        [-0.0520, -0.0812,  0.0194,  ...,  0.0079,  0.0127, -0.0518]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.2867, -0.6115, -0.2745,  ..., -0.0690, -0.2650,  0.0370],
        [ 0.0430, -0.3228, -0.0172,  ...,  0.0971,  0.0198, -0.0745],
        [ 0.2223, -0.5052, -0.1069,  ..., -0.1587,  0.0391,  0.0862],
        ...,
        [-0.2065, -0.4228,  0.0905,  ..., -0.1216,  0.0856, -0.1363],
        [ 0.0136, -0.5540,  0.2771,  ..., -0.0011,  0.1685, -0.2459],
        [-0.1224, -0.4879,  0.2333,  ...,  0.0319,  0.0751, -0.0090]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2866])
shifts shape: torch.Size([2866, 3])
sender shape: torch.Size([2866])
receiver shape: torch.Size([2866])
Edge attributes shape: torch.Size([2866, 9])
Edge attributes tensor([[ 1.0000,  1.2408,  0.9788,  ..., -0.0470, -0.8956, -0.6696],
        [ 1.0000, -0.1627,  1.7244,  ...,  2.2065,  0.0034, -0.0171],
        [ 1.0000,  1.3918, -0.7354,  ..., -0.5133,  0.6860, -0.9133],
        ...,
        [ 1.0000,  1.2844, -0.0276,  ..., -1.1172,  0.0415, -0.1938],
        [ 1.0000, -0.2073,  1.7146,  ...,  2.1688,  0.2901, -0.0167],
        [ 1.0000,  1.3564,  1.0614,  ...,  0.1415,  0.2512, -1.1659]])
Edge features shape: torch.Size([2866, 8])
Edge features tensor([[ 0.1680, -0.0644, -0.1433,  ..., -0.1568, -0.0373,  0.1711],
        [ 0.3439,  0.4320,  0.1988,  ..., -0.3551, -0.0183,  0.3321],
        [ 0.3448,  0.4373,  0.2098,  ..., -0.3702, -0.0425,  0.3163],
        ...,
        [ 0.3130,  0.2812, -0.0604,  ...,  0.1189,  0.3478,  0.1936],
        [ 0.1133, -0.0906, -0.0408,  ..., -0.0770,  0.1194, -0.0185],
        [ 0.3127,  0.2801, -0.0618,  ...,  0.1216,  0.3477,  0.1898]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        ...,
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2866, 96])
Tensor Product Weights tensor([[-0.0313, -0.0284,  0.1262,  ..., -0.1238, -0.0606, -0.0808],
        [ 0.0721,  0.1333,  0.1623,  ..., -0.0614, -0.0766, -0.2060],
        [ 0.0751,  0.1414,  0.1583,  ..., -0.0594, -0.0767, -0.2086],
        ...,
        [ 0.0254, -0.0358,  0.1812,  ...,  0.0287, -0.0011, -0.0192],
        [ 0.0498, -0.0245,  0.1088,  ..., -0.0022, -0.0056, -0.0221],
        [ 0.0254, -0.0363,  0.1806,  ...,  0.0302, -0.0007, -0.0175]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.1618, -0.0541,  0.1155,  ...,  0.0676,  0.0102, -0.0960],
        [ 0.1509, -0.0922, -0.3015,  ...,  0.0946,  0.0338, -0.0635],
        [ 0.1926, -0.0116,  0.1690,  ...,  0.0786, -0.0448, -0.0736],
        ...,
        [-0.0215, -0.0407,  0.0497,  ...,  0.0109, -0.0131,  0.0127],
        [-0.0566, -0.0732, -0.0742,  ..., -0.0036,  0.0561,  0.0167],
        [-0.0502, -0.0808,  0.0193,  ...,  0.0081,  0.0126, -0.0523]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.2869, -0.6116, -0.2753,  ..., -0.0711, -0.2651,  0.0370],
        [ 0.0423, -0.3208, -0.0160,  ...,  0.1043,  0.0195, -0.0742],
        [ 0.2224, -0.5053, -0.1068,  ..., -0.1589,  0.0391,  0.0869],
        ...,
        [-0.2119, -0.4184,  0.1003,  ..., -0.1244,  0.0845, -0.1404],
        [ 0.0160, -0.5533,  0.2742,  ..., -0.0008,  0.1705, -0.2459],
        [-0.1208, -0.4866,  0.2334,  ...,  0.0317,  0.0761, -0.0089]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2866])
shifts shape: torch.Size([2866, 3])
sender shape: torch.Size([2866])
receiver shape: torch.Size([2866])
Edge attributes shape: torch.Size([2866, 9])
Edge attributes tensor([[ 1.0000,  1.2525,  0.9637,  ..., -0.0797, -0.8820, -0.6881],
        [ 1.0000, -0.1656,  1.7235,  ...,  2.2030, -0.1030, -0.0163],
        [ 1.0000,  1.4092, -0.7488,  ..., -0.4912,  0.6510, -0.9891],
        ...,
        [ 1.0000,  1.3492,  1.0643,  ...,  0.1484,  0.2981, -1.1446],
        [ 1.0000,  1.2907,  0.0086,  ..., -1.1180, -0.0128, -0.2142],
        [ 1.0000, -0.2173,  1.7098,  ...,  2.1503,  0.3792, -0.0114]])
Edge features shape: torch.Size([2866, 8])
Edge features tensor([[ 0.1677, -0.0648, -0.1427,  ..., -0.1571, -0.0357,  0.1709],
        [ 0.3439,  0.4321,  0.1991,  ..., -0.3555, -0.0189,  0.3317],
        [ 0.3448,  0.4373,  0.2098,  ..., -0.3703, -0.0427,  0.3162],
        ...,
        [ 0.3127,  0.2801, -0.0618,  ...,  0.1217,  0.3477,  0.1898],
        [ 0.3130,  0.2813, -0.0603,  ...,  0.1187,  0.3478,  0.1938],
        [ 0.1132, -0.0906, -0.0406,  ..., -0.0766,  0.1194, -0.0191]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        ...,
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2866, 96])
Tensor Product Weights tensor([[-0.0307, -0.0286,  0.1266,  ..., -0.1234, -0.0605, -0.0810],
        [ 0.0722,  0.1335,  0.1622,  ..., -0.0614, -0.0766, -0.2061],
        [ 0.0751,  0.1414,  0.1583,  ..., -0.0594, -0.0767, -0.2086],
        ...,
        [ 0.0254, -0.0364,  0.1806,  ...,  0.0303, -0.0006, -0.0175],
        [ 0.0254, -0.0358,  0.1813,  ...,  0.0286, -0.0012, -0.0193],
        [ 0.0500, -0.0245,  0.1086,  ..., -0.0019, -0.0054, -0.0219]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.1848, -0.0484,  0.1174,  ...,  0.0673,  0.0092, -0.0962],
        [ 0.1502, -0.0944, -0.2994,  ...,  0.0964,  0.0280, -0.0659],
        [ 0.1354, -0.0270,  0.1635,  ...,  0.0746, -0.0423, -0.0814],
        ...,
        [-0.0216, -0.0407,  0.0498,  ...,  0.0116, -0.0126,  0.0130],
        [-0.0573, -0.0734, -0.0710,  ..., -0.0058,  0.0550,  0.0173],
        [-0.0572, -0.0829,  0.0198,  ...,  0.0079,  0.0144, -0.0523]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.2842, -0.6016, -0.2394,  ..., -0.0455, -0.1830,  0.0967],
        [ 0.0570, -0.3224, -0.0427,  ...,  0.1432, -0.0009, -0.0313],
        [ 0.2252, -0.5111, -0.1516,  ..., -0.1961, -0.0149,  0.1093],
        ...,
        [-0.2120, -0.4184,  0.1005,  ..., -0.1242,  0.0871, -0.1394],
        [ 0.0171, -0.5532,  0.2717,  ..., -0.0007,  0.1758, -0.2394],
        [-0.1255, -0.4936,  0.2293,  ...,  0.0322,  0.0758, -0.0059]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2832])
shifts shape: torch.Size([2832, 3])
sender shape: torch.Size([2832])
receiver shape: torch.Size([2832])
Edge attributes shape: torch.Size([2832, 9])
Edge attributes tensor([[ 1.0000,  1.2499,  0.9591,  ..., -0.0895, -0.8911, -0.6741],
        [ 1.0000, -0.1457,  1.7258,  ...,  2.2119, -0.0432, -0.0135],
        [ 1.0000,  1.3728, -0.7561,  ..., -0.4789,  0.7198, -0.8653],
        ...,
        [ 1.0000,  1.6725, -0.0158,  ..., -1.1178,  0.0092, -1.6750],
        [ 1.0000,  1.4679,  0.9181,  ..., -0.1756,  0.0564, -1.3894],
        [ 1.0000,  1.0817, -0.0339,  ..., -1.1167,  0.0592,  0.4253]])
Edge features shape: torch.Size([2832, 8])
Edge features tensor([[ 0.1674, -0.0650, -0.1422,  ..., -0.1573, -0.0344,  0.1706],
        [ 0.3439,  0.4323,  0.1994,  ..., -0.3559, -0.0197,  0.3312],
        [ 0.3448,  0.4373,  0.2098,  ..., -0.3703, -0.0427,  0.3162],
        ...,
        [ 0.3664,  0.5678,  0.5137,  ..., -0.4760, -0.5780, -0.4198],
        [ 0.3131,  0.2815, -0.0599,  ...,  0.1180,  0.3478,  0.1948],
        [ 0.3132,  0.2819, -0.0593,  ...,  0.1169,  0.3479,  0.1963]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        ...,
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2832, 96])
Tensor Product Weights tensor([[-0.0302, -0.0287,  0.1270,  ..., -0.1230, -0.0604, -0.0811],
        [ 0.0723,  0.1338,  0.1621,  ..., -0.0613, -0.0766, -0.2062],
        [ 0.0751,  0.1414,  0.1583,  ..., -0.0594, -0.0767, -0.2086],
        ...,
        [ 0.1687,  0.2947, -0.0987,  ..., -0.0361, -0.0605, -0.1553],
        [ 0.0254, -0.0356,  0.1814,  ...,  0.0282, -0.0013, -0.0197],
        [ 0.0254, -0.0354,  0.1817,  ...,  0.0276, -0.0015, -0.0204]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.1842, -0.0481,  0.1173,  ...,  0.0675,  0.0158, -0.0865],
        [ 0.1560, -0.1051, -0.2963,  ...,  0.1007,  0.0346, -0.0605],
        [ 0.1340, -0.0269,  0.1639,  ...,  0.0748, -0.0386, -0.0741],
        ...,
        [ 0.0050, -0.0447,  0.0469,  ...,  0.0258,  0.0052,  0.0097],
        [-0.0641, -0.0861,  0.0098,  ..., -0.0521,  0.0539,  0.0212],
        [-0.0814, -0.0527,  0.0347,  ..., -0.0356, -0.0172, -0.0243]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.2846, -0.6000, -0.2398,  ..., -0.0622, -0.1776,  0.0876],
        [ 0.0703, -0.3182, -0.0761,  ...,  0.1502, -0.0053, -0.0508],
        [ 0.2247, -0.5135, -0.1538,  ..., -0.1935, -0.0123,  0.1179],
        ...,
        [-0.1689, -0.4319,  0.0732,  ...,  0.0730, -0.1769,  0.0847],
        [-0.1439, -0.5001,  0.2230,  ...,  0.0438,  0.0262,  0.0468],
        [-0.0667, -0.5712,  0.2303,  ...,  0.1009, -0.1707,  0.1539]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2832])
shifts shape: torch.Size([2832, 3])
sender shape: torch.Size([2832])
receiver shape: torch.Size([2832])
Edge attributes shape: torch.Size([2832, 9])
Edge attributes tensor([[ 1.0000,  1.2395,  0.9739,  ..., -0.0577, -0.9025, -0.6591],
        [ 1.0000, -0.1439,  1.7259,  ...,  2.2123,  0.0538, -0.0130],
        [ 1.0000,  1.3578, -0.7414,  ..., -0.5035,  0.7455, -0.7984],
        ...,
        [ 1.0000,  1.3653,  1.0559,  ...,  0.1286,  0.1976, -1.1896],
        [ 1.0000,  1.2647, -0.0531,  ..., -1.1149,  0.0810, -0.1301],
        [ 1.0000, -0.1938,  1.7177,  ...,  2.1806,  0.2439, -0.0164]])
Edge features shape: torch.Size([2832, 8])
Edge features tensor([[ 0.1677, -0.0647, -0.1427,  ..., -0.1570, -0.0359,  0.1709],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3554, -0.0189,  0.3317],
        [ 0.3448,  0.4374,  0.2100,  ..., -0.3705, -0.0429,  0.3160],
        ...,
        [ 0.3127,  0.2801, -0.0618,  ...,  0.1217,  0.3477,  0.1898],
        [ 0.3130,  0.2812, -0.0603,  ...,  0.1188,  0.3478,  0.1937],
        [ 0.1136, -0.0906, -0.0414,  ..., -0.0780,  0.1194, -0.0172]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        ...,
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2832, 96])
Tensor Product Weights tensor([[-0.0308, -0.0285,  0.1266,  ..., -0.1234, -0.0605, -0.0810],
        [ 0.0722,  0.1335,  0.1622,  ..., -0.0614, -0.0766, -0.2061],
        [ 0.0751,  0.1415,  0.1582,  ..., -0.0594, -0.0767, -0.2086],
        ...,
        [ 0.0254, -0.0364,  0.1806,  ...,  0.0303, -0.0006, -0.0175],
        [ 0.0254, -0.0358,  0.1812,  ...,  0.0286, -0.0011, -0.0192],
        [ 0.0495, -0.0247,  0.1093,  ..., -0.0030, -0.0059, -0.0227]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.1633, -0.0535,  0.1153,  ...,  0.0676,  0.0159, -0.0874],
        [ 0.1557, -0.1029, -0.2988,  ...,  0.0986,  0.0395, -0.0582],
        [ 0.1897, -0.0107,  0.1700,  ...,  0.0782, -0.0431, -0.0667],
        ...,
        [-0.0271, -0.0379,  0.0504,  ...,  0.0120, -0.0143,  0.0110],
        [-0.0585, -0.0746, -0.0693,  ..., -0.0021,  0.0566,  0.0180],
        [-0.0523, -0.0811,  0.0195,  ...,  0.0080,  0.0115, -0.0510]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.2887, -0.6102, -0.2789,  ..., -0.0877, -0.2609,  0.0318],
        [ 0.0549, -0.3159, -0.0490,  ...,  0.1095,  0.0153, -0.0927],
        [ 0.2223, -0.5073, -0.1060,  ..., -0.1521,  0.0328,  0.0988],
        ...,
        [-0.2063, -0.4230,  0.0909,  ..., -0.1233,  0.0837, -0.1370],
        [ 0.0130, -0.5538,  0.2747,  ..., -0.0019,  0.1643, -0.2464],
        [-0.1227, -0.4882,  0.2339,  ...,  0.0323,  0.0748, -0.0107]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2858])
shifts shape: torch.Size([2858, 3])
sender shape: torch.Size([2858])
receiver shape: torch.Size([2858])
Edge attributes shape: torch.Size([2858, 9])
Edge attributes tensor([[ 1.0000,  1.2360,  0.9682,  ..., -0.0699, -0.9142, -0.6408],
        [ 1.0000, -0.1605,  1.7245,  ...,  2.2067, -0.0488, -0.0163],
        [ 1.0000,  1.3812, -0.7460,  ..., -0.4958,  0.7049, -0.8857],
        ...,
        [ 1.0000,  1.3616,  1.0466,  ...,  0.1066,  0.3044, -1.1639],
        [ 1.0000,  1.2990, -0.0097,  ..., -1.1179,  0.0143, -0.2419],
        [ 1.0000, -0.1962,  1.7123,  ...,  2.1599,  0.3803, -0.0057]])
Edge features shape: torch.Size([2858, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0366,  0.1710],
        [ 0.3439,  0.4320,  0.1989,  ..., -0.3553, -0.0186,  0.3319],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3699, -0.0420,  0.3166],
        ...,
        [ 0.3127,  0.2800, -0.0620,  ...,  0.1221,  0.3477,  0.1892],
        [ 0.3130,  0.2811, -0.0605,  ...,  0.1191,  0.3478,  0.1933],
        [ 0.1139, -0.0906, -0.0418,  ..., -0.0788,  0.1194, -0.0162]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        ...,
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2858, 96])
Tensor Product Weights tensor([[-0.0311, -0.0285,  0.1264,  ..., -0.1236, -0.0605, -0.0809],
        [ 0.0721,  0.1334,  0.1623,  ..., -0.0614, -0.0766, -0.2061],
        [ 0.0750,  0.1412,  0.1584,  ..., -0.0595, -0.0767, -0.2085],
        ...,
        [ 0.0254, -0.0364,  0.1805,  ...,  0.0305, -0.0006, -0.0172],
        [ 0.0254, -0.0358,  0.1812,  ...,  0.0288, -0.0011, -0.0191],
        [ 0.0492, -0.0248,  0.1098,  ..., -0.0036, -0.0062, -0.0231]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.1657, -0.0541,  0.1166,  ...,  0.0669,  0.0137, -0.0803],
        [ 0.1511, -0.0911, -0.2995,  ...,  0.0943,  0.0327, -0.0634],
        [ 0.2102, -0.0152,  0.1653,  ...,  0.0755, -0.0396, -0.0667],
        ...,
        [-0.0266, -0.0382,  0.0503,  ...,  0.0134, -0.0130,  0.0126],
        [-0.0565, -0.0735, -0.0731,  ..., -0.0065,  0.0562,  0.0165],
        [-0.0515, -0.0836,  0.0187,  ...,  0.0072,  0.0148, -0.0535]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.2825, -0.6111, -0.2770,  ..., -0.0212, -0.2417,  0.1363],
        [ 0.0411, -0.3180, -0.0121,  ...,  0.0999,  0.0210, -0.0796],
        [ 0.2257, -0.4914, -0.1105,  ..., -0.2512,  0.0545, -0.0478],
        ...,
        [-0.2051, -0.4244,  0.0883,  ..., -0.1177,  0.0913, -0.1360],
        [ 0.0109, -0.5536,  0.2833,  ...,  0.0050,  0.1741, -0.2476],
        [-0.1234, -0.4882,  0.2282,  ...,  0.0323,  0.0741, -0.0063]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2860])
shifts shape: torch.Size([2860, 3])
sender shape: torch.Size([2860])
receiver shape: torch.Size([2860])
Edge attributes shape: torch.Size([2860, 9])
Edge attributes tensor([[ 1.0000e+00,  1.2414e+00,  9.7840e-01,  ..., -4.7786e-02,
         -8.9460e-01, -6.7098e-01],
        [ 1.0000e+00, -1.6292e-01,  1.7244e+00,  ...,  2.2064e+00,
          3.6327e-04, -1.7133e-02],
        [ 1.0000e+00,  1.3937e+00, -7.3562e-01,  ..., -5.1302e-01,
          6.8248e-01, -9.2046e-01],
        ...,
        [ 1.0000e+00,  1.2820e+00, -2.1403e-02,  ..., -1.1175e+00,
          3.2176e-02, -1.8565e-01],
        [ 1.0000e+00, -2.1124e-01,  1.7138e+00,  ...,  2.1658e+00,
          2.9859e-01, -1.7048e-02],
        [ 1.0000e+00,  1.3538e+00,  1.0648e+00,  ...,  1.4969e-01,
          2.5133e-01, -1.1614e+00]])
Edge features shape: torch.Size([2860, 8])
Edge features tensor([[ 0.1680, -0.0645, -0.1432,  ..., -0.1568, -0.0371,  0.1711],
        [ 0.3439,  0.4320,  0.1989,  ..., -0.3552, -0.0185,  0.3319],
        [ 0.3448,  0.4373,  0.2098,  ..., -0.3703, -0.0426,  0.3162],
        ...,
        [ 0.3130,  0.2812, -0.0603,  ...,  0.1188,  0.3478,  0.1938],
        [ 0.1132, -0.0906, -0.0407,  ..., -0.0768,  0.1194, -0.0188],
        [ 0.3127,  0.2802, -0.0617,  ...,  0.1215,  0.3477,  0.1900]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        ...,
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2860, 96])
Tensor Product Weights tensor([[-0.0313, -0.0284,  0.1263,  ..., -0.1238, -0.0606, -0.0809],
        [ 0.0721,  0.1334,  0.1623,  ..., -0.0614, -0.0766, -0.2061],
        [ 0.0751,  0.1414,  0.1583,  ..., -0.0594, -0.0767, -0.2086],
        ...,
        [ 0.0254, -0.0358,  0.1812,  ...,  0.0286, -0.0011, -0.0192],
        [ 0.0499, -0.0245,  0.1087,  ..., -0.0021, -0.0055, -0.0220],
        [ 0.0254, -0.0363,  0.1806,  ...,  0.0302, -0.0007, -0.0176]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.1618, -0.0542,  0.1156,  ...,  0.0676,  0.0100, -0.0966],
        [ 0.1495, -0.0923, -0.3019,  ...,  0.0946,  0.0334, -0.0637],
        [ 0.1926, -0.0116,  0.1690,  ...,  0.0784, -0.0449, -0.0741],
        ...,
        [-0.0215, -0.0407,  0.0497,  ...,  0.0110, -0.0130,  0.0126],
        [-0.0568, -0.0733, -0.0722,  ..., -0.0038,  0.0558,  0.0172],
        [-0.0505, -0.0809,  0.0197,  ...,  0.0083,  0.0126, -0.0520]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.2867, -0.6115, -0.2745,  ..., -0.0692, -0.2648,  0.0368],
        [ 0.0431, -0.3226, -0.0172,  ...,  0.1001,  0.0194, -0.0738],
        [ 0.2224, -0.5051, -0.1068,  ..., -0.1588,  0.0392,  0.0861],
        ...,
        [-0.2121, -0.4183,  0.1006,  ..., -0.1250,  0.0842, -0.1403],
        [ 0.0164, -0.5530,  0.2729,  ..., -0.0022,  0.1710, -0.2435],
        [-0.1212, -0.4868,  0.2339,  ...,  0.0318,  0.0763, -0.0092]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2836])
shifts shape: torch.Size([2836, 3])
sender shape: torch.Size([2836])
receiver shape: torch.Size([2836])
Edge attributes shape: torch.Size([2836, 9])
Edge attributes tensor([[ 1.0000,  1.2508,  0.9585,  ..., -0.0909, -0.8896, -0.6762],
        [ 1.0000, -0.1452,  1.7258,  ...,  2.2120, -0.0453, -0.0133],
        [ 1.0000,  1.3733, -0.7568,  ..., -0.4777,  0.7189, -0.8679],
        ...,
        [ 1.0000, -1.2822,  0.0159,  ..., -1.1177,  0.0240, -0.1860],
        [ 1.0000,  0.5507,  1.6015,  ...,  1.7495, -0.7509, -0.1106],
        [ 1.0000, -0.7562,  1.4127,  ...,  1.1134,  1.1992, -0.0900]])
Edge features shape: torch.Size([2836, 8])
Edge features tensor([[ 0.1674, -0.0650, -0.1422,  ..., -0.1573, -0.0345,  0.1706],
        [ 0.3439,  0.4323,  0.1994,  ..., -0.3559, -0.0197,  0.3312],
        [ 0.3448,  0.4374,  0.2099,  ..., -0.3704, -0.0427,  0.3162],
        ...,
        [ 0.3130,  0.2814, -0.0601,  ...,  0.1184,  0.3478,  0.1943],
        [ 0.0008, -0.0015,  0.0021,  ..., -0.0031,  0.0030, -0.0027],
        [ 0.0301, -0.0451,  0.0372,  ...,  0.0426, -0.0422,  0.0205]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        ...,
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2836, 96])
Tensor Product Weights tensor([[-3.0269e-02, -2.8682e-02,  1.2697e-01,  ..., -1.2298e-01,
         -6.0361e-02, -8.1094e-02],
        [ 7.2266e-02,  1.3376e-01,  1.6209e-01,  ..., -6.1306e-02,
         -7.6576e-02, -2.0620e-01],
        [ 7.5081e-02,  1.4147e-01,  1.5825e-01,  ..., -5.9399e-02,
         -7.6683e-02, -2.0858e-01],
        ...,
        [ 2.5424e-02, -3.5701e-02,  1.8133e-01,  ...,  2.8385e-02,
         -1.2210e-03, -1.9505e-02],
        [-3.2498e-04,  2.4722e-03, -1.4528e-04,  ..., -1.5903e-04,
         -6.4423e-04,  1.3784e-03],
        [ 2.4267e-02,  3.9649e-03, -1.6768e-02,  ...,  1.1281e-02,
         -8.1040e-03,  8.3328e-03]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.1839, -0.0481,  0.1173,  ...,  0.0676,  0.0157, -0.0869],
        [ 0.1564, -0.1051, -0.2959,  ...,  0.1007,  0.0345, -0.0606],
        [ 0.1343, -0.0269,  0.1639,  ...,  0.0747, -0.0386, -0.0746],
        ...,
        [-0.0217, -0.0407,  0.0500,  ...,  0.0112, -0.0131,  0.0123],
        [-0.0556, -0.0826,  0.0196,  ...,  0.0077,  0.0136, -0.0521],
        [-0.0573, -0.0743, -0.0700,  ..., -0.0044,  0.0557,  0.0175]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.2845, -0.5998, -0.2400,  ..., -0.0624, -0.1774,  0.0880],
        [ 0.0703, -0.3179, -0.0760,  ...,  0.1503, -0.0050, -0.0505],
        [ 0.2247, -0.5133, -0.1536,  ..., -0.1937, -0.0122,  0.1180],
        ...,
        [-0.2115, -0.4188,  0.0999,  ..., -0.1244,  0.0868, -0.1399],
        [-0.1252, -0.4919,  0.2309,  ...,  0.0330,  0.0752, -0.0067],
        [ 0.0154, -0.5536,  0.2716,  ...,  0.0008,  0.1725, -0.2423]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2836])
shifts shape: torch.Size([2836, 3])
sender shape: torch.Size([2836])
receiver shape: torch.Size([2836])
Edge attributes shape: torch.Size([2836, 9])
Edge attributes tensor([[ 1.0000,  1.2407,  0.9725,  ..., -0.0606, -0.9008, -0.6614],
        [ 1.0000, -0.1423,  1.7260,  ...,  2.2128,  0.0529, -0.0127],
        [ 1.0000,  1.3571, -0.7427,  ..., -0.5013,  0.7469, -0.7971],
        ...,
        [ 1.0000,  1.3645,  1.0571,  ...,  0.1314,  0.1961, -1.1885],
        [ 1.0000,  1.2631, -0.0512,  ..., -1.1151,  0.0782, -0.1250],
        [ 1.0000, -0.1950,  1.7174,  ...,  2.1797,  0.2468, -0.0165]])
Edge features shape: torch.Size([2836, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1426,  ..., -0.1571, -0.0356,  0.1708],
        [ 0.3439,  0.4322,  0.1992,  ..., -0.3557, -0.0192,  0.3315],
        [ 0.3449,  0.4374,  0.2100,  ..., -0.3706, -0.0431,  0.3159],
        ...,
        [ 0.3127,  0.2801, -0.0619,  ...,  0.1218,  0.3477,  0.1896],
        [ 0.3130,  0.2813, -0.0603,  ...,  0.1187,  0.3478,  0.1938],
        [ 0.1136, -0.0906, -0.0413,  ..., -0.0779,  0.1194, -0.0173]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        ...,
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2836, 96])
Tensor Product Weights tensor([[-0.0307, -0.0286,  0.1267,  ..., -0.1233, -0.0605, -0.0810],
        [ 0.0722,  0.1336,  0.1622,  ..., -0.0613, -0.0766, -0.2062],
        [ 0.0751,  0.1416,  0.1582,  ..., -0.0594, -0.0767, -0.2086],
        ...,
        [ 0.0254, -0.0364,  0.1805,  ...,  0.0303, -0.0006, -0.0174],
        [ 0.0254, -0.0358,  0.1812,  ...,  0.0286, -0.0012, -0.0193],
        [ 0.0495, -0.0247,  0.1093,  ..., -0.0029, -0.0059, -0.0226]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.1630, -0.0535,  0.1153,  ...,  0.0676,  0.0160, -0.0876],
        [ 0.1547, -0.1030, -0.2979,  ...,  0.0988,  0.0396, -0.0585],
        [ 0.1897, -0.0108,  0.1700,  ...,  0.0780, -0.0429, -0.0671],
        ...,
        [-0.0271, -0.0379,  0.0504,  ...,  0.0121, -0.0143,  0.0109],
        [-0.0587, -0.0749, -0.0684,  ..., -0.0021,  0.0565,  0.0182],
        [-0.0524, -0.0811,  0.0196,  ...,  0.0080,  0.0114, -0.0508]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.2885, -0.6099, -0.2789,  ..., -0.0883, -0.2604,  0.0315],
        [ 0.0548, -0.3152, -0.0482,  ...,  0.1097,  0.0154, -0.0939],
        [ 0.2224, -0.5073, -0.1061,  ..., -0.1520,  0.0325,  0.0990],
        ...,
        [-0.2064, -0.4227,  0.0911,  ..., -0.1236,  0.0834, -0.1368],
        [ 0.0129, -0.5538,  0.2737,  ..., -0.0025,  0.1644, -0.2455],
        [-0.1230, -0.4882,  0.2341,  ...,  0.0323,  0.0748, -0.0108]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2834])
shifts shape: torch.Size([2834, 3])
sender shape: torch.Size([2834])
receiver shape: torch.Size([2834])
Edge attributes shape: torch.Size([2834, 9])
Edge attributes tensor([[ 1.0000,  1.2402,  0.9735,  ..., -0.0585, -0.9012, -0.6609],
        [ 1.0000, -0.1441,  1.7259,  ...,  2.2123,  0.0511, -0.0131],
        [ 1.0000,  1.3588, -0.7418,  ..., -0.5029,  0.7438, -0.8024],
        ...,
        [ 1.0000,  1.3604,  1.0605,  ...,  0.1394,  0.2151, -1.1787],
        [ 1.0000,  1.2730, -0.0458,  ..., -1.1157,  0.0694, -0.1570],
        [ 1.0000, -0.2032,  1.7165,  ...,  2.1761,  0.2465, -0.0187]])
Edge features shape: torch.Size([2834, 8])
Edge features tensor([[ 0.1677, -0.0647, -0.1428,  ..., -0.1570, -0.0360,  0.1709],
        [ 0.3439,  0.4321,  0.1991,  ..., -0.3556, -0.0191,  0.3316],
        [ 0.3448,  0.4374,  0.2099,  ..., -0.3704, -0.0428,  0.3161],
        ...,
        [ 0.3127,  0.2802, -0.0617,  ...,  0.1215,  0.3477,  0.1900],
        [ 0.3130,  0.2814, -0.0600,  ...,  0.1183,  0.3478,  0.1944],
        [ 0.1133, -0.0906, -0.0409,  ..., -0.0772,  0.1194, -0.0183]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        ...,
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2834, 96])
Tensor Product Weights tensor([[-0.0308, -0.0285,  0.1266,  ..., -0.1234, -0.0605, -0.0810],
        [ 0.0722,  0.1336,  0.1622,  ..., -0.0614, -0.0766, -0.2061],
        [ 0.0751,  0.1415,  0.1582,  ..., -0.0594, -0.0767, -0.2086],
        ...,
        [ 0.0254, -0.0363,  0.1806,  ...,  0.0302, -0.0007, -0.0176],
        [ 0.0254, -0.0357,  0.1813,  ...,  0.0284, -0.0012, -0.0195],
        [ 0.0498, -0.0246,  0.1089,  ..., -0.0023, -0.0056, -0.0222]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.1631, -0.0535,  0.1153,  ...,  0.0676,  0.0157, -0.0877],
        [ 0.1561, -0.1029, -0.2986,  ...,  0.0986,  0.0394, -0.0583],
        [ 0.1899, -0.0108,  0.1699,  ...,  0.0781, -0.0431, -0.0672],
        ...,
        [-0.0215, -0.0406,  0.0498,  ...,  0.0105, -0.0135,  0.0120],
        [-0.0567, -0.0741, -0.0722,  ..., -0.0021,  0.0564,  0.0173],
        [-0.0502, -0.0808,  0.0194,  ...,  0.0082,  0.0116, -0.0516]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.2886, -0.6101, -0.2787,  ..., -0.0874, -0.2607,  0.0321],
        [ 0.0551, -0.3161, -0.0492,  ...,  0.1100,  0.0154, -0.0919],
        [ 0.2224, -0.5071, -0.1061,  ..., -0.1526,  0.0331,  0.0982],
        ...,
        [-0.2118, -0.4184,  0.1006,  ..., -0.1259,  0.0829, -0.1409],
        [ 0.0154, -0.5533,  0.2721,  ..., -0.0011,  0.1673, -0.2464],
        [-0.1207, -0.4865,  0.2338,  ...,  0.0321,  0.0757, -0.0104]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2862])
shifts shape: torch.Size([2862, 3])
sender shape: torch.Size([2862])
receiver shape: torch.Size([2862])
Edge attributes shape: torch.Size([2862, 9])
Edge attributes tensor([[ 1.0000,  1.2362,  0.9679,  ..., -0.0706, -0.9139, -0.6412],
        [ 1.0000, -0.1610,  1.7244,  ...,  2.2065, -0.0528, -0.0164],
        [ 1.0000,  1.3829, -0.7461,  ..., -0.4956,  0.7018, -0.8919],
        ...,
        [ 1.0000,  1.3610,  1.0471,  ...,  0.1078,  0.3058, -1.1627],
        [ 1.0000,  1.2977, -0.0059,  ..., -1.1180,  0.0088, -0.2374],
        [ 1.0000, -0.1970,  1.7118,  ...,  2.1580,  0.3892, -0.0050]])
Edge features shape: torch.Size([2862, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1429,  ..., -0.1569, -0.0364,  0.1710],
        [ 0.3439,  0.4320,  0.1989,  ..., -0.3552, -0.0185,  0.3319],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3699, -0.0420,  0.3166],
        ...,
        [ 0.3127,  0.2800, -0.0620,  ...,  0.1221,  0.3477,  0.1892],
        [ 0.3130,  0.2811, -0.0605,  ...,  0.1191,  0.3478,  0.1933],
        [ 0.1138, -0.0906, -0.0417,  ..., -0.0785,  0.1194, -0.0165]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        ...,
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2862, 96])
Tensor Product Weights tensor([[-0.0310, -0.0285,  0.1264,  ..., -0.1236, -0.0605, -0.0809],
        [ 0.0721,  0.1334,  0.1623,  ..., -0.0614, -0.0766, -0.2061],
        [ 0.0750,  0.1412,  0.1584,  ..., -0.0595, -0.0767, -0.2085],
        ...,
        [ 0.0254, -0.0364,  0.1805,  ...,  0.0305, -0.0006, -0.0172],
        [ 0.0254, -0.0359,  0.1812,  ...,  0.0288, -0.0011, -0.0190],
        [ 0.0493, -0.0248,  0.1096,  ..., -0.0034, -0.0061, -0.0230]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.1656, -0.0541,  0.1166,  ...,  0.0668,  0.0134, -0.0809],
        [ 0.1498, -0.0912, -0.3000,  ...,  0.0943,  0.0323, -0.0636],
        [ 0.2106, -0.0153,  0.1653,  ...,  0.0753, -0.0397, -0.0672],
        ...,
        [-0.0266, -0.0382,  0.0504,  ...,  0.0135, -0.0130,  0.0125],
        [-0.0568, -0.0736, -0.0711,  ..., -0.0068,  0.0560,  0.0168],
        [-0.0515, -0.0837,  0.0189,  ...,  0.0072,  0.0149, -0.0533]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.2823, -0.6111, -0.2765,  ..., -0.0202, -0.2415,  0.1365],
        [ 0.0417, -0.3195, -0.0129,  ...,  0.0957,  0.0211, -0.0799],
        [ 0.2257, -0.4912, -0.1107,  ..., -0.2518,  0.0548, -0.0487],
        ...,
        [-0.2052, -0.4242,  0.0885,  ..., -0.1180,  0.0914, -0.1358],
        [ 0.0111, -0.5533,  0.2823,  ...,  0.0044,  0.1747, -0.2460],
        [-0.1237, -0.4881,  0.2285,  ...,  0.0324,  0.0742, -0.0064]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2860])
shifts shape: torch.Size([2860, 3])
sender shape: torch.Size([2860])
receiver shape: torch.Size([2860])
Edge attributes shape: torch.Size([2860, 9])
Edge attributes tensor([[ 1.0000e+00,  1.2360e+00,  9.6828e-01,  ..., -6.9812e-02,
         -9.1403e-01, -6.4106e-01],
        [ 1.0000e+00, -1.6042e-01,  1.7245e+00,  ...,  2.2068e+00,
         -4.8139e-02, -1.6310e-02],
        [ 1.0000e+00,  1.3812e+00, -7.4610e-01,  ..., -4.9566e-01,
          7.0500e-01, -8.8556e-01],
        ...,
        [ 1.0000e+00,  1.3531e+00,  1.0565e+00,  ...,  1.2990e-01,
          3.1417e-01, -1.1475e+00],
        [ 1.0000e+00,  1.3032e+00, -5.3712e-04,  ..., -1.1180e+00,
          7.9114e-04, -2.5599e-01],
        [ 1.0000e+00, -2.1121e-01,  1.7108e+00,  ...,  2.1542e+00,
          3.7388e-01, -1.0297e-02]])
Edge features shape: torch.Size([2860, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0367,  0.1710],
        [ 0.3439,  0.4320,  0.1988,  ..., -0.3551, -0.0183,  0.3321],
        [ 0.3448,  0.4372,  0.2096,  ..., -0.3699, -0.0421,  0.3166],
        ...,
        [ 0.3127,  0.2801, -0.0619,  ...,  0.1219,  0.3477,  0.1895],
        [ 0.3130,  0.2812, -0.0603,  ...,  0.1189,  0.3478,  0.1936],
        [ 0.1136, -0.0906, -0.0413,  ..., -0.0778,  0.1194, -0.0175]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        ...,
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2860, 96])
Tensor Product Weights tensor([[-0.0311, -0.0285,  0.1264,  ..., -0.1236, -0.0605, -0.0809],
        [ 0.0721,  0.1333,  0.1623,  ..., -0.0614, -0.0766, -0.2061],
        [ 0.0750,  0.1413,  0.1584,  ..., -0.0595, -0.0767, -0.2085],
        ...,
        [ 0.0254, -0.0364,  0.1805,  ...,  0.0304, -0.0006, -0.0174],
        [ 0.0254, -0.0358,  0.1812,  ...,  0.0287, -0.0011, -0.0192],
        [ 0.0495, -0.0247,  0.1092,  ..., -0.0028, -0.0059, -0.0226]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.1657, -0.0540,  0.1166,  ...,  0.0669,  0.0138, -0.0805],
        [ 0.1522, -0.0911, -0.2997,  ...,  0.0943,  0.0328, -0.0633],
        [ 0.2101, -0.0152,  0.1654,  ...,  0.0755, -0.0396, -0.0669],
        ...,
        [-0.0218, -0.0409,  0.0497,  ...,  0.0118, -0.0124,  0.0135],
        [-0.0551, -0.0732, -0.0753,  ..., -0.0061,  0.0557,  0.0159],
        [-0.0502, -0.0832,  0.0188,  ...,  0.0077,  0.0146, -0.0537]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.2826, -0.6111, -0.2770,  ..., -0.0214, -0.2416,  0.1366],
        [ 0.0411, -0.3180, -0.0124,  ...,  0.1035,  0.0207, -0.0782],
        [ 0.2257, -0.4915, -0.1106,  ..., -0.2509,  0.0546, -0.0473],
        ...,
        [-0.2111, -0.4198,  0.0984,  ..., -0.1211,  0.0892, -0.1399],
        [ 0.0137, -0.5528,  0.2794,  ...,  0.0040,  0.1761, -0.2460],
        [-0.1222, -0.4872,  0.2288,  ...,  0.0321,  0.0752, -0.0063]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2834])
shifts shape: torch.Size([2834, 3])
sender shape: torch.Size([2834])
receiver shape: torch.Size([2834])
Edge attributes shape: torch.Size([2834, 9])
Edge attributes tensor([[ 1.0000,  1.2516,  0.9572,  ..., -0.0936, -0.8887, -0.6774],
        [ 1.0000, -0.1437,  1.7260,  ...,  2.2125, -0.0459, -0.0130],
        [ 1.0000,  1.3719, -0.7580,  ..., -0.4756,  0.7212, -0.8643],
        ...,
        [ 1.0000,  1.3580,  1.0571,  ...,  0.1314,  0.2670, -1.1657],
        [ 1.0000,  1.2830, -0.0151,  ..., -1.1178,  0.0227, -0.1888],
        [ 1.0000, -0.2064,  1.7129,  ...,  2.1622,  0.3392, -0.0123]])
Edge features shape: torch.Size([2834, 8])
Edge features tensor([[ 0.1673, -0.0650, -0.1421,  ..., -0.1573, -0.0342,  0.1706],
        [ 0.3439,  0.4323,  0.1995,  ..., -0.3561, -0.0199,  0.3311],
        [ 0.3448,  0.4374,  0.2099,  ..., -0.3704, -0.0429,  0.3161],
        ...,
        [ 0.3127,  0.2802, -0.0618,  ...,  0.1216,  0.3477,  0.1899],
        [ 0.3130,  0.2815, -0.0600,  ...,  0.1182,  0.3478,  0.1946],
        [ 0.1134, -0.0906, -0.0410,  ..., -0.0774,  0.1194, -0.0180]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        ...,
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2834, 96])
Tensor Product Weights tensor([[-0.0302, -0.0287,  0.1271,  ..., -0.1229, -0.0603, -0.0811],
        [ 0.0723,  0.1338,  0.1621,  ..., -0.0613, -0.0766, -0.2062],
        [ 0.0751,  0.1415,  0.1582,  ..., -0.0594, -0.0767, -0.2086],
        ...,
        [ 0.0254, -0.0363,  0.1806,  ...,  0.0302, -0.0007, -0.0175],
        [ 0.0254, -0.0357,  0.1814,  ...,  0.0283, -0.0013, -0.0196],
        [ 0.0497, -0.0246,  0.1090,  ..., -0.0025, -0.0057, -0.0223]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.1837, -0.0481,  0.1173,  ...,  0.0676,  0.0158, -0.0869],
        [ 0.1553, -0.1052, -0.2947,  ...,  0.1009,  0.0346, -0.0609],
        [ 0.1343, -0.0269,  0.1639,  ...,  0.0744, -0.0384, -0.0747],
        ...,
        [-0.0216, -0.0407,  0.0500,  ...,  0.0112, -0.0131,  0.0123],
        [-0.0573, -0.0745, -0.0698,  ..., -0.0046,  0.0557,  0.0175],
        [-0.0554, -0.0827,  0.0196,  ...,  0.0077,  0.0137, -0.0522]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.2844, -0.5996, -0.2399,  ..., -0.0626, -0.1773,  0.0876],
        [ 0.0701, -0.3171, -0.0751,  ...,  0.1506, -0.0051, -0.0519],
        [ 0.2246, -0.5131, -0.1535,  ..., -0.1937, -0.0122,  0.1181],
        ...,
        [-0.2116, -0.4188,  0.1001,  ..., -0.1245,  0.0869, -0.1399],
        [ 0.0153, -0.5538,  0.2710,  ...,  0.0012,  0.1731, -0.2418],
        [-0.1250, -0.4919,  0.2309,  ...,  0.0331,  0.0753, -0.0068]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2834])
shifts shape: torch.Size([2834, 3])
sender shape: torch.Size([2834])
receiver shape: torch.Size([2834])
Edge attributes shape: torch.Size([2834, 9])
Edge attributes tensor([[ 1.0000,  1.2414,  0.9723,  ..., -0.0611, -0.8996, -0.6631],
        [ 1.0000, -0.1425,  1.7260,  ...,  2.2128,  0.0512, -0.0128],
        [ 1.0000,  1.3577, -0.7430,  ..., -0.5008,  0.7459, -0.7996],
        ...,
        [ 1.0000,  1.3600,  1.0607,  ...,  0.1399,  0.2176, -1.1777],
        [ 1.0000,  1.2742, -0.0452,  ..., -1.1157,  0.0684, -0.1608],
        [ 1.0000, -0.2037,  1.7164,  ...,  2.1758,  0.2469, -0.0188]])
Edge features shape: torch.Size([2834, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1426,  ..., -0.1571, -0.0356,  0.1708],
        [ 0.3439,  0.4321,  0.1991,  ..., -0.3556, -0.0191,  0.3316],
        [ 0.3449,  0.4374,  0.2100,  ..., -0.3706, -0.0431,  0.3159],
        ...,
        [ 0.3127,  0.2802, -0.0617,  ...,  0.1215,  0.3477,  0.1900],
        [ 0.3130,  0.2814, -0.0601,  ...,  0.1184,  0.3478,  0.1943],
        [ 0.1133, -0.0906, -0.0408,  ..., -0.0771,  0.1194, -0.0185]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        [-0.1925,  0.0710,  0.1190,  ...,  0.3458,  0.7651,  0.1638],
        ...,
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135],
        [ 0.9026, -0.1873,  0.1335,  ..., -0.9204,  0.2641,  0.5135]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2834, 96])
Tensor Product Weights tensor([[-0.0307, -0.0286,  0.1267,  ..., -0.1233, -0.0605, -0.0810],
        [ 0.0722,  0.1336,  0.1622,  ..., -0.0614, -0.0766, -0.2061],
        [ 0.0751,  0.1416,  0.1582,  ..., -0.0594, -0.0767, -0.2086],
        ...,
        [ 0.0254, -0.0363,  0.1806,  ...,  0.0302, -0.0007, -0.0176],
        [ 0.0254, -0.0357,  0.1813,  ...,  0.0284, -0.0012, -0.0195],
        [ 0.0498, -0.0245,  0.1088,  ..., -0.0023, -0.0056, -0.0221]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.1630, -0.0535,  0.1153,  ...,  0.0677,  0.0159, -0.0879],
        [ 0.1549, -0.1030, -0.2973,  ...,  0.0987,  0.0395, -0.0586],
        [ 0.1900, -0.0108,  0.1700,  ...,  0.0779, -0.0429, -0.0675],
        ...,
        [-0.0215, -0.0406,  0.0498,  ...,  0.0105, -0.0135,  0.0121],
        [-0.0567, -0.0742, -0.0724,  ..., -0.0022,  0.0564,  0.0172],
        [-0.0501, -0.0808,  0.0194,  ...,  0.0082,  0.0117, -0.0517]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.2884, -0.6099, -0.2788,  ..., -0.0879, -0.2604,  0.0317],
        [ 0.0548, -0.3151, -0.0482,  ...,  0.1099,  0.0156, -0.0933],
        [ 0.2224, -0.5072, -0.1062,  ..., -0.1526,  0.0331,  0.0984],
        ...,
        [-0.2118, -0.4184,  0.1005,  ..., -0.1257,  0.0830, -0.1409],
        [ 0.0152, -0.5533,  0.2719,  ..., -0.0008,  0.1673, -0.2466],
        [-0.1206, -0.4865,  0.2337,  ...,  0.0320,  0.0757, -0.0104]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
process_conformer_ensemble input shape: torch.Size([16, 110, 32])
Num conformers: 16, Num atoms: 110, Total dim: 32
Scalar dim: 8, Vector dim: 8
mean_pooling:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[-1.1529e-01, -1.9283e-01, -1.4537e-01,  ...,  8.2525e-02,
           6.8528e-02, -1.2664e-01],
         [-1.7300e-02, -9.7546e-02, -4.5703e-02,  ..., -2.8811e-02,
          -1.2784e-01, -4.9050e-02],
         [-9.8339e-02, -1.8071e-01, -9.3669e-02,  ...,  4.5517e-02,
           7.3786e-06, -8.9485e-02],
         ...,
         [ 1.1946e-01, -2.9175e-01,  1.2587e-01,  ..., -2.5516e-01,
           1.1205e-02,  2.9242e-01],
         [ 7.9837e-02, -2.0441e-01,  4.0674e-02,  ..., -2.2984e-01,
          -5.6697e-02,  2.2056e-01],
         [ 9.4263e-02, -2.3324e-01,  6.3209e-02,  ..., -2.3838e-01,
          -4.9087e-02,  2.3668e-01]],

        [[-1.1529e-01, -1.9283e-01, -1.4537e-01,  ...,  8.2525e-02,
           6.8528e-02, -1.2664e-01],
         [-1.7300e-02, -9.7546e-02, -4.5703e-02,  ..., -2.8811e-02,
          -1.2784e-01, -4.9050e-02],
         [-9.8339e-02, -1.8071e-01, -9.3669e-02,  ...,  4.5517e-02,
           7.3786e-06, -8.9485e-02],
         ...,
         [ 1.1946e-01, -2.9175e-01,  1.2587e-01,  ..., -2.5516e-01,
           1.1205e-02,  2.9242e-01],
         [ 7.9837e-02, -2.0441e-01,  4.0674e-02,  ..., -2.2984e-01,
          -5.6697e-02,  2.2056e-01],
         [ 9.4263e-02, -2.3324e-01,  6.3209e-02,  ..., -2.3838e-01,
          -4.9087e-02,  2.3668e-01]],

        [[-1.1529e-01, -1.9283e-01, -1.4537e-01,  ...,  8.2525e-02,
           6.8528e-02, -1.2664e-01],
         [-1.7300e-02, -9.7546e-02, -4.5703e-02,  ..., -2.8811e-02,
          -1.2784e-01, -4.9050e-02],
         [-9.8339e-02, -1.8071e-01, -9.3669e-02,  ...,  4.5517e-02,
           7.3786e-06, -8.9485e-02],
         ...,
         [ 1.1946e-01, -2.9175e-01,  1.2587e-01,  ..., -2.5516e-01,
           1.1205e-02,  2.9242e-01],
         [ 7.9837e-02, -2.0441e-01,  4.0674e-02,  ..., -2.2984e-01,
          -5.6697e-02,  2.2056e-01],
         [ 9.4263e-02, -2.3324e-01,  6.3209e-02,  ..., -2.3838e-01,
          -4.9087e-02,  2.3668e-01]],

        ...,

        [[-1.1529e-01, -1.9283e-01, -1.4537e-01,  ...,  8.2525e-02,
           6.8528e-02, -1.2664e-01],
         [-1.7300e-02, -9.7546e-02, -4.5703e-02,  ..., -2.8811e-02,
          -1.2784e-01, -4.9050e-02],
         [-9.8339e-02, -1.8071e-01, -9.3669e-02,  ...,  4.5517e-02,
           7.3786e-06, -8.9485e-02],
         ...,
         [ 1.1946e-01, -2.9175e-01,  1.2587e-01,  ..., -2.5516e-01,
           1.1205e-02,  2.9242e-01],
         [ 7.9837e-02, -2.0441e-01,  4.0674e-02,  ..., -2.2984e-01,
          -5.6697e-02,  2.2056e-01],
         [ 9.4263e-02, -2.3324e-01,  6.3209e-02,  ..., -2.3838e-01,
          -4.9087e-02,  2.3668e-01]],

        [[-1.1529e-01, -1.9283e-01, -1.4537e-01,  ...,  8.2525e-02,
           6.8528e-02, -1.2664e-01],
         [-1.7300e-02, -9.7546e-02, -4.5703e-02,  ..., -2.8811e-02,
          -1.2784e-01, -4.9050e-02],
         [-9.8339e-02, -1.8071e-01, -9.3669e-02,  ...,  4.5517e-02,
           7.3786e-06, -8.9485e-02],
         ...,
         [ 1.1946e-01, -2.9175e-01,  1.2587e-01,  ..., -2.5516e-01,
           1.1205e-02,  2.9242e-01],
         [ 7.9837e-02, -2.0441e-01,  4.0674e-02,  ..., -2.2984e-01,
          -5.6697e-02,  2.2056e-01],
         [ 9.4263e-02, -2.3324e-01,  6.3209e-02,  ..., -2.3838e-01,
          -4.9087e-02,  2.3668e-01]],

        [[-1.1529e-01, -1.9283e-01, -1.4537e-01,  ...,  8.2525e-02,
           6.8528e-02, -1.2664e-01],
         [-1.7300e-02, -9.7546e-02, -4.5703e-02,  ..., -2.8811e-02,
          -1.2784e-01, -4.9050e-02],
         [-9.8339e-02, -1.8071e-01, -9.3669e-02,  ...,  4.5517e-02,
           7.3786e-06, -8.9485e-02],
         ...,
         [ 1.1946e-01, -2.9175e-01,  1.2587e-01,  ..., -2.5516e-01,
           1.1205e-02,  2.9242e-01],
         [ 7.9837e-02, -2.0441e-01,  4.0674e-02,  ..., -2.2984e-01,
          -5.6697e-02,  2.2056e-01],
         [ 9.4263e-02, -2.3324e-01,  6.3209e-02,  ..., -2.3838e-01,
          -4.9087e-02,  2.3668e-01]]], grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[-3.7628e-03,  2.2036e-01,  1.2502e-04],
          [ 3.7723e-02,  1.6748e-01, -5.3052e-02],
          [ 1.2976e-02,  5.0018e-01, -3.5535e-02],
          ...,
          [-6.1532e-02,  6.4185e-02,  4.4185e-02],
          [-1.9290e-02, -5.3543e-01,  4.6627e-02],
          [ 4.4517e-02,  2.3168e-01, -4.9628e-02]],

         [[ 7.1152e-02, -1.7072e-02, -1.2168e-01],
          [-4.2340e-02,  5.0804e-02,  1.5663e-01],
          [ 1.0618e-02,  4.1943e-02,  4.1917e-02],
          ...,
          [-3.4905e-02, -1.7503e-02,  3.6610e-02],
          [-1.2005e-01, -5.0363e-02,  1.5790e-01],
          [ 8.7165e-03,  9.7022e-02,  1.2542e-01]],

         [[ 7.0310e-03, -1.3078e-01, -1.1251e-01],
          [ 1.5519e-01, -3.8058e-02, -4.8653e-02],
          [ 1.4912e-01, -2.1919e-01, -1.7403e-01],
          ...,
          [-8.7199e-02, -1.0741e-01,  2.0030e-02],
          [-9.3696e-02,  3.7538e-01,  1.7648e-01],
          [ 1.6528e-01, -1.4070e-01, -3.6946e-02]],

         ...,

         [[ 1.0411e-01,  5.5430e-02,  1.8259e-01],
          [ 2.2329e-02, -3.2898e-01, -7.8701e-02],
          [ 1.9240e-02, -2.7415e-01, -7.5665e-02],
          ...,
          [ 6.1855e-02,  2.5671e-01,  9.5072e-02],
          [-2.5409e-01,  2.6673e-01, -2.2026e-01],
          [ 2.6939e-02,  9.1933e-02,  3.8225e-02]],

         [[ 3.2396e-02, -5.5633e-02, -9.3718e-02],
          [-1.1996e-01,  1.1507e-01,  2.3111e-01],
          [-7.1211e-02,  1.2471e-01,  8.9316e-02],
          ...,
          [ 1.0379e-01, -1.6736e-01, -7.7778e-02],
          [ 1.8183e-02, -1.8876e-02, -1.2257e-01],
          [-8.7280e-02, -7.8196e-03, -4.7327e-02]],

         [[-1.3692e-01, -8.3500e-02,  4.3873e-02],
          [ 2.2492e-01,  5.6368e-02, -1.2295e-01],
          [ 2.2652e-01,  1.7781e-02, -6.3707e-02],
          ...,
          [-1.8946e-01, -8.9223e-02,  1.2408e-01],
          [-3.1003e-02,  1.4022e-01,  5.5497e-03],
          [-1.2261e-01,  6.4971e-02, -9.9030e-02]]],


        [[[-3.7628e-03,  2.2036e-01,  1.2502e-04],
          [ 3.7723e-02,  1.6748e-01, -5.3052e-02],
          [ 1.2976e-02,  5.0018e-01, -3.5535e-02],
          ...,
          [-6.1532e-02,  6.4185e-02,  4.4185e-02],
          [-1.9290e-02, -5.3543e-01,  4.6627e-02],
          [ 4.4517e-02,  2.3168e-01, -4.9628e-02]],

         [[ 7.1152e-02, -1.7072e-02, -1.2168e-01],
          [-4.2340e-02,  5.0804e-02,  1.5663e-01],
          [ 1.0618e-02,  4.1943e-02,  4.1917e-02],
          ...,
          [-3.4905e-02, -1.7503e-02,  3.6610e-02],
          [-1.2005e-01, -5.0363e-02,  1.5790e-01],
          [ 8.7165e-03,  9.7022e-02,  1.2542e-01]],

         [[ 7.0310e-03, -1.3078e-01, -1.1251e-01],
          [ 1.5519e-01, -3.8058e-02, -4.8653e-02],
          [ 1.4912e-01, -2.1919e-01, -1.7403e-01],
          ...,
          [-8.7199e-02, -1.0741e-01,  2.0030e-02],
          [-9.3696e-02,  3.7538e-01,  1.7648e-01],
          [ 1.6528e-01, -1.4070e-01, -3.6946e-02]],

         ...,

         [[ 1.0411e-01,  5.5430e-02,  1.8259e-01],
          [ 2.2329e-02, -3.2898e-01, -7.8701e-02],
          [ 1.9240e-02, -2.7415e-01, -7.5665e-02],
          ...,
          [ 6.1855e-02,  2.5671e-01,  9.5072e-02],
          [-2.5409e-01,  2.6673e-01, -2.2026e-01],
          [ 2.6939e-02,  9.1933e-02,  3.8225e-02]],

         [[ 3.2396e-02, -5.5633e-02, -9.3718e-02],
          [-1.1996e-01,  1.1507e-01,  2.3111e-01],
          [-7.1211e-02,  1.2471e-01,  8.9316e-02],
          ...,
          [ 1.0379e-01, -1.6736e-01, -7.7778e-02],
          [ 1.8183e-02, -1.8876e-02, -1.2257e-01],
          [-8.7280e-02, -7.8196e-03, -4.7327e-02]],

         [[-1.3692e-01, -8.3500e-02,  4.3873e-02],
          [ 2.2492e-01,  5.6368e-02, -1.2295e-01],
          [ 2.2652e-01,  1.7781e-02, -6.3707e-02],
          ...,
          [-1.8946e-01, -8.9223e-02,  1.2408e-01],
          [-3.1003e-02,  1.4022e-01,  5.5497e-03],
          [-1.2261e-01,  6.4971e-02, -9.9030e-02]]],


        [[[-3.7628e-03,  2.2036e-01,  1.2502e-04],
          [ 3.7723e-02,  1.6748e-01, -5.3052e-02],
          [ 1.2976e-02,  5.0018e-01, -3.5535e-02],
          ...,
          [-6.1532e-02,  6.4185e-02,  4.4185e-02],
          [-1.9290e-02, -5.3543e-01,  4.6627e-02],
          [ 4.4517e-02,  2.3168e-01, -4.9628e-02]],

         [[ 7.1152e-02, -1.7072e-02, -1.2168e-01],
          [-4.2340e-02,  5.0804e-02,  1.5663e-01],
          [ 1.0618e-02,  4.1943e-02,  4.1917e-02],
          ...,
          [-3.4905e-02, -1.7503e-02,  3.6610e-02],
          [-1.2005e-01, -5.0363e-02,  1.5790e-01],
          [ 8.7165e-03,  9.7022e-02,  1.2542e-01]],

         [[ 7.0310e-03, -1.3078e-01, -1.1251e-01],
          [ 1.5519e-01, -3.8058e-02, -4.8653e-02],
          [ 1.4912e-01, -2.1919e-01, -1.7403e-01],
          ...,
          [-8.7199e-02, -1.0741e-01,  2.0030e-02],
          [-9.3696e-02,  3.7538e-01,  1.7648e-01],
          [ 1.6528e-01, -1.4070e-01, -3.6946e-02]],

         ...,

         [[ 1.0411e-01,  5.5430e-02,  1.8259e-01],
          [ 2.2329e-02, -3.2898e-01, -7.8701e-02],
          [ 1.9240e-02, -2.7415e-01, -7.5665e-02],
          ...,
          [ 6.1855e-02,  2.5671e-01,  9.5072e-02],
          [-2.5409e-01,  2.6673e-01, -2.2026e-01],
          [ 2.6939e-02,  9.1933e-02,  3.8225e-02]],

         [[ 3.2396e-02, -5.5633e-02, -9.3718e-02],
          [-1.1996e-01,  1.1507e-01,  2.3111e-01],
          [-7.1211e-02,  1.2471e-01,  8.9316e-02],
          ...,
          [ 1.0379e-01, -1.6736e-01, -7.7778e-02],
          [ 1.8183e-02, -1.8876e-02, -1.2257e-01],
          [-8.7280e-02, -7.8196e-03, -4.7327e-02]],

         [[-1.3692e-01, -8.3500e-02,  4.3873e-02],
          [ 2.2492e-01,  5.6368e-02, -1.2295e-01],
          [ 2.2652e-01,  1.7781e-02, -6.3707e-02],
          ...,
          [-1.8946e-01, -8.9223e-02,  1.2408e-01],
          [-3.1003e-02,  1.4022e-01,  5.5497e-03],
          [-1.2261e-01,  6.4971e-02, -9.9030e-02]]],


        ...,


        [[[-3.7628e-03,  2.2036e-01,  1.2502e-04],
          [ 3.7723e-02,  1.6748e-01, -5.3052e-02],
          [ 1.2976e-02,  5.0018e-01, -3.5535e-02],
          ...,
          [-6.1532e-02,  6.4185e-02,  4.4185e-02],
          [-1.9290e-02, -5.3543e-01,  4.6627e-02],
          [ 4.4517e-02,  2.3168e-01, -4.9628e-02]],

         [[ 7.1152e-02, -1.7072e-02, -1.2168e-01],
          [-4.2340e-02,  5.0804e-02,  1.5663e-01],
          [ 1.0618e-02,  4.1943e-02,  4.1917e-02],
          ...,
          [-3.4905e-02, -1.7503e-02,  3.6610e-02],
          [-1.2005e-01, -5.0363e-02,  1.5790e-01],
          [ 8.7165e-03,  9.7022e-02,  1.2542e-01]],

         [[ 7.0310e-03, -1.3078e-01, -1.1251e-01],
          [ 1.5519e-01, -3.8058e-02, -4.8653e-02],
          [ 1.4912e-01, -2.1919e-01, -1.7403e-01],
          ...,
          [-8.7199e-02, -1.0741e-01,  2.0030e-02],
          [-9.3696e-02,  3.7538e-01,  1.7648e-01],
          [ 1.6528e-01, -1.4070e-01, -3.6946e-02]],

         ...,

         [[ 1.0411e-01,  5.5430e-02,  1.8259e-01],
          [ 2.2329e-02, -3.2898e-01, -7.8701e-02],
          [ 1.9240e-02, -2.7415e-01, -7.5665e-02],
          ...,
          [ 6.1855e-02,  2.5671e-01,  9.5072e-02],
          [-2.5409e-01,  2.6673e-01, -2.2026e-01],
          [ 2.6939e-02,  9.1933e-02,  3.8225e-02]],

         [[ 3.2396e-02, -5.5633e-02, -9.3718e-02],
          [-1.1996e-01,  1.1507e-01,  2.3111e-01],
          [-7.1211e-02,  1.2471e-01,  8.9316e-02],
          ...,
          [ 1.0379e-01, -1.6736e-01, -7.7778e-02],
          [ 1.8183e-02, -1.8876e-02, -1.2257e-01],
          [-8.7280e-02, -7.8196e-03, -4.7327e-02]],

         [[-1.3692e-01, -8.3500e-02,  4.3873e-02],
          [ 2.2492e-01,  5.6368e-02, -1.2295e-01],
          [ 2.2652e-01,  1.7781e-02, -6.3707e-02],
          ...,
          [-1.8946e-01, -8.9223e-02,  1.2408e-01],
          [-3.1003e-02,  1.4022e-01,  5.5497e-03],
          [-1.2261e-01,  6.4971e-02, -9.9030e-02]]],


        [[[-3.7628e-03,  2.2036e-01,  1.2502e-04],
          [ 3.7723e-02,  1.6748e-01, -5.3052e-02],
          [ 1.2976e-02,  5.0018e-01, -3.5535e-02],
          ...,
          [-6.1532e-02,  6.4185e-02,  4.4185e-02],
          [-1.9290e-02, -5.3543e-01,  4.6627e-02],
          [ 4.4517e-02,  2.3168e-01, -4.9628e-02]],

         [[ 7.1152e-02, -1.7072e-02, -1.2168e-01],
          [-4.2340e-02,  5.0804e-02,  1.5663e-01],
          [ 1.0618e-02,  4.1943e-02,  4.1917e-02],
          ...,
          [-3.4905e-02, -1.7503e-02,  3.6610e-02],
          [-1.2005e-01, -5.0363e-02,  1.5790e-01],
          [ 8.7165e-03,  9.7022e-02,  1.2542e-01]],

         [[ 7.0310e-03, -1.3078e-01, -1.1251e-01],
          [ 1.5519e-01, -3.8058e-02, -4.8653e-02],
          [ 1.4912e-01, -2.1919e-01, -1.7403e-01],
          ...,
          [-8.7199e-02, -1.0741e-01,  2.0030e-02],
          [-9.3696e-02,  3.7538e-01,  1.7648e-01],
          [ 1.6528e-01, -1.4070e-01, -3.6946e-02]],

         ...,

         [[ 1.0411e-01,  5.5430e-02,  1.8259e-01],
          [ 2.2329e-02, -3.2898e-01, -7.8701e-02],
          [ 1.9240e-02, -2.7415e-01, -7.5665e-02],
          ...,
          [ 6.1855e-02,  2.5671e-01,  9.5072e-02],
          [-2.5409e-01,  2.6673e-01, -2.2026e-01],
          [ 2.6939e-02,  9.1933e-02,  3.8225e-02]],

         [[ 3.2396e-02, -5.5633e-02, -9.3718e-02],
          [-1.1996e-01,  1.1507e-01,  2.3111e-01],
          [-7.1211e-02,  1.2471e-01,  8.9316e-02],
          ...,
          [ 1.0379e-01, -1.6736e-01, -7.7778e-02],
          [ 1.8183e-02, -1.8876e-02, -1.2257e-01],
          [-8.7280e-02, -7.8196e-03, -4.7327e-02]],

         [[-1.3692e-01, -8.3500e-02,  4.3873e-02],
          [ 2.2492e-01,  5.6368e-02, -1.2295e-01],
          [ 2.2652e-01,  1.7781e-02, -6.3707e-02],
          ...,
          [-1.8946e-01, -8.9223e-02,  1.2408e-01],
          [-3.1003e-02,  1.4022e-01,  5.5497e-03],
          [-1.2261e-01,  6.4971e-02, -9.9030e-02]]],


        [[[-3.7628e-03,  2.2036e-01,  1.2502e-04],
          [ 3.7723e-02,  1.6748e-01, -5.3052e-02],
          [ 1.2976e-02,  5.0018e-01, -3.5535e-02],
          ...,
          [-6.1532e-02,  6.4185e-02,  4.4185e-02],
          [-1.9290e-02, -5.3543e-01,  4.6627e-02],
          [ 4.4517e-02,  2.3168e-01, -4.9628e-02]],

         [[ 7.1152e-02, -1.7072e-02, -1.2168e-01],
          [-4.2340e-02,  5.0804e-02,  1.5663e-01],
          [ 1.0618e-02,  4.1943e-02,  4.1917e-02],
          ...,
          [-3.4905e-02, -1.7503e-02,  3.6610e-02],
          [-1.2005e-01, -5.0363e-02,  1.5790e-01],
          [ 8.7165e-03,  9.7022e-02,  1.2542e-01]],

         [[ 7.0310e-03, -1.3078e-01, -1.1251e-01],
          [ 1.5519e-01, -3.8058e-02, -4.8653e-02],
          [ 1.4912e-01, -2.1919e-01, -1.7403e-01],
          ...,
          [-8.7199e-02, -1.0741e-01,  2.0030e-02],
          [-9.3696e-02,  3.7538e-01,  1.7648e-01],
          [ 1.6528e-01, -1.4070e-01, -3.6946e-02]],

         ...,

         [[ 1.0411e-01,  5.5430e-02,  1.8259e-01],
          [ 2.2329e-02, -3.2898e-01, -7.8701e-02],
          [ 1.9240e-02, -2.7415e-01, -7.5665e-02],
          ...,
          [ 6.1855e-02,  2.5671e-01,  9.5072e-02],
          [-2.5409e-01,  2.6673e-01, -2.2026e-01],
          [ 2.6939e-02,  9.1933e-02,  3.8225e-02]],

         [[ 3.2396e-02, -5.5633e-02, -9.3718e-02],
          [-1.1996e-01,  1.1507e-01,  2.3111e-01],
          [-7.1211e-02,  1.2471e-01,  8.9316e-02],
          ...,
          [ 1.0379e-01, -1.6736e-01, -7.7778e-02],
          [ 1.8183e-02, -1.8876e-02, -1.2257e-01],
          [-8.7280e-02, -7.8196e-03, -4.7327e-02]],

         [[-1.3692e-01, -8.3500e-02,  4.3873e-02],
          [ 2.2492e-01,  5.6368e-02, -1.2295e-01],
          [ 2.2652e-01,  1.7781e-02, -6.3707e-02],
          ...,
          [-1.8946e-01, -8.9223e-02,  1.2408e-01],
          [-3.1003e-02,  1.4022e-01,  5.5497e-03],
          [-1.2261e-01,  6.4971e-02, -9.9030e-02]]]],
       grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[-1.1529e-01, -1.9283e-01, -1.4537e-01,  1.3322e-02, -1.9837e-01,
          8.2525e-02,  6.8528e-02, -1.2664e-01],
        [-1.7300e-02, -9.7546e-02, -4.5703e-02,  6.8514e-02, -1.7024e-01,
         -2.8811e-02, -1.2784e-01, -4.9050e-02],
        [-9.8339e-02, -1.8071e-01, -9.3669e-02,  4.6202e-02, -2.3382e-01,
          4.5517e-02,  7.3786e-06, -8.9485e-02],
        [ 1.1578e-01, -1.3589e-01, -6.3886e-02,  3.5721e-02, -3.4660e-01,
         -1.3871e-01, -1.2381e-01,  2.6958e-02],
        [ 4.5153e-02, -2.0287e-01, -1.0190e-01, -5.8055e-03, -3.7861e-01,
         -6.1986e-02, -1.7270e-02, -2.7201e-02]], grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[-3.7628e-03,  2.2036e-01,  1.2502e-04],
         [ 3.7723e-02,  1.6748e-01, -5.3052e-02],
         [ 1.2976e-02,  5.0018e-01, -3.5535e-02],
         [ 5.1633e-02, -7.1134e-02, -4.7888e-02],
         [ 1.0648e-01, -4.0686e-02, -6.8898e-02],
         [-6.1532e-02,  6.4185e-02,  4.4185e-02],
         [-1.9290e-02, -5.3543e-01,  4.6627e-02],
         [ 4.4517e-02,  2.3168e-01, -4.9628e-02]],

        [[ 7.1152e-02, -1.7072e-02, -1.2168e-01],
         [-4.2340e-02,  5.0804e-02,  1.5663e-01],
         [ 1.0618e-02,  4.1943e-02,  4.1917e-02],
         [ 4.4227e-02,  8.5547e-02,  6.6975e-03],
         [ 3.0085e-02,  7.6791e-03, -1.1453e-01],
         [-3.4905e-02, -1.7503e-02,  3.6610e-02],
         [-1.2005e-01, -5.0363e-02,  1.5790e-01],
         [ 8.7165e-03,  9.7022e-02,  1.2542e-01]],

        [[ 7.0310e-03, -1.3078e-01, -1.1251e-01],
         [ 1.5519e-01, -3.8058e-02, -4.8653e-02],
         [ 1.4912e-01, -2.1919e-01, -1.7403e-01],
         [ 7.6521e-02,  6.0562e-02,  2.0053e-02],
         [ 9.4884e-02,  8.3805e-02, -4.4533e-02],
         [-8.7199e-02, -1.0741e-01,  2.0030e-02],
         [-9.3696e-02,  3.7538e-01,  1.7648e-01],
         [ 1.6528e-01, -1.4070e-01, -3.6946e-02]],

        [[ 1.0521e-01, -2.0696e-01,  3.0360e-02],
         [-5.6199e-02,  3.6953e-02,  6.4268e-02],
         [ 6.9171e-02, -2.2454e-01,  9.3983e-02],
         [-3.1869e-02, -4.9245e-02, -3.2594e-02],
         [-3.8248e-02, -1.8580e-01,  6.3671e-02],
         [-1.1887e-02,  1.5351e-02, -6.2646e-03],
         [-7.0250e-02,  2.6192e-03, -2.4840e-03],
         [-1.2947e-01,  8.6166e-02,  5.3804e-02]],

        [[ 1.6328e-01,  3.4640e-01, -7.4290e-02],
         [-1.3369e-01, -2.7742e-01,  4.8737e-02],
         [ 2.4317e-02,  2.6247e-02, -3.1767e-02],
         [-1.1654e-01, -2.4069e-01,  5.7859e-02],
         [-3.4840e-02, -5.6161e-02,  2.3561e-02],
         [ 1.1313e-01,  2.4969e-01, -7.9169e-02],
         [-3.9610e-01, -1.0159e+00,  2.7097e-01],
         [-5.5918e-03,  1.0899e-01, -4.2352e-02]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
deep_sets:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[-0.0508,  0.0350, -0.0460,  ..., -0.0074,  0.1501,  0.1694],
         [-0.0506,  0.0342, -0.0468,  ..., -0.0064,  0.1506,  0.1690],
         [-0.0508,  0.0350, -0.0461,  ..., -0.0069,  0.1504,  0.1694],
         ...,
         [-0.0509,  0.0367, -0.0444,  ..., -0.0031,  0.1513,  0.1711],
         [-0.0508,  0.0357, -0.0451,  ..., -0.0041,  0.1510,  0.1701],
         [-0.0508,  0.0360, -0.0449,  ..., -0.0038,  0.1511,  0.1704]],

        [[-0.0508,  0.0350, -0.0460,  ..., -0.0074,  0.1501,  0.1694],
         [-0.0506,  0.0342, -0.0468,  ..., -0.0064,  0.1506,  0.1690],
         [-0.0508,  0.0350, -0.0461,  ..., -0.0069,  0.1504,  0.1694],
         ...,
         [-0.0509,  0.0367, -0.0444,  ..., -0.0031,  0.1513,  0.1711],
         [-0.0508,  0.0357, -0.0451,  ..., -0.0041,  0.1510,  0.1701],
         [-0.0508,  0.0360, -0.0449,  ..., -0.0038,  0.1511,  0.1704]],

        [[-0.0508,  0.0350, -0.0460,  ..., -0.0074,  0.1501,  0.1694],
         [-0.0506,  0.0342, -0.0468,  ..., -0.0064,  0.1506,  0.1690],
         [-0.0508,  0.0350, -0.0461,  ..., -0.0069,  0.1504,  0.1694],
         ...,
         [-0.0509,  0.0367, -0.0444,  ..., -0.0031,  0.1513,  0.1711],
         [-0.0508,  0.0357, -0.0451,  ..., -0.0041,  0.1510,  0.1701],
         [-0.0508,  0.0360, -0.0449,  ..., -0.0038,  0.1511,  0.1704]],

        ...,

        [[-0.0508,  0.0350, -0.0460,  ..., -0.0074,  0.1501,  0.1694],
         [-0.0506,  0.0342, -0.0468,  ..., -0.0064,  0.1506,  0.1690],
         [-0.0508,  0.0350, -0.0461,  ..., -0.0069,  0.1504,  0.1694],
         ...,
         [-0.0509,  0.0367, -0.0444,  ..., -0.0031,  0.1513,  0.1711],
         [-0.0508,  0.0357, -0.0451,  ..., -0.0041,  0.1510,  0.1701],
         [-0.0508,  0.0360, -0.0449,  ..., -0.0038,  0.1511,  0.1704]],

        [[-0.0508,  0.0350, -0.0460,  ..., -0.0074,  0.1501,  0.1694],
         [-0.0506,  0.0342, -0.0468,  ..., -0.0064,  0.1506,  0.1690],
         [-0.0508,  0.0350, -0.0461,  ..., -0.0069,  0.1504,  0.1694],
         ...,
         [-0.0509,  0.0367, -0.0444,  ..., -0.0031,  0.1513,  0.1711],
         [-0.0508,  0.0357, -0.0451,  ..., -0.0041,  0.1510,  0.1701],
         [-0.0508,  0.0360, -0.0449,  ..., -0.0038,  0.1511,  0.1704]],

        [[-0.0508,  0.0350, -0.0460,  ..., -0.0074,  0.1501,  0.1694],
         [-0.0506,  0.0342, -0.0468,  ..., -0.0064,  0.1506,  0.1690],
         [-0.0508,  0.0350, -0.0461,  ..., -0.0069,  0.1504,  0.1694],
         ...,
         [-0.0509,  0.0367, -0.0444,  ..., -0.0031,  0.1513,  0.1711],
         [-0.0508,  0.0357, -0.0451,  ..., -0.0041,  0.1510,  0.1701],
         [-0.0508,  0.0360, -0.0449,  ..., -0.0038,  0.1511,  0.1704]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[-0.0306,  0.0674, -0.0331],
          [-0.0158, -0.0473,  0.0523],
          [ 0.0508, -0.0728, -0.0588],
          ...,
          [-0.0047, -0.0844,  0.0482],
          [ 0.0683, -0.0055, -0.0537],
          [ 0.0669,  0.0271,  0.0258]],

         [[-0.0305,  0.0676, -0.0334],
          [-0.0151, -0.0476,  0.0519],
          [ 0.0508, -0.0729, -0.0591],
          ...,
          [-0.0050, -0.0845,  0.0477],
          [ 0.0685, -0.0047, -0.0543],
          [ 0.0671,  0.0268,  0.0252]],

         [[-0.0295,  0.0673, -0.0336],
          [-0.0146, -0.0481,  0.0495],
          [ 0.0518, -0.0732, -0.0595],
          ...,
          [-0.0043, -0.0853,  0.0474],
          [ 0.0692, -0.0034, -0.0550],
          [ 0.0675,  0.0278,  0.0247]],

         ...,

         [[-0.0308,  0.0684, -0.0331],
          [-0.0155, -0.0476,  0.0530],
          [ 0.0491, -0.0720, -0.0598],
          ...,
          [-0.0053, -0.0836,  0.0480],
          [ 0.0685, -0.0035, -0.0527],
          [ 0.0659,  0.0238,  0.0263]],

         [[-0.0308,  0.0668, -0.0335],
          [-0.0161, -0.0472,  0.0504],
          [ 0.0509, -0.0735, -0.0605],
          ...,
          [-0.0055, -0.0849,  0.0476],
          [ 0.0700, -0.0039, -0.0539],
          [ 0.0666,  0.0266,  0.0245]],

         [[-0.0296,  0.0670, -0.0331],
          [-0.0149, -0.0489,  0.0488],
          [ 0.0512, -0.0726, -0.0596],
          ...,
          [-0.0034, -0.0861,  0.0488],
          [ 0.0684, -0.0026, -0.0546],
          [ 0.0671,  0.0268,  0.0241]]],


        [[[-0.0306,  0.0674, -0.0331],
          [-0.0158, -0.0473,  0.0523],
          [ 0.0508, -0.0728, -0.0588],
          ...,
          [-0.0047, -0.0844,  0.0482],
          [ 0.0683, -0.0055, -0.0537],
          [ 0.0669,  0.0271,  0.0258]],

         [[-0.0305,  0.0676, -0.0334],
          [-0.0151, -0.0476,  0.0519],
          [ 0.0508, -0.0729, -0.0591],
          ...,
          [-0.0050, -0.0845,  0.0477],
          [ 0.0685, -0.0047, -0.0543],
          [ 0.0671,  0.0268,  0.0252]],

         [[-0.0295,  0.0673, -0.0336],
          [-0.0146, -0.0481,  0.0495],
          [ 0.0518, -0.0732, -0.0595],
          ...,
          [-0.0043, -0.0853,  0.0474],
          [ 0.0692, -0.0034, -0.0550],
          [ 0.0675,  0.0278,  0.0247]],

         ...,

         [[-0.0308,  0.0684, -0.0331],
          [-0.0155, -0.0476,  0.0530],
          [ 0.0491, -0.0720, -0.0598],
          ...,
          [-0.0053, -0.0836,  0.0480],
          [ 0.0685, -0.0035, -0.0527],
          [ 0.0659,  0.0238,  0.0263]],

         [[-0.0308,  0.0668, -0.0335],
          [-0.0161, -0.0472,  0.0504],
          [ 0.0509, -0.0735, -0.0605],
          ...,
          [-0.0055, -0.0849,  0.0476],
          [ 0.0700, -0.0039, -0.0539],
          [ 0.0666,  0.0266,  0.0245]],

         [[-0.0296,  0.0670, -0.0331],
          [-0.0149, -0.0489,  0.0488],
          [ 0.0512, -0.0726, -0.0596],
          ...,
          [-0.0034, -0.0861,  0.0488],
          [ 0.0684, -0.0026, -0.0546],
          [ 0.0671,  0.0268,  0.0241]]],


        [[[-0.0306,  0.0674, -0.0331],
          [-0.0158, -0.0473,  0.0523],
          [ 0.0508, -0.0728, -0.0588],
          ...,
          [-0.0047, -0.0844,  0.0482],
          [ 0.0683, -0.0055, -0.0537],
          [ 0.0669,  0.0271,  0.0258]],

         [[-0.0305,  0.0676, -0.0334],
          [-0.0151, -0.0476,  0.0519],
          [ 0.0508, -0.0729, -0.0591],
          ...,
          [-0.0050, -0.0845,  0.0477],
          [ 0.0685, -0.0047, -0.0543],
          [ 0.0671,  0.0268,  0.0252]],

         [[-0.0295,  0.0673, -0.0336],
          [-0.0146, -0.0481,  0.0495],
          [ 0.0518, -0.0732, -0.0595],
          ...,
          [-0.0043, -0.0853,  0.0474],
          [ 0.0692, -0.0034, -0.0550],
          [ 0.0675,  0.0278,  0.0247]],

         ...,

         [[-0.0308,  0.0684, -0.0331],
          [-0.0155, -0.0476,  0.0530],
          [ 0.0491, -0.0720, -0.0598],
          ...,
          [-0.0053, -0.0836,  0.0480],
          [ 0.0685, -0.0035, -0.0527],
          [ 0.0659,  0.0238,  0.0263]],

         [[-0.0308,  0.0668, -0.0335],
          [-0.0161, -0.0472,  0.0504],
          [ 0.0509, -0.0735, -0.0605],
          ...,
          [-0.0055, -0.0849,  0.0476],
          [ 0.0700, -0.0039, -0.0539],
          [ 0.0666,  0.0266,  0.0245]],

         [[-0.0296,  0.0670, -0.0331],
          [-0.0149, -0.0489,  0.0488],
          [ 0.0512, -0.0726, -0.0596],
          ...,
          [-0.0034, -0.0861,  0.0488],
          [ 0.0684, -0.0026, -0.0546],
          [ 0.0671,  0.0268,  0.0241]]],


        ...,


        [[[-0.0306,  0.0674, -0.0331],
          [-0.0158, -0.0473,  0.0523],
          [ 0.0508, -0.0728, -0.0588],
          ...,
          [-0.0047, -0.0844,  0.0482],
          [ 0.0683, -0.0055, -0.0537],
          [ 0.0669,  0.0271,  0.0258]],

         [[-0.0305,  0.0676, -0.0334],
          [-0.0151, -0.0476,  0.0519],
          [ 0.0508, -0.0729, -0.0591],
          ...,
          [-0.0050, -0.0845,  0.0477],
          [ 0.0685, -0.0047, -0.0543],
          [ 0.0671,  0.0268,  0.0252]],

         [[-0.0295,  0.0673, -0.0336],
          [-0.0146, -0.0481,  0.0495],
          [ 0.0518, -0.0732, -0.0595],
          ...,
          [-0.0043, -0.0853,  0.0474],
          [ 0.0692, -0.0034, -0.0550],
          [ 0.0675,  0.0278,  0.0247]],

         ...,

         [[-0.0308,  0.0684, -0.0331],
          [-0.0155, -0.0476,  0.0530],
          [ 0.0491, -0.0720, -0.0598],
          ...,
          [-0.0053, -0.0836,  0.0480],
          [ 0.0685, -0.0035, -0.0527],
          [ 0.0659,  0.0238,  0.0263]],

         [[-0.0308,  0.0668, -0.0335],
          [-0.0161, -0.0472,  0.0504],
          [ 0.0509, -0.0735, -0.0605],
          ...,
          [-0.0055, -0.0849,  0.0476],
          [ 0.0700, -0.0039, -0.0539],
          [ 0.0666,  0.0266,  0.0245]],

         [[-0.0296,  0.0670, -0.0331],
          [-0.0149, -0.0489,  0.0488],
          [ 0.0512, -0.0726, -0.0596],
          ...,
          [-0.0034, -0.0861,  0.0488],
          [ 0.0684, -0.0026, -0.0546],
          [ 0.0671,  0.0268,  0.0241]]],


        [[[-0.0306,  0.0674, -0.0331],
          [-0.0158, -0.0473,  0.0523],
          [ 0.0508, -0.0728, -0.0588],
          ...,
          [-0.0047, -0.0844,  0.0482],
          [ 0.0683, -0.0055, -0.0537],
          [ 0.0669,  0.0271,  0.0258]],

         [[-0.0305,  0.0676, -0.0334],
          [-0.0151, -0.0476,  0.0519],
          [ 0.0508, -0.0729, -0.0591],
          ...,
          [-0.0050, -0.0845,  0.0477],
          [ 0.0685, -0.0047, -0.0543],
          [ 0.0671,  0.0268,  0.0252]],

         [[-0.0295,  0.0673, -0.0336],
          [-0.0146, -0.0481,  0.0495],
          [ 0.0518, -0.0732, -0.0595],
          ...,
          [-0.0043, -0.0853,  0.0474],
          [ 0.0692, -0.0034, -0.0550],
          [ 0.0675,  0.0278,  0.0247]],

         ...,

         [[-0.0308,  0.0684, -0.0331],
          [-0.0155, -0.0476,  0.0530],
          [ 0.0491, -0.0720, -0.0598],
          ...,
          [-0.0053, -0.0836,  0.0480],
          [ 0.0685, -0.0035, -0.0527],
          [ 0.0659,  0.0238,  0.0263]],

         [[-0.0308,  0.0668, -0.0335],
          [-0.0161, -0.0472,  0.0504],
          [ 0.0509, -0.0735, -0.0605],
          ...,
          [-0.0055, -0.0849,  0.0476],
          [ 0.0700, -0.0039, -0.0539],
          [ 0.0666,  0.0266,  0.0245]],

         [[-0.0296,  0.0670, -0.0331],
          [-0.0149, -0.0489,  0.0488],
          [ 0.0512, -0.0726, -0.0596],
          ...,
          [-0.0034, -0.0861,  0.0488],
          [ 0.0684, -0.0026, -0.0546],
          [ 0.0671,  0.0268,  0.0241]]],


        [[[-0.0306,  0.0674, -0.0331],
          [-0.0158, -0.0473,  0.0523],
          [ 0.0508, -0.0728, -0.0588],
          ...,
          [-0.0047, -0.0844,  0.0482],
          [ 0.0683, -0.0055, -0.0537],
          [ 0.0669,  0.0271,  0.0258]],

         [[-0.0305,  0.0676, -0.0334],
          [-0.0151, -0.0476,  0.0519],
          [ 0.0508, -0.0729, -0.0591],
          ...,
          [-0.0050, -0.0845,  0.0477],
          [ 0.0685, -0.0047, -0.0543],
          [ 0.0671,  0.0268,  0.0252]],

         [[-0.0295,  0.0673, -0.0336],
          [-0.0146, -0.0481,  0.0495],
          [ 0.0518, -0.0732, -0.0595],
          ...,
          [-0.0043, -0.0853,  0.0474],
          [ 0.0692, -0.0034, -0.0550],
          [ 0.0675,  0.0278,  0.0247]],

         ...,

         [[-0.0308,  0.0684, -0.0331],
          [-0.0155, -0.0476,  0.0530],
          [ 0.0491, -0.0720, -0.0598],
          ...,
          [-0.0053, -0.0836,  0.0480],
          [ 0.0685, -0.0035, -0.0527],
          [ 0.0659,  0.0238,  0.0263]],

         [[-0.0308,  0.0668, -0.0335],
          [-0.0161, -0.0472,  0.0504],
          [ 0.0509, -0.0735, -0.0605],
          ...,
          [-0.0055, -0.0849,  0.0476],
          [ 0.0700, -0.0039, -0.0539],
          [ 0.0666,  0.0266,  0.0245]],

         [[-0.0296,  0.0670, -0.0331],
          [-0.0149, -0.0489,  0.0488],
          [ 0.0512, -0.0726, -0.0596],
          ...,
          [-0.0034, -0.0861,  0.0488],
          [ 0.0684, -0.0026, -0.0546],
          [ 0.0671,  0.0268,  0.0241]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[-0.0508,  0.0350, -0.0460, -0.0986, -0.0010, -0.0074,  0.1501,  0.1694],
        [-0.0506,  0.0342, -0.0468, -0.0981, -0.0015, -0.0064,  0.1506,  0.1690],
        [-0.0508,  0.0350, -0.0461, -0.0986, -0.0013, -0.0069,  0.1504,  0.1694],
        [-0.0507,  0.0350, -0.0460, -0.0987, -0.0025, -0.0051,  0.1508,  0.1695],
        [-0.0508,  0.0355, -0.0455, -0.0991, -0.0022, -0.0055,  0.1506,  0.1699]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[-0.0306,  0.0674, -0.0331],
         [-0.0158, -0.0473,  0.0523],
         [ 0.0508, -0.0728, -0.0588],
         [ 0.0836,  0.1055, -0.0488],
         [-0.0288, -0.0715,  0.0360],
         [-0.0047, -0.0844,  0.0482],
         [ 0.0683, -0.0055, -0.0537],
         [ 0.0669,  0.0271,  0.0258]],

        [[-0.0305,  0.0676, -0.0334],
         [-0.0151, -0.0476,  0.0519],
         [ 0.0508, -0.0729, -0.0591],
         [ 0.0840,  0.1043, -0.0486],
         [-0.0293, -0.0715,  0.0358],
         [-0.0050, -0.0845,  0.0477],
         [ 0.0685, -0.0047, -0.0543],
         [ 0.0671,  0.0268,  0.0252]],

        [[-0.0295,  0.0673, -0.0336],
         [-0.0146, -0.0481,  0.0495],
         [ 0.0518, -0.0732, -0.0595],
         [ 0.0835,  0.1043, -0.0484],
         [-0.0297, -0.0725,  0.0363],
         [-0.0043, -0.0853,  0.0474],
         [ 0.0692, -0.0034, -0.0550],
         [ 0.0675,  0.0278,  0.0247]],

        [[-0.0303,  0.0680, -0.0333],
         [-0.0149, -0.0476,  0.0523],
         [ 0.0509, -0.0727, -0.0587],
         [ 0.0839,  0.1052, -0.0482],
         [-0.0290, -0.0717,  0.0354],
         [-0.0048, -0.0842,  0.0477],
         [ 0.0685, -0.0046, -0.0541],
         [ 0.0671,  0.0265,  0.0255]],

        [[-0.0315,  0.0698, -0.0328],
         [-0.0165, -0.0455,  0.0592],
         [ 0.0490, -0.0731, -0.0584],
         [ 0.0848,  0.1071, -0.0471],
         [-0.0268, -0.0713,  0.0347],
         [-0.0073, -0.0819,  0.0476],
         [ 0.0675, -0.0095, -0.0513],
         [ 0.0653,  0.0255,  0.0276]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
self_attention:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         ...,
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094]],

        [[ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         ...,
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094]],

        [[ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         ...,
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094]],

        ...,

        [[ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         ...,
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094]],

        [[ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         ...,
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094]],

        [[ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         ...,
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094],
         [ 0.0730, -0.0663,  0.0272,  ..., -0.0955,  0.0602, -0.1094]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2606]],

         [[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         ...,

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2606]],

         [[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]]],


        [[[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2606]],

         [[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         ...,

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2606]],

         [[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]]],


        [[[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2606]],

         [[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         ...,

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2606]],

         [[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]]],


        ...,


        [[[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2606]],

         [[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         ...,

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2606]],

         [[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]]],


        [[[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2606]],

         [[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         ...,

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2606]],

         [[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]]],


        [[[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2606]],

         [[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         ...,

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2606]],

         [[ 0.3547,  0.3522, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]],

         [[ 0.3547,  0.3523, -0.0333],
          [-0.0463,  0.3998, -0.1204],
          [-0.0417,  0.0529,  0.1508],
          ...,
          [-0.1368,  0.0750,  0.1756],
          [-0.0944,  0.0110,  0.1567],
          [-0.1381, -0.1059,  0.2605]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[ 0.0730, -0.0663,  0.0272,  0.2037, -0.2351, -0.0955,  0.0602, -0.1094],
        [ 0.0730, -0.0663,  0.0272,  0.2037, -0.2351, -0.0955,  0.0602, -0.1094],
        [ 0.0730, -0.0663,  0.0272,  0.2037, -0.2351, -0.0955,  0.0602, -0.1094],
        [ 0.0730, -0.0663,  0.0272,  0.2037, -0.2351, -0.0955,  0.0602, -0.1094],
        [ 0.0730, -0.0663,  0.0272,  0.2037, -0.2351, -0.0955,  0.0602, -0.1094]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[ 0.3547,  0.3522, -0.0333],
         [-0.0463,  0.3998, -0.1204],
         [-0.0417,  0.0529,  0.1508],
         [-0.1642, -0.1070, -0.1018],
         [-0.1162, -0.1535,  0.0058],
         [-0.1368,  0.0750,  0.1756],
         [-0.0944,  0.0110,  0.1567],
         [-0.1381, -0.1059,  0.2606]],

        [[ 0.3547,  0.3522, -0.0333],
         [-0.0463,  0.3998, -0.1204],
         [-0.0417,  0.0529,  0.1508],
         [-0.1642, -0.1069, -0.1018],
         [-0.1162, -0.1535,  0.0058],
         [-0.1368,  0.0750,  0.1756],
         [-0.0944,  0.0110,  0.1567],
         [-0.1381, -0.1059,  0.2605]],

        [[ 0.3547,  0.3523, -0.0333],
         [-0.0463,  0.3998, -0.1204],
         [-0.0417,  0.0529,  0.1508],
         [-0.1642, -0.1069, -0.1018],
         [-0.1162, -0.1535,  0.0058],
         [-0.1368,  0.0750,  0.1756],
         [-0.0944,  0.0110,  0.1567],
         [-0.1381, -0.1059,  0.2605]],

        [[ 0.3547,  0.3522, -0.0333],
         [-0.0463,  0.3998, -0.1204],
         [-0.0417,  0.0529,  0.1508],
         [-0.1642, -0.1069, -0.1018],
         [-0.1162, -0.1535,  0.0058],
         [-0.1368,  0.0750,  0.1756],
         [-0.0944,  0.0110,  0.1567],
         [-0.1381, -0.1059,  0.2605]],

        [[ 0.3547,  0.3522, -0.0333],
         [-0.0463,  0.3998, -0.1204],
         [-0.0417,  0.0529,  0.1508],
         [-0.1642, -0.1069, -0.1018],
         [-0.1162, -0.1535,  0.0058],
         [-0.1368,  0.0750,  0.1756],
         [-0.0944,  0.0110,  0.1567],
         [-0.1381, -0.1059,  0.2606]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
==================================================

Batch 3 in Ensemble: 234_vi
Number of conformers in this batch: 16
Unique Atomic Numbers: [6, 1, 8, 15]
Average number of neighbors: 26.13
Processing batch of 16 conformers
Initialized CustomNonLinearReadout with input irreps: 32x0e+32x1o
EQUICATPlusNonLinearReadout(
  (equicat): EQUICAT(
    (model): MACE(
      (node_embedding): LinearNodeEmbeddingBlock(
        (linear): Linear(4x0e -> 32x0e | 128 weights)
      )
      (radial_embedding): RadialEmbeddingBlock(
        (bessel_fn): BesselBasis(r_max=5.0, num_basis=8, trainable=False)
        (cutoff_fn): PolynomialCutoff(p=6.0, r_max=5.0)
      )
      (spherical_harmonics): SphericalHarmonics()
      (atomic_energies_fn): AtomicEnergiesBlock(energies=[0.0000, 0.0000, 0.0000, 0.0000])
      (interactions): ModuleList(
        (0): RealAgnosticResidualInteractionBlock(
          (linear_up): Linear(32x0e -> 32x0e | 1024 weights)
          (conv_tp): TensorProduct(32x0e x 1x0e+1x1o+1x2e -> 32x0e+32x1o+32x2e | 96 paths | 96 weights)
          (conv_tp_weights): FullyConnectedNet[8, 64, 64, 64, 96]
          (linear): Linear(32x0e+32x1o+32x2e -> 32x0e+32x1o+32x2e | 3072 weights)
          (skip_tp): FullyConnectedTensorProduct(32x0e x 4x0e -> 32x0e+32x1o | 4096 paths | 4096 weights)
          (reshape): reshape_irreps()
        )
        (1): RealAgnosticResidualInteractionBlock(
          (linear_up): Linear(32x0e+32x1o -> 32x0e+32x1o | 2048 weights)
          (conv_tp): TensorProduct(32x0e+32x1o x 1x0e+1x1o+1x2e -> 64x0e+96x1o+64x2e | 224 paths | 224 weights)
          (conv_tp_weights): FullyConnectedNet[8, 64, 64, 64, 224]
          (linear): Linear(64x0e+96x1o+64x2e -> 32x0e+32x1o+32x2e | 7168 weights)
          (skip_tp): FullyConnectedTensorProduct(32x0e+32x1o x 4x0e -> 32x0e | 4096 paths | 4096 weights)
          (reshape): reshape_irreps()
        )
      )
      (products): ModuleList(
        (0): EquivariantProductBasisBlock(
          (symmetric_contractions): SymmetricContraction(
            (contractions): ModuleList(
              (0): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x3x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
              (1): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x4x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
            )
          )
          (linear): Linear(32x0e+32x1o -> 32x0e+32x1o | 2048 weights)
        )
        (1): EquivariantProductBasisBlock(
          (symmetric_contractions): SymmetricContraction(
            (contractions): ModuleList(
              (0): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x3x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
            )
          )
          (linear): Linear(32x0e -> 32x0e | 1024 weights)
        )
      )
      (readouts): ModuleList(
        (0): LinearReadoutBlock(
          (linear): Linear(32x0e+32x1o -> 1x0e | 32 weights)
        )
        (1): NonLinearReadoutBlock(
          (linear_1): Linear(32x0e -> 16x0e | 512 weights)
          (non_linearity): Activation [x] (16x0e -> 16x0e)
          (linear_2): Linear(16x0e -> 1x0e | 16 weights)
        )
      )
    )
  )
  (non_linear_readout): CustomNonLinearReadout(
    (linear_1): Linear(32x0e+32x1o -> 16x0e+16x1o | 1024 weights)
    (non_linearity_1): Activation [x ] (16x0e+16x1o -> 16x0e+16x1o)
    (linear_2): Linear(16x0e+16x1o -> 16x0e+16x1o | 512 weights)
    (non_linearity_2): Activation [x ] (16x0e+16x1o -> 16x0e+16x1o)
    (linear_3): Linear(16x0e+16x1o -> 8x0e+8x1o | 256 weights)
  )
)
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2830])
shifts shape: torch.Size([2830, 3])
sender shape: torch.Size([2830])
receiver shape: torch.Size([2830])
Edge attributes shape: torch.Size([2830, 9])
Edge attributes tensor([[ 1.0000,  1.2350,  0.9632,  ..., -0.0809, -0.9197, -0.6314],
        [ 1.0000, -0.1392,  1.7264,  ...,  2.2144,  0.0091, -0.0125],
        [ 1.0000,  1.3454, -0.7528,  ..., -0.4844,  0.7673, -0.7661],
        ...,
        [ 1.0000,  1.2807, -0.0220,  ..., -1.1175,  0.0331, -0.1812],
        [ 1.0000, -0.1976,  1.7139,  ...,  2.1663,  0.3385, -0.0101],
        [ 1.0000,  1.3624,  1.0524,  ...,  0.1203,  0.2590, -1.1746]])
Edge features shape: torch.Size([2830, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1425,  ..., -0.1571, -0.0354,  0.1708],
        [ 0.3439,  0.4322,  0.1992,  ..., -0.3557, -0.0192,  0.3315],
        [ 0.3448,  0.4372,  0.2096,  ..., -0.3700, -0.0422,  0.3165],
        ...,
        [ 0.3130,  0.2813, -0.0602,  ...,  0.1186,  0.3478,  0.1941],
        [ 0.1139, -0.0906, -0.0418,  ..., -0.0787,  0.1194, -0.0163],
        [ 0.3127,  0.2801, -0.0619,  ...,  0.1219,  0.3477,  0.1895]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        ...,
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2830, 96])
Tensor Product Weights tensor([[-0.0829, -0.0225,  0.0415,  ..., -0.1223,  0.0049, -0.1837],
        [ 0.0774,  0.0677, -0.1576,  ...,  0.1184, -0.0909,  0.1648],
        [ 0.0912,  0.0717, -0.1557,  ...,  0.1186, -0.0861,  0.1603],
        ...,
        [-0.1055,  0.1478, -0.1796,  ..., -0.0106, -0.0398,  0.2510],
        [-0.0393,  0.0290,  0.0897,  ..., -0.0747,  0.0084, -0.0931],
        [-0.1053,  0.1491, -0.1796,  ..., -0.0119, -0.0385,  0.2515]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-4.4009e-04, -4.1361e-01, -1.9161e-01,  ..., -2.9028e-01,
          8.8043e-02, -7.0786e-02],
        [-1.7773e-01, -6.8186e-03, -2.3698e-02,  ...,  6.7931e-02,
         -1.5441e-01, -2.2058e-02],
        [-6.7193e-02, -2.9654e-01, -1.6114e-01,  ..., -8.3451e-02,
         -2.1542e-01, -1.6302e-01],
        ...,
        [-5.2806e-01, -2.0624e-01, -2.3388e-02,  ...,  1.7979e-01,
         -4.1625e-01,  8.4166e-02],
        [-5.2773e-01, -1.9939e-01,  5.9974e-02,  ...,  1.6248e-01,
         -6.2406e-02, -1.1189e-02],
        [-5.3400e-01, -2.2613e-01, -4.4183e-02,  ...,  1.0057e-01,
          1.4390e-01, -1.2828e-01]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.5134, -0.1748,  0.2503,  ..., -0.1998, -0.4481,  0.1770],
        [-0.3515, -0.0345,  0.0495,  ...,  0.2847,  0.1190, -0.2215],
        [-0.6649, -0.0851,  0.1474,  ..., -0.3669,  0.1948,  0.1693],
        ...,
        [ 0.7266,  0.1860,  0.0330,  ..., -0.3342,  0.1961, -0.1993],
        [ 0.3476,  0.1183,  0.0277,  ..., -0.2168,  0.2040,  0.0469],
        [ 0.4329,  0.1780,  0.0088,  ..., -0.0731,  0.3915, -0.2277]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2864])
shifts shape: torch.Size([2864, 3])
sender shape: torch.Size([2864])
receiver shape: torch.Size([2864])
Edge attributes shape: torch.Size([2864, 9])
Edge attributes tensor([[ 1.0000,  1.2360,  0.9679,  ..., -0.0707, -0.9143, -0.6405],
        [ 1.0000, -0.1615,  1.7243,  ...,  2.2062, -0.0546, -0.0165],
        [ 1.0000,  1.3827, -0.7462,  ..., -0.4954,  0.7022, -0.8912],
        ...,
        [ 1.0000, -0.1363,  0.0259,  ..., -1.1173,  0.0578,  1.9121],
        [ 1.0000,  0.3316,  0.9407,  ..., -0.1286,  1.7197,  1.2233],
        [ 1.0000, -1.1303,  0.0205,  ..., -1.1176,  0.0348,  0.2869]])
Edge features shape: torch.Size([2864, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0365,  0.1710],
        [ 0.3439,  0.4321,  0.1989,  ..., -0.3553, -0.0187,  0.3318],
        [ 0.3448,  0.4372,  0.2096,  ..., -0.3700, -0.0421,  0.3166],
        ...,
        [ 0.3663,  0.5674,  0.5125,  ..., -0.4770, -0.5771, -0.4168],
        [ 0.3126,  0.2798, -0.0623,  ...,  0.1226,  0.3476,  0.1885],
        [ 0.3131,  0.2818, -0.0595,  ...,  0.1173,  0.3479,  0.1958]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        ...,
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2864, 96])
Tensor Product Weights tensor([[-0.0828, -0.0225,  0.0412,  ..., -0.1225,  0.0051, -0.1836],
        [ 0.0770,  0.0677, -0.1577,  ...,  0.1184, -0.0910,  0.1649],
        [ 0.0911,  0.0716, -0.1557,  ...,  0.1186, -0.0861,  0.1604],
        ...,
        [ 0.4950,  0.2698, -0.1389,  ..., -0.0085,  0.2030, -0.0098],
        [-0.1053,  0.1494, -0.1796,  ..., -0.0122, -0.0382,  0.2516],
        [-0.1056,  0.1473, -0.1796,  ..., -0.0101, -0.0403,  0.2508]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.0141, -0.4136, -0.1919,  ..., -0.2868,  0.0915, -0.0735],
        [-0.2474, -0.0032, -0.0302,  ...,  0.0980, -0.1408,  0.0014],
        [-0.0602, -0.3013, -0.1620,  ..., -0.0820, -0.2076, -0.1793],
        ...,
        [-0.5628, -0.1872, -0.0229,  ..., -0.0426, -0.2849,  0.1325],
        [-0.4172, -0.2678,  0.0849,  ...,  0.0419, -0.2933,  0.1608],
        [-0.5793, -0.1972, -0.0442,  ..., -0.0647,  0.1278, -0.1805]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.5163, -0.1732,  0.2464,  ..., -0.1966, -0.4554,  0.1922],
        [-0.4255, -0.0663,  0.0533,  ...,  0.3233,  0.1036, -0.2224],
        [-0.6562, -0.0825,  0.1484,  ..., -0.3704,  0.1912,  0.1638],
        ...,
        [ 0.7017,  0.2085,  0.0240,  ...,  0.1943, -0.4029,  0.0184],
        [ 0.4972,  0.0797,  0.0017,  ...,  0.1980, -0.2147,  0.0104],
        [ 0.4597,  0.2061,  0.0198,  ...,  0.2372, -0.2618,  0.3256]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2830])
shifts shape: torch.Size([2830, 3])
sender shape: torch.Size([2830])
receiver shape: torch.Size([2830])
Edge attributes shape: torch.Size([2830, 9])
Edge attributes tensor([[ 1.0000,  1.2353,  0.9622,  ..., -0.0830, -0.9198, -0.6311],
        [ 1.0000, -0.1373,  1.7266,  ...,  2.2150,  0.0111, -0.0122],
        [ 1.0000,  1.3430, -0.7537,  ..., -0.4828,  0.7712, -0.7588],
        ...,
        [ 1.0000,  1.1279,  0.9966,  ..., -0.0075, -1.1027, -0.3470],
        [ 1.0000,  1.3643,  1.0502,  ...,  0.1152,  0.2563, -1.1784],
        [ 1.0000,  1.2799, -0.0248,  ..., -1.1173,  0.0374, -0.1786]])
Edge features shape: torch.Size([2830, 8])
Edge features tensor([[ 0.1675, -0.0649, -0.1424,  ..., -0.1572, -0.0350,  0.1707],
        [ 0.3439,  0.4322,  0.1993,  ..., -0.3558, -0.0194,  0.3314],
        [ 0.3448,  0.4372,  0.2096,  ..., -0.3700, -0.0422,  0.3165],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4171],
        [ 0.3127,  0.2800, -0.0619,  ...,  0.1219,  0.3477,  0.1894],
        [ 0.3130,  0.2813, -0.0602,  ...,  0.1187,  0.3478,  0.1939]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        ...,
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2830, 96])
Tensor Product Weights tensor([[-0.0829, -0.0225,  0.0416,  ..., -0.1222,  0.0048, -0.1837],
        [ 0.0775,  0.0678, -0.1576,  ...,  0.1184, -0.0909,  0.1648],
        [ 0.0912,  0.0717, -0.1557,  ...,  0.1186, -0.0861,  0.1603],
        ...,
        [ 0.4951,  0.2699, -0.1389,  ..., -0.0086,  0.2031, -0.0098],
        [-0.1053,  0.1491, -0.1796,  ..., -0.0119, -0.0385,  0.2515],
        [-0.1055,  0.1478, -0.1796,  ..., -0.0107, -0.0398,  0.2510]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-4.1510e-04, -4.1350e-01, -1.9153e-01,  ..., -2.9060e-01,
          8.7738e-02, -7.1167e-02],
        [-1.8203e-01, -4.6760e-03, -2.3439e-02,  ...,  6.6991e-02,
         -1.5498e-01, -2.2694e-02],
        [-6.7345e-02, -2.9621e-01, -1.6108e-01,  ..., -8.4059e-02,
         -2.1522e-01, -1.6252e-01],
        ...,
        [-5.2868e-01, -2.0585e-01, -2.3436e-02,  ...,  1.7984e-01,
         -4.1579e-01,  8.4195e-02],
        [-5.2708e-01, -1.9939e-01,  6.0204e-02,  ...,  1.6092e-01,
         -6.3052e-02, -1.0398e-02],
        [-5.3369e-01, -2.2640e-01, -4.4238e-02,  ...,  1.0101e-01,
          1.4382e-01, -1.2821e-01]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.5133, -0.1751,  0.2502,  ..., -0.2005, -0.4474,  0.1760],
        [-0.3517, -0.0341,  0.0492,  ...,  0.2830,  0.1189, -0.2209],
        [-0.6652, -0.0852,  0.1473,  ..., -0.3666,  0.1954,  0.1693],
        ...,
        [ 0.7267,  0.1865,  0.0330,  ..., -0.3342,  0.1967, -0.1992],
        [ 0.3476,  0.1180,  0.0278,  ..., -0.2165,  0.2043,  0.0472],
        [ 0.4332,  0.1779,  0.0088,  ..., -0.0727,  0.3915, -0.2280]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2836])
shifts shape: torch.Size([2836, 3])
sender shape: torch.Size([2836])
receiver shape: torch.Size([2836])
Edge attributes shape: torch.Size([2836, 9])
Edge attributes tensor([[ 1.0000,  1.2358,  0.9628,  ..., -0.0816, -0.9182, -0.6336],
        [ 1.0000, -0.1388,  1.7265,  ...,  2.2145,  0.0086, -0.0124],
        [ 1.0000,  1.3462, -0.7532,  ..., -0.4837,  0.7660, -0.7692],
        ...,
        [ 1.0000,  1.1308,  1.0030,  ...,  0.0067, -1.0952, -0.3636],
        [ 1.0000,  1.3563,  1.0581,  ...,  0.1336,  0.2766, -1.1609],
        [ 1.0000,  1.2917, -0.0182,  ..., -1.1177,  0.0271, -0.2177]])
Edge features shape: torch.Size([2836, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1425,  ..., -0.1571, -0.0354,  0.1708],
        [ 0.3439,  0.4322,  0.1992,  ..., -0.3557, -0.0193,  0.3315],
        [ 0.3448,  0.4372,  0.2096,  ..., -0.3700, -0.0422,  0.3165],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5772, -0.4171],
        [ 0.3127,  0.2801, -0.0618,  ...,  0.1217,  0.3477,  0.1897],
        [ 0.3130,  0.2814, -0.0601,  ...,  0.1183,  0.3478,  0.1944]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        ...,
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2836, 96])
Tensor Product Weights tensor([[-0.0829, -0.0225,  0.0415,  ..., -0.1223,  0.0049, -0.1837],
        [ 0.0774,  0.0677, -0.1576,  ...,  0.1184, -0.0909,  0.1648],
        [ 0.0911,  0.0716, -0.1557,  ...,  0.1186, -0.0861,  0.1603],
        ...,
        [ 0.4951,  0.2699, -0.1389,  ..., -0.0086,  0.2031, -0.0098],
        [-0.1053,  0.1490, -0.1796,  ..., -0.0119, -0.0386,  0.2514],
        [-0.1055,  0.1477, -0.1796,  ..., -0.0105, -0.0399,  0.2510]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.0006, -0.4136, -0.1916,  ..., -0.2902,  0.0881, -0.0713],
        [-0.1767, -0.0071, -0.0237,  ...,  0.0673, -0.1538, -0.0227],
        [-0.0672, -0.2965, -0.1611,  ..., -0.0836, -0.2151, -0.1638],
        ...,
        [-0.5131, -0.2138, -0.0237,  ...,  0.1802, -0.4204,  0.0837],
        [-0.5316, -0.2030,  0.0579,  ...,  0.1678, -0.0628, -0.0182],
        [-0.5300, -0.2288, -0.0443,  ...,  0.1005,  0.1420, -0.1293]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.5134, -0.1747,  0.2503,  ..., -0.2002, -0.4482,  0.1773],
        [-0.3512, -0.0344,  0.0498,  ...,  0.2857,  0.1191, -0.2215],
        [-0.6649, -0.0851,  0.1475,  ..., -0.3671,  0.1949,  0.1690],
        ...,
        [ 0.7159,  0.1744,  0.0323,  ..., -0.3320,  0.1940, -0.2023],
        [ 0.3495,  0.1183,  0.0282,  ..., -0.2187,  0.2059,  0.0433],
        [ 0.4318,  0.1763,  0.0081,  ..., -0.0724,  0.3906, -0.2286]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2832])
shifts shape: torch.Size([2832, 3])
sender shape: torch.Size([2832])
receiver shape: torch.Size([2832])
Edge attributes shape: torch.Size([2832, 9])
Edge attributes tensor([[ 1.0000e+00,  1.2364e+00,  9.6168e-01,  ..., -8.4041e-02,
         -9.1785e-01, -6.3391e-01],
        [ 1.0000e+00, -1.3729e-01,  1.7266e+00,  ...,  2.2150e+00,
          8.3299e-03, -1.2158e-02],
        [ 1.0000e+00,  1.3442e+00, -7.5429e-01,  ..., -4.8192e-01,
          7.6928e-01, -7.6354e-01],
        ...,
        [ 1.0000e+00,  1.1342e+00,  1.0010e+00,  ...,  2.1506e-03,
         -1.0901e+00, -3.7105e-01],
        [ 1.0000e+00,  1.3574e+00,  1.0561e+00,  ...,  1.2890e-01,
          2.7990e-01, -1.1622e+00],
        [ 1.0000e+00,  1.2942e+00, -2.0535e-02,  ..., -1.1176e+00,
          3.0513e-02, -2.2601e-01]])
Edge features shape: torch.Size([2832, 8])
Edge features tensor([[ 0.1675, -0.0649, -0.1424,  ..., -0.1572, -0.0351,  0.1707],
        [ 0.3439,  0.4322,  0.1993,  ..., -0.3558, -0.0195,  0.3314],
        [ 0.3448,  0.4373,  0.2096,  ..., -0.3701, -0.0422,  0.3165],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4170],
        [ 0.3127,  0.2801, -0.0619,  ...,  0.1218,  0.3477,  0.1897],
        [ 0.3130,  0.2814, -0.0601,  ...,  0.1184,  0.3478,  0.1943]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        ...,
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2832, 96])
Tensor Product Weights tensor([[-0.0829, -0.0225,  0.0416,  ..., -0.1222,  0.0048, -0.1837],
        [ 0.0775,  0.0678, -0.1576,  ...,  0.1184, -0.0909,  0.1648],
        [ 0.0912,  0.0717, -0.1557,  ...,  0.1186, -0.0861,  0.1603],
        ...,
        [ 0.4951,  0.2698, -0.1389,  ..., -0.0085,  0.2031, -0.0098],
        [-0.1053,  0.1490, -0.1796,  ..., -0.0119, -0.0385,  0.2515],
        [-0.1055,  0.1477, -0.1796,  ..., -0.0106, -0.0399,  0.2510]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.0010, -0.4133, -0.1915,  ..., -0.2904,  0.0880, -0.0719],
        [-0.1805, -0.0049, -0.0234,  ...,  0.0660, -0.1541, -0.0232],
        [-0.0671, -0.2966, -0.1611,  ..., -0.0842, -0.2145, -0.1630],
        ...,
        [-0.5133, -0.2137, -0.0236,  ...,  0.1802, -0.4205,  0.0836],
        [-0.5314, -0.2035,  0.0577,  ...,  0.1673, -0.0629, -0.0192],
        [-0.5297, -0.2291, -0.0444,  ...,  0.1008,  0.1418, -0.1293]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.5133, -0.1749,  0.2500,  ..., -0.2008, -0.4475,  0.1766],
        [-0.3511, -0.0337,  0.0498,  ...,  0.2843,  0.1191, -0.2211],
        [-0.6648, -0.0852,  0.1471,  ..., -0.3668,  0.1953,  0.1687],
        ...,
        [ 0.7160,  0.1745,  0.0323,  ..., -0.3313,  0.1945, -0.2030],
        [ 0.3496,  0.1180,  0.0285,  ..., -0.2190,  0.2066,  0.0429],
        [ 0.4321,  0.1762,  0.0081,  ..., -0.0715,  0.3906, -0.2289]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2876])
shifts shape: torch.Size([2876, 3])
sender shape: torch.Size([2876])
receiver shape: torch.Size([2876])
Edge attributes shape: torch.Size([2876, 9])
Edge attributes tensor([[ 1.0000,  1.2553,  0.9700,  ..., -0.0661, -0.8707, -0.7051],
        [ 1.0000, -0.1732,  1.7227,  ...,  2.2001, -0.1048, -0.0179],
        [ 1.0000,  1.4198, -0.7420,  ..., -0.5025,  0.6308, -1.0212],
        ...,
        [ 1.0000,  1.3611,  1.0531,  ...,  0.1218,  0.2663, -1.1712],
        [ 1.0000,  1.2851, -0.0205,  ..., -1.1176,  0.0307, -0.1959],
        [ 1.0000, -0.1962,  1.7143,  ...,  2.1677,  0.3333, -0.0102]])
Edge features shape: torch.Size([2876, 8])
Edge features tensor([[ 0.1677, -0.0647, -0.1427,  ..., -0.1570, -0.0359,  0.1709],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3554, -0.0188,  0.3317],
        [ 0.3449,  0.4374,  0.2100,  ..., -0.3706, -0.0431,  0.3159],
        ...,
        [ 0.3127,  0.2801, -0.0619,  ...,  0.1219,  0.3477,  0.1895],
        [ 0.3130,  0.2811, -0.0605,  ...,  0.1192,  0.3478,  0.1931],
        [ 0.1134, -0.0906, -0.0409,  ..., -0.0772,  0.1194, -0.0182]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        ...,
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2876, 96])
Tensor Product Weights tensor([[-0.0828, -0.0225,  0.0414,  ..., -0.1224,  0.0050, -0.1837],
        [ 0.0771,  0.0677, -0.1577,  ...,  0.1184, -0.0910,  0.1649],
        [ 0.0917,  0.0718, -0.1556,  ...,  0.1186, -0.0859,  0.1602],
        ...,
        [-0.1053,  0.1491, -0.1796,  ..., -0.0119, -0.0385,  0.2515],
        [-0.1055,  0.1480, -0.1796,  ..., -0.0109, -0.0396,  0.2511],
        [-0.0386,  0.0296,  0.0897,  ..., -0.0743,  0.0086, -0.0917]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.0014, -0.4389, -0.1941,  ..., -0.2845,  0.0790, -0.1170],
        [-0.2051,  0.0020, -0.0312,  ...,  0.0971, -0.1379, -0.0211],
        [-0.0503, -0.2608, -0.1485,  ..., -0.0654, -0.1982, -0.2053],
        ...,
        [-0.5253, -0.2084, -0.0235,  ...,  0.1798, -0.4183,  0.0851],
        [-0.5383, -0.2003,  0.0584,  ...,  0.1719, -0.0604, -0.0210],
        [-0.5530, -0.2163, -0.0423,  ...,  0.1020,  0.1416, -0.1284]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.5269, -0.1754,  0.2379,  ..., -0.2126, -0.4424,  0.1699],
        [-0.4005, -0.0483,  0.0714,  ...,  0.3178,  0.1021, -0.2115],
        [-0.6002, -0.0804,  0.2125,  ..., -0.3987,  0.1859,  0.1197],
        ...,
        [ 0.7269,  0.1838,  0.0338,  ..., -0.3334,  0.1949, -0.2002],
        [ 0.3499,  0.1195,  0.0273,  ..., -0.2165,  0.2058,  0.0445],
        [ 0.4345,  0.1822,  0.0119,  ..., -0.0675,  0.3944, -0.2218]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2876])
shifts shape: torch.Size([2876, 3])
sender shape: torch.Size([2876])
receiver shape: torch.Size([2876])
Edge attributes shape: torch.Size([2876, 9])
Edge attributes tensor([[ 1.0000,  1.2557,  0.9696,  ..., -0.0669, -0.8699, -0.7062],
        [ 1.0000, -0.1735,  1.7226,  ...,  2.1997, -0.1086, -0.0179],
        [ 1.0000,  1.4215, -0.7420,  ..., -0.5025,  0.6273, -1.0275],
        ...,
        [ 1.0000,  1.3619,  1.0517,  ...,  0.1186,  0.2683, -1.1721],
        [ 1.0000,  1.2841, -0.0180,  ..., -1.1177,  0.0270, -0.1925],
        [ 1.0000, -0.1953,  1.7139,  ...,  2.1662,  0.3455, -0.0089]])
Edge features shape: torch.Size([2876, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1426,  ..., -0.1571, -0.0356,  0.1708],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3554, -0.0189,  0.3317],
        [ 0.3449,  0.4375,  0.2101,  ..., -0.3706, -0.0432,  0.3158],
        ...,
        [ 0.3127,  0.2801, -0.0619,  ...,  0.1219,  0.3477,  0.1895],
        [ 0.3130,  0.2811, -0.0605,  ...,  0.1191,  0.3478,  0.1933],
        [ 0.1135, -0.0906, -0.0411,  ..., -0.0775,  0.1194, -0.0178]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        ...,
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2876, 96])
Tensor Product Weights tensor([[-0.0829, -0.0225,  0.0415,  ..., -0.1223,  0.0049, -0.1837],
        [ 0.0772,  0.0677, -0.1577,  ...,  0.1184, -0.0910,  0.1649],
        [ 0.0918,  0.0718, -0.1556,  ...,  0.1186, -0.0859,  0.1601],
        ...,
        [-0.1053,  0.1491, -0.1796,  ..., -0.0119, -0.0385,  0.2515],
        [-0.1055,  0.1480, -0.1796,  ..., -0.0108, -0.0396,  0.2511],
        [-0.0387,  0.0295,  0.0897,  ..., -0.0744,  0.0086, -0.0920]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.0019, -0.4390, -0.1941,  ..., -0.2846,  0.0792, -0.1170],
        [-0.2056,  0.0026, -0.0312,  ...,  0.0981, -0.1371, -0.0212],
        [-0.0506, -0.2608, -0.1485,  ..., -0.0658, -0.1976, -0.2065],
        ...,
        [-0.5258, -0.2080, -0.0236,  ...,  0.1821, -0.4171,  0.0839],
        [-0.5374, -0.1997,  0.0591,  ...,  0.1702, -0.0599, -0.0188],
        [-0.5533, -0.2161, -0.0424,  ...,  0.1012,  0.1428, -0.1279]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.5274, -0.1755,  0.2377,  ..., -0.2129, -0.4424,  0.1703],
        [-0.4009, -0.0485,  0.0727,  ...,  0.3188,  0.1016, -0.2119],
        [-0.6002, -0.0805,  0.2121,  ..., -0.3985,  0.1857,  0.1196],
        ...,
        [ 0.7269,  0.1843,  0.0337,  ..., -0.3336,  0.1959, -0.1995],
        [ 0.3501,  0.1196,  0.0271,  ..., -0.2160,  0.2055,  0.0461],
        [ 0.4346,  0.1824,  0.0120,  ..., -0.0675,  0.3953, -0.2208]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2876])
shifts shape: torch.Size([2876, 3])
sender shape: torch.Size([2876])
receiver shape: torch.Size([2876])
Edge attributes shape: torch.Size([2876, 9])
Edge attributes tensor([[ 1.0000,  1.2549,  0.9700,  ..., -0.0660, -0.8714, -0.7040],
        [ 1.0000, -0.1732,  1.7227,  ...,  2.2001, -0.1038, -0.0179],
        [ 1.0000,  1.4190, -0.7420,  ..., -0.5025,  0.6324, -1.0184],
        ...,
        [ 1.0000, -1.2861,  0.0111,  ..., -1.1179,  0.0166, -0.1990],
        [ 1.0000,  0.5503,  1.6018,  ...,  1.7506, -0.7496, -0.1107],
        [ 1.0000, -0.7610,  1.4116,  ...,  1.1098,  1.1925, -0.0974]])
Edge features shape: torch.Size([2876, 8])
Edge features tensor([[ 0.1677, -0.0647, -0.1428,  ..., -0.1570, -0.0360,  0.1709],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3554, -0.0188,  0.3318],
        [ 0.3449,  0.4375,  0.2101,  ..., -0.3706, -0.0432,  0.3159],
        ...,
        [ 0.3130,  0.2812, -0.0603,  ...,  0.1188,  0.3478,  0.1937],
        [ 0.0008, -0.0016,  0.0023,  ..., -0.0032,  0.0031, -0.0028],
        [ 0.0302, -0.0451,  0.0372,  ...,  0.0426, -0.0422,  0.0205]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        ...,
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2876, 96])
Tensor Product Weights tensor([[-8.2838e-02, -2.2491e-02,  4.1368e-02,  ..., -1.2239e-01,
          4.9803e-03, -1.8365e-01],
        [ 7.7124e-02,  6.7673e-02, -1.5767e-01,  ...,  1.1836e-01,
         -9.0995e-02,  1.6489e-01],
        [ 9.1730e-02,  7.1824e-02, -1.5561e-01,  ...,  1.1855e-01,
         -8.5901e-02,  1.6015e-01],
        ...,
        [-1.0548e-01,  1.4787e-01, -1.7958e-01,  ..., -1.0738e-02,
         -3.9717e-02,  2.5103e-01],
        [-1.2421e-03, -1.4117e-05,  5.5716e-04,  ...,  9.4291e-04,
          2.9995e-04, -5.9607e-04],
        [ 2.3255e-02,  1.4443e-02,  2.5384e-02,  ...,  9.8833e-03,
         -5.1357e-03,  2.9054e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.0014, -0.4389, -0.1941,  ..., -0.2847,  0.0791, -0.1167],
        [-0.2044,  0.0009, -0.0313,  ...,  0.0968, -0.1381, -0.0207],
        [-0.0504, -0.2609, -0.1484,  ..., -0.0651, -0.1987, -0.2043],
        ...,
        [-0.5095, -0.2166, -0.0238,  ...,  0.1813, -0.4215,  0.0846],
        [-0.5501, -0.2182, -0.0425,  ...,  0.1003,  0.1418, -0.1291],
        [-0.5407, -0.2019,  0.0573,  ...,  0.1755, -0.0601, -0.0220]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.5270, -0.1754,  0.2380,  ..., -0.2125, -0.4425,  0.1700],
        [-0.4004, -0.0481,  0.0703,  ...,  0.3166,  0.1024, -0.2121],
        [-0.6002, -0.0806,  0.2124,  ..., -0.3988,  0.1857,  0.1198],
        ...,
        [ 0.7158,  0.1720,  0.0329,  ..., -0.3332,  0.1925, -0.1999],
        [ 0.4335,  0.1811,  0.0112,  ..., -0.0694,  0.3942, -0.2219],
        [ 0.3514,  0.1199,  0.0268,  ..., -0.2169,  0.2058,  0.0434]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2902])
shifts shape: torch.Size([2902, 3])
sender shape: torch.Size([2902])
receiver shape: torch.Size([2902])
Edge attributes shape: torch.Size([2902, 9])
Edge attributes tensor([[ 1.0000,  1.3209,  0.9383,  ..., -0.1337, -0.7416, -0.8843],
        [ 1.0000, -0.1219,  1.7271,  ...,  2.2169, -0.1060, -0.0081],
        [ 1.0000,  1.4452, -0.7771,  ..., -0.4428,  0.5563, -1.1498],
        ...,
        [ 1.0000,  1.3181,  0.0709,  ..., -1.1124, -0.1027, -0.3097],
        [ 1.0000, -0.2269,  1.6973,  ...,  2.1030,  0.5694,  0.0103],
        [ 1.0000,  1.3414,  1.0524,  ...,  0.1201,  0.4150, -1.1012]])
Edge features shape: torch.Size([2902, 8])
Edge features tensor([[ 0.1673, -0.0651, -0.1420,  ..., -0.1573, -0.0341,  0.1706],
        [ 0.3439,  0.4321,  0.1991,  ..., -0.3555, -0.0189,  0.3317],
        [ 0.3449,  0.4376,  0.2103,  ..., -0.3710, -0.0438,  0.3154],
        ...,
        [ 0.3130,  0.2813, -0.0602,  ...,  0.1187,  0.3478,  0.1939],
        [ 0.1136, -0.0906, -0.0414,  ..., -0.0780,  0.1194, -0.0172],
        [ 0.3127,  0.2801, -0.0619,  ...,  0.1219,  0.3477,  0.1895]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        ...,
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2902, 96])
Tensor Product Weights tensor([[-0.0830, -0.0225,  0.0419,  ..., -0.1220,  0.0047, -0.1837],
        [ 0.0772,  0.0677, -0.1577,  ...,  0.1184, -0.0910,  0.1649],
        [ 0.0921,  0.0719, -0.1556,  ...,  0.1186, -0.0858,  0.1600],
        ...,
        [-0.1055,  0.1478, -0.1796,  ..., -0.0107, -0.0398,  0.2510],
        [-0.0389,  0.0293,  0.0897,  ..., -0.0745,  0.0085, -0.0924],
        [-0.1053,  0.1491, -0.1796,  ..., -0.0119, -0.0385,  0.2515]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.0310, -0.4420, -0.1948,  ..., -0.2826,  0.0944, -0.1338],
        [-0.1839,  0.0145, -0.0196,  ...,  0.0716, -0.0705, -0.1157],
        [-0.0249, -0.2696, -0.1489,  ..., -0.0748, -0.1986, -0.2448],
        ...,
        [-0.5134, -0.2133, -0.0238,  ...,  0.2278, -0.4019,  0.0528],
        [-0.5091, -0.2317,  0.0569,  ...,  0.1649, -0.0444, -0.0089],
        [-0.5494, -0.2186, -0.0430,  ...,  0.0812,  0.1571, -0.1201]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.5497, -0.1823,  0.2369,  ..., -0.2472, -0.4274,  0.1594],
        [-0.4138, -0.0414,  0.1018,  ...,  0.3542,  0.1034, -0.1761],
        [-0.6022, -0.0818,  0.2262,  ..., -0.4019,  0.2049,  0.0917],
        ...,
        [ 0.7160,  0.1754,  0.0321,  ..., -0.3293,  0.2054, -0.1964],
        [ 0.3758,  0.1069,  0.0147,  ..., -0.2154,  0.1773,  0.0488],
        [ 0.4324,  0.1803,  0.0133,  ..., -0.0672,  0.4074, -0.1994]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2876])
shifts shape: torch.Size([2876, 3])
sender shape: torch.Size([2876])
receiver shape: torch.Size([2876])
Edge attributes shape: torch.Size([2876, 9])
Edge attributes tensor([[ 1.0000,  1.2505,  0.9782,  ..., -0.0481, -0.8744, -0.6999],
        [ 1.0000, -0.1733,  1.7233,  ...,  2.2021, -0.0417, -0.0192],
        [ 1.0000,  1.4110, -0.7463,  ..., -0.4953,  0.6478, -0.9934],
        ...,
        [ 1.0000,  1.3618,  1.0576,  ...,  0.1325,  0.2247, -1.1795],
        [ 1.0000,  1.2698, -0.0330,  ..., -1.1168,  0.0502, -0.1458],
        [ 1.0000, -0.1971,  1.7157,  ...,  2.1731,  0.2925, -0.0138]])
Edge features shape: torch.Size([2876, 8])
Edge features tensor([[ 0.1691, -0.0634, -0.1453,  ..., -0.1558, -0.0427,  0.1718],
        [ 0.3444,  0.4351,  0.2053,  ..., -0.3641, -0.0326,  0.3229],
        [ 0.3449,  0.4378,  0.2108,  ..., -0.3717, -0.0449,  0.3147],
        ...,
        [ 0.3127,  0.2801, -0.0618,  ...,  0.1217,  0.3477,  0.1897],
        [ 0.3130,  0.2811, -0.0605,  ...,  0.1191,  0.3478,  0.1933],
        [ 0.1135, -0.0906, -0.0411,  ..., -0.0775,  0.1194, -0.0179]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        ...,
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2876, 96])
Tensor Product Weights tensor([[-0.0823, -0.0224,  0.0395,  ..., -0.1236,  0.0060, -0.1833],
        [ 0.0854,  0.0700, -0.1565,  ...,  0.1185, -0.0882,  0.1622],
        [ 0.0928,  0.0721, -0.1555,  ...,  0.1185, -0.0855,  0.1598],
        ...,
        [-0.1053,  0.1490, -0.1796,  ..., -0.0119, -0.0385,  0.2514],
        [-0.1055,  0.1480, -0.1796,  ..., -0.0109, -0.0396,  0.2511],
        [-0.0387,  0.0295,  0.0897,  ..., -0.0744,  0.0086, -0.0919]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0189, -0.3900, -0.1879,  ..., -0.2566, -0.0342, -0.2202],
        [-0.2269, -0.0031, -0.0322,  ...,  0.1114, -0.1382, -0.0069],
        [-0.1082, -0.2814, -0.1640,  ..., -0.0804, -0.1170, -0.3676],
        ...,
        [-0.5246, -0.2088, -0.0236,  ...,  0.1707, -0.4202,  0.0917],
        [-0.5369, -0.2001,  0.0589,  ...,  0.1708, -0.0658, -0.0169],
        [-0.5549, -0.2155, -0.0422,  ...,  0.1049,  0.1397, -0.1304]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.4544, -0.2056,  0.3069,  ..., -0.2790, -0.4038,  0.1902],
        [-0.4156, -0.0542,  0.0681,  ...,  0.3290,  0.1023, -0.2242],
        [-0.7139, -0.0915,  0.1613,  ..., -0.3726,  0.1716,  0.1716],
        ...,
        [ 0.7267,  0.1835,  0.0339,  ..., -0.3364,  0.1917, -0.1981],
        [ 0.3505,  0.1202,  0.0253,  ..., -0.2154,  0.2057,  0.0453],
        [ 0.4354,  0.1824,  0.0113,  ..., -0.0703,  0.3918, -0.2256]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2910])
shifts shape: torch.Size([2910, 3])
sender shape: torch.Size([2910])
receiver shape: torch.Size([2910])
Edge attributes shape: torch.Size([2910, 9])
Edge attributes tensor([[ 1.0000,  1.3083,  0.9398,  ..., -0.1306, -0.7722, -0.8434],
        [ 1.0000, -0.1072,  1.7287,  ...,  2.2231, -0.0205, -0.0074],
        [ 1.0000,  1.4119, -0.7783,  ..., -0.4408,  0.6361, -1.0280],
        ...,
        [ 1.0000,  1.3253,  0.0535,  ..., -1.1148, -0.0770, -0.3327],
        [ 1.0000, -0.2152,  1.7005,  ...,  2.1150,  0.5463,  0.0101],
        [ 1.0000,  1.3474,  1.0445,  ...,  0.1017,  0.4126, -1.1114]])
Edge features shape: torch.Size([2910, 8])
Edge features tensor([[ 0.1674, -0.0649, -0.1423,  ..., -0.1572, -0.0347,  0.1707],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3554, -0.0189,  0.3317],
        [ 0.3449,  0.4374,  0.2100,  ..., -0.3705, -0.0431,  0.3159],
        ...,
        [ 0.3130,  0.2811, -0.0605,  ...,  0.1192,  0.3478,  0.1932],
        [ 0.1141, -0.0906, -0.0421,  ..., -0.0793,  0.1193, -0.0155],
        [ 0.3127,  0.2799, -0.0621,  ...,  0.1222,  0.3477,  0.1891]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        ...,
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2910, 96])
Tensor Product Weights tensor([[-0.0829, -0.0225,  0.0417,  ..., -0.1222,  0.0048, -0.1837],
        [ 0.0772,  0.0677, -0.1577,  ...,  0.1184, -0.0910,  0.1649],
        [ 0.0917,  0.0718, -0.1556,  ...,  0.1186, -0.0859,  0.1602],
        ...,
        [-0.1055,  0.1480, -0.1796,  ..., -0.0109, -0.0396,  0.2511],
        [-0.0396,  0.0287,  0.0897,  ..., -0.0749,  0.0084, -0.0937],
        [-0.1053,  0.1492, -0.1796,  ..., -0.0121, -0.0384,  0.2515]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.0306, -0.4198, -0.1927,  ..., -0.2875,  0.1013, -0.0973],
        [-0.2324,  0.0106, -0.0182,  ...,  0.0640, -0.0666, -0.0923],
        [-0.0521, -0.3021, -0.1620,  ..., -0.0846, -0.2067, -0.2268],
        ...,
        [-0.5318, -0.2036, -0.0234,  ...,  0.2216, -0.4001,  0.0537],
        [-0.4949, -0.2187,  0.0593,  ...,  0.1643, -0.0465, -0.0041],
        [-0.5346, -0.2262, -0.0442,  ...,  0.0844,  0.1555, -0.1203]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.5370, -0.1790,  0.2496,  ..., -0.2294, -0.4380,  0.1765],
        [-0.4365, -0.0559,  0.0862,  ...,  0.3684,  0.0998, -0.1816],
        [-0.6637, -0.0844,  0.1589,  ..., -0.3734,  0.2001,  0.1465],
        ...,
        [ 0.7265,  0.1888,  0.0324,  ..., -0.3278,  0.2080, -0.2002],
        [ 0.3548,  0.1038,  0.0179,  ..., -0.2217,  0.1925,  0.0542],
        [ 0.4336,  0.1777,  0.0097,  ..., -0.0678,  0.4044, -0.2068]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2964])
shifts shape: torch.Size([2964, 3])
sender shape: torch.Size([2964])
receiver shape: torch.Size([2964])
Edge attributes shape: torch.Size([2964, 9])
Edge attributes tensor([[ 1.0000,  1.2543,  0.9576,  ..., -0.0929, -0.8827, -0.6864],
        [ 1.0000, -0.1602,  1.7238,  ...,  2.2042, -0.1177, -0.0148],
        [ 1.0000,  1.4055, -0.7556,  ..., -0.4797,  0.6570, -0.9823],
        ...,
        [ 1.0000, -0.4339, -1.3387,  ...,  0.8855, -1.7451,  0.5367],
        [ 1.0000,  1.6719,  0.4524,  ..., -0.8892, -0.0053, -1.8043],
        [ 1.0000,  0.8135,  0.4602,  ..., -0.8813, -0.8663,  0.9455]])
Edge features shape: torch.Size([2964, 8])
Edge features tensor([[ 1.6777e-01, -6.4656e-02, -1.4285e-01,  ..., -1.5698e-01,
         -3.6216e-02,  1.7094e-01],
        [ 3.4389e-01,  4.3211e-01,  1.9907e-01,  ..., -3.5548e-01,
         -1.8954e-02,  3.3167e-01],
        [ 3.4482e-01,  4.3726e-01,  2.0965e-01,  ..., -3.7007e-01,
         -4.2274e-02,  3.1646e-01],
        ...,
        [ 3.1303e-01,  2.8141e-01, -6.0055e-02,  ...,  1.1833e-01,
          3.4783e-01,  1.9436e-01],
        [ 1.1681e-04, -2.3079e-04,  3.3917e-04,  ..., -6.0559e-04,
          6.6764e-04, -7.1352e-04],
        [-9.4614e-11,  1.8923e-10, -2.8373e-10,  ...,  5.6745e-10,
         -6.6241e-10,  7.5691e-10]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        ...,
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2964, 96])
Tensor Product Weights tensor([[-8.2820e-02, -2.2489e-02,  4.1303e-02,  ..., -1.2243e-01,
          5.0143e-03, -1.8364e-01],
        [ 7.7212e-02,  6.7697e-02, -1.5766e-01,  ...,  1.1836e-01,
         -9.0966e-02,  1.6486e-01],
        [ 9.1195e-02,  7.1664e-02, -1.5569e-01,  ...,  1.1855e-01,
         -8.6096e-02,  1.6033e-01],
        ...,
        [-1.0550e-01,  1.4768e-01, -1.7958e-01,  ..., -1.0546e-02,
         -3.9914e-02,  2.5096e-01],
        [-2.2467e-04,  2.6995e-05,  7.5316e-05,  ...,  1.1522e-04,
          8.7570e-05, -1.3830e-04],
        [ 2.0548e-10, -3.9976e-11, -5.9269e-11,  ..., -8.1392e-11,
         -9.6444e-11,  1.3912e-10]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 3.3950e-04, -4.4133e-01, -1.9395e-01,  ..., -2.8258e-01,
          8.6744e-02, -1.0898e-01],
        [-1.9563e-01,  1.1957e-03, -2.9787e-02,  ...,  8.6829e-02,
         -1.3755e-01, -1.5724e-02],
        [-2.0696e-02, -2.7003e-01, -1.5062e-01,  ..., -7.6753e-02,
         -1.9947e-01, -1.9843e-01],
        ...,
        [-5.8059e-01, -1.4715e-01,  1.3256e-01,  ..., -5.1838e-01,
         -2.0589e-01, -5.1605e-02],
        [-5.2052e-01, -2.5306e-01, -3.7213e-02,  ...,  6.6319e-02,
         -5.9796e-03,  4.5324e-02],
        [-5.6645e-01, -1.7143e-01,  7.5249e-02,  ..., -8.6863e-02,
          1.1147e-01, -9.3571e-02]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.5263, -0.1754,  0.2377,  ..., -0.2152, -0.4402,  0.1765],
        [-0.3985, -0.0540,  0.0731,  ...,  0.3042,  0.1101, -0.2241],
        [-0.6066, -0.0885,  0.2239,  ..., -0.3843,  0.2148,  0.1258],
        ...,
        [ 1.2318,  0.2806, -0.0050,  ...,  0.1959, -0.1263,  0.2695],
        [ 0.4122,  0.1536,  0.0143,  ...,  0.4142, -0.0621, -0.0351],
        [ 0.4251,  0.1377, -0.0027,  ...,  0.1967, -0.1763,  0.0846]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2878])
shifts shape: torch.Size([2878, 3])
sender shape: torch.Size([2878])
receiver shape: torch.Size([2878])
Edge attributes shape: torch.Size([2878, 9])
Edge attributes tensor([[ 1.0000,  1.2550,  0.9704,  ..., -0.0652, -0.8709, -0.7048],
        [ 1.0000, -0.1740,  1.7226,  ...,  2.1997, -0.1058, -0.0181],
        [ 1.0000,  1.4211, -0.7413,  ..., -0.5037,  0.6282, -1.0254],
        ...,
        [ 1.0000, -0.0861,  0.0320,  ..., -1.1169,  0.0714,  1.9263],
        [ 1.0000,  0.3753,  0.9444,  ..., -0.1209,  1.7100,  1.1790],
        [ 1.0000, -1.0917,  0.0284,  ..., -1.1171,  0.0494,  0.3973]])
Edge features shape: torch.Size([2878, 8])
Edge features tensor([[ 0.1677, -0.0647, -0.1427,  ..., -0.1571, -0.0358,  0.1709],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3554, -0.0188,  0.3318],
        [ 0.3449,  0.4374,  0.2100,  ..., -0.3706, -0.0431,  0.3159],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4171],
        [ 0.3126,  0.2798, -0.0623,  ...,  0.1227,  0.3476,  0.1884],
        [ 0.3131,  0.2819, -0.0594,  ...,  0.1172,  0.3479,  0.1960]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        ...,
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2878, 96])
Tensor Product Weights tensor([[-0.0829, -0.0225,  0.0414,  ..., -0.1224,  0.0050, -0.1837],
        [ 0.0771,  0.0677, -0.1577,  ...,  0.1184, -0.0910,  0.1649],
        [ 0.0917,  0.0718, -0.1556,  ...,  0.1186, -0.0859,  0.1602],
        ...,
        [ 0.4951,  0.2699, -0.1389,  ..., -0.0086,  0.2031, -0.0098],
        [-0.1053,  0.1494, -0.1796,  ..., -0.0122, -0.0382,  0.2516],
        [-0.1056,  0.1472, -0.1796,  ..., -0.0101, -0.0404,  0.2508]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.0029, -0.4390, -0.1941,  ..., -0.2847,  0.0789, -0.1167],
        [-0.2031,  0.0014, -0.0313,  ...,  0.0984, -0.1369, -0.0200],
        [-0.0504, -0.2609, -0.1484,  ..., -0.0650, -0.1982, -0.2059],
        ...,
        [-0.5627, -0.1872, -0.0229,  ..., -0.0432, -0.2777,  0.1277],
        [-0.4256, -0.2476,  0.0857,  ...,  0.0401, -0.3029,  0.1557],
        [-0.5769, -0.1976, -0.0438,  ..., -0.0635,  0.1306, -0.1831]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.5276, -0.1755,  0.2376,  ..., -0.2132, -0.4425,  0.1704],
        [-0.4002, -0.0479,  0.0727,  ...,  0.3179,  0.1017, -0.2129],
        [-0.6002, -0.0805,  0.2122,  ..., -0.3987,  0.1852,  0.1199],
        ...,
        [ 0.7019,  0.2085,  0.0242,  ...,  0.1938, -0.4034,  0.0140],
        [ 0.4842,  0.0821,  0.0055,  ...,  0.2069, -0.2073,  0.0142],
        [ 0.4606,  0.2070,  0.0177,  ...,  0.2464, -0.2607,  0.3197]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2894])
shifts shape: torch.Size([2894, 3])
sender shape: torch.Size([2894])
receiver shape: torch.Size([2894])
Edge attributes shape: torch.Size([2894, 9])
Edge attributes tensor([[ 1.0000e+00,  1.3117e+00,  9.5203e-01,  ..., -1.0468e-01,
         -7.5084e-01, -8.6964e-01],
        [ 1.0000e+00, -1.1614e-01,  1.7281e+00,  ...,  2.2209e+00,
          2.2383e-02, -8.6420e-03],
        [ 1.0000e+00,  1.4281e+00, -7.6551e-01,  ..., -4.6286e-01,
          6.0475e-01, -1.0748e+00],
        ...,
        [ 1.0000e+00,  1.3436e+00,  1.0581e+00,  ...,  1.3377e-01,
          3.7412e-01, -1.1169e+00],
        [ 1.0000e+00,  1.3143e+00,  4.0693e-02,  ..., -1.1162e+00,
         -5.9228e-02, -2.9450e-01],
        [ 1.0000e+00, -2.2375e-01,  1.7038e+00,  ...,  2.1274e+00,
          4.7751e-01, -1.8943e-03]])
Edge features shape: torch.Size([2894, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1426,  ..., -0.1571, -0.0355,  0.1708],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3553, -0.0187,  0.3318],
        [ 0.3449,  0.4376,  0.2103,  ..., -0.3710, -0.0438,  0.3155],
        ...,
        [ 0.3127,  0.2800, -0.0619,  ...,  0.1219,  0.3477,  0.1895],
        [ 0.3130,  0.2812, -0.0603,  ...,  0.1188,  0.3478,  0.1937],
        [ 0.1136, -0.0906, -0.0413,  ..., -0.0779,  0.1194, -0.0174]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        ...,
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2894, 96])
Tensor Product Weights tensor([[-0.0829, -0.0225,  0.0415,  ..., -0.1223,  0.0049, -0.1837],
        [ 0.0771,  0.0677, -0.1577,  ...,  0.1184, -0.0910,  0.1649],
        [ 0.0921,  0.0719, -0.1556,  ...,  0.1186, -0.0858,  0.1600],
        ...,
        [-0.1053,  0.1491, -0.1796,  ..., -0.0119, -0.0385,  0.2515],
        [-0.1055,  0.1479, -0.1796,  ..., -0.0107, -0.0397,  0.2510],
        [-0.0389,  0.0293,  0.0897,  ..., -0.0745,  0.0085, -0.0923]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.0299, -0.4117, -0.1910,  ..., -0.2907,  0.0153, -0.1741],
        [-0.2202,  0.0066, -0.0204,  ...,  0.0720, -0.0716, -0.0943],
        [-0.0706, -0.2840, -0.1564,  ..., -0.0676, -0.2709, -0.2228],
        ...,
        [-0.5135, -0.2132, -0.0238,  ...,  0.2101, -0.4098,  0.0636],
        [-0.5053, -0.2197,  0.0574,  ...,  0.1708, -0.0493, -0.0094],
        [-0.5289, -0.2283, -0.0440,  ...,  0.0888,  0.1524, -0.1242]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.5369, -0.1847,  0.2572,  ..., -0.2591, -0.4243,  0.1401],
        [-0.4324, -0.0513,  0.0876,  ...,  0.3671,  0.0978, -0.1830],
        [-0.6844, -0.0821,  0.1786,  ..., -0.3881,  0.1934,  0.1578],
        ...,
        [ 0.7161,  0.1754,  0.0322,  ..., -0.3298,  0.2009, -0.2003],
        [ 0.3568,  0.1053,  0.0172,  ..., -0.2198,  0.1937,  0.0502],
        [ 0.4312,  0.1765,  0.0056,  ..., -0.0708,  0.3985, -0.2128]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2896])
shifts shape: torch.Size([2896, 3])
sender shape: torch.Size([2896])
receiver shape: torch.Size([2896])
Edge attributes shape: torch.Size([2896, 9])
Edge attributes tensor([[ 1.0000,  1.2512,  0.9772,  ..., -0.0505, -0.8738, -0.7008],
        [ 1.0000, -0.1817,  1.7220,  ...,  2.1973, -0.0896, -0.0203],
        [ 1.0000,  1.4206, -0.7473,  ..., -0.4936,  0.6278, -1.0293],
        ...,
        [ 1.0000,  1.3546,  1.0638,  ...,  0.1472,  0.2509, -1.1629],
        [ 1.0000,  1.2772, -0.0157,  ..., -1.1178,  0.0237, -0.1696],
        [ 1.0000, -0.2087,  1.7134,  ...,  2.1644,  0.3173, -0.0148]])
Edge features shape: torch.Size([2896, 8])
Edge features tensor([[ 0.1692, -0.0633, -0.1455,  ..., -0.1557, -0.0432,  0.1719],
        [ 0.3445,  0.4355,  0.2060,  ..., -0.3651, -0.0341,  0.3219],
        [ 0.3449,  0.4379,  0.2110,  ..., -0.3719, -0.0453,  0.3144],
        ...,
        [ 0.3128,  0.2802, -0.0617,  ...,  0.1214,  0.3477,  0.1902],
        [ 0.3130,  0.2813, -0.0602,  ...,  0.1187,  0.3478,  0.1939],
        [ 0.1130, -0.0907, -0.0402,  ..., -0.0760,  0.1195, -0.0199]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        ...,
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2896, 96])
Tensor Product Weights tensor([[-0.0822, -0.0224,  0.0394,  ..., -0.1237,  0.0061, -0.1833],
        [ 0.0863,  0.0702, -0.1564,  ...,  0.1185, -0.0878,  0.1619],
        [ 0.0930,  0.0722, -0.1554,  ...,  0.1185, -0.0854,  0.1597],
        ...,
        [-0.1053,  0.1489, -0.1796,  ..., -0.0117, -0.0387,  0.2514],
        [-0.1055,  0.1478, -0.1796,  ..., -0.0107, -0.0398,  0.2510],
        [-0.0379,  0.0301,  0.0898,  ..., -0.0739,  0.0088, -0.0904]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0110, -0.4120, -0.1912,  ..., -0.2579, -0.0436, -0.2323],
        [-0.1820,  0.0048, -0.0316,  ...,  0.1110, -0.1378, -0.0148],
        [-0.0248, -0.2795, -0.1538,  ..., -0.0765, -0.0961, -0.3599],
        ...,
        [-0.5073, -0.2183, -0.0239,  ...,  0.1778, -0.4230,  0.0882],
        [-0.5396, -0.2019,  0.0570,  ...,  0.1771, -0.0607, -0.0217],
        [-0.5529, -0.2176, -0.0421,  ...,  0.1018,  0.1411, -0.1296]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.4658, -0.2050,  0.2895,  ..., -0.2857, -0.4036,  0.1879],
        [-0.3943, -0.0417,  0.0858,  ...,  0.3095,  0.1112, -0.2240],
        [-0.6097, -0.0882,  0.2383,  ..., -0.3960,  0.1832,  0.1264],
        ...,
        [ 0.7156,  0.1705,  0.0332,  ..., -0.3346,  0.1907, -0.1981],
        [ 0.3518,  0.1210,  0.0243,  ..., -0.2152,  0.2056,  0.0433],
        [ 0.4348,  0.1813,  0.0107,  ..., -0.0700,  0.3934, -0.2228]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2852])
shifts shape: torch.Size([2852, 3])
sender shape: torch.Size([2852])
receiver shape: torch.Size([2852])
Edge attributes shape: torch.Size([2852, 9])
Edge attributes tensor([[ 1.0000,  1.2481,  0.9744,  ..., -0.0565, -0.8831, -0.6874],
        [ 1.0000, -0.1539,  1.7252,  ...,  2.2095,  0.0217, -0.0152],
        [ 1.0000,  1.3757, -0.7521,  ..., -0.4855,  0.7147, -0.8719],
        ...,
        [ 1.0000,  1.1027,  0.9741,  ..., -0.0571, -1.1492, -0.2460],
        [ 1.0000,  1.3639,  1.0603,  ...,  0.1388,  0.1706, -1.1908],
        [ 1.0000,  1.2517, -0.0557,  ..., -1.1146,  0.0861, -0.0883]])
Edge features shape: torch.Size([2852, 8])
Edge features tensor([[ 0.1689, -0.0637, -0.1449,  ..., -0.1561, -0.0414,  0.1717],
        [ 0.3445,  0.4352,  0.2054,  ..., -0.3643, -0.0330,  0.3227],
        [ 0.3449,  0.4379,  0.2109,  ..., -0.3718, -0.0451,  0.3145],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5772, -0.4172],
        [ 0.3127,  0.2802, -0.0617,  ...,  0.1215,  0.3477,  0.1900],
        [ 0.3130,  0.2813, -0.0603,  ...,  0.1187,  0.3478,  0.1938]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        [-0.1392, -0.3510,  0.4819,  ..., -0.2750, -0.7671, -0.5366],
        ...,
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307],
        [ 0.3883,  0.3447,  0.0148,  ..., -0.5951, -0.1653,  0.6307]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2852, 96])
Tensor Product Weights tensor([[-0.0824, -0.0224,  0.0398,  ..., -0.1234,  0.0058, -0.1834],
        [ 0.0856,  0.0700, -0.1565,  ...,  0.1185, -0.0881,  0.1621],
        [ 0.0929,  0.0722, -0.1554,  ...,  0.1185, -0.0855,  0.1598],
        ...,
        [ 0.4951,  0.2699, -0.1389,  ..., -0.0086,  0.2032, -0.0098],
        [-0.1053,  0.1489, -0.1796,  ..., -0.0118, -0.0386,  0.2514],
        [-0.1055,  0.1478, -0.1796,  ..., -0.0107, -0.0398,  0.2510]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0334, -0.3918, -0.1877,  ..., -0.2576, -0.0350, -0.2255],
        [-0.1502, -0.0112, -0.0264,  ...,  0.0821, -0.1517, -0.0288],
        [-0.1105, -0.2782, -0.1629,  ..., -0.0850, -0.1293, -0.3557],
        ...,
        [-0.5233, -0.2101, -0.0236,  ...,  0.1569, -0.4232,  0.1016],
        [-0.5383, -0.1984,  0.0584,  ...,  0.1700, -0.0694, -0.0144],
        [-0.5546, -0.2158, -0.0423,  ...,  0.1089,  0.1361, -0.1327]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.4535, -0.2073,  0.3107,  ..., -0.2801, -0.3975,  0.1772],
        [-0.3424, -0.0226,  0.0640,  ...,  0.2909,  0.1180, -0.2244],
        [-0.7208, -0.0929,  0.1629,  ..., -0.3706,  0.1748,  0.1758],
        ...,
        [ 0.7269,  0.1823,  0.0341,  ..., -0.3393,  0.1871, -0.1966],
        [ 0.3487,  0.1200,  0.0256,  ..., -0.2120,  0.2042,  0.0412],
        [ 0.4352,  0.1823,  0.0113,  ..., -0.0734,  0.3875, -0.2321]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
process_conformer_ensemble input shape: torch.Size([16, 110, 32])
Num conformers: 16, Num atoms: 110, Total dim: 32
Scalar dim: 8, Vector dim: 8
mean_pooling:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[-0.5609, -0.0419,  0.2042,  ..., -0.2354,  0.3049,  0.2386],
         [-0.6838, -0.0290,  0.2910,  ..., -0.3590,  0.3752,  0.1226],
         [-0.6636, -0.0342,  0.2925,  ..., -0.2253,  0.4074,  0.2568],
         ...,
         [-0.0464, -0.2362,  0.1283,  ..., -0.0700, -0.5085,  0.0454],
         [ 0.0514, -0.1994,  0.1129,  ..., -0.0493, -0.4307,  0.0273],
         [ 0.0437, -0.2194,  0.1193,  ..., -0.0788, -0.4501,  0.0335]],

        [[-0.5609, -0.0419,  0.2042,  ..., -0.2354,  0.3049,  0.2386],
         [-0.6838, -0.0290,  0.2910,  ..., -0.3590,  0.3752,  0.1226],
         [-0.6636, -0.0342,  0.2925,  ..., -0.2253,  0.4074,  0.2568],
         ...,
         [-0.0464, -0.2362,  0.1283,  ..., -0.0700, -0.5085,  0.0454],
         [ 0.0514, -0.1994,  0.1129,  ..., -0.0493, -0.4307,  0.0273],
         [ 0.0437, -0.2194,  0.1193,  ..., -0.0788, -0.4501,  0.0335]],

        [[-0.5609, -0.0419,  0.2042,  ..., -0.2354,  0.3049,  0.2386],
         [-0.6838, -0.0290,  0.2910,  ..., -0.3590,  0.3752,  0.1226],
         [-0.6636, -0.0342,  0.2925,  ..., -0.2253,  0.4074,  0.2568],
         ...,
         [-0.0464, -0.2362,  0.1283,  ..., -0.0700, -0.5085,  0.0454],
         [ 0.0514, -0.1994,  0.1129,  ..., -0.0493, -0.4307,  0.0273],
         [ 0.0437, -0.2194,  0.1193,  ..., -0.0788, -0.4501,  0.0335]],

        ...,

        [[-0.5609, -0.0419,  0.2042,  ..., -0.2354,  0.3049,  0.2386],
         [-0.6838, -0.0290,  0.2910,  ..., -0.3590,  0.3752,  0.1226],
         [-0.6636, -0.0342,  0.2925,  ..., -0.2253,  0.4074,  0.2568],
         ...,
         [-0.0464, -0.2362,  0.1283,  ..., -0.0700, -0.5085,  0.0454],
         [ 0.0514, -0.1994,  0.1129,  ..., -0.0493, -0.4307,  0.0273],
         [ 0.0437, -0.2194,  0.1193,  ..., -0.0788, -0.4501,  0.0335]],

        [[-0.5609, -0.0419,  0.2042,  ..., -0.2354,  0.3049,  0.2386],
         [-0.6838, -0.0290,  0.2910,  ..., -0.3590,  0.3752,  0.1226],
         [-0.6636, -0.0342,  0.2925,  ..., -0.2253,  0.4074,  0.2568],
         ...,
         [-0.0464, -0.2362,  0.1283,  ..., -0.0700, -0.5085,  0.0454],
         [ 0.0514, -0.1994,  0.1129,  ..., -0.0493, -0.4307,  0.0273],
         [ 0.0437, -0.2194,  0.1193,  ..., -0.0788, -0.4501,  0.0335]],

        [[-0.5609, -0.0419,  0.2042,  ..., -0.2354,  0.3049,  0.2386],
         [-0.6838, -0.0290,  0.2910,  ..., -0.3590,  0.3752,  0.1226],
         [-0.6636, -0.0342,  0.2925,  ..., -0.2253,  0.4074,  0.2568],
         ...,
         [-0.0464, -0.2362,  0.1283,  ..., -0.0700, -0.5085,  0.0454],
         [ 0.0514, -0.1994,  0.1129,  ..., -0.0493, -0.4307,  0.0273],
         [ 0.0437, -0.2194,  0.1193,  ..., -0.0788, -0.4501,  0.0335]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[-0.0951,  0.3678, -0.0327],
          [-0.0094,  0.0527,  0.0168],
          [ 0.1158,  0.5407, -0.0980],
          ...,
          [ 0.0700, -0.2745,  0.0215],
          [ 0.1235, -0.8465,  0.0835],
          [-0.0738, -0.5159,  0.1378]],

         [[-0.0567, -0.1604, -0.0064],
          [-0.0526,  0.0119, -0.0357],
          [-0.3610, -0.1731,  0.2386],
          ...,
          [ 0.1019,  0.1067,  0.0827],
          [ 0.1321,  0.3679, -0.2599],
          [ 0.0617,  0.0609, -0.1191]],

         [[ 0.0283, -0.1189, -0.1129],
          [-0.0051,  0.0278, -0.0156],
          [ 0.2995, -0.2977, -0.1357],
          ...,
          [-0.0068, -0.0328,  0.1113],
          [-0.1433,  0.5552,  0.1680],
          [-0.2844,  0.2396,  0.1614]],

         ...,

         [[-0.0037,  0.1228,  0.0629],
          [-0.1087, -0.0307, -0.1751],
          [ 0.0842,  0.0308,  0.0156],
          ...,
          [-0.0134, -0.0971,  0.0185],
          [-0.0827, -0.0378, -0.3244],
          [-0.0400,  0.0328, -0.0331]],

         [[ 0.0278, -0.0884, -0.1254],
          [-0.0396,  0.1042,  0.0933],
          [ 0.0475, -0.0646, -0.0341],
          ...,
          [-0.0373,  0.0352,  0.0859],
          [-0.0136,  0.1820,  0.1715],
          [-0.0852,  0.1110,  0.0410]],

         [[-0.1308, -0.0073,  0.0141],
          [ 0.1051,  0.1113, -0.0446],
          [-0.0079, -0.0754,  0.0285],
          ...,
          [ 0.0584,  0.0082, -0.0079],
          [ 0.2072,  0.1191, -0.0495],
          [ 0.0057,  0.1140, -0.0653]]],


        [[[-0.0951,  0.3678, -0.0327],
          [-0.0094,  0.0527,  0.0168],
          [ 0.1158,  0.5407, -0.0980],
          ...,
          [ 0.0700, -0.2745,  0.0215],
          [ 0.1235, -0.8465,  0.0835],
          [-0.0738, -0.5159,  0.1378]],

         [[-0.0567, -0.1604, -0.0064],
          [-0.0526,  0.0119, -0.0357],
          [-0.3610, -0.1731,  0.2386],
          ...,
          [ 0.1019,  0.1067,  0.0827],
          [ 0.1321,  0.3679, -0.2599],
          [ 0.0617,  0.0609, -0.1191]],

         [[ 0.0283, -0.1189, -0.1129],
          [-0.0051,  0.0278, -0.0156],
          [ 0.2995, -0.2977, -0.1357],
          ...,
          [-0.0068, -0.0328,  0.1113],
          [-0.1433,  0.5552,  0.1680],
          [-0.2844,  0.2396,  0.1614]],

         ...,

         [[-0.0037,  0.1228,  0.0629],
          [-0.1087, -0.0307, -0.1751],
          [ 0.0842,  0.0308,  0.0156],
          ...,
          [-0.0134, -0.0971,  0.0185],
          [-0.0827, -0.0378, -0.3244],
          [-0.0400,  0.0328, -0.0331]],

         [[ 0.0278, -0.0884, -0.1254],
          [-0.0396,  0.1042,  0.0933],
          [ 0.0475, -0.0646, -0.0341],
          ...,
          [-0.0373,  0.0352,  0.0859],
          [-0.0136,  0.1820,  0.1715],
          [-0.0852,  0.1110,  0.0410]],

         [[-0.1308, -0.0073,  0.0141],
          [ 0.1051,  0.1113, -0.0446],
          [-0.0079, -0.0754,  0.0285],
          ...,
          [ 0.0584,  0.0082, -0.0079],
          [ 0.2072,  0.1191, -0.0495],
          [ 0.0057,  0.1140, -0.0653]]],


        [[[-0.0951,  0.3678, -0.0327],
          [-0.0094,  0.0527,  0.0168],
          [ 0.1158,  0.5407, -0.0980],
          ...,
          [ 0.0700, -0.2745,  0.0215],
          [ 0.1235, -0.8465,  0.0835],
          [-0.0738, -0.5159,  0.1378]],

         [[-0.0567, -0.1604, -0.0064],
          [-0.0526,  0.0119, -0.0357],
          [-0.3610, -0.1731,  0.2386],
          ...,
          [ 0.1019,  0.1067,  0.0827],
          [ 0.1321,  0.3679, -0.2599],
          [ 0.0617,  0.0609, -0.1191]],

         [[ 0.0283, -0.1189, -0.1129],
          [-0.0051,  0.0278, -0.0156],
          [ 0.2995, -0.2977, -0.1357],
          ...,
          [-0.0068, -0.0328,  0.1113],
          [-0.1433,  0.5552,  0.1680],
          [-0.2844,  0.2396,  0.1614]],

         ...,

         [[-0.0037,  0.1228,  0.0629],
          [-0.1087, -0.0307, -0.1751],
          [ 0.0842,  0.0308,  0.0156],
          ...,
          [-0.0134, -0.0971,  0.0185],
          [-0.0827, -0.0378, -0.3244],
          [-0.0400,  0.0328, -0.0331]],

         [[ 0.0278, -0.0884, -0.1254],
          [-0.0396,  0.1042,  0.0933],
          [ 0.0475, -0.0646, -0.0341],
          ...,
          [-0.0373,  0.0352,  0.0859],
          [-0.0136,  0.1820,  0.1715],
          [-0.0852,  0.1110,  0.0410]],

         [[-0.1308, -0.0073,  0.0141],
          [ 0.1051,  0.1113, -0.0446],
          [-0.0079, -0.0754,  0.0285],
          ...,
          [ 0.0584,  0.0082, -0.0079],
          [ 0.2072,  0.1191, -0.0495],
          [ 0.0057,  0.1140, -0.0653]]],


        ...,


        [[[-0.0951,  0.3678, -0.0327],
          [-0.0094,  0.0527,  0.0168],
          [ 0.1158,  0.5407, -0.0980],
          ...,
          [ 0.0700, -0.2745,  0.0215],
          [ 0.1235, -0.8465,  0.0835],
          [-0.0738, -0.5159,  0.1378]],

         [[-0.0567, -0.1604, -0.0064],
          [-0.0526,  0.0119, -0.0357],
          [-0.3610, -0.1731,  0.2386],
          ...,
          [ 0.1019,  0.1067,  0.0827],
          [ 0.1321,  0.3679, -0.2599],
          [ 0.0617,  0.0609, -0.1191]],

         [[ 0.0283, -0.1189, -0.1129],
          [-0.0051,  0.0278, -0.0156],
          [ 0.2995, -0.2977, -0.1357],
          ...,
          [-0.0068, -0.0328,  0.1113],
          [-0.1433,  0.5552,  0.1680],
          [-0.2844,  0.2396,  0.1614]],

         ...,

         [[-0.0037,  0.1228,  0.0629],
          [-0.1087, -0.0307, -0.1751],
          [ 0.0842,  0.0308,  0.0156],
          ...,
          [-0.0134, -0.0971,  0.0185],
          [-0.0827, -0.0378, -0.3244],
          [-0.0400,  0.0328, -0.0331]],

         [[ 0.0278, -0.0884, -0.1254],
          [-0.0396,  0.1042,  0.0933],
          [ 0.0475, -0.0646, -0.0341],
          ...,
          [-0.0373,  0.0352,  0.0859],
          [-0.0136,  0.1820,  0.1715],
          [-0.0852,  0.1110,  0.0410]],

         [[-0.1308, -0.0073,  0.0141],
          [ 0.1051,  0.1113, -0.0446],
          [-0.0079, -0.0754,  0.0285],
          ...,
          [ 0.0584,  0.0082, -0.0079],
          [ 0.2072,  0.1191, -0.0495],
          [ 0.0057,  0.1140, -0.0653]]],


        [[[-0.0951,  0.3678, -0.0327],
          [-0.0094,  0.0527,  0.0168],
          [ 0.1158,  0.5407, -0.0980],
          ...,
          [ 0.0700, -0.2745,  0.0215],
          [ 0.1235, -0.8465,  0.0835],
          [-0.0738, -0.5159,  0.1378]],

         [[-0.0567, -0.1604, -0.0064],
          [-0.0526,  0.0119, -0.0357],
          [-0.3610, -0.1731,  0.2386],
          ...,
          [ 0.1019,  0.1067,  0.0827],
          [ 0.1321,  0.3679, -0.2599],
          [ 0.0617,  0.0609, -0.1191]],

         [[ 0.0283, -0.1189, -0.1129],
          [-0.0051,  0.0278, -0.0156],
          [ 0.2995, -0.2977, -0.1357],
          ...,
          [-0.0068, -0.0328,  0.1113],
          [-0.1433,  0.5552,  0.1680],
          [-0.2844,  0.2396,  0.1614]],

         ...,

         [[-0.0037,  0.1228,  0.0629],
          [-0.1087, -0.0307, -0.1751],
          [ 0.0842,  0.0308,  0.0156],
          ...,
          [-0.0134, -0.0971,  0.0185],
          [-0.0827, -0.0378, -0.3244],
          [-0.0400,  0.0328, -0.0331]],

         [[ 0.0278, -0.0884, -0.1254],
          [-0.0396,  0.1042,  0.0933],
          [ 0.0475, -0.0646, -0.0341],
          ...,
          [-0.0373,  0.0352,  0.0859],
          [-0.0136,  0.1820,  0.1715],
          [-0.0852,  0.1110,  0.0410]],

         [[-0.1308, -0.0073,  0.0141],
          [ 0.1051,  0.1113, -0.0446],
          [-0.0079, -0.0754,  0.0285],
          ...,
          [ 0.0584,  0.0082, -0.0079],
          [ 0.2072,  0.1191, -0.0495],
          [ 0.0057,  0.1140, -0.0653]]],


        [[[-0.0951,  0.3678, -0.0327],
          [-0.0094,  0.0527,  0.0168],
          [ 0.1158,  0.5407, -0.0980],
          ...,
          [ 0.0700, -0.2745,  0.0215],
          [ 0.1235, -0.8465,  0.0835],
          [-0.0738, -0.5159,  0.1378]],

         [[-0.0567, -0.1604, -0.0064],
          [-0.0526,  0.0119, -0.0357],
          [-0.3610, -0.1731,  0.2386],
          ...,
          [ 0.1019,  0.1067,  0.0827],
          [ 0.1321,  0.3679, -0.2599],
          [ 0.0617,  0.0609, -0.1191]],

         [[ 0.0283, -0.1189, -0.1129],
          [-0.0051,  0.0278, -0.0156],
          [ 0.2995, -0.2977, -0.1357],
          ...,
          [-0.0068, -0.0328,  0.1113],
          [-0.1433,  0.5552,  0.1680],
          [-0.2844,  0.2396,  0.1614]],

         ...,

         [[-0.0037,  0.1228,  0.0629],
          [-0.1087, -0.0307, -0.1751],
          [ 0.0842,  0.0308,  0.0156],
          ...,
          [-0.0134, -0.0971,  0.0185],
          [-0.0827, -0.0378, -0.3244],
          [-0.0400,  0.0328, -0.0331]],

         [[ 0.0278, -0.0884, -0.1254],
          [-0.0396,  0.1042,  0.0933],
          [ 0.0475, -0.0646, -0.0341],
          ...,
          [-0.0373,  0.0352,  0.0859],
          [-0.0136,  0.1820,  0.1715],
          [-0.0852,  0.1110,  0.0410]],

         [[-0.1308, -0.0073,  0.0141],
          [ 0.1051,  0.1113, -0.0446],
          [-0.0079, -0.0754,  0.0285],
          ...,
          [ 0.0584,  0.0082, -0.0079],
          [ 0.2072,  0.1191, -0.0495],
          [ 0.0057,  0.1140, -0.0653]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[-0.5609, -0.0419,  0.2042,  0.1571,  0.4895, -0.2354,  0.3049,  0.2386],
        [-0.6838, -0.0290,  0.2910,  0.1545,  0.4663, -0.3590,  0.3752,  0.1226],
        [-0.6636, -0.0342,  0.2925,  0.1680,  0.5884, -0.2253,  0.4074,  0.2568],
        [-1.0336, -0.0853,  0.2734,  0.2098,  0.4063, -0.3794,  0.5654,  0.2929],
        [-0.8675, -0.0223,  0.4080,  0.2725,  0.5690, -0.3372,  0.4775,  0.2941]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[-9.5094e-02,  3.6782e-01, -3.2723e-02],
         [-9.3740e-03,  5.2656e-02,  1.6791e-02],
         [ 1.1576e-01,  5.4071e-01, -9.8042e-02],
         [-5.2068e-02,  9.5981e-01, -1.6618e-01],
         [-5.9726e-02,  6.5358e-02, -2.2442e-02],
         [ 6.9986e-02, -2.7451e-01,  2.1539e-02],
         [ 1.2355e-01, -8.4652e-01,  8.3491e-02],
         [-7.3756e-02, -5.1585e-01,  1.3778e-01]],

        [[-5.6661e-02, -1.6042e-01, -6.3686e-03],
         [-5.2610e-02,  1.1905e-02, -3.5655e-02],
         [-3.6104e-01, -1.7314e-01,  2.3860e-01],
         [-7.4416e-02, -2.9144e-01,  2.5715e-01],
         [ 1.2092e-01,  8.8901e-04, -8.5851e-02],
         [ 1.0189e-01,  1.0674e-01,  8.2661e-02],
         [ 1.3208e-01,  3.6789e-01, -2.5993e-01],
         [ 6.1673e-02,  6.0912e-02, -1.1915e-01]],

        [[ 2.8282e-02, -1.1894e-01, -1.1287e-01],
         [-5.1430e-03,  2.7793e-02, -1.5610e-02],
         [ 2.9951e-01, -2.9768e-01, -1.3566e-01],
         [ 3.0645e-01, -5.5752e-01, -2.5823e-01],
         [-3.1843e-02,  3.5946e-02, -4.3919e-02],
         [-6.7626e-03, -3.2752e-02,  1.1135e-01],
         [-1.4333e-01,  5.5515e-01,  1.6800e-01],
         [-2.8436e-01,  2.3958e-01,  1.6139e-01]],

        [[-2.1400e-03,  3.7922e-02,  2.1700e-01],
         [ 8.2536e-02,  1.1235e-02, -3.6023e-02],
         [ 1.3856e-02,  4.0318e-01, -4.9518e-02],
         [-1.2628e-01,  4.7556e-02,  3.2856e-01],
         [-5.2260e-03, -1.9433e-01,  1.4573e-01],
         [-8.5072e-02, -3.2609e-02, -1.7148e-01],
         [ 1.6932e-01, -1.8564e-01, -3.3966e-01],
         [ 1.8377e-02,  6.5170e-02, -4.7622e-02]],

        [[ 7.0421e-02,  5.4935e-02,  3.4566e-02],
         [ 3.0645e-02, -5.6709e-02, -2.4348e-02],
         [-1.2353e-01,  3.7808e-02,  5.1004e-02],
         [-1.3885e-03,  2.6968e-01,  1.4906e-01],
         [ 7.8995e-02,  5.6844e-03, -1.6868e-03],
         [-9.0429e-02,  6.1018e-02,  9.8504e-03],
         [-1.3522e-02, -2.2416e-01, -1.4142e-01],
         [ 2.4126e-02, -1.5644e-01, -5.5084e-02]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
deep_sets:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[ 0.0411, -0.0826,  0.1144,  ..., -0.1492, -0.1408, -0.0308],
         [ 0.0417, -0.0828,  0.1139,  ..., -0.1495, -0.1406, -0.0314],
         [ 0.0414, -0.0830,  0.1145,  ..., -0.1496, -0.1408, -0.0309],
         ...,
         [ 0.0381, -0.0817,  0.1156,  ..., -0.1485, -0.1417, -0.0290],
         [ 0.0382, -0.0817,  0.1163,  ..., -0.1486, -0.1415, -0.0284],
         [ 0.0383, -0.0815,  0.1162,  ..., -0.1486, -0.1414, -0.0286]],

        [[ 0.0411, -0.0826,  0.1144,  ..., -0.1492, -0.1408, -0.0308],
         [ 0.0417, -0.0828,  0.1139,  ..., -0.1495, -0.1406, -0.0314],
         [ 0.0414, -0.0830,  0.1145,  ..., -0.1496, -0.1408, -0.0309],
         ...,
         [ 0.0381, -0.0817,  0.1156,  ..., -0.1485, -0.1417, -0.0290],
         [ 0.0382, -0.0817,  0.1163,  ..., -0.1486, -0.1415, -0.0284],
         [ 0.0383, -0.0815,  0.1162,  ..., -0.1486, -0.1414, -0.0286]],

        [[ 0.0411, -0.0826,  0.1144,  ..., -0.1492, -0.1408, -0.0308],
         [ 0.0417, -0.0828,  0.1139,  ..., -0.1495, -0.1406, -0.0314],
         [ 0.0414, -0.0830,  0.1145,  ..., -0.1496, -0.1408, -0.0309],
         ...,
         [ 0.0381, -0.0817,  0.1156,  ..., -0.1485, -0.1417, -0.0290],
         [ 0.0382, -0.0817,  0.1163,  ..., -0.1486, -0.1415, -0.0284],
         [ 0.0383, -0.0815,  0.1162,  ..., -0.1486, -0.1414, -0.0286]],

        ...,

        [[ 0.0411, -0.0826,  0.1144,  ..., -0.1492, -0.1408, -0.0308],
         [ 0.0417, -0.0828,  0.1139,  ..., -0.1495, -0.1406, -0.0314],
         [ 0.0414, -0.0830,  0.1145,  ..., -0.1496, -0.1408, -0.0309],
         ...,
         [ 0.0381, -0.0817,  0.1156,  ..., -0.1485, -0.1417, -0.0290],
         [ 0.0382, -0.0817,  0.1163,  ..., -0.1486, -0.1415, -0.0284],
         [ 0.0383, -0.0815,  0.1162,  ..., -0.1486, -0.1414, -0.0286]],

        [[ 0.0411, -0.0826,  0.1144,  ..., -0.1492, -0.1408, -0.0308],
         [ 0.0417, -0.0828,  0.1139,  ..., -0.1495, -0.1406, -0.0314],
         [ 0.0414, -0.0830,  0.1145,  ..., -0.1496, -0.1408, -0.0309],
         ...,
         [ 0.0381, -0.0817,  0.1156,  ..., -0.1485, -0.1417, -0.0290],
         [ 0.0382, -0.0817,  0.1163,  ..., -0.1486, -0.1415, -0.0284],
         [ 0.0383, -0.0815,  0.1162,  ..., -0.1486, -0.1414, -0.0286]],

        [[ 0.0411, -0.0826,  0.1144,  ..., -0.1492, -0.1408, -0.0308],
         [ 0.0417, -0.0828,  0.1139,  ..., -0.1495, -0.1406, -0.0314],
         [ 0.0414, -0.0830,  0.1145,  ..., -0.1496, -0.1408, -0.0309],
         ...,
         [ 0.0381, -0.0817,  0.1156,  ..., -0.1485, -0.1417, -0.0290],
         [ 0.0382, -0.0817,  0.1163,  ..., -0.1486, -0.1415, -0.0284],
         [ 0.0383, -0.0815,  0.1162,  ..., -0.1486, -0.1414, -0.0286]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[-0.0535,  0.0428, -0.0610],
          [ 0.0154,  0.0912, -0.0449],
          [-0.0482, -0.0916,  0.0529],
          ...,
          [ 0.0784,  0.0367,  0.0675],
          [ 0.0589,  0.0155,  0.0876],
          [ 0.0277,  0.0498,  0.1092]],

         [[-0.0526,  0.0423, -0.0624],
          [ 0.0114,  0.0884, -0.0407],
          [-0.0466, -0.0907,  0.0502],
          ...,
          [ 0.0783,  0.0413,  0.0669],
          [ 0.0597,  0.0171,  0.0824],
          [ 0.0279,  0.0492,  0.1141]],

         [[-0.0538,  0.0423, -0.0628],
          [ 0.0109,  0.0898, -0.0435],
          [-0.0470, -0.0887,  0.0543],
          ...,
          [ 0.0795,  0.0379,  0.0692],
          [ 0.0588,  0.0174,  0.0853],
          [ 0.0249,  0.0525,  0.1104]],

         ...,

         [[-0.0543,  0.0423, -0.0627],
          [ 0.0123,  0.0894, -0.0434],
          [-0.0463, -0.0901,  0.0531],
          ...,
          [ 0.0789,  0.0388,  0.0682],
          [ 0.0585,  0.0165,  0.0852],
          [ 0.0264,  0.0500,  0.1120]],

         [[-0.0535,  0.0419, -0.0625],
          [ 0.0113,  0.0899, -0.0433],
          [-0.0470, -0.0890,  0.0534],
          ...,
          [ 0.0796,  0.0384,  0.0691],
          [ 0.0586,  0.0165,  0.0849],
          [ 0.0257,  0.0520,  0.1099]],

         [[-0.0539,  0.0419, -0.0623],
          [ 0.0118,  0.0890, -0.0422],
          [-0.0468, -0.0895,  0.0517],
          ...,
          [ 0.0792,  0.0395,  0.0681],
          [ 0.0586,  0.0167,  0.0842],
          [ 0.0265,  0.0504,  0.1116]]],


        [[[-0.0535,  0.0428, -0.0610],
          [ 0.0154,  0.0912, -0.0449],
          [-0.0482, -0.0916,  0.0529],
          ...,
          [ 0.0784,  0.0367,  0.0675],
          [ 0.0589,  0.0155,  0.0876],
          [ 0.0277,  0.0498,  0.1092]],

         [[-0.0526,  0.0423, -0.0624],
          [ 0.0114,  0.0884, -0.0407],
          [-0.0466, -0.0907,  0.0502],
          ...,
          [ 0.0783,  0.0413,  0.0669],
          [ 0.0597,  0.0171,  0.0824],
          [ 0.0279,  0.0492,  0.1141]],

         [[-0.0538,  0.0423, -0.0628],
          [ 0.0109,  0.0898, -0.0435],
          [-0.0470, -0.0887,  0.0543],
          ...,
          [ 0.0795,  0.0379,  0.0692],
          [ 0.0588,  0.0174,  0.0853],
          [ 0.0249,  0.0525,  0.1104]],

         ...,

         [[-0.0543,  0.0423, -0.0627],
          [ 0.0123,  0.0894, -0.0434],
          [-0.0463, -0.0901,  0.0531],
          ...,
          [ 0.0789,  0.0388,  0.0682],
          [ 0.0585,  0.0165,  0.0852],
          [ 0.0264,  0.0500,  0.1120]],

         [[-0.0535,  0.0419, -0.0625],
          [ 0.0113,  0.0899, -0.0433],
          [-0.0470, -0.0890,  0.0534],
          ...,
          [ 0.0796,  0.0384,  0.0691],
          [ 0.0586,  0.0165,  0.0849],
          [ 0.0257,  0.0520,  0.1099]],

         [[-0.0539,  0.0419, -0.0623],
          [ 0.0118,  0.0890, -0.0422],
          [-0.0468, -0.0895,  0.0517],
          ...,
          [ 0.0792,  0.0395,  0.0681],
          [ 0.0586,  0.0167,  0.0842],
          [ 0.0265,  0.0504,  0.1116]]],


        [[[-0.0535,  0.0428, -0.0610],
          [ 0.0154,  0.0912, -0.0449],
          [-0.0482, -0.0916,  0.0529],
          ...,
          [ 0.0784,  0.0367,  0.0675],
          [ 0.0589,  0.0155,  0.0876],
          [ 0.0277,  0.0498,  0.1092]],

         [[-0.0526,  0.0423, -0.0624],
          [ 0.0114,  0.0884, -0.0407],
          [-0.0466, -0.0907,  0.0502],
          ...,
          [ 0.0783,  0.0413,  0.0669],
          [ 0.0597,  0.0171,  0.0824],
          [ 0.0279,  0.0492,  0.1141]],

         [[-0.0538,  0.0423, -0.0628],
          [ 0.0109,  0.0898, -0.0435],
          [-0.0470, -0.0887,  0.0543],
          ...,
          [ 0.0795,  0.0379,  0.0692],
          [ 0.0588,  0.0174,  0.0853],
          [ 0.0249,  0.0525,  0.1104]],

         ...,

         [[-0.0543,  0.0423, -0.0627],
          [ 0.0123,  0.0894, -0.0434],
          [-0.0463, -0.0901,  0.0531],
          ...,
          [ 0.0789,  0.0388,  0.0682],
          [ 0.0585,  0.0165,  0.0852],
          [ 0.0264,  0.0500,  0.1120]],

         [[-0.0535,  0.0419, -0.0625],
          [ 0.0113,  0.0899, -0.0433],
          [-0.0470, -0.0890,  0.0534],
          ...,
          [ 0.0796,  0.0384,  0.0691],
          [ 0.0586,  0.0165,  0.0849],
          [ 0.0257,  0.0520,  0.1099]],

         [[-0.0539,  0.0419, -0.0623],
          [ 0.0118,  0.0890, -0.0422],
          [-0.0468, -0.0895,  0.0517],
          ...,
          [ 0.0792,  0.0395,  0.0681],
          [ 0.0586,  0.0167,  0.0842],
          [ 0.0265,  0.0504,  0.1116]]],


        ...,


        [[[-0.0535,  0.0428, -0.0610],
          [ 0.0154,  0.0912, -0.0449],
          [-0.0482, -0.0916,  0.0529],
          ...,
          [ 0.0784,  0.0367,  0.0675],
          [ 0.0589,  0.0155,  0.0876],
          [ 0.0277,  0.0498,  0.1092]],

         [[-0.0526,  0.0423, -0.0624],
          [ 0.0114,  0.0884, -0.0407],
          [-0.0466, -0.0907,  0.0502],
          ...,
          [ 0.0783,  0.0413,  0.0669],
          [ 0.0597,  0.0171,  0.0824],
          [ 0.0279,  0.0492,  0.1141]],

         [[-0.0538,  0.0423, -0.0628],
          [ 0.0109,  0.0898, -0.0435],
          [-0.0470, -0.0887,  0.0543],
          ...,
          [ 0.0795,  0.0379,  0.0692],
          [ 0.0588,  0.0174,  0.0853],
          [ 0.0249,  0.0525,  0.1104]],

         ...,

         [[-0.0543,  0.0423, -0.0627],
          [ 0.0123,  0.0894, -0.0434],
          [-0.0463, -0.0901,  0.0531],
          ...,
          [ 0.0789,  0.0388,  0.0682],
          [ 0.0585,  0.0165,  0.0852],
          [ 0.0264,  0.0500,  0.1120]],

         [[-0.0535,  0.0419, -0.0625],
          [ 0.0113,  0.0899, -0.0433],
          [-0.0470, -0.0890,  0.0534],
          ...,
          [ 0.0796,  0.0384,  0.0691],
          [ 0.0586,  0.0165,  0.0849],
          [ 0.0257,  0.0520,  0.1099]],

         [[-0.0539,  0.0419, -0.0623],
          [ 0.0118,  0.0890, -0.0422],
          [-0.0468, -0.0895,  0.0517],
          ...,
          [ 0.0792,  0.0395,  0.0681],
          [ 0.0586,  0.0167,  0.0842],
          [ 0.0265,  0.0504,  0.1116]]],


        [[[-0.0535,  0.0428, -0.0610],
          [ 0.0154,  0.0912, -0.0449],
          [-0.0482, -0.0916,  0.0529],
          ...,
          [ 0.0784,  0.0367,  0.0675],
          [ 0.0589,  0.0155,  0.0876],
          [ 0.0277,  0.0498,  0.1092]],

         [[-0.0526,  0.0423, -0.0624],
          [ 0.0114,  0.0884, -0.0407],
          [-0.0466, -0.0907,  0.0502],
          ...,
          [ 0.0783,  0.0413,  0.0669],
          [ 0.0597,  0.0171,  0.0824],
          [ 0.0279,  0.0492,  0.1141]],

         [[-0.0538,  0.0423, -0.0628],
          [ 0.0109,  0.0898, -0.0435],
          [-0.0470, -0.0887,  0.0543],
          ...,
          [ 0.0795,  0.0379,  0.0692],
          [ 0.0588,  0.0174,  0.0853],
          [ 0.0249,  0.0525,  0.1104]],

         ...,

         [[-0.0543,  0.0423, -0.0627],
          [ 0.0123,  0.0894, -0.0434],
          [-0.0463, -0.0901,  0.0531],
          ...,
          [ 0.0789,  0.0388,  0.0682],
          [ 0.0585,  0.0165,  0.0852],
          [ 0.0264,  0.0500,  0.1120]],

         [[-0.0535,  0.0419, -0.0625],
          [ 0.0113,  0.0899, -0.0433],
          [-0.0470, -0.0890,  0.0534],
          ...,
          [ 0.0796,  0.0384,  0.0691],
          [ 0.0586,  0.0165,  0.0849],
          [ 0.0257,  0.0520,  0.1099]],

         [[-0.0539,  0.0419, -0.0623],
          [ 0.0118,  0.0890, -0.0422],
          [-0.0468, -0.0895,  0.0517],
          ...,
          [ 0.0792,  0.0395,  0.0681],
          [ 0.0586,  0.0167,  0.0842],
          [ 0.0265,  0.0504,  0.1116]]],


        [[[-0.0535,  0.0428, -0.0610],
          [ 0.0154,  0.0912, -0.0449],
          [-0.0482, -0.0916,  0.0529],
          ...,
          [ 0.0784,  0.0367,  0.0675],
          [ 0.0589,  0.0155,  0.0876],
          [ 0.0277,  0.0498,  0.1092]],

         [[-0.0526,  0.0423, -0.0624],
          [ 0.0114,  0.0884, -0.0407],
          [-0.0466, -0.0907,  0.0502],
          ...,
          [ 0.0783,  0.0413,  0.0669],
          [ 0.0597,  0.0171,  0.0824],
          [ 0.0279,  0.0492,  0.1141]],

         [[-0.0538,  0.0423, -0.0628],
          [ 0.0109,  0.0898, -0.0435],
          [-0.0470, -0.0887,  0.0543],
          ...,
          [ 0.0795,  0.0379,  0.0692],
          [ 0.0588,  0.0174,  0.0853],
          [ 0.0249,  0.0525,  0.1104]],

         ...,

         [[-0.0543,  0.0423, -0.0627],
          [ 0.0123,  0.0894, -0.0434],
          [-0.0463, -0.0901,  0.0531],
          ...,
          [ 0.0789,  0.0388,  0.0682],
          [ 0.0585,  0.0165,  0.0852],
          [ 0.0264,  0.0500,  0.1120]],

         [[-0.0535,  0.0419, -0.0625],
          [ 0.0113,  0.0899, -0.0433],
          [-0.0470, -0.0890,  0.0534],
          ...,
          [ 0.0796,  0.0384,  0.0691],
          [ 0.0586,  0.0165,  0.0849],
          [ 0.0257,  0.0520,  0.1099]],

         [[-0.0539,  0.0419, -0.0623],
          [ 0.0118,  0.0890, -0.0422],
          [-0.0468, -0.0895,  0.0517],
          ...,
          [ 0.0792,  0.0395,  0.0681],
          [ 0.0586,  0.0167,  0.0842],
          [ 0.0265,  0.0504,  0.1116]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[ 0.0411, -0.0826,  0.1144, -0.1176,  0.1072, -0.1492, -0.1408, -0.0308],
        [ 0.0417, -0.0828,  0.1139, -0.1176,  0.1062, -0.1495, -0.1406, -0.0314],
        [ 0.0414, -0.0830,  0.1145, -0.1179,  0.1063, -0.1496, -0.1408, -0.0309],
        [ 0.0421, -0.0835,  0.1121, -0.1181,  0.1039, -0.1499, -0.1410, -0.0334],
        [ 0.0424, -0.0832,  0.1136, -0.1178,  0.1045, -0.1501, -0.1405, -0.0322]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[-0.0535,  0.0428, -0.0610],
         [ 0.0154,  0.0912, -0.0449],
         [-0.0482, -0.0916,  0.0529],
         [-0.0581,  0.0762,  0.0324],
         [-0.0776,  0.0259,  0.0253],
         [ 0.0784,  0.0367,  0.0675],
         [ 0.0589,  0.0155,  0.0876],
         [ 0.0277,  0.0498,  0.1092]],

        [[-0.0526,  0.0423, -0.0624],
         [ 0.0114,  0.0884, -0.0407],
         [-0.0466, -0.0907,  0.0502],
         [-0.0613,  0.0754,  0.0321],
         [-0.0739,  0.0234,  0.0229],
         [ 0.0783,  0.0413,  0.0669],
         [ 0.0597,  0.0171,  0.0824],
         [ 0.0279,  0.0492,  0.1141]],

        [[-0.0538,  0.0423, -0.0628],
         [ 0.0109,  0.0898, -0.0435],
         [-0.0470, -0.0887,  0.0543],
         [-0.0581,  0.0758,  0.0280],
         [-0.0771,  0.0218,  0.0207],
         [ 0.0795,  0.0379,  0.0692],
         [ 0.0588,  0.0174,  0.0853],
         [ 0.0249,  0.0525,  0.1104]],

        [[-0.0533,  0.0432, -0.0627],
         [ 0.0119,  0.0898, -0.0421],
         [-0.0469, -0.0909,  0.0530],
         [-0.0598,  0.0767,  0.0306],
         [-0.0752,  0.0243,  0.0233],
         [ 0.0796,  0.0399,  0.0689],
         [ 0.0584,  0.0159,  0.0848],
         [ 0.0272,  0.0506,  0.1120]],

        [[-0.0525,  0.0424, -0.0617],
         [ 0.0129,  0.0901, -0.0435],
         [-0.0475, -0.0910,  0.0523],
         [-0.0592,  0.0754,  0.0312],
         [-0.0761,  0.0238,  0.0232],
         [ 0.0786,  0.0385,  0.0682],
         [ 0.0591,  0.0162,  0.0855],
         [ 0.0270,  0.0505,  0.1109]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
self_attention:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         ...,
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208]],

        [[ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         ...,
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208]],

        [[ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         ...,
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208]],

        ...,

        [[ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         ...,
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208]],

        [[ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         ...,
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208]],

        [[ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2094, -0.1208],
         ...,
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208],
         [ 0.1498, -0.0362, -0.0642,  ..., -0.0226,  0.2093, -0.1208]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0834,  0.0415],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0705],
          [-0.0462,  0.1167,  0.1856]],

         ...,

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]]],


        [[[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0834,  0.0415],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0705],
          [-0.0462,  0.1167,  0.1856]],

         ...,

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]]],


        [[[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0834,  0.0415],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0705],
          [-0.0462,  0.1167,  0.1856]],

         ...,

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]]],


        ...,


        [[[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0834,  0.0415],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0705],
          [-0.0462,  0.1167,  0.1856]],

         ...,

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]]],


        [[[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0834,  0.0415],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0705],
          [-0.0462,  0.1167,  0.1856]],

         ...,

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]]],


        [[[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0834,  0.0415],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0705],
          [-0.0462,  0.1167,  0.1856]],

         ...,

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]],

         [[ 0.2049, -0.0403,  0.0269],
          [-0.0007,  0.0214, -0.0984],
          [-0.0966,  0.0833,  0.0414],
          ...,
          [-0.0126,  0.2093, -0.0556],
          [ 0.1971,  0.2321,  0.0704],
          [-0.0461,  0.1167,  0.1856]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[ 0.1498, -0.0362, -0.0642,  0.0624, -0.1749, -0.0226,  0.2094, -0.1208],
        [ 0.1498, -0.0362, -0.0642,  0.0624, -0.1749, -0.0226,  0.2094, -0.1208],
        [ 0.1498, -0.0362, -0.0642,  0.0624, -0.1749, -0.0226,  0.2094, -0.1208],
        [ 0.1498, -0.0362, -0.0642,  0.0624, -0.1749, -0.0226,  0.2094, -0.1208],
        [ 0.1498, -0.0362, -0.0642,  0.0624, -0.1749, -0.0226,  0.2094, -0.1208]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[ 0.2049, -0.0403,  0.0269],
         [-0.0007,  0.0214, -0.0984],
         [-0.0966,  0.0833,  0.0414],
         [-0.1423, -0.1056,  0.0273],
         [ 0.0300,  0.1427,  0.0324],
         [-0.0126,  0.2093, -0.0556],
         [ 0.1971,  0.2321,  0.0704],
         [-0.0461,  0.1167,  0.1856]],

        [[ 0.2049, -0.0403,  0.0269],
         [-0.0007,  0.0214, -0.0984],
         [-0.0966,  0.0833,  0.0414],
         [-0.1423, -0.1055,  0.0273],
         [ 0.0300,  0.1427,  0.0324],
         [-0.0126,  0.2093, -0.0556],
         [ 0.1971,  0.2321,  0.0704],
         [-0.0461,  0.1167,  0.1856]],

        [[ 0.2049, -0.0403,  0.0269],
         [-0.0007,  0.0214, -0.0984],
         [-0.0966,  0.0834,  0.0415],
         [-0.1423, -0.1056,  0.0273],
         [ 0.0300,  0.1427,  0.0324],
         [-0.0126,  0.2093, -0.0556],
         [ 0.1971,  0.2321,  0.0705],
         [-0.0462,  0.1167,  0.1856]],

        [[ 0.2049, -0.0403,  0.0269],
         [-0.0007,  0.0214, -0.0984],
         [-0.0966,  0.0833,  0.0414],
         [-0.1423, -0.1056,  0.0273],
         [ 0.0300,  0.1427,  0.0324],
         [-0.0126,  0.2093, -0.0556],
         [ 0.1971,  0.2321,  0.0704],
         [-0.0461,  0.1167,  0.1856]],

        [[ 0.2049, -0.0403,  0.0269],
         [-0.0007,  0.0214, -0.0984],
         [-0.0966,  0.0833,  0.0414],
         [-0.1423, -0.1056,  0.0273],
         [ 0.0300,  0.1427,  0.0324],
         [-0.0126,  0.2093, -0.0556],
         [ 0.1971,  0.2321,  0.0704],
         [-0.0461,  0.1167,  0.1856]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
==================================================

Batch 4 in Ensemble: 234_vi
Number of conformers in this batch: 16
Unique Atomic Numbers: [6, 1, 8, 15]
Average number of neighbors: 26.33
Processing batch of 16 conformers
Initialized CustomNonLinearReadout with input irreps: 32x0e+32x1o
EQUICATPlusNonLinearReadout(
  (equicat): EQUICAT(
    (model): MACE(
      (node_embedding): LinearNodeEmbeddingBlock(
        (linear): Linear(4x0e -> 32x0e | 128 weights)
      )
      (radial_embedding): RadialEmbeddingBlock(
        (bessel_fn): BesselBasis(r_max=5.0, num_basis=8, trainable=False)
        (cutoff_fn): PolynomialCutoff(p=6.0, r_max=5.0)
      )
      (spherical_harmonics): SphericalHarmonics()
      (atomic_energies_fn): AtomicEnergiesBlock(energies=[0.0000, 0.0000, 0.0000, 0.0000])
      (interactions): ModuleList(
        (0): RealAgnosticResidualInteractionBlock(
          (linear_up): Linear(32x0e -> 32x0e | 1024 weights)
          (conv_tp): TensorProduct(32x0e x 1x0e+1x1o+1x2e -> 32x0e+32x1o+32x2e | 96 paths | 96 weights)
          (conv_tp_weights): FullyConnectedNet[8, 64, 64, 64, 96]
          (linear): Linear(32x0e+32x1o+32x2e -> 32x0e+32x1o+32x2e | 3072 weights)
          (skip_tp): FullyConnectedTensorProduct(32x0e x 4x0e -> 32x0e+32x1o | 4096 paths | 4096 weights)
          (reshape): reshape_irreps()
        )
        (1): RealAgnosticResidualInteractionBlock(
          (linear_up): Linear(32x0e+32x1o -> 32x0e+32x1o | 2048 weights)
          (conv_tp): TensorProduct(32x0e+32x1o x 1x0e+1x1o+1x2e -> 64x0e+96x1o+64x2e | 224 paths | 224 weights)
          (conv_tp_weights): FullyConnectedNet[8, 64, 64, 64, 224]
          (linear): Linear(64x0e+96x1o+64x2e -> 32x0e+32x1o+32x2e | 7168 weights)
          (skip_tp): FullyConnectedTensorProduct(32x0e+32x1o x 4x0e -> 32x0e | 4096 paths | 4096 weights)
          (reshape): reshape_irreps()
        )
      )
      (products): ModuleList(
        (0): EquivariantProductBasisBlock(
          (symmetric_contractions): SymmetricContraction(
            (contractions): ModuleList(
              (0): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x3x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
              (1): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x4x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
            )
          )
          (linear): Linear(32x0e+32x1o -> 32x0e+32x1o | 2048 weights)
        )
        (1): EquivariantProductBasisBlock(
          (symmetric_contractions): SymmetricContraction(
            (contractions): ModuleList(
              (0): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x3x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
            )
          )
          (linear): Linear(32x0e -> 32x0e | 1024 weights)
        )
      )
      (readouts): ModuleList(
        (0): LinearReadoutBlock(
          (linear): Linear(32x0e+32x1o -> 1x0e | 32 weights)
        )
        (1): NonLinearReadoutBlock(
          (linear_1): Linear(32x0e -> 16x0e | 512 weights)
          (non_linearity): Activation [x] (16x0e -> 16x0e)
          (linear_2): Linear(16x0e -> 1x0e | 16 weights)
        )
      )
    )
  )
  (non_linear_readout): CustomNonLinearReadout(
    (linear_1): Linear(32x0e+32x1o -> 16x0e+16x1o | 1024 weights)
    (non_linearity_1): Activation [x ] (16x0e+16x1o -> 16x0e+16x1o)
    (linear_2): Linear(16x0e+16x1o -> 16x0e+16x1o | 512 weights)
    (non_linearity_2): Activation [x ] (16x0e+16x1o -> 16x0e+16x1o)
    (linear_3): Linear(16x0e+16x1o -> 8x0e+8x1o | 256 weights)
  )
)
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2878])
shifts shape: torch.Size([2878, 3])
sender shape: torch.Size([2878])
receiver shape: torch.Size([2878])
Edge attributes shape: torch.Size([2878, 9])
Edge attributes tensor([[ 1.0000,  1.2501,  0.9787,  ..., -0.0471, -0.8748, -0.6993],
        [ 1.0000, -0.1736,  1.7232,  ...,  2.2020, -0.0393, -0.0192],
        [ 1.0000,  1.4109, -0.7458,  ..., -0.4961,  0.6481, -0.9926],
        ...,
        [ 1.0000,  1.3561,  1.0644,  ...,  0.1485,  0.2307, -1.1688],
        [ 1.0000,  1.2725, -0.0268,  ..., -1.1172,  0.0407, -0.1545],
        [ 1.0000, -0.2081,  1.7146,  ...,  2.1687,  0.2881, -0.0170]])
Edge features shape: torch.Size([2878, 8])
Edge features tensor([[ 0.1691, -0.0634, -0.1454,  ..., -0.1558, -0.0428,  0.1719],
        [ 0.3444,  0.4351,  0.2053,  ..., -0.3641, -0.0326,  0.3229],
        [ 0.3449,  0.4379,  0.2109,  ..., -0.3718, -0.0451,  0.3146],
        ...,
        [ 0.3128,  0.2802, -0.0617,  ...,  0.1214,  0.3477,  0.1901],
        [ 0.3130,  0.2812, -0.0603,  ...,  0.1188,  0.3478,  0.1937],
        [ 0.1132, -0.0906, -0.0406,  ..., -0.0766,  0.1194, -0.0190]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        ...,
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2878, 96])
Tensor Product Weights tensor([[-0.0936,  0.0728,  0.0019,  ...,  0.0472, -0.0919,  0.0224],
        [-0.8394,  0.2557, -0.0329,  ..., -0.1786,  0.1823, -0.0588],
        [-0.8504,  0.2577, -0.0323,  ..., -0.1835,  0.1926, -0.0573],
        ...,
        [-0.3141,  0.1417, -0.0458,  ..., -0.1080, -0.0704, -0.0377],
        [-0.3166,  0.1422, -0.0462,  ..., -0.1072, -0.0701, -0.0383],
        [-0.0736, -0.0138,  0.0272,  ...,  0.0839,  0.0411, -0.0463]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.4310, -0.4393, -0.5370,  ..., -0.0078, -0.0143, -0.0746],
        [-0.1006, -0.2030, -0.2984,  ..., -0.0104, -0.1077,  0.0343],
        [-0.5865, -0.2086, -0.4343,  ...,  0.0124,  0.0009, -0.0547],
        ...,
        [-0.5790, -0.3316, -0.1244,  ..., -0.0404,  0.0263, -0.0294],
        [-0.4542, -0.3251, -0.1523,  ...,  0.0144,  0.0822,  0.0221],
        [-0.5142, -0.3721, -0.1661,  ...,  0.0389,  0.0107, -0.0242]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.2398,  0.7167,  0.0890,  ...,  0.0577, -0.1658,  0.0431],
        [ 0.0813,  0.0579, -0.1778,  ..., -0.2700, -0.4078, -0.1768],
        [-0.1827,  0.5471, -0.3178,  ...,  0.2272,  0.3258, -0.0124],
        ...,
        [ 0.1650, -0.4603, -0.2539,  ..., -0.3373, -0.1725, -0.2861],
        [ 0.0558, -0.3463, -0.2562,  ..., -0.3382,  0.3453,  0.2663],
        [ 0.1300, -0.4469, -0.1711,  ...,  0.2583,  0.3411, -0.2897]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2886])
shifts shape: torch.Size([2886, 3])
sender shape: torch.Size([2886])
receiver shape: torch.Size([2886])
Edge attributes shape: torch.Size([2886, 9])
Edge attributes tensor([[ 1.0000,  1.2433,  0.9835,  ..., -0.0367, -0.8860, -0.6836],
        [ 1.0000, -0.1884,  1.7215,  ...,  2.1952, -0.0717, -0.0222],
        [ 1.0000,  1.4162, -0.7287,  ..., -0.5244,  0.6404, -0.9955],
        ...,
        [ 1.0000,  1.3612,  1.0562,  ...,  0.1292,  0.2422, -1.1757],
        [ 1.0000,  1.2802, -0.0337,  ..., -1.1168,  0.0508, -0.1801],
        [ 1.0000, -0.1991,  1.7157,  ...,  2.1730,  0.2867, -0.0148]])
Edge features shape: torch.Size([2886, 8])
Edge features tensor([[ 0.1681, -0.0644, -0.1434,  ..., -0.1568, -0.0376,  0.1712],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3545, -0.0175,  0.3326],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3708, -0.0435,  0.3156],
        ...,
        [ 0.3127,  0.2802, -0.0618,  ...,  0.1216,  0.3477,  0.1899],
        [ 0.3130,  0.2812, -0.0603,  ...,  0.1189,  0.3478,  0.1936],
        [ 0.1131, -0.0907, -0.0405,  ..., -0.0765,  0.1194, -0.0192]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        ...,
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2886, 96])
Tensor Product Weights tensor([[-9.3984e-02,  6.9936e-02,  8.3638e-04,  ...,  5.0342e-02,
         -8.9668e-02,  2.1191e-02],
        [-8.2586e-01,  2.5331e-01, -3.3781e-02,  ..., -1.7270e-01,
          1.6992e-01, -6.0476e-02],
        [-8.4902e-01,  2.5741e-01, -3.2371e-02,  ..., -1.8286e-01,
          1.9133e-01, -5.7521e-02],
        ...,
        [-3.1394e-01,  1.4169e-01, -4.5826e-02,  ..., -1.0806e-01,
         -7.0391e-02, -3.7718e-02],
        [-3.1653e-01,  1.4221e-01, -4.6211e-02,  ..., -1.0722e-01,
         -7.0058e-02, -3.8285e-02],
        [-7.3509e-02, -1.3805e-02,  2.7235e-02,  ...,  8.3890e-02,
          4.1218e-02, -4.6342e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.4958, -0.3360, -0.4984,  ..., -0.0094, -0.0166, -0.0708],
        [-0.0853, -0.2139, -0.3019,  ..., -0.0106, -0.1003,  0.0231],
        [-0.5262, -0.3000, -0.4666,  ...,  0.0580, -0.0015, -0.0250],
        ...,
        [-0.5790, -0.3314, -0.1241,  ..., -0.0408,  0.0263, -0.0289],
        [-0.4535, -0.3278, -0.1558,  ...,  0.0147,  0.0823,  0.0212],
        [-0.5074, -0.3765, -0.1745,  ...,  0.0372,  0.0151, -0.0242]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.1366,  0.6217, -0.0359,  ...,  0.0562, -0.1868, -0.0721],
        [ 0.0657,  0.0667, -0.1551,  ..., -0.2811, -0.4137, -0.1724],
        [-0.2034,  0.6269, -0.2378,  ...,  0.1967,  0.3117, -0.0252],
        ...,
        [ 0.1651, -0.4604, -0.2538,  ..., -0.3364, -0.1703, -0.2886],
        [ 0.0562, -0.3473, -0.2552,  ..., -0.3366,  0.3477,  0.2641],
        [ 0.1321, -0.4456, -0.1672,  ...,  0.2605,  0.3384, -0.2904]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2962])
shifts shape: torch.Size([2962, 3])
sender shape: torch.Size([2962])
receiver shape: torch.Size([2962])
Edge attributes shape: torch.Size([2962, 9])
Edge attributes tensor([[ 1.0000,  1.2551,  0.9569,  ..., -0.0942, -0.8815, -0.6881],
        [ 1.0000, -0.1603,  1.7237,  ...,  2.2039, -0.1224, -0.0146],
        [ 1.0000,  1.4072, -0.7559,  ..., -0.4792,  0.6534, -0.9889],
        ...,
        [ 1.0000, -0.4340, -1.3400,  ...,  0.8894, -1.7438,  0.5343],
        [ 1.0000,  1.6719,  0.4525,  ..., -0.8891, -0.0040, -1.8043],
        [ 1.0000,  0.8143,  0.4637,  ..., -0.8777, -0.8720,  0.9417]])
Edge features shape: torch.Size([2962, 8])
Edge features tensor([[ 1.6770e-01, -6.4714e-02, -1.4273e-01,  ..., -1.5703e-01,
         -3.5912e-02,  1.7089e-01],
        [ 3.4390e-01,  4.3216e-01,  1.9917e-01,  ..., -3.5561e-01,
         -1.9154e-02,  3.3154e-01],
        [ 3.4483e-01,  4.3729e-01,  2.0971e-01,  ..., -3.7015e-01,
         -4.2406e-02,  3.1637e-01],
        ...,
        [ 3.1304e-01,  2.8146e-01, -5.9986e-02,  ...,  1.1820e-01,
          3.4784e-01,  1.9454e-01],
        [ 1.1447e-04, -2.2620e-04,  3.3250e-04,  ..., -5.9441e-04,
          6.5572e-04, -7.0132e-04],
        [ 0.0000e+00, -0.0000e+00,  0.0000e+00,  ..., -0.0000e+00,
          0.0000e+00, -0.0000e+00]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        ...,
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2962, 96])
Tensor Product Weights tensor([[-9.4109e-02,  6.9008e-02,  5.1245e-04,  ...,  5.1330e-02,
         -8.8927e-02,  2.0783e-02],
        [-8.2737e-01,  2.5358e-01, -3.3684e-02,  ..., -1.7335e-01,
          1.7129e-01, -6.0293e-02],
        [-8.4805e-01,  2.5724e-01, -3.2427e-02,  ..., -1.8242e-01,
          1.9040e-01, -5.7652e-02],
        ...,
        [-3.1718e-01,  1.4235e-01, -4.6304e-02,  ..., -1.0701e-01,
         -6.9974e-02, -3.8426e-02],
        [-4.3742e-04,  1.8512e-04,  1.8591e-04,  ..., -9.5815e-05,
          5.4726e-04,  1.3911e-04],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,
          0.0000e+00,  0.0000e+00]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.4997, -0.3279, -0.4975,  ..., -0.0037,  0.0011, -0.0457],
        [-0.0707, -0.2287, -0.3194,  ..., -0.0131, -0.1064,  0.0287],
        [-0.5174, -0.3082, -0.4895,  ...,  0.0623,  0.0138, -0.0379],
        ...,
        [-0.6685, -0.2895, -0.1431,  ..., -0.0351, -0.0316,  0.0685],
        [-0.5306, -0.3552, -0.1729,  ...,  0.0073,  0.0360,  0.0252],
        [-0.4888, -0.2906, -0.1514,  ...,  0.0655, -0.0296,  0.0196]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.1316,  0.6135, -0.0411,  ...,  0.0818, -0.1869, -0.0283],
        [ 0.0586,  0.0769, -0.1402,  ..., -0.2993, -0.3879, -0.1857],
        [-0.2133,  0.6293, -0.2247,  ...,  0.2058,  0.3327, -0.0925],
        ...,
        [ 0.2313, -0.4760, -0.4218,  ...,  0.0796,  0.1463,  0.3626],
        [ 0.0982, -0.4389, -0.1663,  ...,  0.3813,  0.1329, -0.2973],
        [ 0.1373, -0.4521, -0.2109,  ...,  0.1796, -0.4895,  0.1252]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2842])
shifts shape: torch.Size([2842, 3])
sender shape: torch.Size([2842])
receiver shape: torch.Size([2842])
Edge attributes shape: torch.Size([2842, 9])
Edge attributes tensor([[ 1.0000,  1.2543,  0.9642,  ..., -0.0786, -0.8777, -0.6945],
        [ 1.0000, -0.1520,  1.7253,  ...,  2.2098, -0.0441, -0.0147],
        [ 1.0000,  1.3844, -0.7505,  ..., -0.4883,  0.6988, -0.9013],
        ...,
        [ 1.0000,  1.3646,  1.0551,  ...,  0.1265,  0.2139, -1.1861],
        [ 1.0000,  1.2663, -0.0412,  ..., -1.1161,  0.0627, -0.1348],
        [ 1.0000, -0.1934,  1.7166,  ...,  2.1767,  0.2778, -0.0140]])
Edge features shape: torch.Size([2842, 8])
Edge features tensor([[ 0.1673, -0.0650, -0.1421,  ..., -0.1573, -0.0342,  0.1706],
        [ 0.3439,  0.4323,  0.1994,  ..., -0.3559, -0.0197,  0.3312],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3708, -0.0435,  0.3156],
        ...,
        [ 0.3127,  0.2801, -0.0618,  ...,  0.1216,  0.3477,  0.1898],
        [ 0.3130,  0.2813, -0.0602,  ...,  0.1187,  0.3478,  0.1939],
        [ 0.1134, -0.0906, -0.0410,  ..., -0.0773,  0.1194, -0.0181]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        ...,
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2842, 96])
Tensor Product Weights tensor([[-9.4233e-02,  6.8061e-02,  1.9078e-04,  ...,  5.2332e-02,
         -8.8162e-02,  2.0362e-02],
        [-8.2783e-01,  2.5365e-01, -3.3656e-02,  ..., -1.7354e-01,
          1.7170e-01, -6.0237e-02],
        [-8.4902e-01,  2.5741e-01, -3.2371e-02,  ..., -1.8286e-01,
          1.9133e-01, -5.7520e-02],
        ...,
        [-3.1387e-01,  1.4167e-01, -4.5815e-02,  ..., -1.0809e-01,
         -7.0400e-02, -3.7703e-02],
        [-3.1673e-01,  1.4225e-01, -4.6240e-02,  ..., -1.0715e-01,
         -7.0032e-02, -3.8329e-02],
        [-7.3810e-02, -1.3666e-02,  2.6972e-02,  ...,  8.4214e-02,
          4.0768e-02, -4.6099e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-4.9527e-01, -3.3230e-01, -4.9826e-01,  ..., -3.7718e-03,
         -5.4779e-04, -3.7978e-02],
        [-3.3159e-02, -2.0703e-01, -3.2034e-01,  ..., -1.3818e-02,
         -9.8509e-02,  1.9820e-02],
        [-5.3099e-01, -2.9520e-01, -4.6514e-01,  ...,  6.3423e-02,
          1.6915e-02, -4.5201e-02],
        ...,
        [-5.8746e-01, -3.1555e-01, -1.0216e-01,  ..., -4.6120e-02,
          2.7131e-02, -2.7353e-02],
        [-4.5357e-01, -3.3225e-01, -1.5787e-01,  ...,  1.3420e-02,
          8.0865e-02,  2.2827e-02],
        [-5.1229e-01, -3.7479e-01, -1.6867e-01,  ...,  3.5957e-02,
          1.1570e-02, -2.3466e-02]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.1376,  0.6185, -0.0346,  ...,  0.0893, -0.1873, -0.0340],
        [ 0.0422,  0.0537, -0.1347,  ..., -0.1577, -0.3651, -0.1160],
        [-0.2092,  0.6230, -0.2464,  ...,  0.1825,  0.3080, -0.0827],
        ...,
        [ 0.1719, -0.4654, -0.2565,  ..., -0.3414, -0.1704, -0.2840],
        [ 0.0536, -0.3456, -0.2574,  ..., -0.3341,  0.3501,  0.2700],
        [ 0.1323, -0.4468, -0.1693,  ...,  0.2594,  0.3377, -0.2928]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2908])
shifts shape: torch.Size([2908, 3])
sender shape: torch.Size([2908])
receiver shape: torch.Size([2908])
Edge attributes shape: torch.Size([2908, 9])
Edge attributes tensor([[ 1.0000,  1.3100,  0.9395,  ..., -0.1312, -0.7684, -0.8486],
        [ 1.0000, -0.1092,  1.7285,  ...,  2.2225, -0.0325, -0.0076],
        [ 1.0000,  1.4175, -0.7781,  ..., -0.4411,  0.6236, -1.0482],
        ...,
        [ 1.0000,  1.3220,  0.0606,  ..., -1.1139, -0.0874, -0.3223],
        [ 1.0000, -0.2165,  1.6989,  ...,  2.1088,  0.5675,  0.0130],
        [ 1.0000,  1.3472,  1.0443,  ...,  0.1012,  0.4145, -1.1105]])
Edge features shape: torch.Size([2908, 8])
Edge features tensor([[ 0.1674, -0.0650, -0.1422,  ..., -0.1573, -0.0345,  0.1707],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3554, -0.0188,  0.3318],
        [ 0.3449,  0.4375,  0.2101,  ..., -0.3707, -0.0432,  0.3158],
        ...,
        [ 0.3130,  0.2811, -0.0604,  ...,  0.1190,  0.3478,  0.1934],
        [ 0.1142, -0.0906, -0.0424,  ..., -0.0797,  0.1193, -0.0150],
        [ 0.3127,  0.2799, -0.0621,  ...,  0.1222,  0.3477,  0.1891]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        ...,
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2908, 96])
Tensor Product Weights tensor([[-9.4209e-02,  6.8242e-02,  2.5142e-04,  ...,  5.2141e-02,
         -8.8308e-02,  2.0443e-02],
        [-8.2706e-01,  2.5352e-01, -3.3705e-02,  ..., -1.7321e-01,
          1.7100e-01, -6.0331e-02],
        [-8.4878e-01,  2.5737e-01, -3.2385e-02,  ..., -1.8275e-01,
          1.9110e-01, -5.7554e-02],
        ...,
        [-3.1638e-01,  1.4218e-01, -4.6188e-02,  ..., -1.0727e-01,
         -7.0077e-02, -3.8252e-02],
        [-7.4617e-02, -1.3275e-02,  2.6253e-02,  ...,  8.5073e-02,
          3.9525e-02, -4.5432e-02],
        [-3.1333e-01,  1.4156e-01, -4.5733e-02,  ..., -1.0827e-01,
         -7.0469e-02, -3.7584e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.4987, -0.3408, -0.4970,  ..., -0.0055,  0.0192, -0.0506],
        [-0.1011, -0.2096, -0.3300,  ..., -0.0146, -0.0977,  0.0321],
        [-0.5606, -0.2155, -0.4664,  ...,  0.0357, -0.0361, -0.0063],
        ...,
        [-0.5882, -0.3099, -0.0955,  ..., -0.0543,  0.0249, -0.0212],
        [-0.4377, -0.3503, -0.2000,  ...,  0.0218,  0.1046,  0.0226],
        [-0.5075, -0.3803, -0.1829,  ...,  0.0262,  0.0260, -0.0191]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.1394,  0.6260, -0.0620,  ...,  0.0627, -0.1814, -0.0415],
        [ 0.0827,  0.0820, -0.1846,  ..., -0.1169, -0.3747, -0.0921],
        [-0.1752,  0.5480, -0.2885,  ...,  0.1862,  0.3247, -0.1336],
        ...,
        [ 0.1767, -0.4698, -0.2577,  ..., -0.3256, -0.1425, -0.3137],
        [ 0.0452, -0.3358, -0.2479,  ..., -0.3433,  0.3158,  0.2703],
        [ 0.1317, -0.4420, -0.1671,  ...,  0.2683,  0.3618, -0.2533]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2848])
shifts shape: torch.Size([2848, 3])
sender shape: torch.Size([2848])
receiver shape: torch.Size([2848])
Edge attributes shape: torch.Size([2848, 9])
Edge attributes tensor([[ 1.0000,  1.2491,  0.9727,  ..., -0.0602, -0.8823, -0.6884],
        [ 1.0000, -0.1519,  1.7253,  ...,  2.2102,  0.0210, -0.0148],
        [ 1.0000,  1.3736, -0.7538,  ..., -0.4827,  0.7184, -0.8662],
        ...,
        [ 1.0000,  1.1072,  0.9732,  ..., -0.0592, -1.1425, -0.2575],
        [ 1.0000,  1.3646,  1.0588,  ...,  0.1353,  0.1776, -1.1911],
        [ 1.0000,  1.2560, -0.0567,  ..., -1.1144,  0.0872, -0.1022]])
Edge features shape: torch.Size([2848, 8])
Edge features tensor([[ 0.1688, -0.0637, -0.1447,  ..., -0.1561, -0.0411,  0.1717],
        [ 0.3445,  0.4353,  0.2055,  ..., -0.3645, -0.0332,  0.3225],
        [ 0.3449,  0.4379,  0.2110,  ..., -0.3719, -0.0454,  0.3144],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4171],
        [ 0.3127,  0.2802, -0.0617,  ...,  0.1215,  0.3477,  0.1900],
        [ 0.3130,  0.2813, -0.0603,  ...,  0.1187,  0.3478,  0.1938]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        ...,
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2848, 96])
Tensor Product Weights tensor([[-0.0937,  0.0719,  0.0016,  ...,  0.0482, -0.0912,  0.0220],
        [-0.8399,  0.2558, -0.0329,  ..., -0.1788,  0.1827, -0.0587],
        [-0.8506,  0.2577, -0.0323,  ..., -0.1836,  0.1929, -0.0573],
        ...,
        [-1.1969,  0.4513, -0.1365,  ..., -0.5657,  0.9004,  0.0318],
        [-0.3140,  0.1417, -0.0458,  ..., -0.1080, -0.0704, -0.0377],
        [-0.3167,  0.1422, -0.0462,  ..., -0.1072, -0.0700, -0.0383]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.4224, -0.4439, -0.5426,  ..., -0.0041, -0.0142, -0.0670],
        [-0.0506, -0.1958, -0.3170,  ..., -0.0122, -0.1066,  0.0283],
        [-0.5881, -0.2118, -0.4320,  ...,  0.0118,  0.0074, -0.0522],
        ...,
        [-0.5875, -0.3160, -0.1027,  ..., -0.0450,  0.0276, -0.0284],
        [-0.4543, -0.3291, -0.1544,  ...,  0.0150,  0.0809,  0.0228],
        [-0.5145, -0.3726, -0.1654,  ...,  0.0375,  0.0092, -0.0238]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.2463,  0.7208,  0.1062,  ...,  0.0586, -0.1599,  0.0337],
        [ 0.0595,  0.0427, -0.1595,  ..., -0.1518, -0.3604, -0.1214],
        [-0.1829,  0.5506, -0.3182,  ...,  0.2325,  0.3212, -0.0066],
        ...,
        [ 0.1714, -0.4651, -0.2564,  ..., -0.3437, -0.1753, -0.2785],
        [ 0.0536, -0.3451, -0.2580,  ..., -0.3333,  0.3532,  0.2674],
        [ 0.1309, -0.4468, -0.1708,  ...,  0.2561,  0.3333, -0.2994]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2886])
shifts shape: torch.Size([2886, 3])
sender shape: torch.Size([2886])
receiver shape: torch.Size([2886])
Edge attributes shape: torch.Size([2886, 9])
Edge attributes tensor([[ 1.0000,  1.2435,  0.9833,  ..., -0.0371, -0.8857, -0.6839],
        [ 1.0000, -0.1886,  1.7214,  ...,  2.1951, -0.0735, -0.0222],
        [ 1.0000,  1.4172, -0.7286,  ..., -0.5245,  0.6385, -0.9991],
        ...,
        [ 1.0000,  1.3600,  1.0576,  ...,  0.1326,  0.2432, -1.1735],
        [ 1.0000,  1.2811, -0.0332,  ..., -1.1168,  0.0499, -0.1831],
        [ 1.0000, -0.2006,  1.7156,  ...,  2.1728,  0.2832, -0.0154]])
Edge features shape: torch.Size([2886, 8])
Edge features tensor([[ 0.1680, -0.0644, -0.1433,  ..., -0.1568, -0.0375,  0.1711],
        [ 0.3438,  0.4318,  0.1985,  ..., -0.3547, -0.0178,  0.3324],
        [ 0.3449,  0.4376,  0.2103,  ..., -0.3709, -0.0437,  0.3155],
        ...,
        [ 0.3127,  0.2802, -0.0618,  ...,  0.1216,  0.3477,  0.1899],
        [ 0.3130,  0.2812, -0.0603,  ...,  0.1188,  0.3478,  0.1937],
        [ 0.1130, -0.0907, -0.0403,  ..., -0.0762,  0.1195, -0.0196]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        ...,
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2886, 96])
Tensor Product Weights tensor([[-9.3995e-02,  6.9855e-02,  8.0807e-04,  ...,  5.0428e-02,
         -8.9604e-02,  2.1156e-02],
        [-8.2613e-01,  2.5336e-01, -3.3764e-02,  ..., -1.7282e-01,
          1.7016e-01, -6.0443e-02],
        [-8.4916e-01,  2.5744e-01, -3.2363e-02,  ..., -1.8292e-01,
          1.9146e-01, -5.7502e-02],
        ...,
        [-3.1390e-01,  1.4168e-01, -4.5820e-02,  ..., -1.0808e-01,
         -7.0396e-02, -3.7709e-02],
        [-3.1661e-01,  1.4223e-01, -4.6221e-02,  ..., -1.0719e-01,
         -7.0048e-02, -3.8301e-02],
        [-7.3423e-02, -1.3844e-02,  2.7309e-02,  ...,  8.3798e-02,
          4.1345e-02, -4.6410e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.4964, -0.3358, -0.4983,  ..., -0.0094, -0.0167, -0.0712],
        [-0.0845, -0.2165, -0.3014,  ..., -0.0095, -0.0999,  0.0238],
        [-0.5263, -0.2999, -0.4666,  ...,  0.0579, -0.0016, -0.0253],
        ...,
        [-0.5789, -0.3315, -0.1244,  ..., -0.0405,  0.0263, -0.0288],
        [-0.4534, -0.3272, -0.1556,  ...,  0.0150,  0.0822,  0.0208],
        [-0.5075, -0.3764, -0.1744,  ...,  0.0373,  0.0150, -0.0242]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.1362,  0.6215, -0.0365,  ...,  0.0558, -0.1868, -0.0717],
        [ 0.0647,  0.0695, -0.1538,  ..., -0.2864, -0.4151, -0.1749],
        [-0.2035,  0.6270, -0.2378,  ...,  0.1970,  0.3118, -0.0251],
        ...,
        [ 0.1649, -0.4602, -0.2537,  ..., -0.3360, -0.1710, -0.2888],
        [ 0.0565, -0.3476, -0.2547,  ..., -0.3370,  0.3475,  0.2631],
        [ 0.1321, -0.4456, -0.1672,  ...,  0.2605,  0.3385, -0.2904]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2958])
shifts shape: torch.Size([2958, 3])
sender shape: torch.Size([2958])
receiver shape: torch.Size([2958])
Edge attributes shape: torch.Size([2958, 9])
Edge attributes tensor([[ 1.0000e+00,  1.2539e+00,  9.5737e-01,  ..., -9.3290e-02,
         -8.8377e-01, -6.8477e-01],
        [ 1.0000e+00, -1.6063e-01,  1.7237e+00,  ...,  2.2039e+00,
         -1.2047e-01, -1.4764e-02],
        [ 1.0000e+00,  1.4050e+00, -7.5579e-01,  ..., -4.7939e-01,
          6.5801e-01, -9.8064e-01],
        ...,
        [ 1.0000e+00, -4.3195e-01, -1.3374e+00,  ...,  8.8158e-01,
         -1.7479e+00,  5.4114e-01],
        [ 1.0000e+00,  1.6697e+00,  4.6064e-01,  ..., -8.8080e-01,
         -1.4217e-03, -1.7995e+00],
        [ 1.0000e+00,  8.1818e-01,  4.6830e-01,  ..., -8.7285e-01,
         -8.7845e-01,  9.3072e-01]])
Edge features shape: torch.Size([2958, 8])
Edge features tensor([[ 1.6776e-01, -6.4667e-02, -1.4283e-01,  ..., -1.5699e-01,
         -3.6157e-02,  1.7093e-01],
        [ 3.4390e-01,  4.3213e-01,  1.9912e-01,  ..., -3.5554e-01,
         -1.9045e-02,  3.3161e-01],
        [ 3.4482e-01,  4.3725e-01,  2.0963e-01,  ..., -3.7004e-01,
         -4.2229e-02,  3.1649e-01],
        ...,
        [ 3.1303e-01,  2.8141e-01, -6.0049e-02,  ...,  1.1832e-01,
          3.4783e-01,  1.9438e-01],
        [ 1.0075e-04, -1.9924e-04,  2.9326e-04,  ..., -5.2819e-04,
          5.8493e-04, -6.2855e-04],
        [ 0.0000e+00, -0.0000e+00,  0.0000e+00,  ..., -0.0000e+00,
          0.0000e+00, -0.0000e+00]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        ...,
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2958, 96])
Tensor Product Weights tensor([[-9.4091e-02,  6.9142e-02,  5.5881e-04,  ...,  5.1188e-02,
         -8.9035e-02,  2.0843e-02],
        [-8.2728e-01,  2.5356e-01, -3.3691e-02,  ..., -1.7331e-01,
          1.7120e-01, -6.0304e-02],
        [-8.4789e-01,  2.5721e-01, -3.2436e-02,  ..., -1.8235e-01,
          1.9026e-01, -5.7673e-02],
        ...,
        [-3.1706e-01,  1.4232e-01, -4.6288e-02,  ..., -1.0705e-01,
         -6.9989e-02, -3.8401e-02],
        [-3.9031e-04,  1.6266e-04,  1.6373e-04,  ..., -8.5979e-05,
          4.8806e-04,  1.2356e-04],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,
          0.0000e+00,  0.0000e+00]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.4982, -0.3290, -0.4981,  ..., -0.0035,  0.0013, -0.0450],
        [-0.0713, -0.2252, -0.3202,  ..., -0.0149, -0.1068,  0.0271],
        [-0.5175, -0.3084, -0.4893,  ...,  0.0621,  0.0137, -0.0373],
        ...,
        [-0.6687, -0.2945, -0.1485,  ..., -0.0346, -0.0316,  0.0688],
        [-0.5316, -0.3548, -0.1738,  ...,  0.0075,  0.0371,  0.0248],
        [-0.4888, -0.2921, -0.1521,  ...,  0.0655, -0.0298,  0.0181]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.1330,  0.6143, -0.0394,  ...,  0.0828, -0.1867, -0.0288],
        [ 0.0598,  0.0728, -0.1417,  ..., -0.2949, -0.3856, -0.1838],
        [-0.2134,  0.6294, -0.2253,  ...,  0.2053,  0.3328, -0.0936],
        ...,
        [ 0.2302, -0.4774, -0.4256,  ...,  0.0758,  0.1469,  0.3617],
        [ 0.0962, -0.4379, -0.1669,  ...,  0.3813,  0.1331, -0.2959],
        [ 0.1378, -0.4529, -0.2100,  ...,  0.1813, -0.4869,  0.1286]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2846])
shifts shape: torch.Size([2846, 3])
sender shape: torch.Size([2846])
receiver shape: torch.Size([2846])
Edge attributes shape: torch.Size([2846, 9])
Edge attributes tensor([[ 1.0000,  1.2559,  0.9632,  ..., -0.0807, -0.8749, -0.6986],
        [ 1.0000, -0.1517,  1.7253,  ...,  2.2098, -0.0496, -0.0145],
        [ 1.0000,  1.3862, -0.7514,  ..., -0.4868,  0.6953, -0.9087],
        ...,
        [ 1.0000, -0.0705,  0.0514,  ..., -1.1151,  0.1147,  1.9284],
        [ 1.0000,  0.3864,  0.9607,  ..., -0.0862,  1.7220,  1.1480],
        [ 1.0000, -1.0798,  0.0422,  ..., -1.1160,  0.0738,  0.4301]])
Edge features shape: torch.Size([2846, 8])
Edge features tensor([[ 0.1673, -0.0650, -0.1421,  ..., -0.1573, -0.0342,  0.1706],
        [ 0.3439,  0.4323,  0.1994,  ..., -0.3559, -0.0196,  0.3313],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3708, -0.0434,  0.3157],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4170],
        [ 0.3126,  0.2798, -0.0623,  ...,  0.1226,  0.3476,  0.1885],
        [ 0.3131,  0.2819, -0.0594,  ...,  0.1171,  0.3479,  0.1961]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        ...,
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2846, 96])
Tensor Product Weights tensor([[-9.4235e-02,  6.8043e-02,  1.8450e-04,  ...,  5.2351e-02,
         -8.8146e-02,  2.0353e-02],
        [-8.2777e-01,  2.5364e-01, -3.3660e-02,  ..., -1.7352e-01,
          1.7164e-01, -6.0245e-02],
        [-8.4894e-01,  2.5740e-01, -3.2375e-02,  ..., -1.8282e-01,
          1.9125e-01, -5.7531e-02],
        ...,
        [-1.1969e+00,  4.5123e-01, -1.3646e-01,  ..., -5.6566e-01,
          9.0025e-01,  3.1829e-02],
        [-3.1294e-01,  1.4149e-01, -4.5674e-02,  ..., -1.0840e-01,
         -7.0518e-02, -3.7497e-02],
        [-3.1828e-01,  1.4257e-01, -4.6464e-02,  ..., -1.0666e-01,
         -6.9830e-02, -3.8666e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.4951, -0.3324, -0.4981,  ..., -0.0038, -0.0007, -0.0382],
        [-0.0332, -0.2069, -0.3206,  ..., -0.0142, -0.0985,  0.0197],
        [-0.5311, -0.2948, -0.4648,  ...,  0.0634,  0.0168, -0.0456],
        ...,
        [-0.5828, -0.2706, -0.0753,  ...,  0.0658,  0.0537, -0.0090],
        [-0.4649, -0.4345, -0.2660,  ..., -0.0654,  0.0251, -0.0568],
        [-0.5171, -0.3686, -0.1548,  ..., -0.0459,  0.0289,  0.0132]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.1378,  0.6187, -0.0345,  ...,  0.0893, -0.1873, -0.0337],
        [ 0.0425,  0.0537, -0.1342,  ..., -0.1543, -0.3646, -0.1144],
        [-0.2092,  0.6228, -0.2472,  ...,  0.1823,  0.3076, -0.0827],
        ...,
        [ 0.1795, -0.4817, -0.2559,  ..., -0.1221, -0.4369, -0.1375],
        [ 0.1530, -0.4426, -0.2155,  ...,  0.5006, -0.0679, -0.1290],
        [ 0.1521, -0.4603, -0.1721,  ...,  0.0304, -0.0639,  0.5160]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2850])
shifts shape: torch.Size([2850, 3])
sender shape: torch.Size([2850])
receiver shape: torch.Size([2850])
Edge attributes shape: torch.Size([2850, 9])
Edge attributes tensor([[ 1.0000,  1.2500,  0.9723,  ..., -0.0610, -0.8804, -0.6911],
        [ 1.0000, -0.1522,  1.7253,  ...,  2.2101,  0.0170, -0.0149],
        [ 1.0000,  1.3752, -0.7543,  ..., -0.4819,  0.7155, -0.8723],
        ...,
        [ 1.0000,  1.3621,  1.0602,  ...,  0.1388,  0.1958, -1.1845],
        [ 1.0000,  1.2634, -0.0497,  ..., -1.1153,  0.0759, -0.1257],
        [ 1.0000, -0.2011,  1.7170,  ...,  2.1779,  0.2387, -0.0186]])
Edge features shape: torch.Size([2850, 8])
Edge features tensor([[ 0.1688, -0.0637, -0.1447,  ..., -0.1561, -0.0411,  0.1717],
        [ 0.3445,  0.4353,  0.2055,  ..., -0.3644, -0.0332,  0.3226],
        [ 0.3449,  0.4379,  0.2110,  ..., -0.3719, -0.0453,  0.3144],
        ...,
        [ 0.3127,  0.2802, -0.0617,  ...,  0.1215,  0.3477,  0.1900],
        [ 0.3130,  0.2814, -0.0601,  ...,  0.1184,  0.3478,  0.1943],
        [ 0.1133, -0.0906, -0.0407,  ..., -0.0769,  0.1194, -0.0187]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        ...,
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2850, 96])
Tensor Product Weights tensor([[-0.0937,  0.0719,  0.0015,  ...,  0.0482, -0.0912,  0.0220],
        [-0.8399,  0.2558, -0.0329,  ..., -0.1788,  0.1827, -0.0587],
        [-0.8506,  0.2577, -0.0323,  ..., -0.1836,  0.1928, -0.0573],
        ...,
        [-0.3140,  0.1417, -0.0458,  ..., -0.1080, -0.0704, -0.0377],
        [-0.3170,  0.1423, -0.0463,  ..., -0.1071, -0.0700, -0.0384],
        [-0.0737, -0.0137,  0.0271,  ...,  0.0841,  0.0410, -0.0462]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.4225, -0.4439, -0.5422,  ..., -0.0042, -0.0141, -0.0671],
        [-0.0506, -0.1956, -0.3174,  ..., -0.0126, -0.1067,  0.0283],
        [-0.5879, -0.2116, -0.4323,  ...,  0.0117,  0.0071, -0.0522],
        ...,
        [-0.5789, -0.3312, -0.1240,  ..., -0.0400,  0.0265, -0.0305],
        [-0.4559, -0.3273, -0.1544,  ...,  0.0162,  0.0812,  0.0219],
        [-0.5138, -0.3730, -0.1673,  ...,  0.0389,  0.0093, -0.0241]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.2464,  0.7210,  0.1057,  ...,  0.0586, -0.1600,  0.0341],
        [ 0.0597,  0.0425, -0.1592,  ..., -0.1491, -0.3601, -0.1203],
        [-0.1828,  0.5503, -0.3182,  ...,  0.2320,  0.3215, -0.0072],
        ...,
        [ 0.1648, -0.4603, -0.2538,  ..., -0.3403, -0.1749, -0.2812],
        [ 0.0534, -0.3458, -0.2582,  ..., -0.3351,  0.3514,  0.2658],
        [ 0.1302, -0.4467, -0.1707,  ...,  0.2576,  0.3354, -0.2966]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2932])
shifts shape: torch.Size([2932, 3])
sender shape: torch.Size([2932])
receiver shape: torch.Size([2932])
Edge attributes shape: torch.Size([2932, 9])
Edge attributes tensor([[ 1.0000,  1.2513,  0.9532,  ..., -0.1022, -0.8923, -0.6712],
        [ 1.0000, -0.1416,  1.7260,  ...,  2.2128, -0.0612, -0.0125],
        [ 1.0000,  1.3704, -0.7625,  ..., -0.4680,  0.7239, -0.8631],
        ...,
        [ 1.0000, -0.4213, -1.3217,  ...,  0.8352, -1.7696,  0.5796],
        [ 1.0000,  1.6719,  0.4512,  ..., -0.8904, -0.0205, -1.8035],
        [ 1.0000,  0.7943,  0.4409,  ..., -0.9007, -0.8394,  0.9965]])
Edge features shape: torch.Size([2932, 8])
Edge features tensor([[ 1.6749e-01, -6.4908e-02, -1.4233e-01,  ..., -1.5720e-01,
         -3.4884e-02,  1.7071e-01],
        [ 3.4393e-01,  4.3230e-01,  1.9946e-01,  ..., -3.5602e-01,
         -1.9796e-02,  3.3114e-01],
        [ 3.4483e-01,  4.3729e-01,  2.0973e-01,  ..., -3.7017e-01,
         -4.2444e-02,  3.1635e-01],
        ...,
        [ 3.1303e-01,  2.8142e-01, -6.0032e-02,  ...,  1.1829e-01,
          3.4783e-01,  1.9442e-01],
        [ 1.1239e-04, -2.2211e-04,  3.2655e-04,  ..., -5.8443e-04,
          6.4510e-04, -6.9045e-04],
        [ 0.0000e+00, -0.0000e+00,  0.0000e+00,  ..., -0.0000e+00,
          0.0000e+00, -0.0000e+00]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        ...,
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2932, 96])
Tensor Product Weights tensor([[-9.4183e-02,  6.8443e-02,  3.1934e-04,  ...,  5.1929e-02,
         -8.8471e-02,  2.0532e-02],
        [-8.2795e-01,  2.5368e-01, -3.3648e-02,  ..., -1.7360e-01,
          1.7181e-01, -6.0223e-02],
        [-8.4808e-01,  2.5724e-01, -3.2425e-02,  ..., -1.8243e-01,
          1.9044e-01, -5.7647e-02],
        ...,
        [-3.1709e-01,  1.4233e-01, -4.6292e-02,  ..., -1.0704e-01,
         -6.9985e-02, -3.8408e-02],
        [-4.3035e-04,  1.8170e-04,  1.8254e-04,  ..., -9.4348e-05,
          5.3837e-04,  1.3676e-04],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,
          0.0000e+00,  0.0000e+00]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.4955, -0.3316, -0.4996,  ..., -0.0014,  0.0027, -0.0383],
        [-0.0190, -0.2196, -0.3406,  ..., -0.0171, -0.1069,  0.0202],
        [-0.5176, -0.3115, -0.4917,  ...,  0.0620,  0.0157, -0.0323],
        ...,
        [-0.6686, -0.2835, -0.1385,  ..., -0.0329, -0.0273,  0.0679],
        [-0.5290, -0.3566, -0.1728,  ...,  0.0079,  0.0350,  0.0250],
        [-0.4892, -0.2902, -0.1502,  ...,  0.0651, -0.0313,  0.0198]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.1357,  0.6170, -0.0358,  ...,  0.0840, -0.1862, -0.0335],
        [ 0.0353,  0.0580, -0.1144,  ..., -0.1871, -0.3410, -0.1333],
        [-0.2139,  0.6306, -0.2185,  ...,  0.2066,  0.3336, -0.0946],
        ...,
        [ 0.2301, -0.4721, -0.4182,  ...,  0.0852,  0.1534,  0.3594],
        [ 0.0992, -0.4393, -0.1651,  ...,  0.3778,  0.1272, -0.3046],
        [ 0.1376, -0.4525, -0.2108,  ...,  0.1809, -0.4873,  0.1311]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2968])
shifts shape: torch.Size([2968, 3])
sender shape: torch.Size([2968])
receiver shape: torch.Size([2968])
Edge attributes shape: torch.Size([2968, 9])
Edge attributes tensor([[ 1.0000,  1.2400,  0.9615,  ..., -0.0845, -0.9105, -0.6452],
        [ 1.0000, -0.1555,  1.7248,  ...,  2.2080, -0.0687, -0.0150],
        [ 1.0000,  1.3816, -0.7534,  ..., -0.4835,  0.7038, -0.8941],
        ...,
        [ 1.0000,  0.0611, -1.6238,  ...,  1.8297,  1.2572,  0.2298],
        [ 1.0000, -0.4372, -1.3360,  ...,  0.8775, -1.7453,  0.5375],
        [ 1.0000,  1.6703,  0.4585,  ..., -0.8830,  0.0027, -1.8008]])
Edge features shape: torch.Size([2968, 8])
Edge features tensor([[ 1.6790e-01, -6.4537e-02, -1.4309e-01,  ..., -1.5688e-01,
         -3.6846e-02,  1.7104e-01],
        [ 3.4387e-01,  4.3201e-01,  1.9885e-01,  ..., -3.5517e-01,
         -1.8472e-02,  3.3197e-01],
        [ 3.4480e-01,  4.3714e-01,  2.0941e-01,  ..., -3.6974e-01,
         -4.1740e-02,  3.1683e-01],
        ...,
        [ 3.1205e-01,  2.7723e-01, -6.5764e-02,  ...,  1.2916e-01,
          3.4718e-01,  1.7927e-01],
        [ 3.1304e-01,  2.8146e-01, -5.9977e-02,  ...,  1.1818e-01,
          3.4784e-01,  1.9456e-01],
        [ 1.1218e-04, -2.2170e-04,  3.2596e-04,  ..., -5.8344e-04,
          6.4403e-04, -6.8935e-04]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        ...,
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2968, 96])
Tensor Product Weights tensor([[-9.4040e-02,  6.9521e-02,  6.9077e-04,  ...,  5.0784e-02,
         -8.9338e-02,  2.1010e-02],
        [-8.2676e-01,  2.5347e-01, -3.3723e-02,  ..., -1.7309e-01,
          1.7073e-01, -6.0367e-02],
        [-8.4746e-01,  2.5713e-01, -3.2461e-02,  ..., -1.8215e-01,
          1.8985e-01, -5.7730e-02],
        ...,
        [-3.0660e-01,  1.4025e-01, -4.4672e-02,  ..., -1.1058e-01,
         -7.1309e-02, -3.6092e-02],
        [-3.1719e-01,  1.4235e-01, -4.6307e-02,  ..., -1.0701e-01,
         -6.9972e-02, -3.8429e-02],
        [-4.2964e-04,  1.8136e-04,  1.8221e-04,  ..., -9.4199e-05,
          5.3748e-04,  1.3653e-04]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.4823, -0.3502, -0.4998,  ..., -0.0098,  0.0265, -0.0474],
        [-0.1089, -0.2048, -0.3065,  ..., -0.0125, -0.1124,  0.0404],
        [-0.5519, -0.2194, -0.4787,  ...,  0.0398, -0.0316,  0.0061],
        ...,
        [-0.6699, -0.2916, -0.1446,  ..., -0.0290, -0.0254,  0.0664],
        [-0.5340, -0.3528, -0.1739,  ...,  0.0102,  0.0376,  0.0239],
        [-0.4875, -0.2897, -0.1539,  ...,  0.0637, -0.0303,  0.0220]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.1572,  0.6304, -0.0390,  ...,  0.0824, -0.1967, -0.0360],
        [ 0.0865,  0.0600, -0.1757,  ..., -0.2734, -0.3854, -0.1759],
        [-0.1786,  0.5476, -0.2786,  ...,  0.1845,  0.3539, -0.1405],
        ...,
        [ 0.2278, -0.4784, -0.4250,  ...,  0.0766,  0.1445,  0.3652],
        [ 0.0953, -0.4376, -0.1689,  ...,  0.3830,  0.1336, -0.2945],
        [ 0.1347, -0.4500, -0.2117,  ...,  0.1796, -0.4881,  0.1312]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2910])
shifts shape: torch.Size([2910, 3])
sender shape: torch.Size([2910])
receiver shape: torch.Size([2910])
Edge attributes shape: torch.Size([2910, 9])
Edge attributes tensor([[ 1.0000,  1.3097,  0.9397,  ..., -0.1307, -0.7687, -0.8481],
        [ 1.0000, -0.1094,  1.7285,  ...,  2.2225, -0.0314, -0.0076],
        [ 1.0000,  1.4171, -0.7779,  ..., -0.4415,  0.6246, -1.0466],
        ...,
        [ 1.0000, -0.1822, -0.0527,  ..., -1.1149, -0.1172,  1.8918],
        [ 1.0000,  0.2949,  0.8742,  ..., -0.2635,  1.6544,  1.3309],
        [ 1.0000, -1.1649, -0.0368,  ..., -1.1165, -0.0608,  0.1838]])
Edge features shape: torch.Size([2910, 8])
Edge features tensor([[ 0.1674, -0.0650, -0.1422,  ..., -0.1572, -0.0346,  0.1707],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3554, -0.0188,  0.3317],
        [ 0.3449,  0.4375,  0.2101,  ..., -0.3706, -0.0432,  0.3159],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4170],
        [ 0.3127,  0.2798, -0.0623,  ...,  0.1226,  0.3476,  0.1885],
        [ 0.3131,  0.2818, -0.0595,  ...,  0.1172,  0.3479,  0.1958]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        ...,
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2910, 96])
Tensor Product Weights tensor([[-9.4206e-02,  6.8268e-02,  2.6023e-04,  ...,  5.2114e-02,
         -8.8329e-02,  2.0454e-02],
        [-8.2708e-01,  2.5352e-01, -3.3703e-02,  ..., -1.7322e-01,
          1.7102e-01, -6.0328e-02],
        [-8.4872e-01,  2.5736e-01, -3.2388e-02,  ..., -1.8272e-01,
          1.9104e-01, -5.7561e-02],
        ...,
        [-1.1969e+00,  4.5124e-01, -1.3646e-01,  ..., -5.6567e-01,
          9.0026e-01,  3.1829e-02],
        [-3.1297e-01,  1.4149e-01, -4.5678e-02,  ..., -1.0839e-01,
         -7.0515e-02, -3.7504e-02],
        [-3.1810e-01,  1.4254e-01, -4.6438e-02,  ..., -1.0672e-01,
         -6.9854e-02, -3.8627e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.4981, -0.3411, -0.4973,  ..., -0.0056,  0.0193, -0.0509],
        [-0.1006, -0.2100, -0.3311,  ..., -0.0149, -0.0973,  0.0301],
        [-0.5607, -0.2152, -0.4665,  ...,  0.0356, -0.0362, -0.0063],
        ...,
        [-0.5818, -0.2766, -0.0790,  ...,  0.0611,  0.0629, -0.0099],
        [-0.4712, -0.4251, -0.2742,  ..., -0.0684,  0.0374, -0.0620],
        [-0.5170, -0.3718, -0.1603,  ..., -0.0492,  0.0230,  0.0156]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.1397,  0.6261, -0.0610,  ...,  0.0636, -0.1817, -0.0411],
        [ 0.0829,  0.0819, -0.1834,  ..., -0.1153, -0.3735, -0.0915],
        [-0.1749,  0.5477, -0.2885,  ...,  0.1861,  0.3247, -0.1337],
        ...,
        [ 0.1823, -0.4832, -0.2569,  ..., -0.1129, -0.4267, -0.1715],
        [ 0.1471, -0.4326, -0.2195,  ...,  0.5093, -0.0607, -0.0990],
        [ 0.1504, -0.4604, -0.1724,  ..., -0.0013, -0.0942,  0.5131]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2860])
shifts shape: torch.Size([2860, 3])
sender shape: torch.Size([2860])
receiver shape: torch.Size([2860])
Edge attributes shape: torch.Size([2860, 9])
Edge attributes tensor([[ 1.0000,  1.2421,  0.9771,  ..., -0.0506, -0.8942, -0.6715],
        [ 1.0000, -0.1688,  1.7238,  ...,  2.2041, -0.0212, -0.0183],
        [ 1.0000,  1.3810, -0.7373,  ..., -0.5103,  0.7055, -0.8763],
        ...,
        [ 1.0000,  1.1145,  0.9737,  ..., -0.0581, -1.1312, -0.2789],
        [ 1.0000,  1.3694,  1.0512,  ...,  0.1174,  0.1908, -1.1977],
        [ 1.0000,  1.2592, -0.0553,  ..., -1.1146,  0.0848, -0.1124]])
Edge features shape: torch.Size([2860, 8])
Edge features tensor([[ 0.1677, -0.0647, -0.1427,  ..., -0.1570, -0.0359,  0.1709],
        [ 0.3439,  0.4320,  0.1988,  ..., -0.3551, -0.0183,  0.3321],
        [ 0.3449,  0.4377,  0.2105,  ..., -0.3712, -0.0441,  0.3152],
        ...,
        [ 0.3663,  0.5674,  0.5127,  ..., -0.4769, -0.5772, -0.4172],
        [ 0.3127,  0.2802, -0.0617,  ...,  0.1216,  0.3477,  0.1899],
        [ 0.3130,  0.2813, -0.0602,  ...,  0.1186,  0.3478,  0.1940]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        ...,
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2860, 96])
Tensor Product Weights tensor([[-9.4107e-02,  6.9022e-02,  5.1743e-04,  ...,  5.1315e-02,
         -8.8939e-02,  2.0790e-02],
        [-8.2662e-01,  2.5344e-01, -3.3732e-02,  ..., -1.7303e-01,
          1.7061e-01, -6.0384e-02],
        [-8.4953e-01,  2.5750e-01, -3.2342e-02,  ..., -1.8309e-01,
          1.9181e-01, -5.7452e-02],
        ...,
        [-1.1968e+00,  4.5131e-01, -1.3654e-01,  ..., -5.6578e-01,
          9.0046e-01,  3.1833e-02],
        [-3.1394e-01,  1.4169e-01, -4.5826e-02,  ..., -1.0806e-01,
         -7.0391e-02, -3.7718e-02],
        [-3.1677e-01,  1.4226e-01, -4.6245e-02,  ..., -1.0714e-01,
         -7.0027e-02, -3.8337e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.4929, -0.3384, -0.4997,  ..., -0.0068, -0.0153, -0.0648],
        [-0.0338, -0.2078, -0.3208,  ..., -0.0123, -0.0994,  0.0171],
        [-0.5255, -0.3034, -0.4703,  ...,  0.0586,  0.0013, -0.0206],
        ...,
        [-0.5876, -0.3160, -0.1025,  ..., -0.0457,  0.0272, -0.0282],
        [-0.4543, -0.3343, -0.1585,  ...,  0.0136,  0.0815,  0.0242],
        [-0.5079, -0.3772, -0.1739,  ...,  0.0358,  0.0143, -0.0237]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.1406,  0.6244, -0.0305,  ...,  0.0572, -0.1857, -0.0770],
        [ 0.0420,  0.0522, -0.1334,  ..., -0.1666, -0.3690, -0.1201],
        [-0.2044,  0.6282, -0.2317,  ...,  0.1992,  0.3128, -0.0260],
        ...,
        [ 0.1715, -0.4652, -0.2565,  ..., -0.3437, -0.1713, -0.2804],
        [ 0.0523, -0.3443, -0.2592,  ..., -0.3316,  0.3541,  0.2713],
        [ 0.1325, -0.4452, -0.1671,  ...,  0.2566,  0.3330, -0.2984]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2954])
shifts shape: torch.Size([2954, 3])
sender shape: torch.Size([2954])
receiver shape: torch.Size([2954])
Edge attributes shape: torch.Size([2954, 9])
Edge attributes tensor([[ 1.0000,  1.2434,  0.9709,  ..., -0.0641, -0.8963, -0.6678],
        [ 1.0000, -0.1593,  1.7247,  ...,  2.2075, -0.0276, -0.0163],
        [ 1.0000,  1.3901, -0.7439,  ..., -0.4993,  0.6886, -0.9155],
        ...,
        [ 1.0000,  1.0958,  0.4917,  ..., -0.8478, -0.7921,  0.2302],
        [ 1.0000,  0.4973, -0.3461,  ..., -0.9841,  0.7251,  1.5398],
        [ 1.0000,  0.4178,  1.3078,  ...,  0.7943, -1.7828,  0.6070]])
Edge features shape: torch.Size([2954, 8])
Edge features tensor([[ 0.1681, -0.0644, -0.1434,  ..., -0.1567, -0.0376,  0.1712],
        [ 0.3439,  0.4320,  0.1989,  ..., -0.3552, -0.0185,  0.3319],
        [ 0.3448,  0.4372,  0.2096,  ..., -0.3700, -0.0422,  0.3165],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4170],
        [ 0.3148,  0.2890, -0.0495,  ...,  0.0980,  0.3475,  0.2210],
        [ 0.3130,  0.2814, -0.0600,  ...,  0.1183,  0.3478,  0.1944]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        ...,
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2954, 96])
Tensor Product Weights tensor([[-9.3983e-02,  6.9948e-02,  8.4074e-04,  ...,  5.0329e-02,
         -8.9677e-02,  2.1197e-02],
        [-8.2680e-01,  2.5348e-01, -3.3721e-02,  ..., -1.7311e-01,
          1.7077e-01, -6.0361e-02],
        [-8.4787e-01,  2.5720e-01, -3.2438e-02,  ..., -1.8234e-01,
          1.9023e-01, -5.7676e-02],
        ...,
        [-1.1969e+00,  4.5124e-01, -1.3647e-01,  ..., -5.6568e-01,
          9.0028e-01,  3.1829e-02],
        [-3.3656e-01,  1.4656e-01, -4.8819e-02,  ..., -1.0138e-01,
         -6.7310e-02, -4.2548e-02],
        [-3.1709e-01,  1.4233e-01, -4.6291e-02,  ..., -1.0704e-01,
         -6.9986e-02, -3.8406e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.4734, -0.3623, -0.5050,  ..., -0.0143,  0.0032, -0.0730],
        [-0.1060, -0.2054, -0.3066,  ..., -0.0124, -0.1112,  0.0352],
        [-0.5630, -0.2300, -0.4606,  ...,  0.0387, -0.0389,  0.0242],
        ...,
        [-0.7067, -0.1960, -0.1377,  ...,  0.0567, -0.0126,  0.0676],
        [-0.4866, -0.2901, -0.1503,  ...,  0.0651, -0.0326,  0.0201],
        [-0.5193, -0.3722, -0.1751,  ..., -0.0011,  0.0148,  0.0148]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.1647,  0.6423, -0.0200,  ...,  0.0532, -0.1880, -0.0731],
        [ 0.0841,  0.0591, -0.1751,  ..., -0.2781, -0.3884, -0.1736],
        [-0.1797,  0.5661, -0.2875,  ...,  0.2196,  0.3269, -0.0444],
        ...,
        [ 0.1427, -0.3984, -0.4206,  ...,  0.0714,  0.2028,  0.3619],
        [ 0.1374, -0.4535, -0.2095,  ...,  0.1837, -0.4817,  0.1448],
        [ 0.1070, -0.4449, -0.1552,  ...,  0.3821,  0.1275, -0.2999]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2858])
shifts shape: torch.Size([2858, 3])
sender shape: torch.Size([2858])
receiver shape: torch.Size([2858])
Edge attributes shape: torch.Size([2858, 9])
Edge attributes tensor([[ 1.0000e+00,  1.3158e+00,  9.2896e-01,  ..., -1.5321e-01,
         -7.6378e-01, -8.5583e-01],
        [ 1.0000e+00, -7.3545e-02,  1.7302e+00,  ...,  2.2290e+00,
          6.8276e-02, -2.8883e-03],
        [ 1.0000e+00,  1.3713e+00, -7.8943e-01,  ..., -4.2128e-01,
          7.1791e-01, -8.9361e-01],
        ...,
        [ 1.0000e+00,  1.3096e+00,  3.2323e-02,  ..., -1.1169e+00,
         -4.7280e-02, -2.7845e-01],
        [ 1.0000e+00, -2.1747e-01,  1.7051e+00,  ...,  2.1324e+00,
          4.6914e-01, -1.2074e-03],
        [ 1.0000e+00,  1.3477e+00,  1.0554e+00,  ...,  1.2737e-01,
          3.6017e-01, -1.1273e+00]])
Edge features shape: torch.Size([2858, 8])
Edge features tensor([[ 0.1670, -0.0654, -0.1414,  ..., -0.1576, -0.0324,  0.1703],
        [ 0.3440,  0.4325,  0.1998,  ..., -0.3565, -0.0205,  0.3307],
        [ 0.3449,  0.4376,  0.2104,  ..., -0.3711, -0.0439,  0.3153],
        ...,
        [ 0.3130,  0.2813, -0.0602,  ...,  0.1186,  0.3478,  0.1939],
        [ 0.1140, -0.0906, -0.0421,  ..., -0.0792,  0.1193, -0.0156],
        [ 0.3127,  0.2800, -0.0620,  ...,  0.1219,  0.3477,  0.1894]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        [ 0.5530, -0.1843,  0.3257,  ...,  0.5016,  0.6470, -0.5472],
        ...,
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151],
        [ 0.3381, -0.0536, -0.5185,  ...,  0.7458, -0.3924, -0.3151]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2858, 96])
Tensor Product Weights tensor([[-9.4357e-02,  6.7096e-02, -1.2834e-04,  ...,  5.3347e-02,
         -8.7369e-02,  1.9926e-02],
        [-8.2861e-01,  2.5379e-01, -3.3606e-02,  ..., -1.7388e-01,
          1.7241e-01, -6.0142e-02],
        [-8.4940e-01,  2.5748e-01, -3.2349e-02,  ..., -1.8303e-01,
          1.9169e-01, -5.7470e-02],
        ...,
        [-3.1676e-01,  1.4226e-01, -4.6243e-02,  ..., -1.0715e-01,
         -7.0029e-02, -3.8334e-02],
        [-7.4447e-02, -1.3360e-02,  2.6406e-02,  ...,  8.4893e-02,
          3.9792e-02, -4.5575e-02],
        [-3.1357e-01,  1.4161e-01, -4.5770e-02,  ..., -1.0819e-01,
         -7.0438e-02, -3.7636e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.4906, -0.3447, -0.5032,  ...,  0.0007,  0.0175, -0.0427],
        [-0.0550, -0.2235, -0.3432,  ..., -0.0018, -0.0996,  0.0377],
        [-0.5679, -0.2175, -0.4578,  ...,  0.0371, -0.0252, -0.0020],
        ...,
        [-0.5878, -0.3115, -0.0976,  ..., -0.0517,  0.0263, -0.0228],
        [-0.4341, -0.3503, -0.1815,  ...,  0.0078,  0.0862,  0.0178],
        [-0.5080, -0.3778, -0.1822,  ...,  0.0272,  0.0251, -0.0188]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.1446,  0.6278, -0.0469,  ...,  0.0574, -0.1751, -0.0515],
        [ 0.0557,  0.0958, -0.1545,  ..., -0.0441, -0.3098, -0.0479],
        [-0.1776,  0.5531, -0.2927,  ...,  0.1915,  0.3189, -0.1195],
        ...,
        [ 0.1754, -0.4688, -0.2573,  ..., -0.3286, -0.1534, -0.3062],
        [ 0.0555, -0.3469, -0.2471,  ..., -0.3460,  0.3274,  0.2659],
        [ 0.1310, -0.4411, -0.1672,  ...,  0.2650,  0.3545, -0.2666]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
process_conformer_ensemble input shape: torch.Size([16, 110, 32])
Num conformers: 16, Num atoms: 110, Total dim: 32
Scalar dim: 8, Vector dim: 8
mean_pooling:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[-0.7883, -0.9117,  0.8218,  ..., -1.3718, -1.4139,  0.2952],
         [-0.0082,  0.2102,  0.2551,  ..., -0.5358, -0.1136,  0.1894],
         [-0.8258, -1.1806,  0.9361,  ..., -1.7147, -1.5540,  0.3123],
         ...,
         [-0.1406, -0.1108,  0.1141,  ...,  0.0148, -0.1922, -0.0604],
         [-0.1816, -0.2015,  0.1137,  ..., -0.0139, -0.2622, -0.0773],
         [-0.1517, -0.1809,  0.0830,  ...,  0.0278, -0.2360, -0.0933]],

        [[-0.7883, -0.9117,  0.8218,  ..., -1.3718, -1.4139,  0.2952],
         [-0.0082,  0.2102,  0.2551,  ..., -0.5358, -0.1136,  0.1894],
         [-0.8258, -1.1806,  0.9361,  ..., -1.7147, -1.5540,  0.3123],
         ...,
         [-0.1406, -0.1108,  0.1141,  ...,  0.0148, -0.1922, -0.0604],
         [-0.1816, -0.2015,  0.1137,  ..., -0.0139, -0.2622, -0.0773],
         [-0.1517, -0.1809,  0.0830,  ...,  0.0278, -0.2360, -0.0933]],

        [[-0.7883, -0.9117,  0.8218,  ..., -1.3718, -1.4139,  0.2952],
         [-0.0082,  0.2102,  0.2551,  ..., -0.5358, -0.1136,  0.1894],
         [-0.8258, -1.1806,  0.9361,  ..., -1.7147, -1.5540,  0.3123],
         ...,
         [-0.1406, -0.1108,  0.1141,  ...,  0.0148, -0.1922, -0.0604],
         [-0.1816, -0.2015,  0.1137,  ..., -0.0139, -0.2622, -0.0773],
         [-0.1517, -0.1809,  0.0830,  ...,  0.0278, -0.2360, -0.0933]],

        ...,

        [[-0.7883, -0.9117,  0.8218,  ..., -1.3718, -1.4139,  0.2952],
         [-0.0082,  0.2102,  0.2551,  ..., -0.5358, -0.1136,  0.1894],
         [-0.8258, -1.1806,  0.9361,  ..., -1.7147, -1.5540,  0.3123],
         ...,
         [-0.1406, -0.1108,  0.1141,  ...,  0.0148, -0.1922, -0.0604],
         [-0.1816, -0.2015,  0.1137,  ..., -0.0139, -0.2622, -0.0773],
         [-0.1517, -0.1809,  0.0830,  ...,  0.0278, -0.2360, -0.0933]],

        [[-0.7883, -0.9117,  0.8218,  ..., -1.3718, -1.4139,  0.2952],
         [-0.0082,  0.2102,  0.2551,  ..., -0.5358, -0.1136,  0.1894],
         [-0.8258, -1.1806,  0.9361,  ..., -1.7147, -1.5540,  0.3123],
         ...,
         [-0.1406, -0.1108,  0.1141,  ...,  0.0148, -0.1922, -0.0604],
         [-0.1816, -0.2015,  0.1137,  ..., -0.0139, -0.2622, -0.0773],
         [-0.1517, -0.1809,  0.0830,  ...,  0.0278, -0.2360, -0.0933]],

        [[-0.7883, -0.9117,  0.8218,  ..., -1.3718, -1.4139,  0.2952],
         [-0.0082,  0.2102,  0.2551,  ..., -0.5358, -0.1136,  0.1894],
         [-0.8258, -1.1806,  0.9361,  ..., -1.7147, -1.5540,  0.3123],
         ...,
         [-0.1406, -0.1108,  0.1141,  ...,  0.0148, -0.1922, -0.0604],
         [-0.1816, -0.2015,  0.1137,  ..., -0.0139, -0.2622, -0.0773],
         [-0.1517, -0.1809,  0.0830,  ...,  0.0278, -0.2360, -0.0933]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[ 0.0578, -0.0529, -0.0577],
          [ 0.0160,  0.0234, -0.0280],
          [ 0.1109,  0.1855, -0.0744],
          ...,
          [ 0.0156,  0.1495, -0.0178],
          [ 0.0141,  0.0207, -0.0012],
          [-0.0149,  0.1285,  0.0105]],

         [[ 0.5958,  0.5184, -0.0686],
          [-0.3250, -0.4115, -0.0623],
          [ 0.0620,  0.0381,  0.0875],
          ...,
          [-0.0076,  0.0520,  0.0754],
          [ 0.2503,  0.2843,  0.0699],
          [-0.1225, -0.0935,  0.0754]],

         [[-0.0064,  0.2222, -0.0823],
          [ 0.1328,  0.1309, -0.0977],
          [ 0.2530,  0.0264, -0.1089],
          ...,
          [ 0.0426, -0.1056, -0.0196],
          [-0.0479, -0.0684,  0.0264],
          [ 0.0020, -0.1153, -0.0083]],

         ...,

         [[-0.0487,  0.0425, -0.2565],
          [ 0.0278,  0.0605, -0.0915],
          [ 0.2153,  0.1761, -0.1873],
          ...,
          [-0.0086, -0.0064, -0.0146],
          [-0.0280, -0.0318,  0.0157],
          [-0.1309, -0.0906, -0.0256]],

         [[ 0.0572,  0.1718, -0.1462],
          [ 0.0248,  0.0197, -0.0470],
          [ 0.0378, -0.0188, -0.1388],
          ...,
          [-0.0020,  0.0097, -0.0064],
          [-0.0165,  0.0301,  0.0428],
          [-0.0134,  0.0972,  0.0646]],

         [[ 0.1957,  0.1295, -0.0950],
          [ 0.0290,  0.0499, -0.0176],
          [-0.0604,  0.0333,  0.0094],
          ...,
          [ 0.0190, -0.0060, -0.0059],
          [ 0.0213, -0.0237,  0.0059],
          [ 0.1401, -0.0011, -0.0300]]],


        [[[ 0.0578, -0.0529, -0.0577],
          [ 0.0160,  0.0234, -0.0280],
          [ 0.1109,  0.1855, -0.0744],
          ...,
          [ 0.0156,  0.1495, -0.0178],
          [ 0.0141,  0.0207, -0.0012],
          [-0.0149,  0.1285,  0.0105]],

         [[ 0.5958,  0.5184, -0.0686],
          [-0.3250, -0.4115, -0.0623],
          [ 0.0620,  0.0381,  0.0875],
          ...,
          [-0.0076,  0.0520,  0.0754],
          [ 0.2503,  0.2843,  0.0699],
          [-0.1225, -0.0935,  0.0754]],

         [[-0.0064,  0.2222, -0.0823],
          [ 0.1328,  0.1309, -0.0977],
          [ 0.2530,  0.0264, -0.1089],
          ...,
          [ 0.0426, -0.1056, -0.0196],
          [-0.0479, -0.0684,  0.0264],
          [ 0.0020, -0.1153, -0.0083]],

         ...,

         [[-0.0487,  0.0425, -0.2565],
          [ 0.0278,  0.0605, -0.0915],
          [ 0.2153,  0.1761, -0.1873],
          ...,
          [-0.0086, -0.0064, -0.0146],
          [-0.0280, -0.0318,  0.0157],
          [-0.1309, -0.0906, -0.0256]],

         [[ 0.0572,  0.1718, -0.1462],
          [ 0.0248,  0.0197, -0.0470],
          [ 0.0378, -0.0188, -0.1388],
          ...,
          [-0.0020,  0.0097, -0.0064],
          [-0.0165,  0.0301,  0.0428],
          [-0.0134,  0.0972,  0.0646]],

         [[ 0.1957,  0.1295, -0.0950],
          [ 0.0290,  0.0499, -0.0176],
          [-0.0604,  0.0333,  0.0094],
          ...,
          [ 0.0190, -0.0060, -0.0059],
          [ 0.0213, -0.0237,  0.0059],
          [ 0.1401, -0.0011, -0.0300]]],


        [[[ 0.0578, -0.0529, -0.0577],
          [ 0.0160,  0.0234, -0.0280],
          [ 0.1109,  0.1855, -0.0744],
          ...,
          [ 0.0156,  0.1495, -0.0178],
          [ 0.0141,  0.0207, -0.0012],
          [-0.0149,  0.1285,  0.0105]],

         [[ 0.5958,  0.5184, -0.0686],
          [-0.3250, -0.4115, -0.0623],
          [ 0.0620,  0.0381,  0.0875],
          ...,
          [-0.0076,  0.0520,  0.0754],
          [ 0.2503,  0.2843,  0.0699],
          [-0.1225, -0.0935,  0.0754]],

         [[-0.0064,  0.2222, -0.0823],
          [ 0.1328,  0.1309, -0.0977],
          [ 0.2530,  0.0264, -0.1089],
          ...,
          [ 0.0426, -0.1056, -0.0196],
          [-0.0479, -0.0684,  0.0264],
          [ 0.0020, -0.1153, -0.0083]],

         ...,

         [[-0.0487,  0.0425, -0.2565],
          [ 0.0278,  0.0605, -0.0915],
          [ 0.2153,  0.1761, -0.1873],
          ...,
          [-0.0086, -0.0064, -0.0146],
          [-0.0280, -0.0318,  0.0157],
          [-0.1309, -0.0906, -0.0256]],

         [[ 0.0572,  0.1718, -0.1462],
          [ 0.0248,  0.0197, -0.0470],
          [ 0.0378, -0.0188, -0.1388],
          ...,
          [-0.0020,  0.0097, -0.0064],
          [-0.0165,  0.0301,  0.0428],
          [-0.0134,  0.0972,  0.0646]],

         [[ 0.1957,  0.1295, -0.0950],
          [ 0.0290,  0.0499, -0.0176],
          [-0.0604,  0.0333,  0.0094],
          ...,
          [ 0.0190, -0.0060, -0.0059],
          [ 0.0213, -0.0237,  0.0059],
          [ 0.1401, -0.0011, -0.0300]]],


        ...,


        [[[ 0.0578, -0.0529, -0.0577],
          [ 0.0160,  0.0234, -0.0280],
          [ 0.1109,  0.1855, -0.0744],
          ...,
          [ 0.0156,  0.1495, -0.0178],
          [ 0.0141,  0.0207, -0.0012],
          [-0.0149,  0.1285,  0.0105]],

         [[ 0.5958,  0.5184, -0.0686],
          [-0.3250, -0.4115, -0.0623],
          [ 0.0620,  0.0381,  0.0875],
          ...,
          [-0.0076,  0.0520,  0.0754],
          [ 0.2503,  0.2843,  0.0699],
          [-0.1225, -0.0935,  0.0754]],

         [[-0.0064,  0.2222, -0.0823],
          [ 0.1328,  0.1309, -0.0977],
          [ 0.2530,  0.0264, -0.1089],
          ...,
          [ 0.0426, -0.1056, -0.0196],
          [-0.0479, -0.0684,  0.0264],
          [ 0.0020, -0.1153, -0.0083]],

         ...,

         [[-0.0487,  0.0425, -0.2565],
          [ 0.0278,  0.0605, -0.0915],
          [ 0.2153,  0.1761, -0.1873],
          ...,
          [-0.0086, -0.0064, -0.0146],
          [-0.0280, -0.0318,  0.0157],
          [-0.1309, -0.0906, -0.0256]],

         [[ 0.0572,  0.1718, -0.1462],
          [ 0.0248,  0.0197, -0.0470],
          [ 0.0378, -0.0188, -0.1388],
          ...,
          [-0.0020,  0.0097, -0.0064],
          [-0.0165,  0.0301,  0.0428],
          [-0.0134,  0.0972,  0.0646]],

         [[ 0.1957,  0.1295, -0.0950],
          [ 0.0290,  0.0499, -0.0176],
          [-0.0604,  0.0333,  0.0094],
          ...,
          [ 0.0190, -0.0060, -0.0059],
          [ 0.0213, -0.0237,  0.0059],
          [ 0.1401, -0.0011, -0.0300]]],


        [[[ 0.0578, -0.0529, -0.0577],
          [ 0.0160,  0.0234, -0.0280],
          [ 0.1109,  0.1855, -0.0744],
          ...,
          [ 0.0156,  0.1495, -0.0178],
          [ 0.0141,  0.0207, -0.0012],
          [-0.0149,  0.1285,  0.0105]],

         [[ 0.5958,  0.5184, -0.0686],
          [-0.3250, -0.4115, -0.0623],
          [ 0.0620,  0.0381,  0.0875],
          ...,
          [-0.0076,  0.0520,  0.0754],
          [ 0.2503,  0.2843,  0.0699],
          [-0.1225, -0.0935,  0.0754]],

         [[-0.0064,  0.2222, -0.0823],
          [ 0.1328,  0.1309, -0.0977],
          [ 0.2530,  0.0264, -0.1089],
          ...,
          [ 0.0426, -0.1056, -0.0196],
          [-0.0479, -0.0684,  0.0264],
          [ 0.0020, -0.1153, -0.0083]],

         ...,

         [[-0.0487,  0.0425, -0.2565],
          [ 0.0278,  0.0605, -0.0915],
          [ 0.2153,  0.1761, -0.1873],
          ...,
          [-0.0086, -0.0064, -0.0146],
          [-0.0280, -0.0318,  0.0157],
          [-0.1309, -0.0906, -0.0256]],

         [[ 0.0572,  0.1718, -0.1462],
          [ 0.0248,  0.0197, -0.0470],
          [ 0.0378, -0.0188, -0.1388],
          ...,
          [-0.0020,  0.0097, -0.0064],
          [-0.0165,  0.0301,  0.0428],
          [-0.0134,  0.0972,  0.0646]],

         [[ 0.1957,  0.1295, -0.0950],
          [ 0.0290,  0.0499, -0.0176],
          [-0.0604,  0.0333,  0.0094],
          ...,
          [ 0.0190, -0.0060, -0.0059],
          [ 0.0213, -0.0237,  0.0059],
          [ 0.1401, -0.0011, -0.0300]]],


        [[[ 0.0578, -0.0529, -0.0577],
          [ 0.0160,  0.0234, -0.0280],
          [ 0.1109,  0.1855, -0.0744],
          ...,
          [ 0.0156,  0.1495, -0.0178],
          [ 0.0141,  0.0207, -0.0012],
          [-0.0149,  0.1285,  0.0105]],

         [[ 0.5958,  0.5184, -0.0686],
          [-0.3250, -0.4115, -0.0623],
          [ 0.0620,  0.0381,  0.0875],
          ...,
          [-0.0076,  0.0520,  0.0754],
          [ 0.2503,  0.2843,  0.0699],
          [-0.1225, -0.0935,  0.0754]],

         [[-0.0064,  0.2222, -0.0823],
          [ 0.1328,  0.1309, -0.0977],
          [ 0.2530,  0.0264, -0.1089],
          ...,
          [ 0.0426, -0.1056, -0.0196],
          [-0.0479, -0.0684,  0.0264],
          [ 0.0020, -0.1153, -0.0083]],

         ...,

         [[-0.0487,  0.0425, -0.2565],
          [ 0.0278,  0.0605, -0.0915],
          [ 0.2153,  0.1761, -0.1873],
          ...,
          [-0.0086, -0.0064, -0.0146],
          [-0.0280, -0.0318,  0.0157],
          [-0.1309, -0.0906, -0.0256]],

         [[ 0.0572,  0.1718, -0.1462],
          [ 0.0248,  0.0197, -0.0470],
          [ 0.0378, -0.0188, -0.1388],
          ...,
          [-0.0020,  0.0097, -0.0064],
          [-0.0165,  0.0301,  0.0428],
          [-0.0134,  0.0972,  0.0646]],

         [[ 0.1957,  0.1295, -0.0950],
          [ 0.0290,  0.0499, -0.0176],
          [-0.0604,  0.0333,  0.0094],
          ...,
          [ 0.0190, -0.0060, -0.0059],
          [ 0.0213, -0.0237,  0.0059],
          [ 0.1401, -0.0011, -0.0300]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[-0.7883, -0.9117,  0.8218, -1.6309, -1.3570, -1.3718, -1.4139,  0.2952],
        [-0.0082,  0.2102,  0.2551, -0.2660, -0.5471, -0.5358, -0.1136,  0.1894],
        [-0.8258, -1.1806,  0.9361, -1.8133, -1.4487, -1.7147, -1.5540,  0.3123],
        [-0.7569, -0.8940,  0.8204, -1.5457, -1.3304, -1.4455, -1.3011,  0.2559],
        [-0.7775, -1.0519,  0.9154, -1.6751, -1.3817, -1.5409, -1.4113,  0.2719]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[ 0.0578, -0.0529, -0.0577],
         [ 0.0160,  0.0234, -0.0280],
         [ 0.1109,  0.1855, -0.0744],
         [ 0.0105,  0.0372, -0.0011],
         [-0.0379, -0.0694,  0.0257],
         [ 0.0156,  0.1495, -0.0178],
         [ 0.0141,  0.0207, -0.0012],
         [-0.0149,  0.1285,  0.0105]],

        [[ 0.5958,  0.5184, -0.0686],
         [-0.3250, -0.4115, -0.0623],
         [ 0.0620,  0.0381,  0.0875],
         [ 0.0055,  0.0648,  0.0629],
         [-0.1508, -0.2981, -0.0944],
         [-0.0076,  0.0520,  0.0754],
         [ 0.2503,  0.2843,  0.0699],
         [-0.1225, -0.0935,  0.0754]],

        [[-0.0064,  0.2222, -0.0823],
         [ 0.1328,  0.1309, -0.0977],
         [ 0.2530,  0.0264, -0.1089],
         [ 0.0351, -0.1076,  0.0571],
         [-0.0123,  0.0873, -0.0354],
         [ 0.0426, -0.1056, -0.0196],
         [-0.0479, -0.0684,  0.0264],
         [ 0.0020, -0.1153, -0.0083]],

        [[-0.0226,  0.9281,  0.1760],
         [ 0.1432,  0.1397, -0.0437],
         [ 0.1577,  0.5451, -0.1180],
         [-0.0651,  0.0708, -0.0591],
         [ 0.1576, -0.3732, -0.0411],
         [-0.0443,  0.3296,  0.0141],
         [-0.0479,  0.0483,  0.0246],
         [ 0.0149,  0.1005, -0.0157]],

        [[-0.0600, -0.1390, -0.0371],
         [ 0.1134, -0.0509,  0.0358],
         [-0.0531, -0.1670,  0.0492],
         [-0.0690, -0.0713, -0.0039],
         [ 0.0696, -0.0188,  0.0624],
         [-0.0158,  0.0630, -0.0207],
         [-0.1038, -0.0021, -0.0099],
         [-0.0151,  0.0583,  0.0107]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
deep_sets:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[ 0.1335,  0.0672,  0.0399,  ..., -0.0634, -0.0791, -0.0896],
         [ 0.1299,  0.0663,  0.0340,  ..., -0.0639, -0.0806, -0.0882],
         [ 0.1341,  0.0660,  0.0421,  ..., -0.0640, -0.0788, -0.0901],
         ...,
         [ 0.1276,  0.0614,  0.0339,  ..., -0.0680, -0.0844, -0.0883],
         [ 0.1281,  0.0614,  0.0347,  ..., -0.0680, -0.0841, -0.0885],
         [ 0.1276,  0.0609,  0.0343,  ..., -0.0684, -0.0846, -0.0884]],

        [[ 0.1335,  0.0672,  0.0399,  ..., -0.0634, -0.0791, -0.0896],
         [ 0.1299,  0.0663,  0.0340,  ..., -0.0639, -0.0806, -0.0882],
         [ 0.1341,  0.0660,  0.0421,  ..., -0.0640, -0.0788, -0.0901],
         ...,
         [ 0.1276,  0.0614,  0.0339,  ..., -0.0680, -0.0844, -0.0883],
         [ 0.1281,  0.0614,  0.0347,  ..., -0.0680, -0.0841, -0.0885],
         [ 0.1276,  0.0609,  0.0343,  ..., -0.0684, -0.0846, -0.0884]],

        [[ 0.1335,  0.0672,  0.0399,  ..., -0.0634, -0.0791, -0.0896],
         [ 0.1299,  0.0663,  0.0340,  ..., -0.0639, -0.0806, -0.0882],
         [ 0.1341,  0.0660,  0.0421,  ..., -0.0640, -0.0788, -0.0901],
         ...,
         [ 0.1276,  0.0614,  0.0339,  ..., -0.0680, -0.0844, -0.0883],
         [ 0.1281,  0.0614,  0.0347,  ..., -0.0680, -0.0841, -0.0885],
         [ 0.1276,  0.0609,  0.0343,  ..., -0.0684, -0.0846, -0.0884]],

        ...,

        [[ 0.1335,  0.0672,  0.0399,  ..., -0.0634, -0.0791, -0.0896],
         [ 0.1299,  0.0663,  0.0340,  ..., -0.0639, -0.0806, -0.0882],
         [ 0.1341,  0.0660,  0.0421,  ..., -0.0640, -0.0788, -0.0901],
         ...,
         [ 0.1276,  0.0614,  0.0339,  ..., -0.0680, -0.0844, -0.0883],
         [ 0.1281,  0.0614,  0.0347,  ..., -0.0680, -0.0841, -0.0885],
         [ 0.1276,  0.0609,  0.0343,  ..., -0.0684, -0.0846, -0.0884]],

        [[ 0.1335,  0.0672,  0.0399,  ..., -0.0634, -0.0791, -0.0896],
         [ 0.1299,  0.0663,  0.0340,  ..., -0.0639, -0.0806, -0.0882],
         [ 0.1341,  0.0660,  0.0421,  ..., -0.0640, -0.0788, -0.0901],
         ...,
         [ 0.1276,  0.0614,  0.0339,  ..., -0.0680, -0.0844, -0.0883],
         [ 0.1281,  0.0614,  0.0347,  ..., -0.0680, -0.0841, -0.0885],
         [ 0.1276,  0.0609,  0.0343,  ..., -0.0684, -0.0846, -0.0884]],

        [[ 0.1335,  0.0672,  0.0399,  ..., -0.0634, -0.0791, -0.0896],
         [ 0.1299,  0.0663,  0.0340,  ..., -0.0639, -0.0806, -0.0882],
         [ 0.1341,  0.0660,  0.0421,  ..., -0.0640, -0.0788, -0.0901],
         ...,
         [ 0.1276,  0.0614,  0.0339,  ..., -0.0680, -0.0844, -0.0883],
         [ 0.1281,  0.0614,  0.0347,  ..., -0.0680, -0.0841, -0.0885],
         [ 0.1276,  0.0609,  0.0343,  ..., -0.0684, -0.0846, -0.0884]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[-0.0517, -0.0216,  0.0204],
          [ 0.0240, -0.0488, -0.0193],
          [-0.0931,  0.0993, -0.0318],
          ...,
          [ 0.0482,  0.0232, -0.0885],
          [-0.1004, -0.0452, -0.0515],
          [-0.0782, -0.0367, -0.0257]],

         [[-0.0502, -0.0201,  0.0196],
          [ 0.0227, -0.0466, -0.0176],
          [-0.0909,  0.1024, -0.0322],
          ...,
          [ 0.0478,  0.0228, -0.0898],
          [-0.1004, -0.0479, -0.0508],
          [-0.0780, -0.0373, -0.0259]],

         [[-0.0510, -0.0222,  0.0207],
          [ 0.0235, -0.0477, -0.0182],
          [-0.0924,  0.0997, -0.0319],
          ...,
          [ 0.0469,  0.0217, -0.0880],
          [-0.0999, -0.0461, -0.0516],
          [-0.0779, -0.0368, -0.0253]],

         ...,

         [[-0.0506, -0.0222,  0.0211],
          [ 0.0237, -0.0478, -0.0173],
          [-0.0919,  0.0994, -0.0315],
          ...,
          [ 0.0460,  0.0209, -0.0886],
          [-0.1002, -0.0467, -0.0510],
          [-0.0780, -0.0365, -0.0258]],

         [[-0.0517, -0.0213,  0.0198],
          [ 0.0238, -0.0489, -0.0188],
          [-0.0927,  0.0995, -0.0320],
          ...,
          [ 0.0479,  0.0230, -0.0884],
          [-0.1003, -0.0452, -0.0511],
          [-0.0774, -0.0364, -0.0253]],

         [[-0.0510, -0.0211,  0.0194],
          [ 0.0241, -0.0489, -0.0187],
          [-0.0929,  0.1000, -0.0323],
          ...,
          [ 0.0487,  0.0238, -0.0886],
          [-0.1001, -0.0455, -0.0516],
          [-0.0783, -0.0372, -0.0257]]],


        [[[-0.0517, -0.0216,  0.0204],
          [ 0.0240, -0.0488, -0.0193],
          [-0.0931,  0.0993, -0.0318],
          ...,
          [ 0.0482,  0.0232, -0.0885],
          [-0.1004, -0.0452, -0.0515],
          [-0.0782, -0.0367, -0.0257]],

         [[-0.0502, -0.0201,  0.0196],
          [ 0.0227, -0.0466, -0.0176],
          [-0.0909,  0.1024, -0.0322],
          ...,
          [ 0.0478,  0.0228, -0.0898],
          [-0.1004, -0.0479, -0.0508],
          [-0.0780, -0.0373, -0.0259]],

         [[-0.0510, -0.0222,  0.0207],
          [ 0.0235, -0.0477, -0.0182],
          [-0.0924,  0.0997, -0.0319],
          ...,
          [ 0.0469,  0.0217, -0.0880],
          [-0.0999, -0.0461, -0.0516],
          [-0.0779, -0.0368, -0.0253]],

         ...,

         [[-0.0506, -0.0222,  0.0211],
          [ 0.0237, -0.0478, -0.0173],
          [-0.0919,  0.0994, -0.0315],
          ...,
          [ 0.0460,  0.0209, -0.0886],
          [-0.1002, -0.0467, -0.0510],
          [-0.0780, -0.0365, -0.0258]],

         [[-0.0517, -0.0213,  0.0198],
          [ 0.0238, -0.0489, -0.0188],
          [-0.0927,  0.0995, -0.0320],
          ...,
          [ 0.0479,  0.0230, -0.0884],
          [-0.1003, -0.0452, -0.0511],
          [-0.0774, -0.0364, -0.0253]],

         [[-0.0510, -0.0211,  0.0194],
          [ 0.0241, -0.0489, -0.0187],
          [-0.0929,  0.1000, -0.0323],
          ...,
          [ 0.0487,  0.0238, -0.0886],
          [-0.1001, -0.0455, -0.0516],
          [-0.0783, -0.0372, -0.0257]]],


        [[[-0.0517, -0.0216,  0.0204],
          [ 0.0240, -0.0488, -0.0193],
          [-0.0931,  0.0993, -0.0318],
          ...,
          [ 0.0482,  0.0232, -0.0885],
          [-0.1004, -0.0452, -0.0515],
          [-0.0782, -0.0367, -0.0257]],

         [[-0.0502, -0.0201,  0.0196],
          [ 0.0227, -0.0466, -0.0176],
          [-0.0909,  0.1024, -0.0322],
          ...,
          [ 0.0478,  0.0228, -0.0898],
          [-0.1004, -0.0479, -0.0508],
          [-0.0780, -0.0373, -0.0259]],

         [[-0.0510, -0.0222,  0.0207],
          [ 0.0235, -0.0477, -0.0182],
          [-0.0924,  0.0997, -0.0319],
          ...,
          [ 0.0469,  0.0217, -0.0880],
          [-0.0999, -0.0461, -0.0516],
          [-0.0779, -0.0368, -0.0253]],

         ...,

         [[-0.0506, -0.0222,  0.0211],
          [ 0.0237, -0.0478, -0.0173],
          [-0.0919,  0.0994, -0.0315],
          ...,
          [ 0.0460,  0.0209, -0.0886],
          [-0.1002, -0.0467, -0.0510],
          [-0.0780, -0.0365, -0.0258]],

         [[-0.0517, -0.0213,  0.0198],
          [ 0.0238, -0.0489, -0.0188],
          [-0.0927,  0.0995, -0.0320],
          ...,
          [ 0.0479,  0.0230, -0.0884],
          [-0.1003, -0.0452, -0.0511],
          [-0.0774, -0.0364, -0.0253]],

         [[-0.0510, -0.0211,  0.0194],
          [ 0.0241, -0.0489, -0.0187],
          [-0.0929,  0.1000, -0.0323],
          ...,
          [ 0.0487,  0.0238, -0.0886],
          [-0.1001, -0.0455, -0.0516],
          [-0.0783, -0.0372, -0.0257]]],


        ...,


        [[[-0.0517, -0.0216,  0.0204],
          [ 0.0240, -0.0488, -0.0193],
          [-0.0931,  0.0993, -0.0318],
          ...,
          [ 0.0482,  0.0232, -0.0885],
          [-0.1004, -0.0452, -0.0515],
          [-0.0782, -0.0367, -0.0257]],

         [[-0.0502, -0.0201,  0.0196],
          [ 0.0227, -0.0466, -0.0176],
          [-0.0909,  0.1024, -0.0322],
          ...,
          [ 0.0478,  0.0228, -0.0898],
          [-0.1004, -0.0479, -0.0508],
          [-0.0780, -0.0373, -0.0259]],

         [[-0.0510, -0.0222,  0.0207],
          [ 0.0235, -0.0477, -0.0182],
          [-0.0924,  0.0997, -0.0319],
          ...,
          [ 0.0469,  0.0217, -0.0880],
          [-0.0999, -0.0461, -0.0516],
          [-0.0779, -0.0368, -0.0253]],

         ...,

         [[-0.0506, -0.0222,  0.0211],
          [ 0.0237, -0.0478, -0.0173],
          [-0.0919,  0.0994, -0.0315],
          ...,
          [ 0.0460,  0.0209, -0.0886],
          [-0.1002, -0.0467, -0.0510],
          [-0.0780, -0.0365, -0.0258]],

         [[-0.0517, -0.0213,  0.0198],
          [ 0.0238, -0.0489, -0.0188],
          [-0.0927,  0.0995, -0.0320],
          ...,
          [ 0.0479,  0.0230, -0.0884],
          [-0.1003, -0.0452, -0.0511],
          [-0.0774, -0.0364, -0.0253]],

         [[-0.0510, -0.0211,  0.0194],
          [ 0.0241, -0.0489, -0.0187],
          [-0.0929,  0.1000, -0.0323],
          ...,
          [ 0.0487,  0.0238, -0.0886],
          [-0.1001, -0.0455, -0.0516],
          [-0.0783, -0.0372, -0.0257]]],


        [[[-0.0517, -0.0216,  0.0204],
          [ 0.0240, -0.0488, -0.0193],
          [-0.0931,  0.0993, -0.0318],
          ...,
          [ 0.0482,  0.0232, -0.0885],
          [-0.1004, -0.0452, -0.0515],
          [-0.0782, -0.0367, -0.0257]],

         [[-0.0502, -0.0201,  0.0196],
          [ 0.0227, -0.0466, -0.0176],
          [-0.0909,  0.1024, -0.0322],
          ...,
          [ 0.0478,  0.0228, -0.0898],
          [-0.1004, -0.0479, -0.0508],
          [-0.0780, -0.0373, -0.0259]],

         [[-0.0510, -0.0222,  0.0207],
          [ 0.0235, -0.0477, -0.0182],
          [-0.0924,  0.0997, -0.0319],
          ...,
          [ 0.0469,  0.0217, -0.0880],
          [-0.0999, -0.0461, -0.0516],
          [-0.0779, -0.0368, -0.0253]],

         ...,

         [[-0.0506, -0.0222,  0.0211],
          [ 0.0237, -0.0478, -0.0173],
          [-0.0919,  0.0994, -0.0315],
          ...,
          [ 0.0460,  0.0209, -0.0886],
          [-0.1002, -0.0467, -0.0510],
          [-0.0780, -0.0365, -0.0258]],

         [[-0.0517, -0.0213,  0.0198],
          [ 0.0238, -0.0489, -0.0188],
          [-0.0927,  0.0995, -0.0320],
          ...,
          [ 0.0479,  0.0230, -0.0884],
          [-0.1003, -0.0452, -0.0511],
          [-0.0774, -0.0364, -0.0253]],

         [[-0.0510, -0.0211,  0.0194],
          [ 0.0241, -0.0489, -0.0187],
          [-0.0929,  0.1000, -0.0323],
          ...,
          [ 0.0487,  0.0238, -0.0886],
          [-0.1001, -0.0455, -0.0516],
          [-0.0783, -0.0372, -0.0257]]],


        [[[-0.0517, -0.0216,  0.0204],
          [ 0.0240, -0.0488, -0.0193],
          [-0.0931,  0.0993, -0.0318],
          ...,
          [ 0.0482,  0.0232, -0.0885],
          [-0.1004, -0.0452, -0.0515],
          [-0.0782, -0.0367, -0.0257]],

         [[-0.0502, -0.0201,  0.0196],
          [ 0.0227, -0.0466, -0.0176],
          [-0.0909,  0.1024, -0.0322],
          ...,
          [ 0.0478,  0.0228, -0.0898],
          [-0.1004, -0.0479, -0.0508],
          [-0.0780, -0.0373, -0.0259]],

         [[-0.0510, -0.0222,  0.0207],
          [ 0.0235, -0.0477, -0.0182],
          [-0.0924,  0.0997, -0.0319],
          ...,
          [ 0.0469,  0.0217, -0.0880],
          [-0.0999, -0.0461, -0.0516],
          [-0.0779, -0.0368, -0.0253]],

         ...,

         [[-0.0506, -0.0222,  0.0211],
          [ 0.0237, -0.0478, -0.0173],
          [-0.0919,  0.0994, -0.0315],
          ...,
          [ 0.0460,  0.0209, -0.0886],
          [-0.1002, -0.0467, -0.0510],
          [-0.0780, -0.0365, -0.0258]],

         [[-0.0517, -0.0213,  0.0198],
          [ 0.0238, -0.0489, -0.0188],
          [-0.0927,  0.0995, -0.0320],
          ...,
          [ 0.0479,  0.0230, -0.0884],
          [-0.1003, -0.0452, -0.0511],
          [-0.0774, -0.0364, -0.0253]],

         [[-0.0510, -0.0211,  0.0194],
          [ 0.0241, -0.0489, -0.0187],
          [-0.0929,  0.1000, -0.0323],
          ...,
          [ 0.0487,  0.0238, -0.0886],
          [-0.1001, -0.0455, -0.0516],
          [-0.0783, -0.0372, -0.0257]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[ 0.1335,  0.0672,  0.0399, -0.0439, -0.0208, -0.0634, -0.0791, -0.0896],
        [ 0.1299,  0.0663,  0.0340, -0.0435, -0.0195, -0.0639, -0.0806, -0.0882],
        [ 0.1341,  0.0660,  0.0421, -0.0440, -0.0202, -0.0640, -0.0788, -0.0901],
        [ 0.1337,  0.0670,  0.0405, -0.0439, -0.0206, -0.0634, -0.0786, -0.0898],
        [ 0.1337,  0.0662,  0.0412, -0.0439, -0.0202, -0.0639, -0.0790, -0.0899]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[-0.0517, -0.0216,  0.0204],
         [ 0.0240, -0.0488, -0.0193],
         [-0.0931,  0.0993, -0.0318],
         [ 0.0052,  0.1160,  0.0276],
         [ 0.0792,  0.0999,  0.0812],
         [ 0.0482,  0.0232, -0.0885],
         [-0.1004, -0.0452, -0.0515],
         [-0.0782, -0.0367, -0.0257]],

        [[-0.0502, -0.0201,  0.0196],
         [ 0.0227, -0.0466, -0.0176],
         [-0.0909,  0.1024, -0.0322],
         [ 0.0024,  0.1165,  0.0284],
         [ 0.0792,  0.1017,  0.0811],
         [ 0.0478,  0.0228, -0.0898],
         [-0.1004, -0.0479, -0.0508],
         [-0.0780, -0.0373, -0.0259]],

        [[-0.0510, -0.0222,  0.0207],
         [ 0.0235, -0.0477, -0.0182],
         [-0.0924,  0.0997, -0.0319],
         [ 0.0046,  0.1156,  0.0286],
         [ 0.0787,  0.0997,  0.0793],
         [ 0.0469,  0.0217, -0.0880],
         [-0.0999, -0.0461, -0.0516],
         [-0.0779, -0.0368, -0.0253]],

        [[-0.0511, -0.0217,  0.0192],
         [ 0.0233, -0.0479, -0.0185],
         [-0.0932,  0.0994, -0.0316],
         [ 0.0032,  0.1160,  0.0272],
         [ 0.0791,  0.0981,  0.0798],
         [ 0.0480,  0.0238, -0.0883],
         [-0.1002, -0.0443, -0.0511],
         [-0.0765, -0.0354, -0.0243]],

        [[-0.0521, -0.0215,  0.0196],
         [ 0.0245, -0.0495, -0.0195],
         [-0.0931,  0.0988, -0.0319],
         [ 0.0064,  0.1166,  0.0274],
         [ 0.0794,  0.0997,  0.0807],
         [ 0.0484,  0.0231, -0.0879],
         [-0.1003, -0.0452, -0.0515],
         [-0.0781, -0.0372, -0.0255]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
self_attention:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[ 0.0694,  0.0136,  0.2111,  ...,  0.1319, -0.0523,  0.1581],
         [ 0.0697,  0.0145,  0.2105,  ...,  0.1314, -0.0519,  0.1579],
         [ 0.0694,  0.0135,  0.2112,  ...,  0.1320, -0.0524,  0.1581],
         ...,
         [ 0.0696,  0.0143,  0.2107,  ...,  0.1316, -0.0520,  0.1580],
         [ 0.0696,  0.0142,  0.2107,  ...,  0.1316, -0.0520,  0.1580],
         [ 0.0696,  0.0142,  0.2107,  ...,  0.1316, -0.0520,  0.1580]],

        [[ 0.0694,  0.0136,  0.2111,  ...,  0.1319, -0.0523,  0.1581],
         [ 0.0697,  0.0145,  0.2105,  ...,  0.1314, -0.0519,  0.1579],
         [ 0.0694,  0.0135,  0.2112,  ...,  0.1320, -0.0524,  0.1581],
         ...,
         [ 0.0696,  0.0143,  0.2107,  ...,  0.1316, -0.0520,  0.1580],
         [ 0.0696,  0.0142,  0.2107,  ...,  0.1316, -0.0520,  0.1580],
         [ 0.0696,  0.0142,  0.2107,  ...,  0.1316, -0.0520,  0.1580]],

        [[ 0.0694,  0.0136,  0.2111,  ...,  0.1319, -0.0523,  0.1581],
         [ 0.0697,  0.0145,  0.2105,  ...,  0.1314, -0.0519,  0.1579],
         [ 0.0694,  0.0135,  0.2112,  ...,  0.1320, -0.0524,  0.1581],
         ...,
         [ 0.0696,  0.0143,  0.2107,  ...,  0.1316, -0.0520,  0.1580],
         [ 0.0696,  0.0142,  0.2107,  ...,  0.1316, -0.0520,  0.1580],
         [ 0.0696,  0.0142,  0.2107,  ...,  0.1316, -0.0520,  0.1580]],

        ...,

        [[ 0.0694,  0.0136,  0.2111,  ...,  0.1319, -0.0523,  0.1581],
         [ 0.0697,  0.0145,  0.2105,  ...,  0.1314, -0.0519,  0.1579],
         [ 0.0694,  0.0135,  0.2112,  ...,  0.1320, -0.0524,  0.1581],
         ...,
         [ 0.0696,  0.0143,  0.2107,  ...,  0.1316, -0.0520,  0.1580],
         [ 0.0696,  0.0142,  0.2107,  ...,  0.1316, -0.0520,  0.1580],
         [ 0.0696,  0.0142,  0.2107,  ...,  0.1316, -0.0520,  0.1580]],

        [[ 0.0694,  0.0136,  0.2111,  ...,  0.1319, -0.0523,  0.1581],
         [ 0.0697,  0.0145,  0.2105,  ...,  0.1314, -0.0519,  0.1579],
         [ 0.0694,  0.0135,  0.2112,  ...,  0.1320, -0.0524,  0.1581],
         ...,
         [ 0.0696,  0.0143,  0.2107,  ...,  0.1316, -0.0520,  0.1580],
         [ 0.0696,  0.0142,  0.2107,  ...,  0.1316, -0.0520,  0.1580],
         [ 0.0696,  0.0142,  0.2107,  ...,  0.1316, -0.0520,  0.1580]],

        [[ 0.0694,  0.0136,  0.2111,  ...,  0.1319, -0.0523,  0.1581],
         [ 0.0697,  0.0145,  0.2105,  ...,  0.1314, -0.0519,  0.1579],
         [ 0.0694,  0.0135,  0.2112,  ...,  0.1320, -0.0524,  0.1581],
         ...,
         [ 0.0696,  0.0143,  0.2107,  ...,  0.1316, -0.0520,  0.1580],
         [ 0.0696,  0.0142,  0.2107,  ...,  0.1316, -0.0520,  0.1580],
         [ 0.0696,  0.0142,  0.2107,  ...,  0.1316, -0.0520,  0.1580]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0634,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0746,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1542],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         ...,

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1216,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1216,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0634,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]]],


        [[[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0634,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0746,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1542],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         ...,

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1216,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1216,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0634,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]]],


        [[[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0634,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0746,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1542],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         ...,

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1216,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1216,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0634,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]]],


        ...,


        [[[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0634,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0746,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1542],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         ...,

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1216,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1216,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0634,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]]],


        [[[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0634,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0746,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1542],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         ...,

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1216,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1216,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0634,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]]],


        [[[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0634,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0746,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1542],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         ...,

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1216,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1216,  0.0882, -0.1349],
          [ 0.0635,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]],

         [[ 0.0012, -0.1813,  0.0481],
          [ 0.1217,  0.0882, -0.1349],
          [ 0.0634,  0.1607,  0.1541],
          ...,
          [-0.0193,  0.1733,  0.2553],
          [-0.0302,  0.0747,  0.0666],
          [ 0.3270, -0.1491, -0.0714]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[ 0.0694,  0.0136,  0.2111, -0.0547, -0.0732,  0.1319, -0.0523,  0.1581],
        [ 0.0697,  0.0145,  0.2105, -0.0543, -0.0730,  0.1314, -0.0519,  0.1579],
        [ 0.0694,  0.0135,  0.2112, -0.0547, -0.0732,  0.1320, -0.0524,  0.1581],
        [ 0.0694,  0.0136,  0.2111, -0.0547, -0.0732,  0.1319, -0.0523,  0.1581],
        [ 0.0694,  0.0136,  0.2111, -0.0547, -0.0732,  0.1319, -0.0523,  0.1581]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[ 0.0012, -0.1813,  0.0481],
         [ 0.1217,  0.0882, -0.1349],
         [ 0.0635,  0.1607,  0.1541],
         [-0.0841, -0.1682, -0.1515],
         [ 0.1494, -0.0762, -0.0676],
         [-0.0193,  0.1733,  0.2553],
         [-0.0302,  0.0747,  0.0666],
         [ 0.3270, -0.1491, -0.0714]],

        [[ 0.0012, -0.1813,  0.0481],
         [ 0.1217,  0.0882, -0.1349],
         [ 0.0634,  0.1607,  0.1541],
         [-0.0841, -0.1682, -0.1515],
         [ 0.1493, -0.0762, -0.0676],
         [-0.0193,  0.1733,  0.2553],
         [-0.0302,  0.0746,  0.0666],
         [ 0.3270, -0.1491, -0.0714]],

        [[ 0.0012, -0.1813,  0.0481],
         [ 0.1217,  0.0882, -0.1349],
         [ 0.0635,  0.1607,  0.1542],
         [-0.0841, -0.1682, -0.1515],
         [ 0.1494, -0.0762, -0.0676],
         [-0.0193,  0.1733,  0.2553],
         [-0.0302,  0.0747,  0.0666],
         [ 0.3270, -0.1491, -0.0714]],

        [[ 0.0012, -0.1813,  0.0481],
         [ 0.1217,  0.0882, -0.1349],
         [ 0.0635,  0.1607,  0.1542],
         [-0.0841, -0.1682, -0.1515],
         [ 0.1494, -0.0762, -0.0676],
         [-0.0192,  0.1733,  0.2554],
         [-0.0302,  0.0747,  0.0666],
         [ 0.3270, -0.1491, -0.0714]],

        [[ 0.0012, -0.1813,  0.0481],
         [ 0.1216,  0.0882, -0.1349],
         [ 0.0635,  0.1607,  0.1541],
         [-0.0841, -0.1682, -0.1515],
         [ 0.1494, -0.0762, -0.0676],
         [-0.0193,  0.1733,  0.2553],
         [-0.0302,  0.0747,  0.0666],
         [ 0.3270, -0.1491, -0.0714]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
==================================================

Batch 5 in Ensemble: 234_vi
Number of conformers in this batch: 16
Unique Atomic Numbers: [6, 1, 8, 15]
Average number of neighbors: 26.65
Processing batch of 16 conformers
Initialized CustomNonLinearReadout with input irreps: 32x0e+32x1o
EQUICATPlusNonLinearReadout(
  (equicat): EQUICAT(
    (model): MACE(
      (node_embedding): LinearNodeEmbeddingBlock(
        (linear): Linear(4x0e -> 32x0e | 128 weights)
      )
      (radial_embedding): RadialEmbeddingBlock(
        (bessel_fn): BesselBasis(r_max=5.0, num_basis=8, trainable=False)
        (cutoff_fn): PolynomialCutoff(p=6.0, r_max=5.0)
      )
      (spherical_harmonics): SphericalHarmonics()
      (atomic_energies_fn): AtomicEnergiesBlock(energies=[0.0000, 0.0000, 0.0000, 0.0000])
      (interactions): ModuleList(
        (0): RealAgnosticResidualInteractionBlock(
          (linear_up): Linear(32x0e -> 32x0e | 1024 weights)
          (conv_tp): TensorProduct(32x0e x 1x0e+1x1o+1x2e -> 32x0e+32x1o+32x2e | 96 paths | 96 weights)
          (conv_tp_weights): FullyConnectedNet[8, 64, 64, 64, 96]
          (linear): Linear(32x0e+32x1o+32x2e -> 32x0e+32x1o+32x2e | 3072 weights)
          (skip_tp): FullyConnectedTensorProduct(32x0e x 4x0e -> 32x0e+32x1o | 4096 paths | 4096 weights)
          (reshape): reshape_irreps()
        )
        (1): RealAgnosticResidualInteractionBlock(
          (linear_up): Linear(32x0e+32x1o -> 32x0e+32x1o | 2048 weights)
          (conv_tp): TensorProduct(32x0e+32x1o x 1x0e+1x1o+1x2e -> 64x0e+96x1o+64x2e | 224 paths | 224 weights)
          (conv_tp_weights): FullyConnectedNet[8, 64, 64, 64, 224]
          (linear): Linear(64x0e+96x1o+64x2e -> 32x0e+32x1o+32x2e | 7168 weights)
          (skip_tp): FullyConnectedTensorProduct(32x0e+32x1o x 4x0e -> 32x0e | 4096 paths | 4096 weights)
          (reshape): reshape_irreps()
        )
      )
      (products): ModuleList(
        (0): EquivariantProductBasisBlock(
          (symmetric_contractions): SymmetricContraction(
            (contractions): ModuleList(
              (0): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x3x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
              (1): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x4x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
            )
          )
          (linear): Linear(32x0e+32x1o -> 32x0e+32x1o | 2048 weights)
        )
        (1): EquivariantProductBasisBlock(
          (symmetric_contractions): SymmetricContraction(
            (contractions): ModuleList(
              (0): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x3x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
            )
          )
          (linear): Linear(32x0e -> 32x0e | 1024 weights)
        )
      )
      (readouts): ModuleList(
        (0): LinearReadoutBlock(
          (linear): Linear(32x0e+32x1o -> 1x0e | 32 weights)
        )
        (1): NonLinearReadoutBlock(
          (linear_1): Linear(32x0e -> 16x0e | 512 weights)
          (non_linearity): Activation [x] (16x0e -> 16x0e)
          (linear_2): Linear(16x0e -> 1x0e | 16 weights)
        )
      )
    )
  )
  (non_linear_readout): CustomNonLinearReadout(
    (linear_1): Linear(32x0e+32x1o -> 16x0e+16x1o | 1024 weights)
    (non_linearity_1): Activation [x ] (16x0e+16x1o -> 16x0e+16x1o)
    (linear_2): Linear(16x0e+16x1o -> 16x0e+16x1o | 512 weights)
    (non_linearity_2): Activation [x ] (16x0e+16x1o -> 16x0e+16x1o)
    (linear_3): Linear(16x0e+16x1o -> 8x0e+8x1o | 256 weights)
  )
)
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2862])
shifts shape: torch.Size([2862, 3])
sender shape: torch.Size([2862])
receiver shape: torch.Size([2862])
Edge attributes shape: torch.Size([2862, 9])
Edge attributes tensor([[ 1.0000,  1.2424,  0.9781,  ..., -0.0484, -0.8927, -0.6737],
        [ 1.0000, -0.1702,  1.7236,  ...,  2.2036, -0.0217, -0.0186],
        [ 1.0000,  1.3838, -0.7363,  ..., -0.5120,  0.7004, -0.8856],
        ...,
        [ 1.0000,  1.1172,  0.9796,  ..., -0.0451, -1.1256, -0.2944],
        [ 1.0000,  1.3629,  1.0579,  ...,  0.1332,  0.2086, -1.1840],
        [ 1.0000,  1.2696, -0.0489,  ..., -1.1154,  0.0744, -0.1459]])
Edge features shape: torch.Size([2862, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1429,  ..., -0.1570, -0.0362,  0.1709],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3549, -0.0181,  0.3322],
        [ 0.3449,  0.4377,  0.2105,  ..., -0.3712, -0.0441,  0.3152],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4169],
        [ 0.3128,  0.2802, -0.0617,  ...,  0.1215,  0.3477,  0.1901],
        [ 0.3130,  0.2814, -0.0601,  ...,  0.1183,  0.3478,  0.1944]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        ...,
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2862, 96])
Tensor Product Weights tensor([[ 0.0874, -0.1954,  0.0327,  ..., -0.0426, -0.1354, -0.0683],
        [ 0.0393, -0.1474,  0.3546,  ..., -0.0309,  0.0183,  0.1845],
        [ 0.0399, -0.1507,  0.3494,  ..., -0.0308,  0.0128,  0.1761],
        ...,
        [ 0.1258, -0.0423,  0.1126,  ..., -0.0803,  0.0245,  0.0158],
        [ 0.1468,  0.0097,  0.2376,  ..., -0.1593,  0.2248,  0.2005],
        [ 0.1456,  0.0084,  0.2404,  ..., -0.1585,  0.2233,  0.2022]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0420, -0.3865, -0.2033,  ..., -0.1753,  0.0559,  0.0826],
        [-0.0959, -0.6850, -0.1967,  ...,  0.0804, -0.0643, -0.1433],
        [ 0.0570, -0.5612, -0.1943,  ...,  0.0132, -0.1077,  0.0091],
        ...,
        [ 0.0878, -0.3282,  0.2635,  ..., -0.0988,  0.1178,  0.1085],
        [ 0.0477, -0.1191,  0.1539,  ...,  0.0451,  0.0147,  0.1454],
        [ 0.0729, -0.1218,  0.1922,  ..., -0.0831, -0.0140, -0.1032]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 1.3753e-02, -2.2292e-01, -8.9618e-02,  ...,  1.7173e-01,
          4.8671e-01,  8.4386e-03],
        [-1.4181e-01, -3.2776e-01, -9.5577e-02,  ..., -1.2163e-01,
         -1.3144e-01, -1.5989e-01],
        [-7.7154e-02, -3.2810e-01, -1.5450e-01,  ...,  2.1084e-01,
         -2.1829e-02, -4.5533e-01],
        ...,
        [ 1.0527e-02,  7.2122e-02,  4.0459e-04,  ..., -2.9068e-02,
         -5.6183e-02, -1.0550e-01],
        [ 6.1575e-02, -8.5701e-02, -1.1489e-01,  ..., -2.6835e-02,
         -5.6760e-02,  3.1591e-01],
        [ 5.7782e-02,  6.0626e-02,  2.6878e-02,  ...,  1.3499e-01,
          4.0243e-02, -3.0624e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2956])
shifts shape: torch.Size([2956, 3])
sender shape: torch.Size([2956])
receiver shape: torch.Size([2956])
Edge attributes shape: torch.Size([2956, 9])
Edge attributes tensor([[ 1.0000,  1.2543,  0.9575,  ..., -0.0931, -0.8828, -0.6862],
        [ 1.0000, -0.1608,  1.7237,  ...,  2.2039, -0.1208, -0.0148],
        [ 1.0000,  1.4064, -0.7555,  ..., -0.4799,  0.6552, -0.9854],
        ...,
        [ 1.0000, -0.4284, -1.3363,  ...,  0.8784, -1.7515,  0.5469],
        [ 1.0000,  1.6693,  0.4621,  ..., -0.8793, -0.0034, -1.7986],
        [ 1.0000,  0.8154,  0.4678,  ..., -0.8734, -0.8785,  0.9370]])
Edge features shape: torch.Size([2956, 8])
Edge features tensor([[ 1.6773e-01, -6.4690e-02, -1.4278e-01,  ..., -1.5701e-01,
         -3.6037e-02,  1.7091e-01],
        [ 3.4390e-01,  4.3213e-01,  1.9912e-01,  ..., -3.5554e-01,
         -1.9044e-02,  3.3161e-01],
        [ 3.4482e-01,  4.3727e-01,  2.0967e-01,  ..., -3.7010e-01,
         -4.2319e-02,  3.1643e-01],
        ...,
        [ 3.1303e-01,  2.8138e-01, -6.0086e-02,  ...,  1.1839e-01,
          3.4783e-01,  1.9428e-01],
        [ 9.8758e-05, -1.9532e-04,  2.8755e-04,  ..., -5.1846e-04,
          5.7448e-04, -6.1774e-04],
        [ 2.4867e-10, -4.9734e-10,  7.4595e-10,  ..., -1.4919e-09,
          1.7406e-09, -1.9893e-09]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        ...,
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2956, 96])
Tensor Product Weights tensor([[ 8.7412e-02, -1.9551e-01,  3.2846e-02,  ..., -4.2673e-02,
         -1.3532e-01, -6.8244e-02],
        [ 3.9286e-02, -1.4757e-01,  3.5442e-01,  ..., -3.0912e-02,
          1.8133e-02,  1.8421e-01],
        [ 3.9873e-02, -1.5052e-01,  3.4976e-01,  ..., -3.0750e-02,
          1.3188e-02,  1.7665e-01],
        ...,
        [ 1.4565e-01,  8.3821e-03,  2.4033e-01,  ..., -1.5847e-01,
          2.2337e-01,  2.0217e-01],
        [ 5.3148e-04,  3.9837e-05,  1.6809e-04,  ..., -5.1903e-04,
          5.8820e-05,  2.9486e-04],
        [ 1.5992e-09,  1.1563e-10,  5.1871e-10,  ..., -1.5567e-09,
          2.1580e-10,  8.4561e-10]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0467, -0.3991, -0.1850,  ..., -0.1750,  0.0684,  0.0570],
        [-0.0773, -0.8011, -0.1609,  ...,  0.0895, -0.0576, -0.1426],
        [ 0.0450, -0.5737, -0.1911,  ...,  0.0074, -0.1122,  0.0465],
        ...,
        [ 0.0933, -0.6914,  0.2808,  ..., -0.1660,  0.2405,  0.2217],
        [ 0.0773, -0.1191,  0.2147,  ..., -0.0686, -0.1483,  0.2020],
        [ 0.0611, -0.1834,  0.1455,  ...,  0.1838,  0.0237, -0.0765]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0094, -0.2209, -0.0871,  ...,  0.0747,  0.4743, -0.1797],
        [-0.1672, -0.3744, -0.1014,  ..., -0.0916, -0.1379, -0.1505],
        [-0.0792, -0.3343, -0.1645,  ...,  0.3273, -0.0152, -0.2828],
        ...,
        [-0.2360, -0.0916, -0.4977,  ..., -0.2090,  0.1250,  0.2459],
        [ 0.0868,  0.0569,  0.0249,  ...,  0.0304,  0.0680, -0.1555],
        [ 0.0077, -0.0330, -0.1806,  ..., -0.1959, -0.0752,  0.1561]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2934])
shifts shape: torch.Size([2934, 3])
sender shape: torch.Size([2934])
receiver shape: torch.Size([2934])
Edge attributes shape: torch.Size([2934, 9])
Edge attributes tensor([[ 1.0000,  1.2528,  0.9517,  ..., -0.1054, -0.8900, -0.6744],
        [ 1.0000, -0.1396,  1.7262,  ...,  2.2134, -0.0622, -0.0121],
        [ 1.0000,  1.3700, -0.7640,  ..., -0.4654,  0.7245, -0.8632],
        ...,
        [ 1.0000, -0.4243, -1.3225,  ...,  0.8374, -1.7669,  0.5751],
        [ 1.0000,  1.6725,  0.4491,  ..., -0.8925, -0.0194, -1.8049],
        [ 1.0000,  0.7951,  0.4413,  ..., -0.9003, -0.8398,  0.9946]])
Edge features shape: torch.Size([2934, 8])
Edge features tensor([[ 1.6741e-01, -6.4976e-02, -1.4220e-01,  ..., -1.5725e-01,
         -3.4526e-02,  1.7065e-01],
        [ 3.4393e-01,  4.3232e-01,  1.9951e-01,  ..., -3.5609e-01,
         -1.9907e-02,  3.3107e-01],
        [ 3.4483e-01,  4.3734e-01,  2.0982e-01,  ..., -3.7030e-01,
         -4.2642e-02,  3.1621e-01],
        ...,
        [ 3.1304e-01,  2.8143e-01, -6.0018e-02,  ...,  1.1826e-01,
          3.4783e-01,  1.9445e-01],
        [ 1.1368e-04, -2.2464e-04,  3.3024e-04,  ..., -5.9062e-04,
          6.5169e-04, -6.9721e-04],
        [ 0.0000e+00, -0.0000e+00,  0.0000e+00,  ..., -0.0000e+00,
          0.0000e+00, -0.0000e+00]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        ...,
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2934, 96])
Tensor Product Weights tensor([[ 8.7402e-02, -1.9642e-01,  3.3760e-02,  ..., -4.3170e-02,
         -1.3507e-01, -6.7855e-02],
        [ 3.9302e-02, -1.4768e-01,  3.5426e-01,  ..., -3.0897e-02,
          1.7942e-02,  1.8393e-01],
        [ 3.9883e-02, -1.5055e-01,  3.4969e-01,  ..., -3.0751e-02,
          1.3123e-02,  1.7654e-01],
        ...,
        [ 1.4560e-01,  8.3269e-03,  2.4045e-01,  ..., -1.5844e-01,
          2.2331e-01,  2.0223e-01],
        [ 6.0326e-04,  4.5369e-05,  1.9037e-04,  ..., -5.8927e-04,
          6.5599e-05,  3.3597e-04],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,
          0.0000e+00,  0.0000e+00]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0434, -0.3953, -0.1910,  ..., -0.1753,  0.0593,  0.0486],
        [-0.1062, -0.6846, -0.2080,  ...,  0.0788, -0.0500, -0.1456],
        [ 0.0444, -0.5694, -0.1953,  ...,  0.0068, -0.1210,  0.0367],
        ...,
        [ 0.0944, -0.7075,  0.2953,  ..., -0.1587,  0.2526,  0.2247],
        [ 0.0763, -0.1158,  0.2109,  ..., -0.0726, -0.1421,  0.2116],
        [ 0.0624, -0.1818,  0.1482,  ...,  0.1828,  0.0211, -0.0730]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0108, -0.2200, -0.0885,  ...,  0.0931,  0.4689, -0.1627],
        [-0.1370, -0.3333, -0.0970,  ..., -0.1247, -0.1303, -0.1538],
        [-0.0766, -0.3327, -0.1639,  ...,  0.3208, -0.0196, -0.2929],
        ...,
        [-0.2342, -0.0892, -0.4856,  ..., -0.2062,  0.1331,  0.2437],
        [ 0.0849,  0.0575,  0.0247,  ...,  0.0281,  0.0654, -0.1563],
        [ 0.0089, -0.0343, -0.1780,  ..., -0.1947, -0.0706,  0.1594]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2928])
shifts shape: torch.Size([2928, 3])
sender shape: torch.Size([2928])
receiver shape: torch.Size([2928])
Edge attributes shape: torch.Size([2928, 9])
Edge attributes tensor([[ 1.0000,  1.2529,  0.9541,  ..., -0.1003, -0.8882, -0.6777],
        [ 1.0000, -0.1490,  1.7252,  ...,  2.2095, -0.0871, -0.0134],
        [ 1.0000,  1.3815, -0.7602,  ..., -0.4720,  0.7032, -0.9006],
        ...,
        [ 1.0000,  1.2944, -0.0024,  ..., -1.1180,  0.0036, -0.2264],
        [ 1.0000, -0.2055,  1.7115,  ...,  2.1569,  0.3736, -0.0088],
        [ 1.0000,  1.3552,  1.0564,  ...,  0.1296,  0.2975, -1.1547]])
Edge features shape: torch.Size([2928, 8])
Edge features tensor([[ 0.1673, -0.0651, -0.1419,  ..., -0.1574, -0.0338,  0.1705],
        [ 0.3439,  0.4324,  0.1996,  ..., -0.3563, -0.0202,  0.3309],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3709, -0.0436,  0.3156],
        ...,
        [ 0.3130,  0.2811, -0.0605,  ...,  0.1191,  0.3478,  0.1933],
        [ 0.1136, -0.0906, -0.0414,  ..., -0.0780,  0.1194, -0.0172],
        [ 0.3127,  0.2800, -0.0619,  ...,  0.1219,  0.3477,  0.1895]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        ...,
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2928, 96])
Tensor Product Weights tensor([[ 0.0874, -0.1968,  0.0342,  ..., -0.0434, -0.1350, -0.0677],
        [ 0.0393, -0.1477,  0.3542,  ..., -0.0309,  0.0179,  0.1838],
        [ 0.0399, -0.1507,  0.3495,  ..., -0.0308,  0.0129,  0.1762],
        ...,
        [ 0.1459,  0.0087,  0.2397,  ..., -0.1587,  0.2237,  0.2018],
        [ 0.0430, -0.2000,  0.1200,  ..., -0.0545, -0.0249, -0.0402],
        [ 0.1470,  0.0099,  0.2372,  ..., -0.1594,  0.2250,  0.2003]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0531, -0.4936, -0.1230,  ..., -0.1590,  0.0604,  0.0269],
        [-0.0366, -0.9105, -0.1163,  ...,  0.0935,  0.0216, -0.0983],
        [ 0.0424, -0.5924, -0.1785,  ...,  0.0188, -0.1403,  0.0173],
        ...,
        [ 0.0967, -0.3418,  0.2782,  ..., -0.0992,  0.1091,  0.1140],
        [ 0.0388, -0.1136,  0.1419,  ...,  0.0473,  0.0112,  0.1436],
        [ 0.0741, -0.1223,  0.1923,  ..., -0.0726, -0.0089, -0.1154]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0145, -0.2568, -0.0969,  ...,  0.0664,  0.4876, -0.0983],
        [-0.2110, -0.4609, -0.0817,  ..., -0.0406, -0.0990, -0.1876],
        [-0.0820, -0.3304, -0.1740,  ...,  0.3166, -0.0082, -0.2602],
        ...,
        [ 0.0062,  0.0656,  0.0025,  ..., -0.0246, -0.0522, -0.1046],
        [ 0.0589, -0.0810, -0.1218,  ..., -0.0326, -0.0693,  0.3214],
        [ 0.0567,  0.0586,  0.0285,  ...,  0.1358,  0.0423, -0.0265]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2972])
shifts shape: torch.Size([2972, 3])
sender shape: torch.Size([2972])
receiver shape: torch.Size([2972])
Edge attributes shape: torch.Size([2972, 9])
Edge attributes tensor([[ 1.0000,  1.2397,  0.9608,  ..., -0.0860, -0.9114, -0.6436],
        [ 1.0000, -0.1565,  1.7246,  ...,  2.2074, -0.0755, -0.0151],
        [ 1.0000,  1.3825, -0.7537,  ..., -0.4829,  0.7020, -0.8978],
        ...,
        [ 1.0000,  1.1090,  0.5238,  ..., -0.8113, -0.8270,  0.1717],
        [ 1.0000,  0.5065, -0.2944,  ..., -1.0211,  0.6195,  1.5493],
        [ 1.0000,  0.4372,  1.3391,  ...,  0.8869, -1.7423,  0.5322]])
Edge features shape: torch.Size([2972, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1431,  ..., -0.1569, -0.0368,  0.1710],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3554, -0.0188,  0.3318],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3698, -0.0419,  0.3167],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4171],
        [ 0.3147,  0.2887, -0.0499,  ...,  0.0987,  0.3475,  0.2201],
        [ 0.3130,  0.2815, -0.0600,  ...,  0.1182,  0.3478,  0.1945]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        ...,
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2972, 96])
Tensor Product Weights tensor([[ 8.7415e-02, -1.9508e-01,  3.2412e-02,  ..., -4.2437e-02,
         -1.3544e-01, -6.8428e-02],
        [ 3.9282e-02, -1.4753e-01,  3.5447e-01,  ..., -3.0916e-02,
          1.8183e-02,  1.8428e-01],
        [ 3.9858e-02, -1.5046e-01,  3.4985e-01,  ..., -3.0748e-02,
          1.3281e-02,  1.7680e-01],
        ...,
        [ 1.2579e-01, -4.2304e-02,  1.1257e-01,  ..., -8.0251e-02,
          2.4487e-02,  1.5749e-02],
        [ 1.3817e-01,  1.3224e-04,  2.5709e-01,  ..., -1.5313e-01,
          2.1402e-01,  2.1189e-01],
        [ 1.4558e-01,  8.3034e-03,  2.4050e-01,  ..., -1.5843e-01,
          2.2328e-01,  2.0226e-01]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0440, -0.3657, -0.2127,  ..., -0.1699,  0.0384,  0.0623],
        [-0.0461, -0.8605, -0.1071,  ...,  0.0823, -0.0581, -0.1618],
        [ 0.0528, -0.7251, -0.0477,  ..., -0.0037, -0.1453,  0.0441],
        ...,
        [ 0.0951, -0.6846,  0.2786,  ..., -0.1820,  0.2408,  0.2188],
        [ 0.0607, -0.1787,  0.1503,  ...,  0.1827,  0.0242, -0.0796],
        [ 0.0790, -0.1260,  0.2208,  ..., -0.0707, -0.1484,  0.1986]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0228, -0.2201, -0.0740,  ...,  0.0458,  0.5173, -0.2147],
        [-0.1960, -0.4006, -0.0958,  ..., -0.0805, -0.1457, -0.1233],
        [-0.1319, -0.3509, -0.1833,  ...,  0.3700, -0.0673, -0.1861],
        ...,
        [-0.2352, -0.0974, -0.5005,  ..., -0.2119,  0.1271,  0.2475],
        [ 0.0112, -0.0311, -0.1772,  ..., -0.1975, -0.0749,  0.1547],
        [ 0.0869,  0.0568,  0.0260,  ...,  0.0313,  0.0683, -0.1544]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2934])
shifts shape: torch.Size([2934, 3])
sender shape: torch.Size([2934])
receiver shape: torch.Size([2934])
Edge attributes shape: torch.Size([2934, 9])
Edge attributes tensor([[ 1.0000,  1.2520,  0.9542,  ..., -0.1001, -0.8900, -0.6748],
        [ 1.0000, -0.1491,  1.7252,  ...,  2.2096, -0.0853, -0.0134],
        [ 1.0000,  1.3802, -0.7600,  ..., -0.4722,  0.7057, -0.8958],
        ...,
        [ 1.0000,  1.2953, -0.0067,  ..., -1.1180,  0.0099, -0.2296],
        [ 1.0000, -0.2033,  1.7121,  ...,  2.1592,  0.3658, -0.0090],
        [ 1.0000,  1.3566,  1.0548,  ...,  0.1258,  0.2957, -1.1575]])
Edge features shape: torch.Size([2934, 8])
Edge features tensor([[ 0.1673, -0.0651, -0.1419,  ..., -0.1574, -0.0338,  0.1705],
        [ 0.3440,  0.4325,  0.1998,  ..., -0.3565, -0.0205,  0.3307],
        [ 0.3449,  0.4376,  0.2103,  ..., -0.3709, -0.0437,  0.3155],
        ...,
        [ 0.3130,  0.2811, -0.0605,  ...,  0.1192,  0.3478,  0.1931],
        [ 0.1136, -0.0906, -0.0414,  ..., -0.0780,  0.1194, -0.0172],
        [ 0.3127,  0.2800, -0.0620,  ...,  0.1220,  0.3477,  0.1893]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        ...,
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2934, 96])
Tensor Product Weights tensor([[ 0.0874, -0.1969,  0.0342,  ..., -0.0434, -0.1349, -0.0677],
        [ 0.0393, -0.1478,  0.3541,  ..., -0.0309,  0.0178,  0.1837],
        [ 0.0399, -0.1507,  0.3495,  ..., -0.0308,  0.0129,  0.1762],
        ...,
        [ 0.1460,  0.0087,  0.2396,  ..., -0.1587,  0.2238,  0.2017],
        [ 0.0430, -0.2001,  0.1200,  ..., -0.0545, -0.0249, -0.0402],
        [ 0.1470,  0.0099,  0.2370,  ..., -0.1594,  0.2251,  0.2002]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0536, -0.4936, -0.1227,  ..., -0.1590,  0.0597,  0.0271],
        [-0.0377, -0.9071, -0.1203,  ...,  0.0961,  0.0213, -0.0995],
        [ 0.0424, -0.5920, -0.1789,  ...,  0.0184, -0.1405,  0.0176],
        ...,
        [ 0.0967, -0.3421,  0.2781,  ..., -0.0993,  0.1096,  0.1136],
        [ 0.0380, -0.1140,  0.1409,  ...,  0.0473,  0.0118,  0.1440],
        [ 0.0738, -0.1221,  0.1919,  ..., -0.0732, -0.0085, -0.1161]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0147, -0.2567, -0.0968,  ...,  0.0671,  0.4879, -0.0972],
        [-0.2092, -0.4594, -0.0820,  ..., -0.0358, -0.0955, -0.1818],
        [-0.0818, -0.3305, -0.1738,  ...,  0.3168, -0.0085, -0.2615],
        ...,
        [ 0.0061,  0.0654,  0.0024,  ..., -0.0245, -0.0526, -0.1044],
        [ 0.0594, -0.0798, -0.1223,  ..., -0.0329, -0.0689,  0.3207],
        [ 0.0567,  0.0589,  0.0284,  ...,  0.1360,  0.0419, -0.0266]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2928])
shifts shape: torch.Size([2928, 3])
sender shape: torch.Size([2928])
receiver shape: torch.Size([2928])
Edge attributes shape: torch.Size([2928, 9])
Edge attributes tensor([[ 1.0000,  1.2378,  0.9690,  ..., -0.0683, -0.9098, -0.6475],
        [ 1.0000, -0.1692,  1.7235,  ...,  2.2030, -0.0685, -0.0179],
        [ 1.0000,  1.3783, -0.7452,  ..., -0.4971,  0.7103, -0.8744],
        ...,
        [ 1.0000,  1.3602,  1.0538,  ...,  0.1236,  0.2701, -1.1687],
        [ 1.0000,  1.2886, -0.0216,  ..., -1.1175,  0.0323, -0.2076],
        [ 1.0000, -0.1978,  1.7143,  ...,  2.1677,  0.3283, -0.0110]])
Edge features shape: torch.Size([2928, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1426,  ..., -0.1571, -0.0355,  0.1708],
        [ 0.3439,  0.4322,  0.1993,  ..., -0.3558, -0.0194,  0.3314],
        [ 0.3449,  0.4377,  0.2106,  ..., -0.3714, -0.0444,  0.3150],
        ...,
        [ 0.3127,  0.2801, -0.0619,  ...,  0.1218,  0.3477,  0.1896],
        [ 0.3130,  0.2811, -0.0605,  ...,  0.1192,  0.3478,  0.1932],
        [ 0.1135, -0.0906, -0.0411,  ..., -0.0776,  0.1194, -0.0177]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        ...,
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2928, 96])
Tensor Product Weights tensor([[ 0.0874, -0.1958,  0.0331,  ..., -0.0428, -0.1352, -0.0681],
        [ 0.0393, -0.1476,  0.3544,  ..., -0.0309,  0.0180,  0.1841],
        [ 0.0399, -0.1508,  0.3493,  ..., -0.0308,  0.0128,  0.1760],
        ...,
        [ 0.1470,  0.0098,  0.2373,  ..., -0.1593,  0.2250,  0.2003],
        [ 0.1460,  0.0087,  0.2396,  ..., -0.1587,  0.2238,  0.2017],
        [ 0.0428, -0.1997,  0.1200,  ..., -0.0543, -0.0246, -0.0402]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0522, -0.4814, -0.1370,  ..., -0.1583,  0.0539,  0.0647],
        [-0.0400, -0.9051, -0.1255,  ...,  0.0962,  0.0261, -0.0931],
        [ 0.0382, -0.5859, -0.1892,  ...,  0.0230, -0.1250, -0.0254],
        ...,
        [ 0.0968, -0.3396,  0.2771,  ..., -0.0980,  0.1113,  0.1108],
        [ 0.0388, -0.1135,  0.1430,  ...,  0.0477,  0.0126,  0.1443],
        [ 0.0687, -0.1274,  0.1928,  ..., -0.0769, -0.0212, -0.1127]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0119, -0.2562, -0.0979,  ...,  0.1518,  0.5039,  0.0665],
        [-0.2080, -0.4576, -0.0814,  ..., -0.0478, -0.0933, -0.1890],
        [-0.0768, -0.3253, -0.1761,  ...,  0.2102, -0.0165, -0.4096],
        ...,
        [ 0.0071,  0.0661,  0.0026,  ..., -0.0249, -0.0520, -0.1044],
        [ 0.0590, -0.0806, -0.1208,  ..., -0.0311, -0.0643,  0.3214],
        [ 0.0557,  0.0672,  0.0261,  ...,  0.1359,  0.0404, -0.0299]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2926])
shifts shape: torch.Size([2926, 3])
sender shape: torch.Size([2926])
receiver shape: torch.Size([2926])
Edge attributes shape: torch.Size([2926, 9])
Edge attributes tensor([[ 1.0000,  1.2521,  0.9529,  ..., -0.1029, -0.8908, -0.6734],
        [ 1.0000, -0.1416,  1.7260,  ...,  2.2127, -0.0632, -0.0124],
        [ 1.0000,  1.3714, -0.7629,  ..., -0.4673,  0.7219, -0.8672],
        ...,
        [ 1.0000, -0.4231, -1.3193,  ...,  0.8279, -1.7704,  0.5819],
        [ 1.0000,  1.6709,  0.4555,  ..., -0.8861, -0.0160, -1.8016],
        [ 1.0000,  0.8002,  0.4460,  ..., -0.8956, -0.8464,  0.9814]])
Edge features shape: torch.Size([2926, 8])
Edge features tensor([[ 1.6749e-01, -6.4903e-02, -1.4234e-01,  ..., -1.5719e-01,
         -3.4911e-02,  1.7072e-01],
        [ 3.4393e-01,  4.3232e-01,  1.9950e-01,  ..., -3.5609e-01,
         -1.9899e-02,  3.3107e-01],
        [ 3.4482e-01,  4.3728e-01,  2.0970e-01,  ..., -3.7013e-01,
         -4.2367e-02,  3.1640e-01],
        ...,
        [ 3.1303e-01,  2.8139e-01, -6.0080e-02,  ...,  1.1838e-01,
          3.4783e-01,  1.9429e-01],
        [ 9.6465e-05, -1.9081e-04,  2.8098e-04,  ..., -5.0728e-04,
          5.6246e-04, -6.0530e-04],
        [ 0.0000e+00, -0.0000e+00,  0.0000e+00,  ..., -0.0000e+00,
          0.0000e+00, -0.0000e+00]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        ...,
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2926, 96])
Tensor Product Weights tensor([[ 8.7405e-02, -1.9619e-01,  3.3527e-02,  ..., -4.3044e-02,
         -1.3514e-01, -6.7954e-02],
        [ 3.9302e-02, -1.4768e-01,  3.5426e-01,  ..., -3.0897e-02,
          1.7944e-02,  1.8393e-01],
        [ 3.9874e-02, -1.5052e-01,  3.4975e-01,  ..., -3.0750e-02,
          1.3179e-02,  1.7663e-01],
        ...,
        [ 1.4565e-01,  8.3773e-03,  2.4034e-01,  ..., -1.5847e-01,
          2.2337e-01,  2.0217e-01],
        [ 5.2031e-04,  3.8979e-05,  1.6461e-04,  ..., -5.0811e-04,
          5.7746e-05,  2.8848e-04],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,
          0.0000e+00,  0.0000e+00]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0433, -0.3949, -0.1911,  ..., -0.1754,  0.0596,  0.0486],
        [-0.1079, -0.6835, -0.2092,  ...,  0.0801, -0.0507, -0.1445],
        [ 0.0448, -0.5695, -0.1949,  ...,  0.0073, -0.1199,  0.0371],
        ...,
        [ 0.0933, -0.7022,  0.2888,  ..., -0.1593,  0.2483,  0.2237],
        [ 0.0766, -0.1161,  0.2121,  ..., -0.0735, -0.1423,  0.2098],
        [ 0.0615, -0.1842,  0.1448,  ...,  0.1842,  0.0182, -0.0738]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0110, -0.2197, -0.0885,  ...,  0.0922,  0.4689, -0.1640],
        [-0.1362, -0.3320, -0.0983,  ..., -0.1264, -0.1310, -0.1555],
        [-0.0768, -0.3329, -0.1635,  ...,  0.3211, -0.0195, -0.2926],
        ...,
        [-0.2373, -0.0904, -0.4942,  ..., -0.2066,  0.1313,  0.2451],
        [ 0.0864,  0.0572,  0.0246,  ...,  0.0290,  0.0653, -0.1572],
        [ 0.0070, -0.0336, -0.1811,  ..., -0.1944, -0.0721,  0.1594]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2918])
shifts shape: torch.Size([2918, 3])
sender shape: torch.Size([2918])
receiver shape: torch.Size([2918])
Edge attributes shape: torch.Size([2918, 9])
Edge attributes tensor([[ 1.0000,  1.2454,  0.9509,  ..., -0.1071, -0.9061, -0.6495],
        [ 1.0000, -0.1310,  1.7271,  ...,  2.2167, -0.0253, -0.0110],
        [ 1.0000,  1.3382, -0.7645,  ..., -0.4646,  0.7802, -0.7525],
        ...,
        [ 1.0000,  1.3596,  1.0589,  ...,  0.1355,  0.2379, -1.1736],
        [ 1.0000,  1.2717, -0.0239,  ..., -1.1174,  0.0363, -0.1516],
        [ 1.0000, -0.2017,  1.7143,  ...,  2.1676,  0.3172, -0.0130]])
Edge features shape: torch.Size([2918, 8])
Edge features tensor([[ 0.1670, -0.0653, -0.1415,  ..., -0.1575, -0.0327,  0.1703],
        [ 0.3440,  0.4326,  0.2001,  ..., -0.3569, -0.0211,  0.3303],
        [ 0.3449,  0.4376,  0.2104,  ..., -0.3711, -0.0439,  0.3154],
        ...,
        [ 0.3127,  0.2801, -0.0618,  ...,  0.1217,  0.3477,  0.1897],
        [ 0.3130,  0.2813, -0.0601,  ...,  0.1185,  0.3478,  0.1941],
        [ 0.1136, -0.0906, -0.0413,  ..., -0.0779,  0.1194, -0.0173]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        ...,
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2918, 96])
Tensor Product Weights tensor([[ 0.0874, -0.1975,  0.0349,  ..., -0.0438, -0.1348, -0.0674],
        [ 0.0393, -0.1478,  0.3540,  ..., -0.0309,  0.0177,  0.1835],
        [ 0.0399, -0.1507,  0.3494,  ..., -0.0308,  0.0129,  0.1761],
        ...,
        [ 0.1469,  0.0098,  0.2373,  ..., -0.1593,  0.2249,  0.2004],
        [ 0.1457,  0.0084,  0.2402,  ..., -0.1585,  0.2234,  0.2021],
        [ 0.0430, -0.2000,  0.1200,  ..., -0.0545, -0.0248, -0.0402]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0572, -0.5028, -0.1218,  ..., -0.1645,  0.0507,  0.0201],
        [-0.0613, -0.7730, -0.1905,  ...,  0.0795,  0.0321, -0.1017],
        [ 0.0473, -0.6034, -0.1674,  ...,  0.0209, -0.1509,  0.0024],
        ...,
        [ 0.0970, -0.3390,  0.2766,  ..., -0.0959,  0.1102,  0.1077],
        [ 0.0435, -0.1114,  0.1453,  ...,  0.0477,  0.0110,  0.1463],
        [ 0.0737, -0.1220,  0.1924,  ..., -0.0731, -0.0148, -0.1076]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0183, -0.2670, -0.0955,  ...,  0.0902,  0.4766, -0.0896],
        [-0.1749, -0.4244, -0.0720,  ..., -0.0542, -0.0962, -0.1877],
        [-0.0862, -0.3312, -0.1750,  ...,  0.3098, -0.0063, -0.2524],
        ...,
        [ 0.0073,  0.0658,  0.0022,  ..., -0.0261, -0.0523, -0.1036],
        [ 0.0581, -0.0888, -0.1172,  ..., -0.0269, -0.0622,  0.3242],
        [ 0.0570,  0.0594,  0.0282,  ...,  0.1348,  0.0418, -0.0293]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2942])
shifts shape: torch.Size([2942, 3])
sender shape: torch.Size([2942])
receiver shape: torch.Size([2942])
Edge attributes shape: torch.Size([2942, 9])
Edge attributes tensor([[ 1.0000,  1.2376,  0.9570,  ..., -0.0940, -0.9183, -0.6321],
        [ 1.0000, -0.1349,  1.7268,  ...,  2.2157, -0.0086, -0.0117],
        [ 1.0000,  1.3448, -0.7595,  ..., -0.4732,  0.7688, -0.7704],
        ...,
        [ 1.0000, -0.4225, -1.3179,  ...,  0.8239, -1.7719,  0.5849],
        [ 1.0000,  1.6700,  0.4588,  ..., -0.8827, -0.0147, -1.7998],
        [ 1.0000,  0.8058,  0.4375,  ..., -0.9040, -0.8300,  0.9746]])
Edge features shape: torch.Size([2942, 8])
Edge features tensor([[ 1.6764e-01, -6.4773e-02, -1.4261e-01,  ..., -1.5708e-01,
         -3.5599e-02,  1.7084e-01],
        [ 3.4391e-01,  4.3222e-01,  1.9929e-01,  ..., -3.5578e-01,
         -1.9422e-02,  3.3137e-01],
        [ 3.4481e-01,  4.3719e-01,  2.0952e-01,  ..., -3.6989e-01,
         -4.1981e-02,  3.1666e-01],
        ...,
        [ 3.1305e-01,  2.8149e-01, -5.9945e-02,  ...,  1.1812e-01,
          3.4784e-01,  1.9464e-01],
        [ 1.0880e-04, -2.1507e-04,  3.1631e-04,  ..., -5.6719e-04,
          6.2668e-04, -6.7155e-04],
        [ 0.0000e+00, -0.0000e+00,  0.0000e+00,  ..., -0.0000e+00,
          0.0000e+00, -0.0000e+00]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        ...,
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2942, 96])
Tensor Product Weights tensor([[ 8.7409e-02, -1.9578e-01,  3.3111e-02,  ..., -4.2817e-02,
         -1.3525e-01, -6.8131e-02],
        [ 3.9293e-02, -1.4762e-01,  3.5435e-01,  ..., -3.0905e-02,
          1.8049e-02,  1.8409e-01],
        [ 3.9862e-02, -1.5048e-01,  3.4983e-01,  ..., -3.0749e-02,
          1.3257e-02,  1.7676e-01],
        ...,
        [ 1.4555e-01,  8.2677e-03,  2.4057e-01,  ..., -1.5841e-01,
          2.2324e-01,  2.0231e-01],
        [ 5.8000e-04,  4.3573e-05,  1.8316e-04,  ..., -5.6651e-04,
          6.3429e-05,  3.2262e-04],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,
          0.0000e+00,  0.0000e+00]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0348, -0.3561, -0.2262,  ..., -0.1716,  0.0346,  0.0508],
        [-0.0749, -0.7470, -0.1517,  ...,  0.0703, -0.0531, -0.1653],
        [ 0.0565, -0.7320, -0.0484,  ..., -0.0048, -0.1548,  0.0353],
        ...,
        [ 0.0958, -0.7019,  0.2922,  ..., -0.1703,  0.2498,  0.2234],
        [ 0.0774, -0.1201,  0.2155,  ..., -0.0760, -0.1418,  0.2104],
        [ 0.0610, -0.1802,  0.1492,  ...,  0.1830,  0.0161, -0.0749]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0285, -0.2170, -0.0764,  ...,  0.0628,  0.5133, -0.2008],
        [-0.1683, -0.3600, -0.0928,  ..., -0.1221, -0.1357, -0.1336],
        [-0.1348, -0.3562, -0.1834,  ...,  0.3568, -0.0654, -0.2083],
        ...,
        [-0.2369, -0.0951, -0.4945,  ..., -0.2077,  0.1341,  0.2463],
        [ 0.0862,  0.0578,  0.0255,  ...,  0.0291,  0.0647, -0.1568],
        [ 0.0101, -0.0319, -0.1784,  ..., -0.1951, -0.0715,  0.1597]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2958])
shifts shape: torch.Size([2958, 3])
sender shape: torch.Size([2958])
receiver shape: torch.Size([2958])
Edge attributes shape: torch.Size([2958, 9])
Edge attributes tensor([[ 1.0000,  1.2398,  0.9614,  ..., -0.0846, -0.9109, -0.6446],
        [ 1.0000, -0.1560,  1.7247,  ...,  2.2077, -0.0703, -0.0151],
        [ 1.0000,  1.3816, -0.7533,  ..., -0.4836,  0.7038, -0.8940],
        ...,
        [ 1.0000,  1.1081,  0.5225,  ..., -0.8128, -0.8259,  0.1750],
        [ 1.0000,  0.5094, -0.3010,  ..., -1.0168,  0.6325,  1.5431],
        [ 1.0000,  0.4319,  1.3357,  ...,  0.8766, -1.7495,  0.5440]])
Edge features shape: torch.Size([2958, 8])
Edge features tensor([[ 0.1679, -0.0645, -0.1431,  ..., -0.1569, -0.0370,  0.1711],
        [ 0.3439,  0.4320,  0.1989,  ..., -0.3553, -0.0186,  0.3319],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3698, -0.0419,  0.3167],
        ...,
        [ 0.3663,  0.5674,  0.5127,  ..., -0.4769, -0.5772, -0.4172],
        [ 0.3148,  0.2889, -0.0496,  ...,  0.0981,  0.3475,  0.2208],
        [ 0.3130,  0.2814, -0.0600,  ...,  0.1182,  0.3478,  0.1945]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        ...,
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2958, 96])
Tensor Product Weights tensor([[ 8.7416e-02, -1.9495e-01,  3.2289e-02,  ..., -4.2369e-02,
         -1.3547e-01, -6.8480e-02],
        [ 3.9278e-02, -1.4751e-01,  3.5451e-01,  ..., -3.0919e-02,
          1.8226e-02,  1.8435e-01],
        [ 3.9860e-02, -1.5047e-01,  3.4984e-01,  ..., -3.0748e-02,
          1.3271e-02,  1.7678e-01],
        ...,
        [ 1.2581e-01, -4.2248e-02,  1.1251e-01,  ..., -8.0235e-02,
          2.4504e-02,  1.5733e-02],
        [ 1.3795e-01, -1.0657e-04,  2.5756e-01,  ..., -1.5296e-01,
          2.1375e-01,  2.1216e-01],
        [ 1.4559e-01,  8.3097e-03,  2.4048e-01,  ..., -1.5843e-01,
          2.2329e-01,  2.0226e-01]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0434, -0.3652, -0.2133,  ..., -0.1703,  0.0384,  0.0619],
        [-0.0464, -0.8614, -0.1037,  ...,  0.0812, -0.0584, -0.1634],
        [ 0.0535, -0.7255, -0.0474,  ..., -0.0033, -0.1447,  0.0441],
        ...,
        [ 0.0947, -0.6812,  0.2754,  ..., -0.1808,  0.2381,  0.2199],
        [ 0.0597, -0.1807,  0.1480,  ...,  0.1840,  0.0212, -0.0786],
        [ 0.0793, -0.1261,  0.2216,  ..., -0.0712, -0.1483,  0.1991]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0231, -0.2198, -0.0742,  ...,  0.0462,  0.5175, -0.2144],
        [-0.1968, -0.4001, -0.0964,  ..., -0.0855, -0.1455, -0.1257],
        [-0.1322, -0.3515, -0.1828,  ...,  0.3697, -0.0670, -0.1867],
        ...,
        [-0.2369, -0.0975, -0.5054,  ..., -0.2109,  0.1253,  0.2484],
        [ 0.0100, -0.0302, -0.1796,  ..., -0.1968, -0.0759,  0.1557],
        [ 0.0878,  0.0562,  0.0260,  ...,  0.0315,  0.0680, -0.1552]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2912])
shifts shape: torch.Size([2912, 3])
sender shape: torch.Size([2912])
receiver shape: torch.Size([2912])
Edge attributes shape: torch.Size([2912, 9])
Edge attributes tensor([[ 1.0000,  1.2451,  0.9516,  ..., -0.1057, -0.9063, -0.6494],
        [ 1.0000, -0.1325,  1.7269,  ...,  2.2163, -0.0279, -0.0112],
        [ 1.0000,  1.3402, -0.7639,  ..., -0.4656,  0.7767, -0.7591],
        ...,
        [ 1.0000,  1.3598,  1.0583,  ...,  0.1341,  0.2412, -1.1734],
        [ 1.0000,  1.2741, -0.0247,  ..., -1.1173,  0.0375, -0.1597],
        [ 1.0000, -0.2013,  1.7144,  ...,  2.1681,  0.3153, -0.0130]])
Edge features shape: torch.Size([2912, 8])
Edge features tensor([[ 0.1671, -0.0653, -0.1416,  ..., -0.1575, -0.0329,  0.1704],
        [ 0.3440,  0.4326,  0.2000,  ..., -0.3568, -0.0210,  0.3304],
        [ 0.3449,  0.4376,  0.2103,  ..., -0.3710, -0.0438,  0.3154],
        ...,
        [ 0.3127,  0.2801, -0.0619,  ...,  0.1219,  0.3477,  0.1895],
        [ 0.3130,  0.2813, -0.0602,  ...,  0.1186,  0.3478,  0.1940],
        [ 0.1136, -0.0906, -0.0413,  ..., -0.0779,  0.1194, -0.0173]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        ...,
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2912, 96])
Tensor Product Weights tensor([[ 0.0874, -0.1974,  0.0347,  ..., -0.0437, -0.1348, -0.0674],
        [ 0.0393, -0.1478,  0.3541,  ..., -0.0309,  0.0177,  0.1836],
        [ 0.0399, -0.1507,  0.3495,  ..., -0.0308,  0.0129,  0.1762],
        ...,
        [ 0.1470,  0.0099,  0.2372,  ..., -0.1594,  0.2250,  0.2003],
        [ 0.1457,  0.0085,  0.2402,  ..., -0.1585,  0.2235,  0.2021],
        [ 0.0429, -0.2000,  0.1200,  ..., -0.0544, -0.0248, -0.0402]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0565, -0.5027, -0.1218,  ..., -0.1644,  0.0513,  0.0203],
        [-0.0618, -0.7761, -0.1898,  ...,  0.0793,  0.0316, -0.0993],
        [ 0.0473, -0.6035, -0.1674,  ...,  0.0211, -0.1506,  0.0023],
        ...,
        [ 0.0969, -0.3397,  0.2769,  ..., -0.0960,  0.1107,  0.1080],
        [ 0.0429, -0.1119,  0.1447,  ...,  0.0477,  0.0113,  0.1464],
        [ 0.0735, -0.1221,  0.1922,  ..., -0.0732, -0.0143, -0.1086]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0181, -0.2667, -0.0957,  ...,  0.0881,  0.4771, -0.0904],
        [-0.1759, -0.4248, -0.0724,  ..., -0.0578, -0.0988, -0.1931],
        [-0.0861, -0.3312, -0.1750,  ...,  0.3094, -0.0064, -0.2523],
        ...,
        [ 0.0070,  0.0656,  0.0021,  ..., -0.0259, -0.0528, -0.1034],
        [ 0.0584, -0.0875, -0.1178,  ..., -0.0275, -0.0623,  0.3237],
        [ 0.0570,  0.0596,  0.0282,  ...,  0.1350,  0.0416, -0.0292]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2926])
shifts shape: torch.Size([2926, 3])
sender shape: torch.Size([2926])
receiver shape: torch.Size([2926])
Edge attributes shape: torch.Size([2926, 9])
Edge attributes tensor([[ 1.0000,  1.2427,  0.9657,  ..., -0.0754, -0.9017, -0.6592],
        [ 1.0000, -0.1413,  1.7263,  ...,  2.2137,  0.0192, -0.0128],
        [ 1.0000,  1.3579, -0.7504,  ..., -0.4885,  0.7460, -0.8075],
        ...,
        [ 1.0000,  1.0844,  0.4730,  ..., -0.8679, -0.7725,  0.2740],
        [ 1.0000,  0.4795, -0.3678,  ..., -0.9668,  0.7708,  1.5523],
        [ 1.0000,  0.4108,  1.2934,  ...,  0.7524, -1.7971,  0.6387]])
Edge features shape: torch.Size([2926, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1429,  ..., -0.1570, -0.0363,  0.1709],
        [ 0.3439,  0.4321,  0.1991,  ..., -0.3556, -0.0191,  0.3316],
        [ 0.3448,  0.4373,  0.2098,  ..., -0.3703, -0.0426,  0.3162],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4171],
        [ 0.3148,  0.2891, -0.0493,  ...,  0.0977,  0.3475,  0.2214],
        [ 0.3130,  0.2814, -0.0600,  ...,  0.1182,  0.3478,  0.1945]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        ...,
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2926, 96])
Tensor Product Weights tensor([[ 8.7413e-02, -1.9536e-01,  3.2699e-02,  ..., -4.2593e-02,
         -1.3536e-01, -6.8306e-02],
        [ 3.9286e-02, -1.4757e-01,  3.5442e-01,  ..., -3.0911e-02,
          1.8126e-02,  1.8420e-01],
        [ 3.9881e-02, -1.5055e-01,  3.4970e-01,  ..., -3.0751e-02,
          1.3132e-02,  1.7656e-01],
        ...,
        [ 1.2579e-01, -4.2292e-02,  1.1256e-01,  ..., -8.0247e-02,
          2.4490e-02,  1.5746e-02],
        [ 1.3778e-01, -2.9610e-04,  2.5793e-01,  ..., -1.5283e-01,
          2.1353e-01,  2.1237e-01],
        [ 1.4559e-01,  8.3119e-03,  2.4048e-01,  ..., -1.5843e-01,
          2.2329e-01,  2.0225e-01]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 2.8190e-02, -3.4890e-01, -2.4528e-01,  ..., -1.7430e-01,
          3.5200e-02,  8.8142e-02],
        [-7.8195e-02, -7.3620e-01, -1.5866e-01,  ...,  7.3432e-02,
         -5.1983e-02, -1.6358e-01],
        [ 6.4558e-02, -7.4415e-01, -6.4132e-02,  ..., -3.1692e-03,
         -1.3483e-01, -7.9349e-04],
        ...,
        [ 1.0372e-01, -8.2639e-01,  4.3103e-01,  ..., -1.2510e-01,
          2.6504e-01,  2.2408e-01],
        [ 5.8412e-02, -1.8617e-01,  1.4171e-01,  ...,  1.8029e-01,
          4.0088e-03, -7.3127e-02],
        [ 7.7910e-02, -8.8475e-02,  1.9208e-01,  ..., -6.4611e-02,
         -1.0437e-01,  2.2712e-01]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0337, -0.2216, -0.0786,  ...,  0.1545,  0.5275, -0.0303],
        [-0.1647, -0.3544, -0.0932,  ..., -0.1208, -0.1357, -0.1335],
        [-0.1405, -0.3749, -0.1874,  ...,  0.2157, -0.0373, -0.4006],
        ...,
        [-0.2485, -0.0771, -0.5283,  ..., -0.1957,  0.1582,  0.2542],
        [ 0.0063, -0.0291, -0.1860,  ..., -0.1928, -0.0722,  0.1623],
        [ 0.0789,  0.0456,  0.0250,  ...,  0.0276,  0.0596, -0.1573]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2940])
shifts shape: torch.Size([2940, 3])
sender shape: torch.Size([2940])
receiver shape: torch.Size([2940])
Edge attributes shape: torch.Size([2940, 9])
Edge attributes tensor([[ 1.0000,  1.2501,  0.9551,  ..., -0.0981, -0.8935, -0.6698],
        [ 1.0000, -0.1500,  1.7251,  ...,  2.2094, -0.0825, -0.0136],
        [ 1.0000,  1.3783, -0.7591,  ..., -0.4737,  0.7094, -0.8880],
        ...,
        [ 1.0000, -0.1224,  0.0313,  ..., -1.1169,  0.0699,  1.9165],
        [ 1.0000,  0.3369,  0.9480,  ..., -0.1132,  1.7255,  1.2098],
        [ 1.0000, -1.1197,  0.0178,  ..., -1.1177,  0.0303,  0.3177]])
Edge features shape: torch.Size([2940, 8])
Edge features tensor([[ 0.1673, -0.0651, -0.1419,  ..., -0.1574, -0.0339,  0.1705],
        [ 0.3439,  0.4324,  0.1997,  ..., -0.3563, -0.0203,  0.3308],
        [ 0.3449,  0.4376,  0.2103,  ..., -0.3709, -0.0437,  0.3155],
        ...,
        [ 0.3663,  0.5674,  0.5125,  ..., -0.4770, -0.5770, -0.4168],
        [ 0.3126,  0.2797, -0.0624,  ...,  0.1227,  0.3476,  0.1883],
        [ 0.3131,  0.2818, -0.0595,  ...,  0.1172,  0.3479,  0.1959]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        ...,
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2940, 96])
Tensor Product Weights tensor([[ 0.0874, -0.1968,  0.0341,  ..., -0.0434, -0.1350, -0.0677],
        [ 0.0393, -0.1477,  0.3542,  ..., -0.0309,  0.0179,  0.1838],
        [ 0.0399, -0.1507,  0.3495,  ..., -0.0308,  0.0129,  0.1762],
        ...,
        [ 0.1257, -0.0424,  0.1127,  ..., -0.0803,  0.0245,  0.0158],
        [ 0.1473,  0.0102,  0.2364,  ..., -0.1596,  0.2254,  0.1998],
        [ 0.1452,  0.0079,  0.2414,  ..., -0.1582,  0.2228,  0.2028]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0537, -0.4935, -0.1229,  ..., -0.1591,  0.0592,  0.0267],
        [-0.0380, -0.9086, -0.1192,  ...,  0.0954,  0.0229, -0.0980],
        [ 0.0427, -0.5929, -0.1779,  ...,  0.0188, -0.1410,  0.0169],
        ...,
        [ 0.0815, -0.4349,  0.3186,  ...,  0.0827,  0.0696,  0.0974],
        [ 0.0527, -0.0422,  0.0457,  ..., -0.1117, -0.1099, -0.0029],
        [ 0.0816, -0.1497,  0.2028,  ..., -0.1717,  0.1748,  0.2388]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-1.4743e-02, -2.5691e-01, -9.6710e-02,  ...,  6.7576e-02,
          4.8710e-01, -9.6918e-02],
        [-2.0989e-01, -4.5929e-01, -8.2107e-02,  ..., -4.0874e-02,
         -9.6320e-02, -1.8673e-01],
        [-8.2190e-02, -3.3057e-01, -1.7387e-01,  ...,  3.1647e-01,
         -8.4927e-03, -2.6064e-01],
        ...,
        [-1.5989e-02,  4.0949e-02, -1.8807e-02,  ..., -1.0878e-01,
         -6.1702e-02, -9.1387e-02],
        [ 3.6605e-02,  1.9514e-02, -1.5927e-01,  ...,  2.4432e-04,
          1.2177e-01, -1.3865e-01],
        [ 4.3214e-02,  4.9250e-02,  4.5178e-02,  ..., -4.5685e-02,
          5.3106e-02,  1.2004e-01]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2932])
shifts shape: torch.Size([2932, 3])
sender shape: torch.Size([2932])
receiver shape: torch.Size([2932])
Edge attributes shape: torch.Size([2932, 9])
Edge attributes tensor([[ 1.0000,  1.2540,  0.9509,  ..., -0.1071, -0.8880, -0.6773],
        [ 1.0000, -0.1389,  1.7262,  ...,  2.2136, -0.0643, -0.0119],
        [ 1.0000,  1.3705, -0.7649,  ..., -0.4639,  0.7234, -0.8660],
        ...,
        [ 1.0000, -0.4243, -1.3232,  ...,  0.8396, -1.7662,  0.5738],
        [ 1.0000,  1.6707,  0.4565,  ..., -0.8851, -0.0139, -1.8013],
        [ 1.0000,  0.8028,  0.4506,  ..., -0.8910, -0.8535,  0.9734]])
Edge features shape: torch.Size([2932, 8])
Edge features tensor([[ 1.6740e-01, -6.4989e-02, -1.4217e-01,  ..., -1.5726e-01,
         -3.4455e-02,  1.7064e-01],
        [ 3.4393e-01,  4.3233e-01,  1.9952e-01,  ..., -3.5610e-01,
         -1.9924e-02,  3.3106e-01],
        [ 3.4484e-01,  4.3738e-01,  2.0991e-01,  ..., -3.7042e-01,
         -4.2843e-02,  3.1608e-01],
        ...,
        [ 3.1303e-01,  2.8140e-01, -6.0063e-02,  ...,  1.1835e-01,
          3.4783e-01,  1.9434e-01],
        [ 9.7617e-05, -1.9308e-04,  2.8428e-04,  ..., -5.1291e-04,
          5.6851e-04, -6.1157e-04],
        [ 0.0000e+00, -0.0000e+00,  0.0000e+00,  ..., -0.0000e+00,
          0.0000e+00, -0.0000e+00]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        ...,
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2932, 96])
Tensor Product Weights tensor([[ 8.7402e-02, -1.9646e-01,  3.3803e-02,  ..., -4.3194e-02,
         -1.3506e-01, -6.7836e-02],
        [ 3.9303e-02, -1.4768e-01,  3.5426e-01,  ..., -3.0896e-02,
          1.7939e-02,  1.8393e-01],
        [ 3.9889e-02, -1.5058e-01,  3.4965e-01,  ..., -3.0752e-02,
          1.3082e-02,  1.7648e-01],
        ...,
        [ 1.4564e-01,  8.3633e-03,  2.4037e-01,  ..., -1.5846e-01,
          2.2335e-01,  2.0219e-01],
        [ 5.2593e-04,  3.9411e-05,  1.6636e-04,  ..., -5.1361e-04,
          5.8289e-05,  2.9169e-04],
        [ 0.0000e+00,  0.0000e+00,  0.0000e+00,  ...,  0.0000e+00,
          0.0000e+00,  0.0000e+00]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0432, -0.3948, -0.1915,  ..., -0.1753,  0.0595,  0.0483],
        [-0.1062, -0.6837, -0.2085,  ...,  0.0791, -0.0499, -0.1460],
        [ 0.0444, -0.5700, -0.1949,  ...,  0.0069, -0.1207,  0.0369],
        ...,
        [ 0.0928, -0.6994,  0.2863,  ..., -0.1620,  0.2470,  0.2231],
        [ 0.0770, -0.1177,  0.2136,  ..., -0.0729, -0.1438,  0.2083],
        [ 0.0613, -0.1835,  0.1456,  ...,  0.1842,  0.0196, -0.0741]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0110, -0.2199, -0.0884,  ...,  0.0938,  0.4689, -0.1627],
        [-0.1367, -0.3335, -0.0970,  ..., -0.1239, -0.1304, -0.1530],
        [-0.0769, -0.3330, -0.1640,  ...,  0.3213, -0.0197, -0.2924],
        ...,
        [-0.2371, -0.0906, -0.4957,  ..., -0.2073,  0.1308,  0.2454],
        [ 0.0866,  0.0571,  0.0248,  ...,  0.0292,  0.0659, -0.1567],
        [ 0.0076, -0.0333, -0.1805,  ..., -0.1947, -0.0726,  0.1588]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2942])
shifts shape: torch.Size([2942, 3])
sender shape: torch.Size([2942])
receiver shape: torch.Size([2942])
Edge attributes shape: torch.Size([2942, 9])
Edge attributes tensor([[ 1.0000,  1.2385,  0.9553,  ..., -0.0978, -0.9176, -0.6327],
        [ 1.0000, -0.1330,  1.7269,  ...,  2.2163, -0.0110, -0.0114],
        [ 1.0000,  1.3430, -0.7612,  ..., -0.4702,  0.7719, -0.7660],
        ...,
        [ 1.0000,  1.0913,  0.4996,  ..., -0.8390, -0.8055,  0.2380],
        [ 1.0000,  0.4814, -0.3251,  ..., -0.9998,  0.6849,  1.5690],
        [ 1.0000,  0.4237,  1.3198,  ...,  0.8294, -1.7695,  0.5803]])
Edge features shape: torch.Size([2942, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1425,  ..., -0.1571, -0.0353,  0.1708],
        [ 0.3439,  0.4323,  0.1994,  ..., -0.3560, -0.0197,  0.3312],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3699, -0.0420,  0.3167],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4170],
        [ 0.3147,  0.2888, -0.0498,  ...,  0.0986,  0.3475,  0.2203],
        [ 0.3130,  0.2814, -0.0600,  ...,  0.1183,  0.3478,  0.1945]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        [ 1.3004, -0.0425, -0.7355,  ...,  0.4607, -0.9137,  0.5010],
        ...,
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559],
        [ 0.0979,  0.0294,  0.8815,  ..., -0.4883, -0.2847, -0.4559]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2942, 96])
Tensor Product Weights tensor([[ 8.7407e-02, -1.9598e-01,  3.3319e-02,  ..., -4.2931e-02,
         -1.3520e-01, -6.8042e-02],
        [ 3.9298e-02, -1.4766e-01,  3.5429e-01,  ..., -3.0900e-02,
          1.7984e-02,  1.8399e-01],
        [ 3.9862e-02, -1.5048e-01,  3.4983e-01,  ..., -3.0749e-02,
          1.3258e-02,  1.7676e-01],
        ...,
        [ 1.2578e-01, -4.2315e-02,  1.1258e-01,  ..., -8.0254e-02,
          2.4484e-02,  1.5752e-02],
        [ 1.3812e-01,  7.6550e-05,  2.5720e-01,  ..., -1.5309e-01,
          2.1396e-01,  2.1195e-01],
        [ 1.4560e-01,  8.3222e-03,  2.4046e-01,  ..., -1.5844e-01,
          2.2330e-01,  2.0224e-01]], grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0344, -0.3555, -0.2270,  ..., -0.1715,  0.0346,  0.0501],
        [-0.0729, -0.7490, -0.1499,  ...,  0.0692, -0.0521, -0.1660],
        [ 0.0560, -0.7314, -0.0491,  ..., -0.0049, -0.1552,  0.0351],
        ...,
        [ 0.0958, -0.7008,  0.2917,  ..., -0.1716,  0.2498,  0.2235],
        [ 0.0610, -0.1797,  0.1497,  ...,  0.1830,  0.0172, -0.0748],
        [ 0.0776, -0.1209,  0.2161,  ..., -0.0757, -0.1422,  0.2099]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0287, -0.2170, -0.0765,  ...,  0.0651,  0.5130, -0.1998],
        [-0.1695, -0.3621, -0.0913,  ..., -0.1203, -0.1355, -0.1306],
        [-0.1344, -0.3559, -0.1837,  ...,  0.3568, -0.0652, -0.2079],
        ...,
        [-0.2363, -0.0952, -0.4938,  ..., -0.2078,  0.1339,  0.2461],
        [ 0.0106, -0.0317, -0.1779,  ..., -0.1951, -0.0715,  0.1597],
        [ 0.0861,  0.0576,  0.0256,  ...,  0.0291,  0.0650, -0.1565]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
process_conformer_ensemble input shape: torch.Size([16, 110, 32])
Num conformers: 16, Num atoms: 110, Total dim: 32
Scalar dim: 8, Vector dim: 8
mean_pooling:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[-0.3562, -0.1048,  0.2421,  ...,  0.2019, -0.2897,  0.0124],
         [-0.2822, -0.3006, -0.1104,  ...,  0.3844, -0.1211,  0.1534],
         [-0.4561, -0.2027,  0.2414,  ...,  0.3002, -0.3104,  0.0411],
         ...,
         [ 0.4154,  0.1785,  0.2984,  ...,  0.1918, -0.0956, -0.1607],
         [ 0.2772,  0.1235,  0.0303,  ..., -0.0076,  0.0263, -0.0886],
         [ 0.2756,  0.1447,  0.0404,  ..., -0.0443,  0.0271, -0.0929]],

        [[-0.3562, -0.1048,  0.2421,  ...,  0.2019, -0.2897,  0.0124],
         [-0.2822, -0.3006, -0.1104,  ...,  0.3844, -0.1211,  0.1534],
         [-0.4561, -0.2027,  0.2414,  ...,  0.3002, -0.3104,  0.0411],
         ...,
         [ 0.4154,  0.1785,  0.2984,  ...,  0.1918, -0.0956, -0.1607],
         [ 0.2772,  0.1235,  0.0303,  ..., -0.0076,  0.0263, -0.0886],
         [ 0.2756,  0.1447,  0.0404,  ..., -0.0443,  0.0271, -0.0929]],

        [[-0.3562, -0.1048,  0.2421,  ...,  0.2019, -0.2897,  0.0124],
         [-0.2822, -0.3006, -0.1104,  ...,  0.3844, -0.1211,  0.1534],
         [-0.4561, -0.2027,  0.2414,  ...,  0.3002, -0.3104,  0.0411],
         ...,
         [ 0.4154,  0.1785,  0.2984,  ...,  0.1918, -0.0956, -0.1607],
         [ 0.2772,  0.1235,  0.0303,  ..., -0.0076,  0.0263, -0.0886],
         [ 0.2756,  0.1447,  0.0404,  ..., -0.0443,  0.0271, -0.0929]],

        ...,

        [[-0.3562, -0.1048,  0.2421,  ...,  0.2019, -0.2897,  0.0124],
         [-0.2822, -0.3006, -0.1104,  ...,  0.3844, -0.1211,  0.1534],
         [-0.4561, -0.2027,  0.2414,  ...,  0.3002, -0.3104,  0.0411],
         ...,
         [ 0.4154,  0.1785,  0.2984,  ...,  0.1918, -0.0956, -0.1607],
         [ 0.2772,  0.1235,  0.0303,  ..., -0.0076,  0.0263, -0.0886],
         [ 0.2756,  0.1447,  0.0404,  ..., -0.0443,  0.0271, -0.0929]],

        [[-0.3562, -0.1048,  0.2421,  ...,  0.2019, -0.2897,  0.0124],
         [-0.2822, -0.3006, -0.1104,  ...,  0.3844, -0.1211,  0.1534],
         [-0.4561, -0.2027,  0.2414,  ...,  0.3002, -0.3104,  0.0411],
         ...,
         [ 0.4154,  0.1785,  0.2984,  ...,  0.1918, -0.0956, -0.1607],
         [ 0.2772,  0.1235,  0.0303,  ..., -0.0076,  0.0263, -0.0886],
         [ 0.2756,  0.1447,  0.0404,  ..., -0.0443,  0.0271, -0.0929]],

        [[-0.3562, -0.1048,  0.2421,  ...,  0.2019, -0.2897,  0.0124],
         [-0.2822, -0.3006, -0.1104,  ...,  0.3844, -0.1211,  0.1534],
         [-0.4561, -0.2027,  0.2414,  ...,  0.3002, -0.3104,  0.0411],
         ...,
         [ 0.4154,  0.1785,  0.2984,  ...,  0.1918, -0.0956, -0.1607],
         [ 0.2772,  0.1235,  0.0303,  ..., -0.0076,  0.0263, -0.0886],
         [ 0.2756,  0.1447,  0.0404,  ..., -0.0443,  0.0271, -0.0929]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[ 0.0284,  0.1706, -0.0397],
          [-0.0873, -0.2676,  0.0958],
          [-0.2782, -0.3233,  0.2406],
          ...,
          [ 0.1873,  0.5354, -0.1827],
          [ 0.2399,  0.3712, -0.2119],
          [ 0.1348,  0.0385, -0.1131]],

         [[ 0.0427,  0.0307, -0.0108],
          [ 0.0479,  0.1117,  0.3100],
          [-0.1801, -0.1595,  0.1714],
          ...,
          [-0.0364, -0.0117, -0.0210],
          [ 0.1539,  0.0858, -0.3301],
          [ 0.1972,  0.1523, -0.1351]],

         [[ 0.0180, -0.0489, -0.0488],
          [-0.0981, -0.1173,  0.2367],
          [-0.4112, -0.2628,  0.3845],
          ...,
          [ 0.4875, -0.0081, -0.2993],
          [ 0.3398,  0.1562, -0.3461],
          [ 0.0982,  0.0792, -0.1234]],

         ...,

         [[-0.1445,  0.0602,  0.0053],
          [ 0.1763,  0.0213, -0.1234],
          [-0.0810,  0.0503,  0.0422],
          ...,
          [ 0.0795, -0.0184, -0.0656],
          [-0.0633, -0.0263,  0.0669],
          [ 0.1143, -0.0286, -0.0579]],

         [[-0.0489,  0.0169, -0.0075],
          [ 0.1037,  0.0188, -0.0225],
          [-0.0317, -0.0252,  0.0010],
          ...,
          [ 0.0392,  0.0283,  0.0048],
          [-0.0237,  0.0139,  0.0128],
          [ 0.0539,  0.0285,  0.0033]],

         [[ 0.0689, -0.0668, -0.0677],
          [ 0.0916,  0.0293, -0.0105],
          [ 0.0108, -0.0101, -0.0415],
          ...,
          [-0.0382,  0.0217,  0.0712],
          [ 0.0038, -0.0013, -0.0061],
          [ 0.0683,  0.0202, -0.0093]]],


        [[[ 0.0284,  0.1706, -0.0397],
          [-0.0873, -0.2676,  0.0958],
          [-0.2782, -0.3233,  0.2406],
          ...,
          [ 0.1873,  0.5354, -0.1827],
          [ 0.2399,  0.3712, -0.2119],
          [ 0.1348,  0.0385, -0.1131]],

         [[ 0.0427,  0.0307, -0.0108],
          [ 0.0479,  0.1117,  0.3100],
          [-0.1801, -0.1595,  0.1714],
          ...,
          [-0.0364, -0.0117, -0.0210],
          [ 0.1539,  0.0858, -0.3301],
          [ 0.1972,  0.1523, -0.1351]],

         [[ 0.0180, -0.0489, -0.0488],
          [-0.0981, -0.1173,  0.2367],
          [-0.4112, -0.2628,  0.3845],
          ...,
          [ 0.4875, -0.0081, -0.2993],
          [ 0.3398,  0.1562, -0.3461],
          [ 0.0982,  0.0792, -0.1234]],

         ...,

         [[-0.1445,  0.0602,  0.0053],
          [ 0.1763,  0.0213, -0.1234],
          [-0.0810,  0.0503,  0.0422],
          ...,
          [ 0.0795, -0.0184, -0.0656],
          [-0.0633, -0.0263,  0.0669],
          [ 0.1143, -0.0286, -0.0579]],

         [[-0.0489,  0.0169, -0.0075],
          [ 0.1037,  0.0188, -0.0225],
          [-0.0317, -0.0252,  0.0010],
          ...,
          [ 0.0392,  0.0283,  0.0048],
          [-0.0237,  0.0139,  0.0128],
          [ 0.0539,  0.0285,  0.0033]],

         [[ 0.0689, -0.0668, -0.0677],
          [ 0.0916,  0.0293, -0.0105],
          [ 0.0108, -0.0101, -0.0415],
          ...,
          [-0.0382,  0.0217,  0.0712],
          [ 0.0038, -0.0013, -0.0061],
          [ 0.0683,  0.0202, -0.0093]]],


        [[[ 0.0284,  0.1706, -0.0397],
          [-0.0873, -0.2676,  0.0958],
          [-0.2782, -0.3233,  0.2406],
          ...,
          [ 0.1873,  0.5354, -0.1827],
          [ 0.2399,  0.3712, -0.2119],
          [ 0.1348,  0.0385, -0.1131]],

         [[ 0.0427,  0.0307, -0.0108],
          [ 0.0479,  0.1117,  0.3100],
          [-0.1801, -0.1595,  0.1714],
          ...,
          [-0.0364, -0.0117, -0.0210],
          [ 0.1539,  0.0858, -0.3301],
          [ 0.1972,  0.1523, -0.1351]],

         [[ 0.0180, -0.0489, -0.0488],
          [-0.0981, -0.1173,  0.2367],
          [-0.4112, -0.2628,  0.3845],
          ...,
          [ 0.4875, -0.0081, -0.2993],
          [ 0.3398,  0.1562, -0.3461],
          [ 0.0982,  0.0792, -0.1234]],

         ...,

         [[-0.1445,  0.0602,  0.0053],
          [ 0.1763,  0.0213, -0.1234],
          [-0.0810,  0.0503,  0.0422],
          ...,
          [ 0.0795, -0.0184, -0.0656],
          [-0.0633, -0.0263,  0.0669],
          [ 0.1143, -0.0286, -0.0579]],

         [[-0.0489,  0.0169, -0.0075],
          [ 0.1037,  0.0188, -0.0225],
          [-0.0317, -0.0252,  0.0010],
          ...,
          [ 0.0392,  0.0283,  0.0048],
          [-0.0237,  0.0139,  0.0128],
          [ 0.0539,  0.0285,  0.0033]],

         [[ 0.0689, -0.0668, -0.0677],
          [ 0.0916,  0.0293, -0.0105],
          [ 0.0108, -0.0101, -0.0415],
          ...,
          [-0.0382,  0.0217,  0.0712],
          [ 0.0038, -0.0013, -0.0061],
          [ 0.0683,  0.0202, -0.0093]]],


        ...,


        [[[ 0.0284,  0.1706, -0.0397],
          [-0.0873, -0.2676,  0.0958],
          [-0.2782, -0.3233,  0.2406],
          ...,
          [ 0.1873,  0.5354, -0.1827],
          [ 0.2399,  0.3712, -0.2119],
          [ 0.1348,  0.0385, -0.1131]],

         [[ 0.0427,  0.0307, -0.0108],
          [ 0.0479,  0.1117,  0.3100],
          [-0.1801, -0.1595,  0.1714],
          ...,
          [-0.0364, -0.0117, -0.0210],
          [ 0.1539,  0.0858, -0.3301],
          [ 0.1972,  0.1523, -0.1351]],

         [[ 0.0180, -0.0489, -0.0488],
          [-0.0981, -0.1173,  0.2367],
          [-0.4112, -0.2628,  0.3845],
          ...,
          [ 0.4875, -0.0081, -0.2993],
          [ 0.3398,  0.1562, -0.3461],
          [ 0.0982,  0.0792, -0.1234]],

         ...,

         [[-0.1445,  0.0602,  0.0053],
          [ 0.1763,  0.0213, -0.1234],
          [-0.0810,  0.0503,  0.0422],
          ...,
          [ 0.0795, -0.0184, -0.0656],
          [-0.0633, -0.0263,  0.0669],
          [ 0.1143, -0.0286, -0.0579]],

         [[-0.0489,  0.0169, -0.0075],
          [ 0.1037,  0.0188, -0.0225],
          [-0.0317, -0.0252,  0.0010],
          ...,
          [ 0.0392,  0.0283,  0.0048],
          [-0.0237,  0.0139,  0.0128],
          [ 0.0539,  0.0285,  0.0033]],

         [[ 0.0689, -0.0668, -0.0677],
          [ 0.0916,  0.0293, -0.0105],
          [ 0.0108, -0.0101, -0.0415],
          ...,
          [-0.0382,  0.0217,  0.0712],
          [ 0.0038, -0.0013, -0.0061],
          [ 0.0683,  0.0202, -0.0093]]],


        [[[ 0.0284,  0.1706, -0.0397],
          [-0.0873, -0.2676,  0.0958],
          [-0.2782, -0.3233,  0.2406],
          ...,
          [ 0.1873,  0.5354, -0.1827],
          [ 0.2399,  0.3712, -0.2119],
          [ 0.1348,  0.0385, -0.1131]],

         [[ 0.0427,  0.0307, -0.0108],
          [ 0.0479,  0.1117,  0.3100],
          [-0.1801, -0.1595,  0.1714],
          ...,
          [-0.0364, -0.0117, -0.0210],
          [ 0.1539,  0.0858, -0.3301],
          [ 0.1972,  0.1523, -0.1351]],

         [[ 0.0180, -0.0489, -0.0488],
          [-0.0981, -0.1173,  0.2367],
          [-0.4112, -0.2628,  0.3845],
          ...,
          [ 0.4875, -0.0081, -0.2993],
          [ 0.3398,  0.1562, -0.3461],
          [ 0.0982,  0.0792, -0.1234]],

         ...,

         [[-0.1445,  0.0602,  0.0053],
          [ 0.1763,  0.0213, -0.1234],
          [-0.0810,  0.0503,  0.0422],
          ...,
          [ 0.0795, -0.0184, -0.0656],
          [-0.0633, -0.0263,  0.0669],
          [ 0.1143, -0.0286, -0.0579]],

         [[-0.0489,  0.0169, -0.0075],
          [ 0.1037,  0.0188, -0.0225],
          [-0.0317, -0.0252,  0.0010],
          ...,
          [ 0.0392,  0.0283,  0.0048],
          [-0.0237,  0.0139,  0.0128],
          [ 0.0539,  0.0285,  0.0033]],

         [[ 0.0689, -0.0668, -0.0677],
          [ 0.0916,  0.0293, -0.0105],
          [ 0.0108, -0.0101, -0.0415],
          ...,
          [-0.0382,  0.0217,  0.0712],
          [ 0.0038, -0.0013, -0.0061],
          [ 0.0683,  0.0202, -0.0093]]],


        [[[ 0.0284,  0.1706, -0.0397],
          [-0.0873, -0.2676,  0.0958],
          [-0.2782, -0.3233,  0.2406],
          ...,
          [ 0.1873,  0.5354, -0.1827],
          [ 0.2399,  0.3712, -0.2119],
          [ 0.1348,  0.0385, -0.1131]],

         [[ 0.0427,  0.0307, -0.0108],
          [ 0.0479,  0.1117,  0.3100],
          [-0.1801, -0.1595,  0.1714],
          ...,
          [-0.0364, -0.0117, -0.0210],
          [ 0.1539,  0.0858, -0.3301],
          [ 0.1972,  0.1523, -0.1351]],

         [[ 0.0180, -0.0489, -0.0488],
          [-0.0981, -0.1173,  0.2367],
          [-0.4112, -0.2628,  0.3845],
          ...,
          [ 0.4875, -0.0081, -0.2993],
          [ 0.3398,  0.1562, -0.3461],
          [ 0.0982,  0.0792, -0.1234]],

         ...,

         [[-0.1445,  0.0602,  0.0053],
          [ 0.1763,  0.0213, -0.1234],
          [-0.0810,  0.0503,  0.0422],
          ...,
          [ 0.0795, -0.0184, -0.0656],
          [-0.0633, -0.0263,  0.0669],
          [ 0.1143, -0.0286, -0.0579]],

         [[-0.0489,  0.0169, -0.0075],
          [ 0.1037,  0.0188, -0.0225],
          [-0.0317, -0.0252,  0.0010],
          ...,
          [ 0.0392,  0.0283,  0.0048],
          [-0.0237,  0.0139,  0.0128],
          [ 0.0539,  0.0285,  0.0033]],

         [[ 0.0689, -0.0668, -0.0677],
          [ 0.0916,  0.0293, -0.0105],
          [ 0.0108, -0.0101, -0.0415],
          ...,
          [-0.0382,  0.0217,  0.0712],
          [ 0.0038, -0.0013, -0.0061],
          [ 0.0683,  0.0202, -0.0093]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[-0.3562, -0.1048,  0.2421,  0.1144,  0.2263,  0.2019, -0.2897,  0.0124],
        [-0.2822, -0.3006, -0.1104,  0.1890,  0.1216,  0.3844, -0.1211,  0.1534],
        [-0.4561, -0.2027,  0.2414,  0.1733,  0.2843,  0.3002, -0.3104,  0.0411],
        [-0.3520, -0.3486, -0.1395,  0.2438,  0.1795,  0.5645, -0.3370,  0.1862],
        [-0.2365, -0.0627,  0.2641,  0.1495,  0.2496,  0.2988, -0.3137, -0.0259]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[ 0.0284,  0.1706, -0.0397],
         [-0.0873, -0.2676,  0.0958],
         [-0.2782, -0.3233,  0.2406],
         [ 0.1316, -0.0428, -0.1063],
         [ 0.0164, -0.2814,  0.0163],
         [ 0.1873,  0.5354, -0.1827],
         [ 0.2399,  0.3712, -0.2119],
         [ 0.1348,  0.0385, -0.1131]],

        [[ 0.0427,  0.0307, -0.0108],
         [ 0.0479,  0.1117,  0.3100],
         [-0.1801, -0.1595,  0.1714],
         [ 0.1668,  0.1252, -0.1761],
         [ 0.1655,  0.2318,  0.2753],
         [-0.0364, -0.0117, -0.0210],
         [ 0.1539,  0.0858, -0.3301],
         [ 0.1972,  0.1523, -0.1351]],

        [[ 0.0180, -0.0489, -0.0488],
         [-0.0981, -0.1173,  0.2367],
         [-0.4112, -0.2628,  0.3845],
         [ 0.0847,  0.3064, -0.2125],
         [-0.0578,  0.0254,  0.1413],
         [ 0.4875, -0.0081, -0.2993],
         [ 0.3398,  0.1562, -0.3461],
         [ 0.0982,  0.0792, -0.1234]],

        [[ 0.0086,  0.0447,  0.0271],
         [-0.0811,  0.3711, -0.2107],
         [-0.2500,  0.2860, -0.1561],
         [ 0.1632, -0.4373,  0.1137],
         [-0.0792,  0.2979, -0.1300],
         [ 0.3221, -0.2020, -0.0277],
         [ 0.1818, -0.1970,  0.1562],
         [-0.0009, -0.0239,  0.0819]],

        [[-0.0734, -0.1091, -0.0006],
         [ 0.0075,  0.0050,  0.0708],
         [ 0.0091, -0.1301,  0.1422],
         [ 0.0143,  0.0142, -0.1076],
         [-0.0472, -0.0798,  0.0613],
         [ 0.0859,  0.2636, -0.1530],
         [-0.0226,  0.0882, -0.1153],
         [-0.0444,  0.0154, -0.0455]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
deep_sets:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[ 0.1074, -0.0597,  0.1563,  ...,  0.0805, -0.0496, -0.0667],
         [ 0.1075, -0.0592,  0.1544,  ...,  0.0816, -0.0511, -0.0671],
         [ 0.1075, -0.0596,  0.1562,  ...,  0.0806, -0.0491, -0.0670],
         ...,
         [ 0.1083, -0.0613,  0.1565,  ...,  0.0772, -0.0552, -0.0653],
         [ 0.1072, -0.0603,  0.1553,  ...,  0.0798, -0.0550, -0.0655],
         [ 0.1071, -0.0602,  0.1553,  ...,  0.0799, -0.0550, -0.0654]],

        [[ 0.1074, -0.0597,  0.1563,  ...,  0.0805, -0.0496, -0.0667],
         [ 0.1075, -0.0592,  0.1544,  ...,  0.0816, -0.0511, -0.0671],
         [ 0.1075, -0.0596,  0.1562,  ...,  0.0806, -0.0491, -0.0670],
         ...,
         [ 0.1083, -0.0613,  0.1565,  ...,  0.0772, -0.0552, -0.0653],
         [ 0.1072, -0.0603,  0.1553,  ...,  0.0798, -0.0550, -0.0655],
         [ 0.1071, -0.0602,  0.1553,  ...,  0.0799, -0.0550, -0.0654]],

        [[ 0.1074, -0.0597,  0.1563,  ...,  0.0805, -0.0496, -0.0667],
         [ 0.1075, -0.0592,  0.1544,  ...,  0.0816, -0.0511, -0.0671],
         [ 0.1075, -0.0596,  0.1562,  ...,  0.0806, -0.0491, -0.0670],
         ...,
         [ 0.1083, -0.0613,  0.1565,  ...,  0.0772, -0.0552, -0.0653],
         [ 0.1072, -0.0603,  0.1553,  ...,  0.0798, -0.0550, -0.0655],
         [ 0.1071, -0.0602,  0.1553,  ...,  0.0799, -0.0550, -0.0654]],

        ...,

        [[ 0.1074, -0.0597,  0.1563,  ...,  0.0805, -0.0496, -0.0667],
         [ 0.1075, -0.0592,  0.1544,  ...,  0.0816, -0.0511, -0.0671],
         [ 0.1075, -0.0596,  0.1562,  ...,  0.0806, -0.0491, -0.0670],
         ...,
         [ 0.1083, -0.0613,  0.1565,  ...,  0.0772, -0.0552, -0.0653],
         [ 0.1072, -0.0603,  0.1553,  ...,  0.0798, -0.0550, -0.0655],
         [ 0.1071, -0.0602,  0.1553,  ...,  0.0799, -0.0550, -0.0654]],

        [[ 0.1074, -0.0597,  0.1563,  ...,  0.0805, -0.0496, -0.0667],
         [ 0.1075, -0.0592,  0.1544,  ...,  0.0816, -0.0511, -0.0671],
         [ 0.1075, -0.0596,  0.1562,  ...,  0.0806, -0.0491, -0.0670],
         ...,
         [ 0.1083, -0.0613,  0.1565,  ...,  0.0772, -0.0552, -0.0653],
         [ 0.1072, -0.0603,  0.1553,  ...,  0.0798, -0.0550, -0.0655],
         [ 0.1071, -0.0602,  0.1553,  ...,  0.0799, -0.0550, -0.0654]],

        [[ 0.1074, -0.0597,  0.1563,  ...,  0.0805, -0.0496, -0.0667],
         [ 0.1075, -0.0592,  0.1544,  ...,  0.0816, -0.0511, -0.0671],
         [ 0.1075, -0.0596,  0.1562,  ...,  0.0806, -0.0491, -0.0670],
         ...,
         [ 0.1083, -0.0613,  0.1565,  ...,  0.0772, -0.0552, -0.0653],
         [ 0.1072, -0.0603,  0.1553,  ...,  0.0798, -0.0550, -0.0655],
         [ 0.1071, -0.0602,  0.1553,  ...,  0.0799, -0.0550, -0.0654]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[-0.0710,  0.0601, -0.0523],
          [-0.0404, -0.0894, -0.0051],
          [-0.0849, -0.0653,  0.1076],
          ...,
          [ 0.0236,  0.0436,  0.1007],
          [-0.0250, -0.0444, -0.0913],
          [ 0.0112, -0.0804, -0.0119]],

         [[-0.0724,  0.0594, -0.0521],
          [-0.0415, -0.0901, -0.0055],
          [-0.0860, -0.0644,  0.1083],
          ...,
          [ 0.0242,  0.0423,  0.1011],
          [-0.0245, -0.0448, -0.0942],
          [ 0.0116, -0.0801, -0.0142]],

         [[-0.0713,  0.0582, -0.0534],
          [-0.0393, -0.0894, -0.0053],
          [-0.0855, -0.0656,  0.1073],
          ...,
          [ 0.0237,  0.0429,  0.1020],
          [-0.0259, -0.0452, -0.0930],
          [ 0.0112, -0.0799, -0.0130]],

         ...,

         [[-0.0727,  0.0607, -0.0507],
          [-0.0430, -0.0902, -0.0054],
          [-0.0855, -0.0634,  0.1098],
          ...,
          [ 0.0242,  0.0429,  0.1005],
          [-0.0240, -0.0449, -0.0939],
          [ 0.0115, -0.0796, -0.0150]],

         [[-0.0726,  0.0597, -0.0512],
          [-0.0423, -0.0901, -0.0053],
          [-0.0857, -0.0634,  0.1087],
          ...,
          [ 0.0239,  0.0424,  0.1012],
          [-0.0247, -0.0445, -0.0941],
          [ 0.0113, -0.0797, -0.0150]],

         [[-0.0733,  0.0594, -0.0515],
          [-0.0422, -0.0899, -0.0053],
          [-0.0865, -0.0635,  0.1080],
          ...,
          [ 0.0242,  0.0417,  0.1020],
          [-0.0245, -0.0442, -0.0947],
          [ 0.0112, -0.0797, -0.0156]]],


        [[[-0.0710,  0.0601, -0.0523],
          [-0.0404, -0.0894, -0.0051],
          [-0.0849, -0.0653,  0.1076],
          ...,
          [ 0.0236,  0.0436,  0.1007],
          [-0.0250, -0.0444, -0.0913],
          [ 0.0112, -0.0804, -0.0119]],

         [[-0.0724,  0.0594, -0.0521],
          [-0.0415, -0.0901, -0.0055],
          [-0.0860, -0.0644,  0.1083],
          ...,
          [ 0.0242,  0.0423,  0.1011],
          [-0.0245, -0.0448, -0.0942],
          [ 0.0116, -0.0801, -0.0142]],

         [[-0.0713,  0.0582, -0.0534],
          [-0.0393, -0.0894, -0.0053],
          [-0.0855, -0.0656,  0.1073],
          ...,
          [ 0.0237,  0.0429,  0.1020],
          [-0.0259, -0.0452, -0.0930],
          [ 0.0112, -0.0799, -0.0130]],

         ...,

         [[-0.0727,  0.0607, -0.0507],
          [-0.0430, -0.0902, -0.0054],
          [-0.0855, -0.0634,  0.1098],
          ...,
          [ 0.0242,  0.0429,  0.1005],
          [-0.0240, -0.0449, -0.0939],
          [ 0.0115, -0.0796, -0.0150]],

         [[-0.0726,  0.0597, -0.0512],
          [-0.0423, -0.0901, -0.0053],
          [-0.0857, -0.0634,  0.1087],
          ...,
          [ 0.0239,  0.0424,  0.1012],
          [-0.0247, -0.0445, -0.0941],
          [ 0.0113, -0.0797, -0.0150]],

         [[-0.0733,  0.0594, -0.0515],
          [-0.0422, -0.0899, -0.0053],
          [-0.0865, -0.0635,  0.1080],
          ...,
          [ 0.0242,  0.0417,  0.1020],
          [-0.0245, -0.0442, -0.0947],
          [ 0.0112, -0.0797, -0.0156]]],


        [[[-0.0710,  0.0601, -0.0523],
          [-0.0404, -0.0894, -0.0051],
          [-0.0849, -0.0653,  0.1076],
          ...,
          [ 0.0236,  0.0436,  0.1007],
          [-0.0250, -0.0444, -0.0913],
          [ 0.0112, -0.0804, -0.0119]],

         [[-0.0724,  0.0594, -0.0521],
          [-0.0415, -0.0901, -0.0055],
          [-0.0860, -0.0644,  0.1083],
          ...,
          [ 0.0242,  0.0423,  0.1011],
          [-0.0245, -0.0448, -0.0942],
          [ 0.0116, -0.0801, -0.0142]],

         [[-0.0713,  0.0582, -0.0534],
          [-0.0393, -0.0894, -0.0053],
          [-0.0855, -0.0656,  0.1073],
          ...,
          [ 0.0237,  0.0429,  0.1020],
          [-0.0259, -0.0452, -0.0930],
          [ 0.0112, -0.0799, -0.0130]],

         ...,

         [[-0.0727,  0.0607, -0.0507],
          [-0.0430, -0.0902, -0.0054],
          [-0.0855, -0.0634,  0.1098],
          ...,
          [ 0.0242,  0.0429,  0.1005],
          [-0.0240, -0.0449, -0.0939],
          [ 0.0115, -0.0796, -0.0150]],

         [[-0.0726,  0.0597, -0.0512],
          [-0.0423, -0.0901, -0.0053],
          [-0.0857, -0.0634,  0.1087],
          ...,
          [ 0.0239,  0.0424,  0.1012],
          [-0.0247, -0.0445, -0.0941],
          [ 0.0113, -0.0797, -0.0150]],

         [[-0.0733,  0.0594, -0.0515],
          [-0.0422, -0.0899, -0.0053],
          [-0.0865, -0.0635,  0.1080],
          ...,
          [ 0.0242,  0.0417,  0.1020],
          [-0.0245, -0.0442, -0.0947],
          [ 0.0112, -0.0797, -0.0156]]],


        ...,


        [[[-0.0710,  0.0601, -0.0523],
          [-0.0404, -0.0894, -0.0051],
          [-0.0849, -0.0653,  0.1076],
          ...,
          [ 0.0236,  0.0436,  0.1007],
          [-0.0250, -0.0444, -0.0913],
          [ 0.0112, -0.0804, -0.0119]],

         [[-0.0724,  0.0594, -0.0521],
          [-0.0415, -0.0901, -0.0055],
          [-0.0860, -0.0644,  0.1083],
          ...,
          [ 0.0242,  0.0423,  0.1011],
          [-0.0245, -0.0448, -0.0942],
          [ 0.0116, -0.0801, -0.0142]],

         [[-0.0713,  0.0582, -0.0534],
          [-0.0393, -0.0894, -0.0053],
          [-0.0855, -0.0656,  0.1073],
          ...,
          [ 0.0237,  0.0429,  0.1020],
          [-0.0259, -0.0452, -0.0930],
          [ 0.0112, -0.0799, -0.0130]],

         ...,

         [[-0.0727,  0.0607, -0.0507],
          [-0.0430, -0.0902, -0.0054],
          [-0.0855, -0.0634,  0.1098],
          ...,
          [ 0.0242,  0.0429,  0.1005],
          [-0.0240, -0.0449, -0.0939],
          [ 0.0115, -0.0796, -0.0150]],

         [[-0.0726,  0.0597, -0.0512],
          [-0.0423, -0.0901, -0.0053],
          [-0.0857, -0.0634,  0.1087],
          ...,
          [ 0.0239,  0.0424,  0.1012],
          [-0.0247, -0.0445, -0.0941],
          [ 0.0113, -0.0797, -0.0150]],

         [[-0.0733,  0.0594, -0.0515],
          [-0.0422, -0.0899, -0.0053],
          [-0.0865, -0.0635,  0.1080],
          ...,
          [ 0.0242,  0.0417,  0.1020],
          [-0.0245, -0.0442, -0.0947],
          [ 0.0112, -0.0797, -0.0156]]],


        [[[-0.0710,  0.0601, -0.0523],
          [-0.0404, -0.0894, -0.0051],
          [-0.0849, -0.0653,  0.1076],
          ...,
          [ 0.0236,  0.0436,  0.1007],
          [-0.0250, -0.0444, -0.0913],
          [ 0.0112, -0.0804, -0.0119]],

         [[-0.0724,  0.0594, -0.0521],
          [-0.0415, -0.0901, -0.0055],
          [-0.0860, -0.0644,  0.1083],
          ...,
          [ 0.0242,  0.0423,  0.1011],
          [-0.0245, -0.0448, -0.0942],
          [ 0.0116, -0.0801, -0.0142]],

         [[-0.0713,  0.0582, -0.0534],
          [-0.0393, -0.0894, -0.0053],
          [-0.0855, -0.0656,  0.1073],
          ...,
          [ 0.0237,  0.0429,  0.1020],
          [-0.0259, -0.0452, -0.0930],
          [ 0.0112, -0.0799, -0.0130]],

         ...,

         [[-0.0727,  0.0607, -0.0507],
          [-0.0430, -0.0902, -0.0054],
          [-0.0855, -0.0634,  0.1098],
          ...,
          [ 0.0242,  0.0429,  0.1005],
          [-0.0240, -0.0449, -0.0939],
          [ 0.0115, -0.0796, -0.0150]],

         [[-0.0726,  0.0597, -0.0512],
          [-0.0423, -0.0901, -0.0053],
          [-0.0857, -0.0634,  0.1087],
          ...,
          [ 0.0239,  0.0424,  0.1012],
          [-0.0247, -0.0445, -0.0941],
          [ 0.0113, -0.0797, -0.0150]],

         [[-0.0733,  0.0594, -0.0515],
          [-0.0422, -0.0899, -0.0053],
          [-0.0865, -0.0635,  0.1080],
          ...,
          [ 0.0242,  0.0417,  0.1020],
          [-0.0245, -0.0442, -0.0947],
          [ 0.0112, -0.0797, -0.0156]]],


        [[[-0.0710,  0.0601, -0.0523],
          [-0.0404, -0.0894, -0.0051],
          [-0.0849, -0.0653,  0.1076],
          ...,
          [ 0.0236,  0.0436,  0.1007],
          [-0.0250, -0.0444, -0.0913],
          [ 0.0112, -0.0804, -0.0119]],

         [[-0.0724,  0.0594, -0.0521],
          [-0.0415, -0.0901, -0.0055],
          [-0.0860, -0.0644,  0.1083],
          ...,
          [ 0.0242,  0.0423,  0.1011],
          [-0.0245, -0.0448, -0.0942],
          [ 0.0116, -0.0801, -0.0142]],

         [[-0.0713,  0.0582, -0.0534],
          [-0.0393, -0.0894, -0.0053],
          [-0.0855, -0.0656,  0.1073],
          ...,
          [ 0.0237,  0.0429,  0.1020],
          [-0.0259, -0.0452, -0.0930],
          [ 0.0112, -0.0799, -0.0130]],

         ...,

         [[-0.0727,  0.0607, -0.0507],
          [-0.0430, -0.0902, -0.0054],
          [-0.0855, -0.0634,  0.1098],
          ...,
          [ 0.0242,  0.0429,  0.1005],
          [-0.0240, -0.0449, -0.0939],
          [ 0.0115, -0.0796, -0.0150]],

         [[-0.0726,  0.0597, -0.0512],
          [-0.0423, -0.0901, -0.0053],
          [-0.0857, -0.0634,  0.1087],
          ...,
          [ 0.0239,  0.0424,  0.1012],
          [-0.0247, -0.0445, -0.0941],
          [ 0.0113, -0.0797, -0.0150]],

         [[-0.0733,  0.0594, -0.0515],
          [-0.0422, -0.0899, -0.0053],
          [-0.0865, -0.0635,  0.1080],
          ...,
          [ 0.0242,  0.0417,  0.1020],
          [-0.0245, -0.0442, -0.0947],
          [ 0.0112, -0.0797, -0.0156]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[ 0.1074, -0.0597,  0.1563,  0.0407,  0.1596,  0.0805, -0.0496, -0.0667],
        [ 0.1075, -0.0592,  0.1544,  0.0383,  0.1604,  0.0816, -0.0511, -0.0671],
        [ 0.1075, -0.0596,  0.1562,  0.0412,  0.1596,  0.0806, -0.0491, -0.0670],
        [ 0.1084, -0.0591,  0.1543,  0.0394,  0.1601,  0.0810, -0.0499, -0.0673],
        [ 0.1078, -0.0600,  0.1564,  0.0400,  0.1593,  0.0796, -0.0502, -0.0666]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[-0.0710,  0.0601, -0.0523],
         [-0.0404, -0.0894, -0.0051],
         [-0.0849, -0.0653,  0.1076],
         [-0.0737, -0.0893, -0.0554],
         [-0.0014,  0.0657,  0.0987],
         [ 0.0236,  0.0436,  0.1007],
         [-0.0250, -0.0444, -0.0913],
         [ 0.0112, -0.0804, -0.0119]],

        [[-0.0724,  0.0594, -0.0521],
         [-0.0415, -0.0901, -0.0055],
         [-0.0860, -0.0644,  0.1083],
         [-0.0734, -0.0892, -0.0566],
         [-0.0013,  0.0651,  0.0971],
         [ 0.0242,  0.0423,  0.1011],
         [-0.0245, -0.0448, -0.0942],
         [ 0.0116, -0.0801, -0.0142]],

        [[-0.0713,  0.0582, -0.0534],
         [-0.0393, -0.0894, -0.0053],
         [-0.0855, -0.0656,  0.1073],
         [-0.0719, -0.0897, -0.0560],
         [-0.0010,  0.0669,  0.0981],
         [ 0.0237,  0.0429,  0.1020],
         [-0.0259, -0.0452, -0.0930],
         [ 0.0112, -0.0799, -0.0130]],

        [[-0.0730,  0.0593, -0.0526],
         [-0.0441, -0.0894, -0.0040],
         [-0.0869, -0.0648,  0.1045],
         [-0.0732, -0.0899, -0.0566],
         [ 0.0004,  0.0654,  0.0965],
         [ 0.0234,  0.0420,  0.1007],
         [-0.0243, -0.0438, -0.0952],
         [ 0.0127, -0.0780, -0.0163]],

        [[-0.0724,  0.0594, -0.0516],
         [-0.0412, -0.0902, -0.0052],
         [-0.0853, -0.0640,  0.1084],
         [-0.0733, -0.0899, -0.0569],
         [-0.0003,  0.0652,  0.0983],
         [ 0.0235,  0.0422,  0.1025],
         [-0.0250, -0.0446, -0.0937],
         [ 0.0109, -0.0801, -0.0149]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
self_attention:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3509,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3510,  0.0888, -0.1830],
         ...,
         [-0.2263, -0.1872, -0.2133,  ...,  0.3512,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830]],

        [[-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3509,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3510,  0.0888, -0.1830],
         ...,
         [-0.2263, -0.1872, -0.2133,  ...,  0.3512,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830]],

        [[-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3509,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3510,  0.0888, -0.1830],
         ...,
         [-0.2263, -0.1872, -0.2133,  ...,  0.3512,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830]],

        ...,

        [[-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3509,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3510,  0.0888, -0.1830],
         ...,
         [-0.2263, -0.1872, -0.2133,  ...,  0.3512,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830]],

        [[-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3509,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3510,  0.0888, -0.1830],
         ...,
         [-0.2263, -0.1872, -0.2133,  ...,  0.3512,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830]],

        [[-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3509,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3510,  0.0888, -0.1830],
         ...,
         [-0.2263, -0.1872, -0.2133,  ...,  0.3512,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830],
         [-0.2263, -0.1872, -0.2133,  ...,  0.3511,  0.0888, -0.1830]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1169, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1169, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         ...,

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1966,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]]],


        [[[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1169, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1169, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         ...,

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1966,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]]],


        [[[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1169, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1169, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         ...,

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1966,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]]],


        ...,


        [[[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1169, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1169, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         ...,

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1966,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]]],


        [[[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1169, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1169, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         ...,

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1966,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]]],


        [[[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1169, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1169, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         ...,

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1966,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]],

         [[-0.0625,  0.1170, -0.0830],
          [-0.0128, -0.0405, -0.0669],
          [ 0.1967,  0.0623, -0.0009],
          ...,
          [ 0.0382,  0.1716, -0.0034],
          [-0.0647, -0.0361, -0.0711],
          [-0.0981,  0.0364, -0.0017]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[-0.2263, -0.1872, -0.2133, -0.2077, -0.0220,  0.3511,  0.0888, -0.1830],
        [-0.2263, -0.1872, -0.2133, -0.2076, -0.0220,  0.3509,  0.0888, -0.1830],
        [-0.2263, -0.1872, -0.2133, -0.2077, -0.0220,  0.3510,  0.0888, -0.1830],
        [-0.2263, -0.1872, -0.2133, -0.2076, -0.0220,  0.3509,  0.0888, -0.1830],
        [-0.2263, -0.1872, -0.2133, -0.2077, -0.0220,  0.3511,  0.0888, -0.1830]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[-0.0625,  0.1170, -0.0830],
         [-0.0128, -0.0405, -0.0669],
         [ 0.1967,  0.0623, -0.0009],
         [ 0.0017,  0.0703,  0.0375],
         [ 0.1721,  0.0199,  0.1085],
         [ 0.0382,  0.1716, -0.0034],
         [-0.0647, -0.0361, -0.0711],
         [-0.0981,  0.0364, -0.0017]],

        [[-0.0625,  0.1169, -0.0830],
         [-0.0128, -0.0405, -0.0669],
         [ 0.1967,  0.0623, -0.0009],
         [ 0.0016,  0.0703,  0.0375],
         [ 0.1721,  0.0199,  0.1085],
         [ 0.0382,  0.1716, -0.0034],
         [-0.0647, -0.0361, -0.0711],
         [-0.0981,  0.0364, -0.0017]],

        [[-0.0625,  0.1169, -0.0830],
         [-0.0128, -0.0405, -0.0669],
         [ 0.1967,  0.0623, -0.0009],
         [ 0.0016,  0.0703,  0.0375],
         [ 0.1721,  0.0199,  0.1085],
         [ 0.0382,  0.1716, -0.0034],
         [-0.0647, -0.0361, -0.0711],
         [-0.0981,  0.0364, -0.0017]],

        [[-0.0625,  0.1170, -0.0829],
         [-0.0128, -0.0405, -0.0669],
         [ 0.1966,  0.0623, -0.0009],
         [ 0.0017,  0.0703,  0.0375],
         [ 0.1720,  0.0199,  0.1086],
         [ 0.0383,  0.1716, -0.0034],
         [-0.0646, -0.0360, -0.0711],
         [-0.0981,  0.0363, -0.0017]],

        [[-0.0625,  0.1170, -0.0830],
         [-0.0128, -0.0405, -0.0669],
         [ 0.1967,  0.0623, -0.0009],
         [ 0.0016,  0.0703,  0.0375],
         [ 0.1720,  0.0199,  0.1085],
         [ 0.0382,  0.1716, -0.0034],
         [-0.0647, -0.0361, -0.0711],
         [-0.0981,  0.0364, -0.0017]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
==================================================

Batch 6 in Ensemble: 234_vi
Number of conformers in this batch: 16
Unique Atomic Numbers: [6, 1, 8, 15]
Average number of neighbors: 26.70
Processing batch of 16 conformers
Initialized CustomNonLinearReadout with input irreps: 32x0e+32x1o
EQUICATPlusNonLinearReadout(
  (equicat): EQUICAT(
    (model): MACE(
      (node_embedding): LinearNodeEmbeddingBlock(
        (linear): Linear(4x0e -> 32x0e | 128 weights)
      )
      (radial_embedding): RadialEmbeddingBlock(
        (bessel_fn): BesselBasis(r_max=5.0, num_basis=8, trainable=False)
        (cutoff_fn): PolynomialCutoff(p=6.0, r_max=5.0)
      )
      (spherical_harmonics): SphericalHarmonics()
      (atomic_energies_fn): AtomicEnergiesBlock(energies=[0.0000, 0.0000, 0.0000, 0.0000])
      (interactions): ModuleList(
        (0): RealAgnosticResidualInteractionBlock(
          (linear_up): Linear(32x0e -> 32x0e | 1024 weights)
          (conv_tp): TensorProduct(32x0e x 1x0e+1x1o+1x2e -> 32x0e+32x1o+32x2e | 96 paths | 96 weights)
          (conv_tp_weights): FullyConnectedNet[8, 64, 64, 64, 96]
          (linear): Linear(32x0e+32x1o+32x2e -> 32x0e+32x1o+32x2e | 3072 weights)
          (skip_tp): FullyConnectedTensorProduct(32x0e x 4x0e -> 32x0e+32x1o | 4096 paths | 4096 weights)
          (reshape): reshape_irreps()
        )
        (1): RealAgnosticResidualInteractionBlock(
          (linear_up): Linear(32x0e+32x1o -> 32x0e+32x1o | 2048 weights)
          (conv_tp): TensorProduct(32x0e+32x1o x 1x0e+1x1o+1x2e -> 64x0e+96x1o+64x2e | 224 paths | 224 weights)
          (conv_tp_weights): FullyConnectedNet[8, 64, 64, 64, 224]
          (linear): Linear(64x0e+96x1o+64x2e -> 32x0e+32x1o+32x2e | 7168 weights)
          (skip_tp): FullyConnectedTensorProduct(32x0e+32x1o x 4x0e -> 32x0e | 4096 paths | 4096 weights)
          (reshape): reshape_irreps()
        )
      )
      (products): ModuleList(
        (0): EquivariantProductBasisBlock(
          (symmetric_contractions): SymmetricContraction(
            (contractions): ModuleList(
              (0): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x3x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
              (1): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x4x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
            )
          )
          (linear): Linear(32x0e+32x1o -> 32x0e+32x1o | 2048 weights)
        )
        (1): EquivariantProductBasisBlock(
          (symmetric_contractions): SymmetricContraction(
            (contractions): ModuleList(
              (0): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x3x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
            )
          )
          (linear): Linear(32x0e -> 32x0e | 1024 weights)
        )
      )
      (readouts): ModuleList(
        (0): LinearReadoutBlock(
          (linear): Linear(32x0e+32x1o -> 1x0e | 32 weights)
        )
        (1): NonLinearReadoutBlock(
          (linear_1): Linear(32x0e -> 16x0e | 512 weights)
          (non_linearity): Activation [x] (16x0e -> 16x0e)
          (linear_2): Linear(16x0e -> 1x0e | 16 weights)
        )
      )
    )
  )
  (non_linear_readout): CustomNonLinearReadout(
    (linear_1): Linear(32x0e+32x1o -> 16x0e+16x1o | 1024 weights)
    (non_linearity_1): Activation [x ] (16x0e+16x1o -> 16x0e+16x1o)
    (linear_2): Linear(16x0e+16x1o -> 16x0e+16x1o | 512 weights)
    (non_linearity_2): Activation [x ] (16x0e+16x1o -> 16x0e+16x1o)
    (linear_3): Linear(16x0e+16x1o -> 8x0e+8x1o | 256 weights)
  )
)
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2930])
shifts shape: torch.Size([2930, 3])
sender shape: torch.Size([2930])
receiver shape: torch.Size([2930])
Edge attributes shape: torch.Size([2930, 9])
Edge attributes tensor([[ 1.0000,  1.2374,  0.9693,  ..., -0.0676, -0.9105, -0.6465],
        [ 1.0000, -0.1695,  1.7235,  ...,  2.2030, -0.0670, -0.0180],
        [ 1.0000,  1.3779, -0.7449,  ..., -0.4977,  0.7109, -0.8727],
        ...,
        [ 1.0000, -0.1024,  0.0383,  ..., -1.1164,  0.0855,  1.9220],
        [ 1.0000,  0.3618,  0.9498,  ..., -0.1094,  1.7197,  1.1852],
        [ 1.0000, -1.1044,  0.0333,  ..., -1.1168,  0.0573,  0.3612]])
Edge features shape: torch.Size([2930, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1426,  ..., -0.1571, -0.0356,  0.1708],
        [ 0.3439,  0.4322,  0.1993,  ..., -0.3558, -0.0194,  0.3314],
        [ 0.3449,  0.4377,  0.2107,  ..., -0.3714, -0.0445,  0.3149],
        ...,
        [ 0.3663,  0.5674,  0.5125,  ..., -0.4770, -0.5771, -0.4168],
        [ 0.3127,  0.2798, -0.0622,  ...,  0.1225,  0.3477,  0.1886],
        [ 0.3131,  0.2819, -0.0594,  ...,  0.1170,  0.3479,  0.1961]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        ...,
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2930, 96])
Tensor Product Weights tensor([[-0.0182,  0.0250,  0.0126,  ...,  0.0387, -0.0585, -0.0825],
        [-0.0548, -0.1259,  0.1102,  ...,  0.0051, -0.3157, -0.3059],
        [-0.0545, -0.1143,  0.1094,  ..., -0.0014, -0.3228, -0.3028],
        ...,
        [ 0.0004,  0.2507,  0.0008,  ..., -0.1861, -0.3252,  0.1114],
        [-0.0418, -0.1434,  0.0623,  ...,  0.0930, -0.0998, -0.1683],
        [-0.0431, -0.1457,  0.0638,  ...,  0.0918, -0.1028, -0.1718]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0389,  0.0378,  0.1051,  ..., -0.0990, -0.0097,  0.1308],
        [ 0.0915, -0.0183,  0.0165,  ..., -0.1690,  0.0436,  0.3225],
        [ 0.0837, -0.0166,  0.0705,  ..., -0.1325,  0.0870,  0.1405],
        ...,
        [ 0.1149, -0.2102, -0.0771,  ...,  0.0907,  0.0393, -0.0147],
        [ 0.1070, -0.2673, -0.0244,  ..., -0.0236, -0.0083, -0.0989],
        [ 0.1627, -0.2325, -0.0568,  ...,  0.0203, -0.1070,  0.1023]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0119, -1.1197, -0.8563,  ..., -0.2944, -0.3658,  0.1750],
        [ 0.0961, -1.0282, -1.2438,  ...,  0.3075,  0.3888,  0.0703],
        [-0.1043, -1.2317, -1.0700,  ..., -0.3948,  0.1054,  0.2535],
        ...,
        [ 0.2266, -0.5666,  0.5289,  ...,  0.2189,  0.3259,  0.1692],
        [-0.0443, -0.4962,  0.4459,  ..., -0.4636, -0.1183,  0.1863],
        [-0.0229, -0.4762,  0.3507,  ...,  0.0799, -0.0947, -0.4532]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2924])
shifts shape: torch.Size([2924, 3])
sender shape: torch.Size([2924])
receiver shape: torch.Size([2924])
Edge attributes shape: torch.Size([2924, 9])
Edge attributes tensor([[ 1.0000,  1.2462,  0.9504,  ..., -0.1081, -0.9048, -0.6514],
        [ 1.0000, -0.1308,  1.7271,  ...,  2.2168, -0.0275, -0.0110],
        [ 1.0000,  1.3387, -0.7651,  ..., -0.4635,  0.7793, -0.7551],
        ...,
        [ 1.0000, -0.0955,  0.0500,  ..., -1.1152,  0.1117,  1.9231],
        [ 1.0000,  0.3592,  0.9630,  ..., -0.0812,  1.7332,  1.1713],
        [ 1.0000, -1.0992,  0.0332,  ..., -1.1168,  0.0573,  0.3758]])
Edge features shape: torch.Size([2924, 8])
Edge features tensor([[ 0.1671, -0.0653, -0.1415,  ..., -0.1575, -0.0328,  0.1703],
        [ 0.3440,  0.4326,  0.2000,  ..., -0.3568, -0.0210,  0.3304],
        [ 0.3449,  0.4376,  0.2104,  ..., -0.3711, -0.0439,  0.3153],
        ...,
        [ 0.3663,  0.5674,  0.5125,  ..., -0.4770, -0.5771, -0.4168],
        [ 0.3126,  0.2798, -0.0623,  ...,  0.1226,  0.3476,  0.1884],
        [ 0.3132,  0.2819, -0.0593,  ...,  0.1169,  0.3479,  0.1963]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        ...,
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2924, 96])
Tensor Product Weights tensor([[-0.0174,  0.0251,  0.0126,  ...,  0.0375, -0.0583, -0.0825],
        [-0.0548, -0.1252,  0.1101,  ...,  0.0047, -0.3162, -0.3057],
        [-0.0545, -0.1146,  0.1094,  ..., -0.0013, -0.3226, -0.3029],
        ...,
        [ 0.0004,  0.2507,  0.0008,  ..., -0.1861, -0.3252,  0.1114],
        [-0.0417, -0.1434,  0.0623,  ...,  0.0931, -0.0997, -0.1682],
        [-0.0432, -0.1457,  0.0639,  ...,  0.0918, -0.1028, -0.1719]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0355,  0.0430,  0.1061,  ..., -0.0908, -0.0174,  0.1529],
        [ 0.1244, -0.0615,  0.0123,  ..., -0.1879,  0.0359,  0.3002],
        [ 0.0662,  0.0019,  0.0751,  ..., -0.1265,  0.0937,  0.0760],
        ...,
        [ 0.1112, -0.2100, -0.0778,  ...,  0.0916,  0.0370, -0.0127],
        [ 0.1112, -0.2693, -0.0256,  ..., -0.0257, -0.0046, -0.1014],
        [ 0.1619, -0.2303, -0.0560,  ...,  0.0193, -0.1058,  0.1025]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0154, -1.1270, -0.8576,  ..., -0.2598, -0.3666,  0.2337],
        [ 0.0956, -0.9992, -1.1929,  ...,  0.2697,  0.3572,  0.0490],
        [-0.1055, -1.2373, -1.0687,  ..., -0.4215,  0.1148,  0.2135],
        ...,
        [ 0.2239, -0.5688,  0.5282,  ...,  0.2155,  0.3304,  0.1646],
        [-0.0372, -0.4985,  0.4467,  ..., -0.4604, -0.1179,  0.1867],
        [-0.0237, -0.4759,  0.3511,  ...,  0.0796, -0.0971, -0.4542]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2960])
shifts shape: torch.Size([2960, 3])
sender shape: torch.Size([2960])
receiver shape: torch.Size([2960])
Edge attributes shape: torch.Size([2960, 9])
Edge attributes tensor([[ 1.0000,  1.2405,  0.9607,  ..., -0.0862, -0.9099, -0.6460],
        [ 1.0000, -0.1558,  1.7247,  ...,  2.2077, -0.0743, -0.0149],
        [ 1.0000,  1.3833, -0.7537,  ..., -0.4828,  0.7006, -0.9005],
        ...,
        [ 1.0000,  1.1086,  0.5245,  ..., -0.8104, -0.8282,  0.1722],
        [ 1.0000,  0.5091, -0.2973,  ..., -1.0192,  0.6250,  1.5448],
        [ 1.0000,  0.4331,  1.3378,  ...,  0.8831, -1.7465,  0.5390]])
Edge features shape: torch.Size([2960, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0367,  0.1710],
        [ 0.3439,  0.4320,  0.1989,  ..., -0.3553, -0.0186,  0.3319],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3698, -0.0419,  0.3167],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5772, -0.4171],
        [ 0.3148,  0.2889, -0.0496,  ...,  0.0982,  0.3475,  0.2208],
        [ 0.3130,  0.2814, -0.0600,  ...,  0.1183,  0.3478,  0.1944]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        ...,
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2960, 96])
Tensor Product Weights tensor([[-0.0185,  0.0249,  0.0126,  ...,  0.0392, -0.0586, -0.0824],
        [-0.0548, -0.1262,  0.1102,  ...,  0.0053, -0.3155, -0.3060],
        [-0.0545, -0.1156,  0.1095,  ..., -0.0007, -0.3220, -0.3032],
        ...,
        [ 0.0005,  0.2508,  0.0008,  ..., -0.1861, -0.3251,  0.1116],
        [-0.0476, -0.1530,  0.0687,  ...,  0.0878, -0.1129, -0.1835],
        [-0.0428, -0.1451,  0.0635,  ...,  0.0921, -0.1021, -0.1710]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0838, -0.0068,  0.0959,  ..., -0.1001,  0.0097,  0.1628],
        [ 0.0366,  0.0311,  0.0316,  ..., -0.1668,  0.0109,  0.3203],
        [-0.0041,  0.0260,  0.0779,  ..., -0.1293,  0.0785,  0.0713],
        ...,
        [ 0.0649, -0.2371, -0.0854,  ...,  0.0220,  0.1062, -0.0063],
        [ 0.0716, -0.2709, -0.0643,  ..., -0.0040, -0.0389, -0.0545],
        [ 0.0986, -0.2070, -0.0334,  ..., -0.0529,  0.0332, -0.1215]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0116, -1.1226, -0.8624,  ..., -0.2667, -0.3560,  0.2086],
        [ 0.0824, -1.0875, -1.2038,  ...,  0.3253,  0.3022, -0.0099],
        [-0.1257, -1.2378, -1.0476,  ..., -0.4094,  0.0798,  0.2223],
        ...,
        [ 0.4043, -0.8020,  0.9441,  ...,  0.0015, -0.2413, -0.3817],
        [-0.0828, -0.5475,  0.3633,  ..., -0.0187,  0.4699, -0.0323],
        [-0.1090, -0.4405,  0.3817,  ..., -0.1915, -0.1661,  0.3978]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2938])
shifts shape: torch.Size([2938, 3])
sender shape: torch.Size([2938])
receiver shape: torch.Size([2938])
Edge attributes shape: torch.Size([2938, 9])
Edge attributes tensor([[ 1.0000,  1.2373,  0.9588,  ..., -0.0903, -0.9178, -0.6333],
        [ 1.0000, -0.1433,  1.7261,  ...,  2.2129, -0.0307, -0.0131],
        [ 1.0000,  1.3537, -0.7566,  ..., -0.4780,  0.7536, -0.7986],
        ...,
        [ 1.0000,  1.3588,  1.0507,  ...,  0.1162,  0.3025, -1.1597],
        [ 1.0000,  1.2994, -0.0093,  ..., -1.1179,  0.0137, -0.2434],
        [ 1.0000, -0.2008,  1.7122,  ...,  2.1595,  0.3708, -0.0079]])
Edge features shape: torch.Size([2938, 8])
Edge features tensor([[ 0.1675, -0.0649, -0.1423,  ..., -0.1572, -0.0347,  0.1707],
        [ 0.3439,  0.4323,  0.1995,  ..., -0.3561, -0.0199,  0.3311],
        [ 0.3449,  0.4374,  0.2100,  ..., -0.3706, -0.0431,  0.3159],
        ...,
        [ 0.3127,  0.2800, -0.0620,  ...,  0.1221,  0.3477,  0.1892],
        [ 0.3130,  0.2811, -0.0605,  ...,  0.1192,  0.3478,  0.1932],
        [ 0.1139, -0.0906, -0.0419,  ..., -0.0789,  0.1194, -0.0160]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        ...,
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2938, 96])
Tensor Product Weights tensor([[-0.0179,  0.0250,  0.0126,  ...,  0.0383, -0.0584, -0.0825],
        [-0.0548, -0.1257,  0.1102,  ...,  0.0050, -0.3159, -0.3058],
        [-0.0545, -0.1150,  0.1095,  ..., -0.0011, -0.3224, -0.3030],
        ...,
        [-0.0419, -0.1436,  0.0625,  ...,  0.0929, -0.1000, -0.1685],
        [-0.0426, -0.1448,  0.0633,  ...,  0.0923, -0.1016, -0.1704],
        [ 0.0342,  0.0361, -0.0053,  ..., -0.0501, -0.0288, -0.0221]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0559,  0.0116,  0.0984,  ..., -0.0982, -0.0021,  0.1464],
        [ 0.0496,  0.0483,  0.0354,  ..., -0.1637,  0.0413,  0.3278],
        [-0.0163,  0.0387,  0.0806,  ..., -0.1314,  0.0878,  0.0699],
        ...,
        [ 0.1210, -0.1674, -0.0444,  ..., -0.0675,  0.0366, -0.0052],
        [ 0.0676, -0.3107, -0.0629,  ...,  0.1392, -0.0480, -0.1670],
        [ 0.1467, -0.2525, -0.0537,  ...,  0.0183, -0.1245,  0.0737]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0126, -1.1234, -0.8595,  ..., -0.2723, -0.3521,  0.2337],
        [ 0.0856, -1.0331, -1.2184,  ...,  0.3075,  0.3704,  0.0681],
        [-0.1250, -1.2398, -1.0445,  ..., -0.4107,  0.0960,  0.2465],
        ...,
        [ 0.2365, -0.5313,  0.5586,  ...,  0.2556,  0.2756,  0.2573],
        [-0.1190, -0.4685,  0.3772,  ...,  0.2119, -0.1819, -0.3993],
        [-0.0444, -0.4647,  0.3595,  ..., -0.3799, -0.1989,  0.1722]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2946])
shifts shape: torch.Size([2946, 3])
sender shape: torch.Size([2946])
receiver shape: torch.Size([2946])
Edge attributes shape: torch.Size([2946, 9])
Edge attributes tensor([[ 1.0000,  1.2368,  0.9586,  ..., -0.0907, -0.9189, -0.6315],
        [ 1.0000, -0.1437,  1.7260,  ...,  2.2127, -0.0331, -0.0132],
        [ 1.0000,  1.3539, -0.7566,  ..., -0.4780,  0.7531, -0.7995],
        ...,
        [ 1.0000,  1.3586,  1.0509,  ...,  0.1167,  0.3029, -1.1593],
        [ 1.0000,  1.2990, -0.0082,  ..., -1.1180,  0.0121, -0.2420],
        [ 1.0000, -0.2009,  1.7121,  ...,  2.1591,  0.3727, -0.0077]])
Edge features shape: torch.Size([2946, 8])
Edge features tensor([[ 0.1674, -0.0650, -0.1422,  ..., -0.1572, -0.0346,  0.1707],
        [ 0.3439,  0.4324,  0.1996,  ..., -0.3562, -0.0200,  0.3310],
        [ 0.3449,  0.4374,  0.2100,  ..., -0.3706, -0.0431,  0.3159],
        ...,
        [ 0.3127,  0.2800, -0.0620,  ...,  0.1221,  0.3477,  0.1892],
        [ 0.3130,  0.2811, -0.0604,  ...,  0.1190,  0.3478,  0.1934],
        [ 0.1138, -0.0906, -0.0417,  ..., -0.0785,  0.1194, -0.0165]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        ...,
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2946, 96])
Tensor Product Weights tensor([[-0.0179,  0.0250,  0.0126,  ...,  0.0383, -0.0584, -0.0825],
        [-0.0548, -0.1256,  0.1102,  ...,  0.0049, -0.3159, -0.3058],
        [-0.0545, -0.1150,  0.1095,  ..., -0.0010, -0.3224, -0.3030],
        ...,
        [-0.0419, -0.1436,  0.0625,  ...,  0.0929, -0.1000, -0.1685],
        [-0.0427, -0.1448,  0.0633,  ...,  0.0923, -0.1017, -0.1705],
        [ 0.0342,  0.0361, -0.0054,  ..., -0.0502, -0.0288, -0.0219]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0555,  0.0126,  0.0988,  ..., -0.0983, -0.0017,  0.1467],
        [ 0.0517,  0.0475,  0.0353,  ..., -0.1632,  0.0418,  0.3296],
        [-0.0158,  0.0380,  0.0804,  ..., -0.1311,  0.0876,  0.0700],
        ...,
        [ 0.1209, -0.1673, -0.0443,  ..., -0.0674,  0.0365, -0.0052],
        [ 0.0673, -0.3107, -0.0629,  ...,  0.1391, -0.0473, -0.1668],
        [ 0.1466, -0.2528, -0.0537,  ...,  0.0186, -0.1246,  0.0736]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0127, -1.1235, -0.8592,  ..., -0.2720, -0.3525,  0.2334],
        [ 0.0874, -1.0338, -1.2207,  ...,  0.3119,  0.3703,  0.0703],
        [-0.1251, -1.2394, -1.0446,  ..., -0.4107,  0.0953,  0.2463],
        ...,
        [ 0.2365, -0.5312,  0.5587,  ...,  0.2558,  0.2756,  0.2574],
        [-0.1191, -0.4685,  0.3770,  ...,  0.2119, -0.1816, -0.3997],
        [-0.0445, -0.4646,  0.3595,  ..., -0.3798, -0.1990,  0.1722]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2922])
shifts shape: torch.Size([2922, 3])
sender shape: torch.Size([2922])
receiver shape: torch.Size([2922])
Edge attributes shape: torch.Size([2922, 9])
Edge attributes tensor([[ 1.0000,  1.2317,  0.9646,  ..., -0.0777, -0.9256, -0.6226],
        [ 1.0000, -0.1522,  1.7253,  ...,  2.2101, -0.0178, -0.0149],
        [ 1.0000,  1.3362, -0.7506,  ..., -0.4882,  0.7819, -0.7323],
        ...,
        [ 1.0000, -0.0800,  0.0555,  ..., -1.1146,  0.1240,  1.9262],
        [ 1.0000,  0.3801,  0.9635,  ..., -0.0801,  1.7268,  1.1507],
        [ 1.0000, -1.0872,  0.0472,  ..., -1.1155,  0.0820,  0.4091]])
Edge features shape: torch.Size([2922, 8])
Edge features tensor([[ 0.1674, -0.0650, -0.1422,  ..., -0.1572, -0.0346,  0.1707],
        [ 0.3439,  0.4324,  0.1996,  ..., -0.3562, -0.0201,  0.3309],
        [ 0.3449,  0.4378,  0.2108,  ..., -0.3716, -0.0447,  0.3148],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4170],
        [ 0.3127,  0.2798, -0.0623,  ...,  0.1225,  0.3477,  0.1886],
        [ 0.3132,  0.2820, -0.0592,  ...,  0.1168,  0.3479,  0.1965]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        ...,
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2922, 96])
Tensor Product Weights tensor([[-0.0179,  0.0250,  0.0126,  ...,  0.0383, -0.0584, -0.0825],
        [-0.0548, -0.1256,  0.1102,  ...,  0.0049, -0.3159, -0.3058],
        [-0.0545, -0.1142,  0.1094,  ..., -0.0015, -0.3228, -0.3028],
        ...,
        [ 0.0004,  0.2507,  0.0008,  ..., -0.1861, -0.3251,  0.1115],
        [-0.0418, -0.1434,  0.0623,  ...,  0.0930, -0.0998, -0.1682],
        [-0.0432, -0.1458,  0.0639,  ...,  0.0918, -0.1029, -0.1719]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0439,  0.0359,  0.1038,  ..., -0.0948, -0.0168,  0.1053],
        [ 0.1264, -0.0659,  0.0105,  ..., -0.1880,  0.0324,  0.2987],
        [ 0.0701, -0.0003,  0.0758,  ..., -0.1330,  0.0832,  0.1296],
        ...,
        [ 0.1137, -0.2101, -0.0773,  ...,  0.0912,  0.0368, -0.0132],
        [ 0.1068, -0.2683, -0.0246,  ..., -0.0238, -0.0068, -0.1000],
        [ 0.1627, -0.2321, -0.0565,  ...,  0.0184, -0.1065,  0.1027]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0122, -1.1214, -0.8635,  ..., -0.2855, -0.3680,  0.1772],
        [ 0.0971, -1.0015, -1.1999,  ...,  0.2717,  0.3633,  0.0517],
        [-0.1052, -1.2362, -1.0648,  ..., -0.3897,  0.1098,  0.2702],
        ...,
        [ 0.2256, -0.5673,  0.5291,  ...,  0.2207,  0.3278,  0.1626],
        [-0.0425, -0.4966,  0.4457,  ..., -0.4620, -0.1162,  0.1931],
        [-0.0234, -0.4759,  0.3510,  ...,  0.0741, -0.0995, -0.4534]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2932])
shifts shape: torch.Size([2932, 3])
sender shape: torch.Size([2932])
receiver shape: torch.Size([2932])
Edge attributes shape: torch.Size([2932, 9])
Edge attributes tensor([[ 1.0000,  1.2317,  0.9551,  ..., -0.0982, -0.9314, -0.6110],
        [ 1.0000, -0.1240,  1.7276,  ...,  2.2187,  0.0273, -0.0098],
        [ 1.0000,  1.3117, -0.7602,  ..., -0.4718,  0.8220, -0.6578],
        ...,
        [ 1.0000,  1.2766, -0.0267,  ..., -1.1172,  0.0403, -0.1678],
        [ 1.0000, -0.2020,  1.7144,  ...,  2.1682,  0.3124, -0.0135],
        [ 1.0000,  1.3598,  1.0580,  ...,  0.1334,  0.2432, -1.1730]])
Edge features shape: torch.Size([2932, 8])
Edge features tensor([[ 0.1672, -0.0651, -0.1419,  ..., -0.1574, -0.0337,  0.1705],
        [ 0.3440,  0.4325,  0.1998,  ..., -0.3565, -0.0206,  0.3306],
        [ 0.3449,  0.4374,  0.2100,  ..., -0.3706, -0.0431,  0.3159],
        ...,
        [ 0.3130,  0.2813, -0.0602,  ...,  0.1186,  0.3478,  0.1940],
        [ 0.1138, -0.0906, -0.0417,  ..., -0.0786,  0.1194, -0.0164],
        [ 0.3127,  0.2801, -0.0619,  ...,  0.1219,  0.3477,  0.1895]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        ...,
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2932, 96])
Tensor Product Weights tensor([[-0.0177,  0.0250,  0.0126,  ...,  0.0379, -0.0584, -0.0825],
        [-0.0548, -0.1254,  0.1102,  ...,  0.0048, -0.3161, -0.3057],
        [-0.0545, -0.1150,  0.1095,  ..., -0.0010, -0.3224, -0.3030],
        ...,
        [-0.0428, -0.1450,  0.0634,  ...,  0.0922, -0.1019, -0.1708],
        [ 0.0342,  0.0361, -0.0054,  ..., -0.0502, -0.0288, -0.0219],
        [-0.0419, -0.1437,  0.0625,  ...,  0.0929, -0.1001, -0.1687]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0655,  0.0022,  0.0946,  ..., -0.0937, -0.0123,  0.1239],
        [ 0.0851,  0.0022,  0.0303,  ..., -0.1806,  0.0324,  0.3079],
        [-0.0259,  0.0524,  0.0839,  ..., -0.1310,  0.0864,  0.0575],
        ...,
        [ 0.1199, -0.1672, -0.0430,  ..., -0.0644,  0.0380, -0.0081],
        [ 0.0631, -0.3134, -0.0613,  ...,  0.1351, -0.0449, -0.1637],
        [ 0.1459, -0.2524, -0.0528,  ...,  0.0153, -0.1243,  0.0752]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0124, -1.1236, -0.8681,  ..., -0.2614, -0.3555,  0.2322],
        [ 0.0888, -1.0079, -1.1775,  ...,  0.2767,  0.3465,  0.0502],
        [-0.1255, -1.2478, -1.0427,  ..., -0.4101,  0.1048,  0.2554],
        ...,
        [ 0.2358, -0.5297,  0.5597,  ...,  0.2605,  0.2825,  0.2473],
        [-0.1190, -0.4678,  0.3756,  ...,  0.2010, -0.1855, -0.3996],
        [-0.0451, -0.4642,  0.3623,  ..., -0.3764, -0.1961,  0.1827]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2932])
shifts shape: torch.Size([2932, 3])
sender shape: torch.Size([2932])
receiver shape: torch.Size([2932])
Edge attributes shape: torch.Size([2932, 9])
Edge attributes tensor([[ 1.0000,  1.2395,  0.9558,  ..., -0.0967, -0.9151, -0.6367],
        [ 1.0000, -0.1346,  1.7268,  ...,  2.2158, -0.0151, -0.0117],
        [ 1.0000,  1.3469, -0.7607,  ..., -0.4711,  0.7653, -0.7789],
        ...,
        [ 1.0000,  1.0974,  0.5035,  ..., -0.8346, -0.8072,  0.2180],
        [ 1.0000,  0.4942, -0.3255,  ..., -0.9996,  0.6840,  1.5528],
        [ 1.0000,  0.4237,  1.3203,  ...,  0.8310, -1.7691,  0.5794]])
Edge features shape: torch.Size([2932, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1426,  ..., -0.1571, -0.0356,  0.1708],
        [ 0.3439,  0.4322,  0.1993,  ..., -0.3558, -0.0194,  0.3314],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3698, -0.0419,  0.3168],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5772, -0.4172],
        [ 0.3148,  0.2890, -0.0494,  ...,  0.0979,  0.3475,  0.2212],
        [ 0.3130,  0.2815, -0.0600,  ...,  0.1182,  0.3478,  0.1945]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        ...,
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2932, 96])
Tensor Product Weights tensor([[-0.0182,  0.0250,  0.0126,  ...,  0.0387, -0.0585, -0.0825],
        [-0.0548, -0.1259,  0.1102,  ...,  0.0051, -0.3157, -0.3059],
        [-0.0545, -0.1156,  0.1095,  ..., -0.0007, -0.3220, -0.3032],
        ...,
        [ 0.0005,  0.2508,  0.0008,  ..., -0.1861, -0.3250,  0.1116],
        [-0.0477, -0.1531,  0.0688,  ...,  0.0877, -0.1131, -0.1837],
        [-0.0429, -0.1452,  0.0635,  ...,  0.0921, -0.1021, -0.1710]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0942, -0.0248,  0.0898,  ..., -0.1005, -0.0012,  0.1482],
        [ 0.0557, -0.0125,  0.0255,  ..., -0.1878,  0.0038,  0.2915],
        [-0.0034,  0.0276,  0.0776,  ..., -0.1287,  0.0753,  0.0591],
        ...,
        [ 0.0629, -0.2387, -0.0872,  ...,  0.0230,  0.1069, -0.0109],
        [ 0.0724, -0.2709, -0.0645,  ..., -0.0033, -0.0390, -0.0561],
        [ 0.1006, -0.2096, -0.0339,  ..., -0.0520,  0.0316, -0.1222]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0107, -1.1207, -0.8670,  ..., -0.2607, -0.3576,  0.2113],
        [ 0.0774, -1.0603, -1.1554,  ...,  0.2692,  0.2879, -0.0325],
        [-0.1252, -1.2429, -1.0513,  ..., -0.4082,  0.0881,  0.2241],
        ...,
        [ 0.4055, -0.8051,  0.9436,  ..., -0.0031, -0.2475, -0.3788],
        [-0.0784, -0.5492,  0.3641,  ..., -0.0198,  0.4688, -0.0391],
        [-0.1073, -0.4406,  0.3788,  ..., -0.1875, -0.1592,  0.4026]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2920])
shifts shape: torch.Size([2920, 3])
sender shape: torch.Size([2920])
receiver shape: torch.Size([2920])
Edge attributes shape: torch.Size([2920, 9])
Edge attributes tensor([[ 1.0000,  1.2315,  0.9561,  ..., -0.0961, -0.9314, -0.6113],
        [ 1.0000, -0.1257,  1.7274,  ...,  2.2183,  0.0259, -0.0101],
        [ 1.0000,  1.3140, -0.7594,  ..., -0.4732,  0.8184, -0.6647],
        ...,
        [ 1.0000, -0.0923,  0.0622,  ..., -1.1137,  0.1387,  1.9230],
        [ 1.0000,  0.3676,  0.9699,  ..., -0.0663,  1.7369,  1.1548],
        [ 1.0000, -1.0970,  0.0494,  ..., -1.1153,  0.0855,  0.3814]])
Edge features shape: torch.Size([2920, 8])
Edge features tensor([[ 0.1673, -0.0651, -0.1420,  ..., -0.1573, -0.0339,  0.1705],
        [ 0.3440,  0.4325,  0.1998,  ..., -0.3565, -0.0205,  0.3307],
        [ 0.3448,  0.4374,  0.2100,  ..., -0.3705, -0.0430,  0.3160],
        ...,
        [ 0.3663,  0.5674,  0.5125,  ..., -0.4770, -0.5770, -0.4167],
        [ 0.3126,  0.2798, -0.0623,  ...,  0.1226,  0.3476,  0.1884],
        [ 0.3132,  0.2820, -0.0593,  ...,  0.1168,  0.3479,  0.1964]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        ...,
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2920, 96])
Tensor Product Weights tensor([[-0.0177,  0.0250,  0.0126,  ...,  0.0380, -0.0584, -0.0825],
        [-0.0548, -0.1254,  0.1102,  ...,  0.0048, -0.3160, -0.3058],
        [-0.0545, -0.1150,  0.1095,  ..., -0.0010, -0.3224, -0.3030],
        ...,
        [ 0.0004,  0.2506,  0.0008,  ..., -0.1861, -0.3252,  0.1113],
        [-0.0417, -0.1434,  0.0623,  ...,  0.0931, -0.0997, -0.1682],
        [-0.0432, -0.1457,  0.0639,  ...,  0.0918, -0.1029, -0.1719]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0656,  0.0014,  0.0943,  ..., -0.0940, -0.0117,  0.1247],
        [ 0.0849,  0.0010,  0.0293,  ..., -0.1803,  0.0328,  0.3067],
        [-0.0261,  0.0527,  0.0840,  ..., -0.1315,  0.0866,  0.0578],
        ...,
        [ 0.1174, -0.2146, -0.0769,  ...,  0.0919,  0.0354, -0.0142],
        [ 0.1295, -0.2989, -0.0327,  ..., -0.0214, -0.0048, -0.0953],
        [ 0.1637, -0.2353, -0.0578,  ...,  0.0178, -0.1060,  0.1043]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0123, -1.1233, -0.8681,  ..., -0.2618, -0.3554,  0.2328],
        [ 0.0882, -1.0086, -1.1799,  ...,  0.2757,  0.3482,  0.0492],
        [-0.1254, -1.2477, -1.0423,  ..., -0.4100,  0.1046,  0.2555],
        ...,
        [ 0.2284, -0.5652,  0.5228,  ...,  0.2190,  0.3291,  0.1627],
        [-0.0268, -0.4999,  0.4132,  ..., -0.4536, -0.1140,  0.1862],
        [-0.0210, -0.4772,  0.3483,  ...,  0.0773, -0.1004, -0.4521]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2934])
shifts shape: torch.Size([2934, 3])
sender shape: torch.Size([2934])
receiver shape: torch.Size([2934])
Edge attributes shape: torch.Size([2934, 9])
Edge attributes tensor([[ 1.0000,  1.2363,  0.9592,  ..., -0.0894, -0.9196, -0.6306],
        [ 1.0000, -0.1435,  1.7260,  ...,  2.2129, -0.0290, -0.0132],
        [ 1.0000,  1.3521, -0.7563,  ..., -0.4786,  0.7562, -0.7929],
        ...,
        [ 1.0000,  1.3510,  1.0598,  ...,  0.1377,  0.3107, -1.1449],
        [ 1.0000,  1.3039, -0.0024,  ..., -1.1180,  0.0036, -0.2585],
        [ 1.0000, -0.2148,  1.7109,  ...,  2.1548,  0.3600, -0.0126]])
Edge features shape: torch.Size([2934, 8])
Edge features tensor([[ 0.1675, -0.0649, -0.1423,  ..., -0.1572, -0.0348,  0.1707],
        [ 0.3439,  0.4323,  0.1995,  ..., -0.3561, -0.0199,  0.3311],
        [ 0.3449,  0.4374,  0.2100,  ..., -0.3706, -0.0431,  0.3159],
        ...,
        [ 0.3127,  0.2800, -0.0619,  ...,  0.1219,  0.3477,  0.1895],
        [ 0.3130,  0.2812, -0.0604,  ...,  0.1189,  0.3478,  0.1935],
        [ 0.1137, -0.0906, -0.0414,  ..., -0.0781,  0.1194, -0.0171]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        ...,
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2934, 96])
Tensor Product Weights tensor([[-0.0180,  0.0250,  0.0126,  ...,  0.0384, -0.0585, -0.0825],
        [-0.0548, -0.1257,  0.1102,  ...,  0.0049, -0.3159, -0.3058],
        [-0.0545, -0.1150,  0.1095,  ..., -0.0010, -0.3224, -0.3030],
        ...,
        [-0.0419, -0.1437,  0.0625,  ...,  0.0929, -0.1001, -0.1686],
        [-0.0427, -0.1449,  0.0633,  ...,  0.0923, -0.1017, -0.1706],
        [ 0.0343,  0.0360, -0.0054,  ..., -0.0503, -0.0287, -0.0216]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0566,  0.0109,  0.0982,  ..., -0.0980, -0.0022,  0.1455],
        [ 0.0484,  0.0488,  0.0355,  ..., -0.1637,  0.0409,  0.3272],
        [-0.0172,  0.0398,  0.0809,  ..., -0.1315,  0.0879,  0.0700],
        ...,
        [ 0.1230, -0.1880, -0.0470,  ..., -0.0623,  0.0348, -0.0040],
        [ 0.0658, -0.3056, -0.0608,  ...,  0.1388, -0.0489, -0.1690],
        [ 0.1466, -0.2539, -0.0539,  ...,  0.0196, -0.1248,  0.0743]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0126, -1.1234, -0.8601,  ..., -0.2715, -0.3525,  0.2336],
        [ 0.0855, -1.0326, -1.2183,  ...,  0.3074,  0.3699,  0.0674],
        [-0.1251, -1.2402, -1.0441,  ..., -0.4109,  0.0964,  0.2472],
        ...,
        [ 0.2402, -0.5285,  0.5464,  ...,  0.2545,  0.2820,  0.2578],
        [-0.1239, -0.4667,  0.3827,  ...,  0.2136, -0.1800, -0.3990],
        [-0.0452, -0.4644,  0.3597,  ..., -0.3784, -0.1995,  0.1703]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2934])
shifts shape: torch.Size([2934, 3])
sender shape: torch.Size([2934])
receiver shape: torch.Size([2934])
Edge attributes shape: torch.Size([2934, 9])
Edge attributes tensor([[ 1.0000,  1.2405,  0.9545,  ..., -0.0995, -0.9139, -0.6383],
        [ 1.0000, -0.1325,  1.7270,  ...,  2.2164, -0.0142, -0.0113],
        [ 1.0000,  1.3453, -0.7621,  ..., -0.4687,  0.7681, -0.7748],
        ...,
        [ 1.0000,  1.0972,  0.5024,  ..., -0.8358, -0.8059,  0.2195],
        [ 1.0000,  0.4934, -0.3262,  ..., -0.9991,  0.6856,  1.5536],
        [ 1.0000,  0.4242,  1.3197,  ...,  0.8291, -1.7693,  0.5800]])
Edge features shape: torch.Size([2934, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1425,  ..., -0.1571, -0.0352,  0.1708],
        [ 0.3439,  0.4323,  0.1994,  ..., -0.3559, -0.0196,  0.3313],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3699, -0.0419,  0.3167],
        ...,
        [ 0.3663,  0.5674,  0.5125,  ..., -0.4770, -0.5771, -0.4169],
        [ 0.3148,  0.2890, -0.0495,  ...,  0.0980,  0.3475,  0.2209],
        [ 0.3130,  0.2814, -0.0601,  ...,  0.1183,  0.3478,  0.1944]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        ...,
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2934, 96])
Tensor Product Weights tensor([[-0.0181,  0.0250,  0.0126,  ...,  0.0386, -0.0585, -0.0825],
        [-0.0548, -0.1258,  0.1102,  ...,  0.0050, -0.3158, -0.3059],
        [-0.0545, -0.1156,  0.1095,  ..., -0.0007, -0.3221, -0.3032],
        ...,
        [ 0.0004,  0.2507,  0.0008,  ..., -0.1861, -0.3251,  0.1114],
        [-0.0476, -0.1531,  0.0687,  ...,  0.0878, -0.1130, -0.1836],
        [-0.0428, -0.1451,  0.0635,  ...,  0.0921, -0.1021, -0.1710]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0942, -0.0247,  0.0899,  ..., -0.1006, -0.0017,  0.1483],
        [ 0.0560, -0.0112,  0.0260,  ..., -0.1877,  0.0034,  0.2922],
        [-0.0035,  0.0273,  0.0775,  ..., -0.1284,  0.0749,  0.0592],
        ...,
        [ 0.0630, -0.2385, -0.0871,  ...,  0.0230,  0.1072, -0.0107],
        [ 0.0722, -0.2708, -0.0646,  ..., -0.0032, -0.0390, -0.0561],
        [ 0.1006, -0.2096, -0.0339,  ..., -0.0520,  0.0316, -0.1223]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0107, -1.1207, -0.8670,  ..., -0.2611, -0.3578,  0.2110],
        [ 0.0768, -1.0605, -1.1526,  ...,  0.2677,  0.2859, -0.0329],
        [-0.1254, -1.2429, -1.0515,  ..., -0.4086,  0.0882,  0.2241],
        ...,
        [ 0.4047, -0.8047,  0.9436,  ..., -0.0034, -0.2479, -0.3788],
        [-0.0784, -0.5493,  0.3644,  ..., -0.0196,  0.4689, -0.0391],
        [-0.1073, -0.4404,  0.3788,  ..., -0.1872, -0.1589,  0.4025]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2944])
shifts shape: torch.Size([2944, 3])
sender shape: torch.Size([2944])
receiver shape: torch.Size([2944])
Edge attributes shape: torch.Size([2944, 9])
Edge attributes tensor([[ 1.0000,  1.2359,  0.9593,  ..., -0.0892, -0.9204, -0.6294],
        [ 1.0000, -0.1441,  1.7260,  ...,  2.2126, -0.0305, -0.0133],
        [ 1.0000,  1.3529, -0.7558,  ..., -0.4793,  0.7548, -0.7952],
        ...,
        [ 1.0000,  1.3476,  1.0648,  ...,  0.1497,  0.3078, -1.1399],
        [ 1.0000,  1.3005,  0.0034,  ..., -1.1180, -0.0050, -0.2469],
        [ 1.0000, -0.2199,  1.7102,  ...,  2.1519,  0.3622, -0.0138]])
Edge features shape: torch.Size([2944, 8])
Edge features tensor([[ 0.1674, -0.0650, -0.1422,  ..., -0.1572, -0.0346,  0.1707],
        [ 0.3439,  0.4323,  0.1995,  ..., -0.3561, -0.0200,  0.3310],
        [ 0.3449,  0.4374,  0.2100,  ..., -0.3706, -0.0431,  0.3159],
        ...,
        [ 0.3127,  0.2801, -0.0619,  ...,  0.1218,  0.3477,  0.1897],
        [ 0.3130,  0.2812, -0.0603,  ...,  0.1188,  0.3478,  0.1937],
        [ 0.1134, -0.0906, -0.0410,  ..., -0.0774,  0.1194, -0.0180]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        ...,
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2944, 96])
Tensor Product Weights tensor([[-0.0179,  0.0250,  0.0126,  ...,  0.0383, -0.0584, -0.0825],
        [-0.0548, -0.1256,  0.1102,  ...,  0.0049, -0.3159, -0.3058],
        [-0.0545, -0.1150,  0.1095,  ..., -0.0010, -0.3224, -0.3030],
        ...,
        [-0.0420, -0.1437,  0.0625,  ...,  0.0929, -0.1002, -0.1687],
        [-0.0427, -0.1449,  0.0634,  ...,  0.0922, -0.1018, -0.1707],
        [ 0.0344,  0.0360, -0.0054,  ..., -0.0505, -0.0285, -0.0212]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0559,  0.0122,  0.0986,  ..., -0.0981, -0.0019,  0.1460],
        [ 0.0501,  0.0484,  0.0357,  ..., -0.1635,  0.0416,  0.3291],
        [-0.0166,  0.0389,  0.0807,  ..., -0.1312,  0.0877,  0.0698],
        ...,
        [ 0.1226, -0.1882, -0.0465,  ..., -0.0615,  0.0347, -0.0043],
        [ 0.0640, -0.3044, -0.0601,  ...,  0.1373, -0.0467, -0.1686],
        [ 0.1464, -0.2544, -0.0537,  ...,  0.0204, -0.1253,  0.0741]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0127, -1.1236, -0.8596,  ..., -0.2715, -0.3525,  0.2332],
        [ 0.0873, -1.0336, -1.2203,  ...,  0.3117,  0.3703,  0.0701],
        [-0.1252, -1.2398, -1.0443,  ..., -0.4105,  0.0957,  0.2466],
        ...,
        [ 0.2400, -0.5280,  0.5467,  ...,  0.2547,  0.2836,  0.2573],
        [-0.1245, -0.4664,  0.3830,  ...,  0.2127, -0.1785, -0.4003],
        [-0.0446, -0.4649,  0.3595,  ..., -0.3768, -0.2006,  0.1716]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2940])
shifts shape: torch.Size([2940, 3])
sender shape: torch.Size([2940])
receiver shape: torch.Size([2940])
Edge attributes shape: torch.Size([2940, 9])
Edge attributes tensor([[ 1.0000,  1.2334,  0.9540,  ..., -0.1006, -0.9286, -0.6150],
        [ 1.0000, -0.1243,  1.7276,  ...,  2.2187,  0.0203, -0.0099],
        [ 1.0000,  1.3140, -0.7615,  ..., -0.4697,  0.8187, -0.6668],
        ...,
        [ 1.0000,  1.1275,  1.0037,  ...,  0.0082, -1.1006, -0.3548],
        [ 1.0000,  1.3552,  1.0603,  ...,  0.1388,  0.2715, -1.1601],
        [ 1.0000,  1.2891, -0.0175,  ..., -1.1177,  0.0262, -0.2089]])
Edge features shape: torch.Size([2940, 8])
Edge features tensor([[ 0.1672, -0.0651, -0.1419,  ..., -0.1574, -0.0337,  0.1705],
        [ 0.3440,  0.4325,  0.1999,  ..., -0.3566, -0.0207,  0.3305],
        [ 0.3449,  0.4375,  0.2101,  ..., -0.3707, -0.0433,  0.3158],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4170],
        [ 0.3127,  0.2801, -0.0619,  ...,  0.1218,  0.3477,  0.1896],
        [ 0.3130,  0.2814, -0.0600,  ...,  0.1183,  0.3478,  0.1944]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        ...,
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2940, 96])
Tensor Product Weights tensor([[-0.0177,  0.0250,  0.0126,  ...,  0.0379, -0.0584, -0.0825],
        [-0.0548, -0.1253,  0.1102,  ...,  0.0047, -0.3161, -0.3057],
        [-0.0545, -0.1149,  0.1095,  ..., -0.0011, -0.3224, -0.3030],
        ...,
        [ 0.0004,  0.2507,  0.0008,  ..., -0.1861, -0.3251,  0.1115],
        [-0.0419, -0.1437,  0.0625,  ...,  0.0929, -0.1002, -0.1687],
        [-0.0428, -0.1451,  0.0635,  ...,  0.0921, -0.1021, -0.1710]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0653,  0.0026,  0.0947,  ..., -0.0938, -0.0114,  0.1255],
        [ 0.0852,  0.0020,  0.0302,  ..., -0.1809,  0.0331,  0.3074],
        [-0.0263,  0.0523,  0.0840,  ..., -0.1309,  0.0864,  0.0591],
        ...,
        [ 0.1221, -0.1881, -0.0464,  ..., -0.0608,  0.0354, -0.0059],
        [ 0.0621, -0.3097, -0.0602,  ...,  0.1365, -0.0463, -0.1662],
        [ 0.1455, -0.2540, -0.0534,  ...,  0.0171, -0.1242,  0.0754]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0125, -1.1236, -0.8680,  ..., -0.2622, -0.3552,  0.2323],
        [ 0.0880, -1.0076, -1.1764,  ...,  0.2739,  0.3459,  0.0498],
        [-0.1257, -1.2472, -1.0420,  ..., -0.4099,  0.1046,  0.2547],
        ...,
        [ 0.2398, -0.5280,  0.5469,  ...,  0.2585,  0.2849,  0.2513],
        [-0.1225, -0.4671,  0.3806,  ...,  0.2056, -0.1829, -0.3988],
        [-0.0465, -0.4635,  0.3629,  ..., -0.3775, -0.1971,  0.1768]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2928])
shifts shape: torch.Size([2928, 3])
sender shape: torch.Size([2928])
receiver shape: torch.Size([2928])
Edge attributes shape: torch.Size([2928, 9])
Edge attributes tensor([[ 1.0000e+00,  1.2326e+00,  9.5548e-01,  ..., -9.7328e-02,
         -9.2943e-01, -6.1425e-01],
        [ 1.0000e+00, -1.2589e-01,  1.7274e+00,  ...,  2.2182e+00,
          2.2311e-02, -1.0166e-02],
        [ 1.0000e+00,  1.3156e+00, -7.6003e-01,  ..., -4.7220e-01,
          8.1597e-01, -6.7081e-01],
        ...,
        [ 1.0000e+00,  1.1270e+00,  1.0005e+00,  ...,  1.1645e-03,
         -1.1027e+00, -3.4936e-01],
        [ 1.0000e+00,  1.3561e+00,  1.0599e+00,  ...,  1.3803e-01,
          2.6499e-01, -1.1629e+00],
        [ 1.0000e+00,  1.2877e+00, -2.1728e-02,  ..., -1.1175e+00,
          3.2489e-02, -2.0438e-01]])
Edge features shape: torch.Size([2928, 8])
Edge features tensor([[ 0.1673, -0.0651, -0.1420,  ..., -0.1573, -0.0340,  0.1706],
        [ 0.3440,  0.4325,  0.1998,  ..., -0.3565, -0.0205,  0.3307],
        [ 0.3449,  0.4374,  0.2100,  ..., -0.3706, -0.0431,  0.3159],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4170],
        [ 0.3127,  0.2801, -0.0619,  ...,  0.1218,  0.3477,  0.1896],
        [ 0.3130,  0.2814, -0.0601,  ...,  0.1183,  0.3478,  0.1944]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        ...,
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2928, 96])
Tensor Product Weights tensor([[-0.0177,  0.0250,  0.0126,  ...,  0.0380, -0.0584, -0.0825],
        [-0.0548, -0.1254,  0.1102,  ...,  0.0048, -0.3160, -0.3058],
        [-0.0545, -0.1150,  0.1095,  ..., -0.0010, -0.3224, -0.3030],
        ...,
        [ 0.0004,  0.2507,  0.0008,  ..., -0.1861, -0.3251,  0.1115],
        [-0.0419, -0.1437,  0.0625,  ...,  0.0929, -0.1002, -0.1687],
        [-0.0428, -0.1451,  0.0635,  ...,  0.0921, -0.1021, -0.1710]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0658,  0.0014,  0.0943,  ..., -0.0940, -0.0113,  0.1256],
        [ 0.0849,  0.0006,  0.0290,  ..., -0.1803,  0.0333,  0.3063],
        [-0.0264,  0.0529,  0.0841,  ..., -0.1315,  0.0865,  0.0590],
        ...,
        [ 0.1221, -0.1881, -0.0464,  ..., -0.0605,  0.0356, -0.0061],
        [ 0.0624, -0.3086, -0.0599,  ...,  0.1366, -0.0475, -0.1665],
        [ 0.1458, -0.2536, -0.0533,  ...,  0.0167, -0.1243,  0.0755]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0123, -1.1234, -0.8683,  ..., -0.2621, -0.3552,  0.2329],
        [ 0.0877, -1.0084, -1.1796,  ...,  0.2740,  0.3480,  0.0483],
        [-0.1254, -1.2475, -1.0420,  ..., -0.4099,  0.1044,  0.2549],
        ...,
        [ 0.2399, -0.5279,  0.5469,  ...,  0.2590,  0.2855,  0.2502],
        [-0.1232, -0.4667,  0.3816,  ...,  0.2051, -0.1841, -0.3987],
        [-0.0463, -0.4636,  0.3625,  ..., -0.3772, -0.1961,  0.1779]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2954])
shifts shape: torch.Size([2954, 3])
sender shape: torch.Size([2954])
receiver shape: torch.Size([2954])
Edge attributes shape: torch.Size([2954, 9])
Edge attributes tensor([[ 1.0000,  1.3281,  0.9393,  ..., -0.1316, -0.7214, -0.9101],
        [ 1.0000, -0.1218,  1.7271,  ...,  2.2168, -0.1089, -0.0080],
        [ 1.0000,  1.4580, -0.7756,  ..., -0.4454,  0.5228, -1.1962],
        ...,
        [ 1.0000,  1.3191,  0.0732,  ..., -1.1120, -0.1059, -0.3133],
        [ 1.0000, -0.2145,  1.6958,  ...,  2.0973,  0.6121,  0.0208],
        [ 1.0000,  1.3485,  1.0399,  ...,  0.0911,  0.4248, -1.1091]])
Edge features shape: torch.Size([2954, 8])
Edge features tensor([[ 0.1673, -0.0651, -0.1420,  ..., -0.1573, -0.0340,  0.1706],
        [ 0.3438,  0.4319,  0.1986,  ..., -0.3548, -0.0179,  0.3323],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3708, -0.0435,  0.3156],
        ...,
        [ 0.3130,  0.2812, -0.0603,  ...,  0.1188,  0.3478,  0.1937],
        [ 0.1141, -0.0906, -0.0422,  ..., -0.0794,  0.1193, -0.0154],
        [ 0.3127,  0.2799, -0.0621,  ...,  0.1222,  0.3477,  0.1890]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        ...,
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2954, 96])
Tensor Product Weights tensor([[-0.0177,  0.0250,  0.0126,  ...,  0.0380, -0.0584, -0.0825],
        [-0.0548, -0.1266,  0.1102,  ...,  0.0054, -0.3153, -0.3060],
        [-0.0545, -0.1148,  0.1095,  ..., -0.0012, -0.3225, -0.3030],
        ...,
        [-0.0427, -0.1449,  0.0634,  ...,  0.0922, -0.1018, -0.1707],
        [ 0.0341,  0.0362, -0.0053,  ..., -0.0500, -0.0289, -0.0224],
        [-0.0418, -0.1435,  0.0624,  ...,  0.0930, -0.0999, -0.1684]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0513,  0.0717,  0.1129,  ..., -0.0721, -0.0130,  0.2554],
        [ 0.0639, -0.0383,  0.0102,  ..., -0.1955,  0.0408,  0.3021],
        [ 0.0394,  0.0574,  0.0887,  ..., -0.1217,  0.0848,  0.1368],
        ...,
        [ 0.1206, -0.1687, -0.0449,  ..., -0.0719,  0.0288, -0.0018],
        [ 0.0560, -0.3404, -0.0732,  ...,  0.1471, -0.0135, -0.1609],
        [ 0.1398, -0.2391, -0.0458,  ...,  0.0356, -0.1301,  0.0634]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0159, -1.1313, -0.8703,  ..., -0.2739, -0.3527,  0.2008],
        [ 0.0841, -1.0502, -1.2033,  ...,  0.2022,  0.2899, -0.0823],
        [-0.1060, -1.2605, -1.0616,  ..., -0.4416,  0.1208,  0.1305],
        ...,
        [ 0.2370, -0.5326,  0.5585,  ...,  0.2490,  0.2577,  0.2799],
        [-0.1291, -0.4695,  0.3789,  ...,  0.2316, -0.1815, -0.4139],
        [-0.0468, -0.4659,  0.3577,  ..., -0.3797, -0.2082,  0.1579]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2950])
shifts shape: torch.Size([2950, 3])
sender shape: torch.Size([2950])
receiver shape: torch.Size([2950])
Edge attributes shape: torch.Size([2950, 9])
Edge attributes tensor([[ 1.0000,  1.3198,  0.9536,  ..., -0.1013, -0.7269, -0.8994],
        [ 1.0000, -0.1162,  1.7281,  ...,  2.2208,  0.0259, -0.0086],
        [ 1.0000,  1.4436, -0.7639,  ..., -0.4656,  0.5687, -1.1305],
        ...,
        [ 1.0000, -0.1560, -0.0323,  ..., -1.1169, -0.0718,  1.9044],
        [ 1.0000,  0.3206,  0.8897,  ..., -0.2330,  1.6667,  1.2928],
        [ 1.0000, -1.1455, -0.0169,  ..., -1.1177, -0.0283,  0.2423]])
Edge features shape: torch.Size([2950, 8])
Edge features tensor([[ 0.1677, -0.0648, -0.1427,  ..., -0.1571, -0.0357,  0.1709],
        [ 0.3438,  0.4318,  0.1985,  ..., -0.3547, -0.0177,  0.3324],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3708, -0.0435,  0.3156],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4170],
        [ 0.3127,  0.2798, -0.0623,  ...,  0.1226,  0.3476,  0.1885],
        [ 0.3132,  0.2819, -0.0593,  ...,  0.1169,  0.3479,  0.1963]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        [-0.7808,  0.9058, -0.1266,  ..., -0.0825, -0.3164,  0.6710],
        ...,
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019],
        [-0.3817, -0.2624, -0.1115,  ..., -0.2845, -0.2888,  0.1019]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2950, 96])
Tensor Product Weights tensor([[-0.0182,  0.0250,  0.0126,  ...,  0.0388, -0.0585, -0.0825],
        [-0.0548, -0.1267,  0.1102,  ...,  0.0055, -0.3152, -0.3061],
        [-0.0545, -0.1148,  0.1095,  ..., -0.0012, -0.3225, -0.3030],
        ...,
        [ 0.0004,  0.2507,  0.0008,  ..., -0.1861, -0.3251,  0.1115],
        [-0.0417, -0.1434,  0.0623,  ...,  0.0931, -0.0997, -0.1682],
        [-0.0432, -0.1457,  0.0639,  ...,  0.0918, -0.1028, -0.1719]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[ 0.0892,  0.0249,  0.0980,  ..., -0.0803, -0.0202,  0.2100],
        [ 0.0400,  0.0053,  0.0236,  ..., -0.1959,  0.0276,  0.3035],
        [-0.0344,  0.0988,  0.0914,  ..., -0.1322,  0.0641,  0.1813],
        ...,
        [ 0.1215, -0.2151, -0.0759,  ...,  0.0875,  0.0470, -0.0179],
        [ 0.1313, -0.3053, -0.0344,  ..., -0.0185, -0.0103, -0.0912],
        [ 0.1636, -0.2365, -0.0585,  ...,  0.0276, -0.1100,  0.1001]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[-0.0075, -1.1230, -0.8830,  ..., -0.3073, -0.3377,  0.1187],
        [ 0.0803, -1.0552, -1.1889,  ...,  0.2169,  0.2835, -0.0767],
        [-0.1184, -1.2770, -1.0494,  ..., -0.4252,  0.1304,  0.1866],
        ...,
        [ 0.2312, -0.5622,  0.5236,  ...,  0.2160,  0.3162,  0.1904],
        [-0.0309, -0.4985,  0.4021,  ..., -0.4582, -0.1220,  0.1651],
        [-0.0210, -0.4775,  0.3490,  ...,  0.0924, -0.0762, -0.4526]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
process_conformer_ensemble input shape: torch.Size([16, 110, 32])
Num conformers: 16, Num atoms: 110, Total dim: 32
Scalar dim: 8, Vector dim: 8
mean_pooling:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[ 2.8763,  0.7411,  0.8923,  ..., -0.9359, -0.1133,  0.1839],
         [ 2.1119,  0.6586,  0.8198,  ..., -0.8392, -0.0032, -0.0230],
         [ 3.2213,  0.9597,  0.8590,  ..., -0.9588,  0.0266,  0.2296],
         ...,
         [ 0.3452,  0.1681, -0.0364,  ...,  0.4863,  0.2427, -0.0564],
         [ 0.0284,  0.0567,  0.0572,  ...,  0.3069,  0.2066, -0.0296],
         [ 0.0661,  0.0738,  0.0577,  ...,  0.2314,  0.1577, -0.0120]],

        [[ 2.8763,  0.7411,  0.8923,  ..., -0.9359, -0.1133,  0.1839],
         [ 2.1119,  0.6586,  0.8198,  ..., -0.8392, -0.0032, -0.0230],
         [ 3.2213,  0.9597,  0.8590,  ..., -0.9588,  0.0266,  0.2296],
         ...,
         [ 0.3452,  0.1681, -0.0364,  ...,  0.4863,  0.2427, -0.0564],
         [ 0.0284,  0.0567,  0.0572,  ...,  0.3069,  0.2066, -0.0296],
         [ 0.0661,  0.0738,  0.0577,  ...,  0.2314,  0.1577, -0.0120]],

        [[ 2.8763,  0.7411,  0.8923,  ..., -0.9359, -0.1133,  0.1839],
         [ 2.1119,  0.6586,  0.8198,  ..., -0.8392, -0.0032, -0.0230],
         [ 3.2213,  0.9597,  0.8590,  ..., -0.9588,  0.0266,  0.2296],
         ...,
         [ 0.3452,  0.1681, -0.0364,  ...,  0.4863,  0.2427, -0.0564],
         [ 0.0284,  0.0567,  0.0572,  ...,  0.3069,  0.2066, -0.0296],
         [ 0.0661,  0.0738,  0.0577,  ...,  0.2314,  0.1577, -0.0120]],

        ...,

        [[ 2.8763,  0.7411,  0.8923,  ..., -0.9359, -0.1133,  0.1839],
         [ 2.1119,  0.6586,  0.8198,  ..., -0.8392, -0.0032, -0.0230],
         [ 3.2213,  0.9597,  0.8590,  ..., -0.9588,  0.0266,  0.2296],
         ...,
         [ 0.3452,  0.1681, -0.0364,  ...,  0.4863,  0.2427, -0.0564],
         [ 0.0284,  0.0567,  0.0572,  ...,  0.3069,  0.2066, -0.0296],
         [ 0.0661,  0.0738,  0.0577,  ...,  0.2314,  0.1577, -0.0120]],

        [[ 2.8763,  0.7411,  0.8923,  ..., -0.9359, -0.1133,  0.1839],
         [ 2.1119,  0.6586,  0.8198,  ..., -0.8392, -0.0032, -0.0230],
         [ 3.2213,  0.9597,  0.8590,  ..., -0.9588,  0.0266,  0.2296],
         ...,
         [ 0.3452,  0.1681, -0.0364,  ...,  0.4863,  0.2427, -0.0564],
         [ 0.0284,  0.0567,  0.0572,  ...,  0.3069,  0.2066, -0.0296],
         [ 0.0661,  0.0738,  0.0577,  ...,  0.2314,  0.1577, -0.0120]],

        [[ 2.8763,  0.7411,  0.8923,  ..., -0.9359, -0.1133,  0.1839],
         [ 2.1119,  0.6586,  0.8198,  ..., -0.8392, -0.0032, -0.0230],
         [ 3.2213,  0.9597,  0.8590,  ..., -0.9588,  0.0266,  0.2296],
         ...,
         [ 0.3452,  0.1681, -0.0364,  ...,  0.4863,  0.2427, -0.0564],
         [ 0.0284,  0.0567,  0.0572,  ...,  0.3069,  0.2066, -0.0296],
         [ 0.0661,  0.0738,  0.0577,  ...,  0.2314,  0.1577, -0.0120]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[ 2.7353e-01,  1.5586e-01, -1.5461e-01],
          [ 1.9263e-01,  3.5945e-02, -5.4178e-02],
          [ 1.8971e-01,  1.4643e-01, -1.5734e-01],
          ...,
          [ 2.7505e-01,  1.5846e-01, -2.0416e-01],
          [-3.0867e-01, -3.2482e-01,  1.6616e-01],
          [-1.0831e-01,  2.2206e-01,  3.6276e-02]],

         [[-4.2746e-01, -2.8777e-01,  1.5846e-01],
          [-5.7393e-01, -2.3803e-01,  3.7259e-01],
          [ 6.1624e-02, -1.0706e-01, -1.8865e-01],
          ...,
          [ 9.0012e-02, -1.3704e-01, -2.2715e-01],
          [ 6.9617e-01,  5.1252e-01, -3.1937e-01],
          [-1.1193e-01, -1.0224e-01, -5.8794e-02]],

         [[ 3.4575e-01, -7.6491e-02, -9.5189e-02],
          [ 2.0991e-01, -1.0834e-01,  2.2222e-02],
          [ 2.3842e-01,  1.3445e-01, -1.9921e-01],
          ...,
          [ 3.4319e-01,  1.6508e-01, -2.7999e-01],
          [-4.0736e-01,  1.9637e-01,  1.5837e-01],
          [-8.5254e-02, -4.1698e-02,  4.3044e-02]],

         ...,

         [[ 1.3367e-01,  1.3974e-01, -3.7934e-02],
          [ 3.7948e-02,  3.3054e-02, -1.0679e-01],
          [ 7.9103e-02,  7.3014e-02,  2.2054e-02],
          ...,
          [ 4.2543e-02,  4.3813e-02, -4.1590e-02],
          [ 2.3859e-02,  6.2778e-03,  1.0754e-01],
          [ 1.0787e-01,  8.8382e-02,  1.1118e-01]],

         [[-3.1859e-04, -2.2102e-02, -4.7923e-02],
          [ 2.3351e-02,  2.1025e-02, -9.9954e-02],
          [-3.1058e-03, -8.3004e-03, -3.8810e-02],
          ...,
          [-3.6726e-04,  2.2531e-03, -1.4021e-03],
          [-7.8009e-03, -1.2432e-02, -4.8516e-02],
          [-1.3424e-02, -2.0484e-02, -1.0400e-01]],

         [[-6.7022e-02, -4.6551e-02,  3.2398e-02],
          [ 3.3303e-02,  3.6077e-02, -2.4456e-02],
          [-5.6656e-02, -4.3099e-02,  1.6185e-02],
          ...,
          [ 6.3359e-03,  1.0048e-02,  3.7230e-03],
          [-8.3428e-02, -7.4395e-02,  1.9557e-02],
          [-1.2240e-01, -1.0088e-01,  1.7716e-02]]],


        [[[ 2.7353e-01,  1.5586e-01, -1.5461e-01],
          [ 1.9263e-01,  3.5945e-02, -5.4178e-02],
          [ 1.8971e-01,  1.4643e-01, -1.5734e-01],
          ...,
          [ 2.7505e-01,  1.5846e-01, -2.0416e-01],
          [-3.0867e-01, -3.2482e-01,  1.6616e-01],
          [-1.0831e-01,  2.2206e-01,  3.6276e-02]],

         [[-4.2746e-01, -2.8777e-01,  1.5846e-01],
          [-5.7393e-01, -2.3803e-01,  3.7259e-01],
          [ 6.1624e-02, -1.0706e-01, -1.8865e-01],
          ...,
          [ 9.0012e-02, -1.3704e-01, -2.2715e-01],
          [ 6.9617e-01,  5.1252e-01, -3.1937e-01],
          [-1.1193e-01, -1.0224e-01, -5.8794e-02]],

         [[ 3.4575e-01, -7.6491e-02, -9.5189e-02],
          [ 2.0991e-01, -1.0834e-01,  2.2222e-02],
          [ 2.3842e-01,  1.3445e-01, -1.9921e-01],
          ...,
          [ 3.4319e-01,  1.6508e-01, -2.7999e-01],
          [-4.0736e-01,  1.9637e-01,  1.5837e-01],
          [-8.5254e-02, -4.1698e-02,  4.3044e-02]],

         ...,

         [[ 1.3367e-01,  1.3974e-01, -3.7934e-02],
          [ 3.7948e-02,  3.3054e-02, -1.0679e-01],
          [ 7.9103e-02,  7.3014e-02,  2.2054e-02],
          ...,
          [ 4.2543e-02,  4.3813e-02, -4.1590e-02],
          [ 2.3859e-02,  6.2778e-03,  1.0754e-01],
          [ 1.0787e-01,  8.8382e-02,  1.1118e-01]],

         [[-3.1859e-04, -2.2102e-02, -4.7923e-02],
          [ 2.3351e-02,  2.1025e-02, -9.9954e-02],
          [-3.1058e-03, -8.3004e-03, -3.8810e-02],
          ...,
          [-3.6726e-04,  2.2531e-03, -1.4021e-03],
          [-7.8009e-03, -1.2432e-02, -4.8516e-02],
          [-1.3424e-02, -2.0484e-02, -1.0400e-01]],

         [[-6.7022e-02, -4.6551e-02,  3.2398e-02],
          [ 3.3303e-02,  3.6077e-02, -2.4456e-02],
          [-5.6656e-02, -4.3099e-02,  1.6185e-02],
          ...,
          [ 6.3359e-03,  1.0048e-02,  3.7230e-03],
          [-8.3428e-02, -7.4395e-02,  1.9557e-02],
          [-1.2240e-01, -1.0088e-01,  1.7716e-02]]],


        [[[ 2.7353e-01,  1.5586e-01, -1.5461e-01],
          [ 1.9263e-01,  3.5945e-02, -5.4178e-02],
          [ 1.8971e-01,  1.4643e-01, -1.5734e-01],
          ...,
          [ 2.7505e-01,  1.5846e-01, -2.0416e-01],
          [-3.0867e-01, -3.2482e-01,  1.6616e-01],
          [-1.0831e-01,  2.2206e-01,  3.6276e-02]],

         [[-4.2746e-01, -2.8777e-01,  1.5846e-01],
          [-5.7393e-01, -2.3803e-01,  3.7259e-01],
          [ 6.1624e-02, -1.0706e-01, -1.8865e-01],
          ...,
          [ 9.0012e-02, -1.3704e-01, -2.2715e-01],
          [ 6.9617e-01,  5.1252e-01, -3.1937e-01],
          [-1.1193e-01, -1.0224e-01, -5.8794e-02]],

         [[ 3.4575e-01, -7.6491e-02, -9.5189e-02],
          [ 2.0991e-01, -1.0834e-01,  2.2222e-02],
          [ 2.3842e-01,  1.3445e-01, -1.9921e-01],
          ...,
          [ 3.4319e-01,  1.6508e-01, -2.7999e-01],
          [-4.0736e-01,  1.9637e-01,  1.5837e-01],
          [-8.5254e-02, -4.1698e-02,  4.3044e-02]],

         ...,

         [[ 1.3367e-01,  1.3974e-01, -3.7934e-02],
          [ 3.7948e-02,  3.3054e-02, -1.0679e-01],
          [ 7.9103e-02,  7.3014e-02,  2.2054e-02],
          ...,
          [ 4.2543e-02,  4.3813e-02, -4.1590e-02],
          [ 2.3859e-02,  6.2778e-03,  1.0754e-01],
          [ 1.0787e-01,  8.8382e-02,  1.1118e-01]],

         [[-3.1859e-04, -2.2102e-02, -4.7923e-02],
          [ 2.3351e-02,  2.1025e-02, -9.9954e-02],
          [-3.1058e-03, -8.3004e-03, -3.8810e-02],
          ...,
          [-3.6726e-04,  2.2531e-03, -1.4021e-03],
          [-7.8009e-03, -1.2432e-02, -4.8516e-02],
          [-1.3424e-02, -2.0484e-02, -1.0400e-01]],

         [[-6.7022e-02, -4.6551e-02,  3.2398e-02],
          [ 3.3303e-02,  3.6077e-02, -2.4456e-02],
          [-5.6656e-02, -4.3099e-02,  1.6185e-02],
          ...,
          [ 6.3359e-03,  1.0048e-02,  3.7230e-03],
          [-8.3428e-02, -7.4395e-02,  1.9557e-02],
          [-1.2240e-01, -1.0088e-01,  1.7716e-02]]],


        ...,


        [[[ 2.7353e-01,  1.5586e-01, -1.5461e-01],
          [ 1.9263e-01,  3.5945e-02, -5.4178e-02],
          [ 1.8971e-01,  1.4643e-01, -1.5734e-01],
          ...,
          [ 2.7505e-01,  1.5846e-01, -2.0416e-01],
          [-3.0867e-01, -3.2482e-01,  1.6616e-01],
          [-1.0831e-01,  2.2206e-01,  3.6276e-02]],

         [[-4.2746e-01, -2.8777e-01,  1.5846e-01],
          [-5.7393e-01, -2.3803e-01,  3.7259e-01],
          [ 6.1624e-02, -1.0706e-01, -1.8865e-01],
          ...,
          [ 9.0012e-02, -1.3704e-01, -2.2715e-01],
          [ 6.9617e-01,  5.1252e-01, -3.1937e-01],
          [-1.1193e-01, -1.0224e-01, -5.8794e-02]],

         [[ 3.4575e-01, -7.6491e-02, -9.5189e-02],
          [ 2.0991e-01, -1.0834e-01,  2.2222e-02],
          [ 2.3842e-01,  1.3445e-01, -1.9921e-01],
          ...,
          [ 3.4319e-01,  1.6508e-01, -2.7999e-01],
          [-4.0736e-01,  1.9637e-01,  1.5837e-01],
          [-8.5254e-02, -4.1698e-02,  4.3044e-02]],

         ...,

         [[ 1.3367e-01,  1.3974e-01, -3.7934e-02],
          [ 3.7948e-02,  3.3054e-02, -1.0679e-01],
          [ 7.9103e-02,  7.3014e-02,  2.2054e-02],
          ...,
          [ 4.2543e-02,  4.3813e-02, -4.1590e-02],
          [ 2.3859e-02,  6.2778e-03,  1.0754e-01],
          [ 1.0787e-01,  8.8382e-02,  1.1118e-01]],

         [[-3.1859e-04, -2.2102e-02, -4.7923e-02],
          [ 2.3351e-02,  2.1025e-02, -9.9954e-02],
          [-3.1058e-03, -8.3004e-03, -3.8810e-02],
          ...,
          [-3.6726e-04,  2.2531e-03, -1.4021e-03],
          [-7.8009e-03, -1.2432e-02, -4.8516e-02],
          [-1.3424e-02, -2.0484e-02, -1.0400e-01]],

         [[-6.7022e-02, -4.6551e-02,  3.2398e-02],
          [ 3.3303e-02,  3.6077e-02, -2.4456e-02],
          [-5.6656e-02, -4.3099e-02,  1.6185e-02],
          ...,
          [ 6.3359e-03,  1.0048e-02,  3.7230e-03],
          [-8.3428e-02, -7.4395e-02,  1.9557e-02],
          [-1.2240e-01, -1.0088e-01,  1.7716e-02]]],


        [[[ 2.7353e-01,  1.5586e-01, -1.5461e-01],
          [ 1.9263e-01,  3.5945e-02, -5.4178e-02],
          [ 1.8971e-01,  1.4643e-01, -1.5734e-01],
          ...,
          [ 2.7505e-01,  1.5846e-01, -2.0416e-01],
          [-3.0867e-01, -3.2482e-01,  1.6616e-01],
          [-1.0831e-01,  2.2206e-01,  3.6276e-02]],

         [[-4.2746e-01, -2.8777e-01,  1.5846e-01],
          [-5.7393e-01, -2.3803e-01,  3.7259e-01],
          [ 6.1624e-02, -1.0706e-01, -1.8865e-01],
          ...,
          [ 9.0012e-02, -1.3704e-01, -2.2715e-01],
          [ 6.9617e-01,  5.1252e-01, -3.1937e-01],
          [-1.1193e-01, -1.0224e-01, -5.8794e-02]],

         [[ 3.4575e-01, -7.6491e-02, -9.5189e-02],
          [ 2.0991e-01, -1.0834e-01,  2.2222e-02],
          [ 2.3842e-01,  1.3445e-01, -1.9921e-01],
          ...,
          [ 3.4319e-01,  1.6508e-01, -2.7999e-01],
          [-4.0736e-01,  1.9637e-01,  1.5837e-01],
          [-8.5254e-02, -4.1698e-02,  4.3044e-02]],

         ...,

         [[ 1.3367e-01,  1.3974e-01, -3.7934e-02],
          [ 3.7948e-02,  3.3054e-02, -1.0679e-01],
          [ 7.9103e-02,  7.3014e-02,  2.2054e-02],
          ...,
          [ 4.2543e-02,  4.3813e-02, -4.1590e-02],
          [ 2.3859e-02,  6.2778e-03,  1.0754e-01],
          [ 1.0787e-01,  8.8382e-02,  1.1118e-01]],

         [[-3.1859e-04, -2.2102e-02, -4.7923e-02],
          [ 2.3351e-02,  2.1025e-02, -9.9954e-02],
          [-3.1058e-03, -8.3004e-03, -3.8810e-02],
          ...,
          [-3.6726e-04,  2.2531e-03, -1.4021e-03],
          [-7.8009e-03, -1.2432e-02, -4.8516e-02],
          [-1.3424e-02, -2.0484e-02, -1.0400e-01]],

         [[-6.7022e-02, -4.6551e-02,  3.2398e-02],
          [ 3.3303e-02,  3.6077e-02, -2.4456e-02],
          [-5.6656e-02, -4.3099e-02,  1.6185e-02],
          ...,
          [ 6.3359e-03,  1.0048e-02,  3.7230e-03],
          [-8.3428e-02, -7.4395e-02,  1.9557e-02],
          [-1.2240e-01, -1.0088e-01,  1.7716e-02]]],


        [[[ 2.7353e-01,  1.5586e-01, -1.5461e-01],
          [ 1.9263e-01,  3.5945e-02, -5.4178e-02],
          [ 1.8971e-01,  1.4643e-01, -1.5734e-01],
          ...,
          [ 2.7505e-01,  1.5846e-01, -2.0416e-01],
          [-3.0867e-01, -3.2482e-01,  1.6616e-01],
          [-1.0831e-01,  2.2206e-01,  3.6276e-02]],

         [[-4.2746e-01, -2.8777e-01,  1.5846e-01],
          [-5.7393e-01, -2.3803e-01,  3.7259e-01],
          [ 6.1624e-02, -1.0706e-01, -1.8865e-01],
          ...,
          [ 9.0012e-02, -1.3704e-01, -2.2715e-01],
          [ 6.9617e-01,  5.1252e-01, -3.1937e-01],
          [-1.1193e-01, -1.0224e-01, -5.8794e-02]],

         [[ 3.4575e-01, -7.6491e-02, -9.5189e-02],
          [ 2.0991e-01, -1.0834e-01,  2.2222e-02],
          [ 2.3842e-01,  1.3445e-01, -1.9921e-01],
          ...,
          [ 3.4319e-01,  1.6508e-01, -2.7999e-01],
          [-4.0736e-01,  1.9637e-01,  1.5837e-01],
          [-8.5254e-02, -4.1698e-02,  4.3044e-02]],

         ...,

         [[ 1.3367e-01,  1.3974e-01, -3.7934e-02],
          [ 3.7948e-02,  3.3054e-02, -1.0679e-01],
          [ 7.9103e-02,  7.3014e-02,  2.2054e-02],
          ...,
          [ 4.2543e-02,  4.3813e-02, -4.1590e-02],
          [ 2.3859e-02,  6.2778e-03,  1.0754e-01],
          [ 1.0787e-01,  8.8382e-02,  1.1118e-01]],

         [[-3.1859e-04, -2.2102e-02, -4.7923e-02],
          [ 2.3351e-02,  2.1025e-02, -9.9954e-02],
          [-3.1058e-03, -8.3004e-03, -3.8810e-02],
          ...,
          [-3.6726e-04,  2.2531e-03, -1.4021e-03],
          [-7.8009e-03, -1.2432e-02, -4.8516e-02],
          [-1.3424e-02, -2.0484e-02, -1.0400e-01]],

         [[-6.7022e-02, -4.6551e-02,  3.2398e-02],
          [ 3.3303e-02,  3.6077e-02, -2.4456e-02],
          [-5.6656e-02, -4.3099e-02,  1.6185e-02],
          ...,
          [ 6.3359e-03,  1.0048e-02,  3.7230e-03],
          [-8.3428e-02, -7.4395e-02,  1.9557e-02],
          [-1.2240e-01, -1.0088e-01,  1.7716e-02]]]],
       grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[ 2.8763,  0.7411,  0.8923,  2.4993, -1.2175, -0.9359, -0.1133,  0.1839],
        [ 2.1119,  0.6586,  0.8198,  1.8413, -0.7203, -0.8392, -0.0032, -0.0230],
        [ 3.2213,  0.9597,  0.8590,  2.6122, -1.4605, -0.9588,  0.0266,  0.2296],
        [ 1.8559,  0.6815,  0.6026,  1.5190, -0.9544, -0.4988,  0.1992, -0.0364],
        [ 3.1268,  0.7663,  0.8742,  2.8855, -1.3831, -1.1443, -0.2456,  0.2555]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[ 0.2735,  0.1559, -0.1546],
         [ 0.1926,  0.0359, -0.0542],
         [ 0.1897,  0.1464, -0.1573],
         [ 0.3915,  0.1655, -0.3823],
         [ 0.1199,  0.0243, -0.1079],
         [ 0.2750,  0.1585, -0.2042],
         [-0.3087, -0.3248,  0.1662],
         [-0.1083,  0.2221,  0.0363]],

        [[-0.4275, -0.2878,  0.1585],
         [-0.5739, -0.2380,  0.3726],
         [ 0.0616, -0.1071, -0.1886],
         [ 1.0512,  0.2309, -0.9113],
         [ 0.3752, -0.0217, -0.5011],
         [ 0.0900, -0.1370, -0.2271],
         [ 0.6962,  0.5125, -0.3194],
         [-0.1119, -0.1022, -0.0588]],

        [[ 0.3457, -0.0765, -0.0952],
         [ 0.2099, -0.1083,  0.0222],
         [ 0.2384,  0.1344, -0.1992],
         [ 0.5202,  0.5739, -0.6103],
         [ 0.0571,  0.4885, -0.2891],
         [ 0.3432,  0.1651, -0.2800],
         [-0.4074,  0.1964,  0.1584],
         [-0.0853, -0.0417,  0.0430]],

        [[-0.0763,  0.5728, -0.0971],
         [-0.1910,  1.1649, -0.0853],
         [ 0.1909, -0.3581, -0.0447],
         [ 0.7584, -2.0638, -0.1426],
         [ 0.5634, -0.7934, -0.0534],
         [ 0.2766, -0.4150, -0.1108],
         [ 0.0108, -0.9675,  0.1286],
         [ 0.0029, -0.0373,  0.1171]],

        [[-0.0872, -0.0029,  0.1247],
         [-0.0845, -0.0781,  0.1439],
         [-0.0138,  0.0655, -0.0309],
         [ 0.0483,  0.3331, -0.1330],
         [ 0.0670, -0.0764, -0.1908],
         [-0.0413,  0.0995,  0.0066],
         [ 0.1230, -0.0643, -0.1338],
         [ 0.0655, -0.0885, -0.1008]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
deep_sets:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[-0.0209, -0.1239, -0.0013,  ..., -0.1348,  0.2151, -0.0007],
         [-0.0389, -0.1311, -0.0151,  ..., -0.1328,  0.1976, -0.0071],
         [-0.0059, -0.1179,  0.0102,  ..., -0.1365,  0.2298,  0.0052],
         ...,
         [-0.0666, -0.1445, -0.0289,  ..., -0.1285,  0.1769, -0.0118],
         [-0.0718, -0.1469, -0.0318,  ..., -0.1277,  0.1733, -0.0128],
         [-0.0716, -0.1467, -0.0318,  ..., -0.1278,  0.1735, -0.0128]],

        [[-0.0209, -0.1239, -0.0013,  ..., -0.1348,  0.2151, -0.0007],
         [-0.0389, -0.1311, -0.0151,  ..., -0.1328,  0.1976, -0.0071],
         [-0.0059, -0.1179,  0.0102,  ..., -0.1365,  0.2298,  0.0052],
         ...,
         [-0.0666, -0.1445, -0.0289,  ..., -0.1285,  0.1769, -0.0118],
         [-0.0718, -0.1469, -0.0318,  ..., -0.1277,  0.1733, -0.0128],
         [-0.0716, -0.1467, -0.0318,  ..., -0.1278,  0.1735, -0.0128]],

        [[-0.0209, -0.1239, -0.0013,  ..., -0.1348,  0.2151, -0.0007],
         [-0.0389, -0.1311, -0.0151,  ..., -0.1328,  0.1976, -0.0071],
         [-0.0059, -0.1179,  0.0102,  ..., -0.1365,  0.2298,  0.0052],
         ...,
         [-0.0666, -0.1445, -0.0289,  ..., -0.1285,  0.1769, -0.0118],
         [-0.0718, -0.1469, -0.0318,  ..., -0.1277,  0.1733, -0.0128],
         [-0.0716, -0.1467, -0.0318,  ..., -0.1278,  0.1735, -0.0128]],

        ...,

        [[-0.0209, -0.1239, -0.0013,  ..., -0.1348,  0.2151, -0.0007],
         [-0.0389, -0.1311, -0.0151,  ..., -0.1328,  0.1976, -0.0071],
         [-0.0059, -0.1179,  0.0102,  ..., -0.1365,  0.2298,  0.0052],
         ...,
         [-0.0666, -0.1445, -0.0289,  ..., -0.1285,  0.1769, -0.0118],
         [-0.0718, -0.1469, -0.0318,  ..., -0.1277,  0.1733, -0.0128],
         [-0.0716, -0.1467, -0.0318,  ..., -0.1278,  0.1735, -0.0128]],

        [[-0.0209, -0.1239, -0.0013,  ..., -0.1348,  0.2151, -0.0007],
         [-0.0389, -0.1311, -0.0151,  ..., -0.1328,  0.1976, -0.0071],
         [-0.0059, -0.1179,  0.0102,  ..., -0.1365,  0.2298,  0.0052],
         ...,
         [-0.0666, -0.1445, -0.0289,  ..., -0.1285,  0.1769, -0.0118],
         [-0.0718, -0.1469, -0.0318,  ..., -0.1277,  0.1733, -0.0128],
         [-0.0716, -0.1467, -0.0318,  ..., -0.1278,  0.1735, -0.0128]],

        [[-0.0209, -0.1239, -0.0013,  ..., -0.1348,  0.2151, -0.0007],
         [-0.0389, -0.1311, -0.0151,  ..., -0.1328,  0.1976, -0.0071],
         [-0.0059, -0.1179,  0.0102,  ..., -0.1365,  0.2298,  0.0052],
         ...,
         [-0.0666, -0.1445, -0.0289,  ..., -0.1285,  0.1769, -0.0118],
         [-0.0718, -0.1469, -0.0318,  ..., -0.1277,  0.1733, -0.0128],
         [-0.0716, -0.1467, -0.0318,  ..., -0.1278,  0.1735, -0.0128]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[-0.0177,  0.0575, -0.0803],
          [ 0.0512, -0.0712, -0.0717],
          [-0.0707, -0.0788,  0.0085],
          ...,
          [ 0.0803,  0.0164, -0.0360],
          [ 0.0901, -0.0418,  0.0255],
          [-0.0515,  0.0031, -0.0350]],

         [[-0.0130,  0.0579, -0.0811],
          [ 0.0508, -0.0694, -0.0706],
          [-0.0733, -0.0819,  0.0052],
          ...,
          [ 0.0807,  0.0181, -0.0379],
          [ 0.0888, -0.0423,  0.0216],
          [-0.0519,  0.0047, -0.0310]],

         [[-0.0186,  0.0609, -0.0816],
          [ 0.0509, -0.0695, -0.0710],
          [-0.0707, -0.0789,  0.0099],
          ...,
          [ 0.0798,  0.0169, -0.0343],
          [ 0.0921, -0.0415,  0.0243],
          [-0.0520,  0.0055, -0.0362]],

         ...,

         [[-0.0159,  0.0566, -0.0802],
          [ 0.0492, -0.0713, -0.0707],
          [-0.0715, -0.0791,  0.0081],
          ...,
          [ 0.0812,  0.0163, -0.0377],
          [ 0.0896, -0.0415,  0.0257],
          [-0.0528,  0.0035, -0.0340]],

         [[-0.0156,  0.0569, -0.0812],
          [ 0.0477, -0.0697, -0.0691],
          [-0.0700, -0.0789,  0.0094],
          ...,
          [ 0.0801,  0.0172, -0.0366],
          [ 0.0904, -0.0407,  0.0269],
          [-0.0538,  0.0031, -0.0335]],

         [[-0.0154,  0.0572, -0.0815],
          [ 0.0480, -0.0694, -0.0691],
          [-0.0701, -0.0793,  0.0090],
          ...,
          [ 0.0801,  0.0173, -0.0366],
          [ 0.0908, -0.0405,  0.0268],
          [-0.0536,  0.0032, -0.0337]]],


        [[[-0.0177,  0.0575, -0.0803],
          [ 0.0512, -0.0712, -0.0717],
          [-0.0707, -0.0788,  0.0085],
          ...,
          [ 0.0803,  0.0164, -0.0360],
          [ 0.0901, -0.0418,  0.0255],
          [-0.0515,  0.0031, -0.0350]],

         [[-0.0130,  0.0579, -0.0811],
          [ 0.0508, -0.0694, -0.0706],
          [-0.0733, -0.0819,  0.0052],
          ...,
          [ 0.0807,  0.0181, -0.0379],
          [ 0.0888, -0.0423,  0.0216],
          [-0.0519,  0.0047, -0.0310]],

         [[-0.0186,  0.0609, -0.0816],
          [ 0.0509, -0.0695, -0.0710],
          [-0.0707, -0.0789,  0.0099],
          ...,
          [ 0.0798,  0.0169, -0.0343],
          [ 0.0921, -0.0415,  0.0243],
          [-0.0520,  0.0055, -0.0362]],

         ...,

         [[-0.0159,  0.0566, -0.0802],
          [ 0.0492, -0.0713, -0.0707],
          [-0.0715, -0.0791,  0.0081],
          ...,
          [ 0.0812,  0.0163, -0.0377],
          [ 0.0896, -0.0415,  0.0257],
          [-0.0528,  0.0035, -0.0340]],

         [[-0.0156,  0.0569, -0.0812],
          [ 0.0477, -0.0697, -0.0691],
          [-0.0700, -0.0789,  0.0094],
          ...,
          [ 0.0801,  0.0172, -0.0366],
          [ 0.0904, -0.0407,  0.0269],
          [-0.0538,  0.0031, -0.0335]],

         [[-0.0154,  0.0572, -0.0815],
          [ 0.0480, -0.0694, -0.0691],
          [-0.0701, -0.0793,  0.0090],
          ...,
          [ 0.0801,  0.0173, -0.0366],
          [ 0.0908, -0.0405,  0.0268],
          [-0.0536,  0.0032, -0.0337]]],


        [[[-0.0177,  0.0575, -0.0803],
          [ 0.0512, -0.0712, -0.0717],
          [-0.0707, -0.0788,  0.0085],
          ...,
          [ 0.0803,  0.0164, -0.0360],
          [ 0.0901, -0.0418,  0.0255],
          [-0.0515,  0.0031, -0.0350]],

         [[-0.0130,  0.0579, -0.0811],
          [ 0.0508, -0.0694, -0.0706],
          [-0.0733, -0.0819,  0.0052],
          ...,
          [ 0.0807,  0.0181, -0.0379],
          [ 0.0888, -0.0423,  0.0216],
          [-0.0519,  0.0047, -0.0310]],

         [[-0.0186,  0.0609, -0.0816],
          [ 0.0509, -0.0695, -0.0710],
          [-0.0707, -0.0789,  0.0099],
          ...,
          [ 0.0798,  0.0169, -0.0343],
          [ 0.0921, -0.0415,  0.0243],
          [-0.0520,  0.0055, -0.0362]],

         ...,

         [[-0.0159,  0.0566, -0.0802],
          [ 0.0492, -0.0713, -0.0707],
          [-0.0715, -0.0791,  0.0081],
          ...,
          [ 0.0812,  0.0163, -0.0377],
          [ 0.0896, -0.0415,  0.0257],
          [-0.0528,  0.0035, -0.0340]],

         [[-0.0156,  0.0569, -0.0812],
          [ 0.0477, -0.0697, -0.0691],
          [-0.0700, -0.0789,  0.0094],
          ...,
          [ 0.0801,  0.0172, -0.0366],
          [ 0.0904, -0.0407,  0.0269],
          [-0.0538,  0.0031, -0.0335]],

         [[-0.0154,  0.0572, -0.0815],
          [ 0.0480, -0.0694, -0.0691],
          [-0.0701, -0.0793,  0.0090],
          ...,
          [ 0.0801,  0.0173, -0.0366],
          [ 0.0908, -0.0405,  0.0268],
          [-0.0536,  0.0032, -0.0337]]],


        ...,


        [[[-0.0177,  0.0575, -0.0803],
          [ 0.0512, -0.0712, -0.0717],
          [-0.0707, -0.0788,  0.0085],
          ...,
          [ 0.0803,  0.0164, -0.0360],
          [ 0.0901, -0.0418,  0.0255],
          [-0.0515,  0.0031, -0.0350]],

         [[-0.0130,  0.0579, -0.0811],
          [ 0.0508, -0.0694, -0.0706],
          [-0.0733, -0.0819,  0.0052],
          ...,
          [ 0.0807,  0.0181, -0.0379],
          [ 0.0888, -0.0423,  0.0216],
          [-0.0519,  0.0047, -0.0310]],

         [[-0.0186,  0.0609, -0.0816],
          [ 0.0509, -0.0695, -0.0710],
          [-0.0707, -0.0789,  0.0099],
          ...,
          [ 0.0798,  0.0169, -0.0343],
          [ 0.0921, -0.0415,  0.0243],
          [-0.0520,  0.0055, -0.0362]],

         ...,

         [[-0.0159,  0.0566, -0.0802],
          [ 0.0492, -0.0713, -0.0707],
          [-0.0715, -0.0791,  0.0081],
          ...,
          [ 0.0812,  0.0163, -0.0377],
          [ 0.0896, -0.0415,  0.0257],
          [-0.0528,  0.0035, -0.0340]],

         [[-0.0156,  0.0569, -0.0812],
          [ 0.0477, -0.0697, -0.0691],
          [-0.0700, -0.0789,  0.0094],
          ...,
          [ 0.0801,  0.0172, -0.0366],
          [ 0.0904, -0.0407,  0.0269],
          [-0.0538,  0.0031, -0.0335]],

         [[-0.0154,  0.0572, -0.0815],
          [ 0.0480, -0.0694, -0.0691],
          [-0.0701, -0.0793,  0.0090],
          ...,
          [ 0.0801,  0.0173, -0.0366],
          [ 0.0908, -0.0405,  0.0268],
          [-0.0536,  0.0032, -0.0337]]],


        [[[-0.0177,  0.0575, -0.0803],
          [ 0.0512, -0.0712, -0.0717],
          [-0.0707, -0.0788,  0.0085],
          ...,
          [ 0.0803,  0.0164, -0.0360],
          [ 0.0901, -0.0418,  0.0255],
          [-0.0515,  0.0031, -0.0350]],

         [[-0.0130,  0.0579, -0.0811],
          [ 0.0508, -0.0694, -0.0706],
          [-0.0733, -0.0819,  0.0052],
          ...,
          [ 0.0807,  0.0181, -0.0379],
          [ 0.0888, -0.0423,  0.0216],
          [-0.0519,  0.0047, -0.0310]],

         [[-0.0186,  0.0609, -0.0816],
          [ 0.0509, -0.0695, -0.0710],
          [-0.0707, -0.0789,  0.0099],
          ...,
          [ 0.0798,  0.0169, -0.0343],
          [ 0.0921, -0.0415,  0.0243],
          [-0.0520,  0.0055, -0.0362]],

         ...,

         [[-0.0159,  0.0566, -0.0802],
          [ 0.0492, -0.0713, -0.0707],
          [-0.0715, -0.0791,  0.0081],
          ...,
          [ 0.0812,  0.0163, -0.0377],
          [ 0.0896, -0.0415,  0.0257],
          [-0.0528,  0.0035, -0.0340]],

         [[-0.0156,  0.0569, -0.0812],
          [ 0.0477, -0.0697, -0.0691],
          [-0.0700, -0.0789,  0.0094],
          ...,
          [ 0.0801,  0.0172, -0.0366],
          [ 0.0904, -0.0407,  0.0269],
          [-0.0538,  0.0031, -0.0335]],

         [[-0.0154,  0.0572, -0.0815],
          [ 0.0480, -0.0694, -0.0691],
          [-0.0701, -0.0793,  0.0090],
          ...,
          [ 0.0801,  0.0173, -0.0366],
          [ 0.0908, -0.0405,  0.0268],
          [-0.0536,  0.0032, -0.0337]]],


        [[[-0.0177,  0.0575, -0.0803],
          [ 0.0512, -0.0712, -0.0717],
          [-0.0707, -0.0788,  0.0085],
          ...,
          [ 0.0803,  0.0164, -0.0360],
          [ 0.0901, -0.0418,  0.0255],
          [-0.0515,  0.0031, -0.0350]],

         [[-0.0130,  0.0579, -0.0811],
          [ 0.0508, -0.0694, -0.0706],
          [-0.0733, -0.0819,  0.0052],
          ...,
          [ 0.0807,  0.0181, -0.0379],
          [ 0.0888, -0.0423,  0.0216],
          [-0.0519,  0.0047, -0.0310]],

         [[-0.0186,  0.0609, -0.0816],
          [ 0.0509, -0.0695, -0.0710],
          [-0.0707, -0.0789,  0.0099],
          ...,
          [ 0.0798,  0.0169, -0.0343],
          [ 0.0921, -0.0415,  0.0243],
          [-0.0520,  0.0055, -0.0362]],

         ...,

         [[-0.0159,  0.0566, -0.0802],
          [ 0.0492, -0.0713, -0.0707],
          [-0.0715, -0.0791,  0.0081],
          ...,
          [ 0.0812,  0.0163, -0.0377],
          [ 0.0896, -0.0415,  0.0257],
          [-0.0528,  0.0035, -0.0340]],

         [[-0.0156,  0.0569, -0.0812],
          [ 0.0477, -0.0697, -0.0691],
          [-0.0700, -0.0789,  0.0094],
          ...,
          [ 0.0801,  0.0172, -0.0366],
          [ 0.0904, -0.0407,  0.0269],
          [-0.0538,  0.0031, -0.0335]],

         [[-0.0154,  0.0572, -0.0815],
          [ 0.0480, -0.0694, -0.0691],
          [-0.0701, -0.0793,  0.0090],
          ...,
          [ 0.0801,  0.0173, -0.0366],
          [ 0.0908, -0.0405,  0.0268],
          [-0.0536,  0.0032, -0.0337]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[-0.0209, -0.1239, -0.0013, -0.0849, -0.0133, -0.1348,  0.2151, -0.0007],
        [-0.0389, -0.1311, -0.0151, -0.0892, -0.0122, -0.1328,  0.1976, -0.0071],
        [-0.0059, -0.1179,  0.0102, -0.0814, -0.0144, -0.1365,  0.2298,  0.0052],
        [-0.0419, -0.1337, -0.0140, -0.0904, -0.0120, -0.1326,  0.1960, -0.0064],
        [-0.0139, -0.1209,  0.0030, -0.0831, -0.0137, -0.1357,  0.2218,  0.0013]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[-0.0177,  0.0575, -0.0803],
         [ 0.0512, -0.0712, -0.0717],
         [-0.0707, -0.0788,  0.0085],
         [ 0.0431,  0.0108,  0.0526],
         [-0.0676,  0.1343, -0.0303],
         [ 0.0803,  0.0164, -0.0360],
         [ 0.0901, -0.0418,  0.0255],
         [-0.0515,  0.0031, -0.0350]],

        [[-0.0130,  0.0579, -0.0811],
         [ 0.0508, -0.0694, -0.0706],
         [-0.0733, -0.0819,  0.0052],
         [ 0.0448,  0.0092,  0.0555],
         [-0.0654,  0.1320, -0.0378],
         [ 0.0807,  0.0181, -0.0379],
         [ 0.0888, -0.0423,  0.0216],
         [-0.0519,  0.0047, -0.0310]],

        [[-0.0186,  0.0609, -0.0816],
         [ 0.0509, -0.0695, -0.0710],
         [-0.0707, -0.0789,  0.0099],
         [ 0.0426,  0.0117,  0.0499],
         [-0.0684,  0.1327, -0.0315],
         [ 0.0798,  0.0169, -0.0343],
         [ 0.0921, -0.0415,  0.0243],
         [-0.0520,  0.0055, -0.0362]],

        [[-0.0167,  0.0433, -0.0803],
         [ 0.0521, -0.0758, -0.0730],
         [-0.0667, -0.0784,  0.0044],
         [ 0.0452,  0.0073,  0.0568],
         [-0.0704,  0.1385, -0.0314],
         [ 0.0816,  0.0207, -0.0368],
         [ 0.0904, -0.0407,  0.0294],
         [-0.0493,  0.0044, -0.0349]],

        [[-0.0155,  0.0582, -0.0805],
         [ 0.0485, -0.0697, -0.0696],
         [-0.0712, -0.0790,  0.0087],
         [ 0.0419,  0.0091,  0.0534],
         [-0.0655,  0.1331, -0.0326],
         [ 0.0803,  0.0163, -0.0374],
         [ 0.0894, -0.0424,  0.0253],
         [-0.0531,  0.0032, -0.0332]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
self_attention:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[ 0.1240, -0.2782, -0.1370,  ...,  0.3141,  0.2354,  0.4327],
         [ 0.1240, -0.2782, -0.1370,  ...,  0.3141,  0.2354,  0.4327],
         [ 0.1240, -0.2782, -0.1371,  ...,  0.3141,  0.2354,  0.4327],
         ...,
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325],
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325],
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325]],

        [[ 0.1240, -0.2782, -0.1370,  ...,  0.3141,  0.2354,  0.4327],
         [ 0.1240, -0.2782, -0.1370,  ...,  0.3141,  0.2354,  0.4327],
         [ 0.1240, -0.2782, -0.1371,  ...,  0.3141,  0.2354,  0.4327],
         ...,
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325],
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325],
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325]],

        [[ 0.1240, -0.2782, -0.1370,  ...,  0.3141,  0.2354,  0.4327],
         [ 0.1240, -0.2782, -0.1370,  ...,  0.3141,  0.2354,  0.4327],
         [ 0.1240, -0.2782, -0.1371,  ...,  0.3141,  0.2354,  0.4327],
         ...,
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325],
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325],
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325]],

        ...,

        [[ 0.1240, -0.2782, -0.1370,  ...,  0.3141,  0.2354,  0.4327],
         [ 0.1240, -0.2782, -0.1370,  ...,  0.3141,  0.2354,  0.4327],
         [ 0.1240, -0.2782, -0.1371,  ...,  0.3141,  0.2354,  0.4327],
         ...,
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325],
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325],
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325]],

        [[ 0.1240, -0.2782, -0.1370,  ...,  0.3141,  0.2354,  0.4327],
         [ 0.1240, -0.2782, -0.1370,  ...,  0.3141,  0.2354,  0.4327],
         [ 0.1240, -0.2782, -0.1371,  ...,  0.3141,  0.2354,  0.4327],
         ...,
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325],
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325],
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325]],

        [[ 0.1240, -0.2782, -0.1370,  ...,  0.3141,  0.2354,  0.4327],
         [ 0.1240, -0.2782, -0.1370,  ...,  0.3141,  0.2354,  0.4327],
         [ 0.1240, -0.2782, -0.1371,  ...,  0.3141,  0.2354,  0.4327],
         ...,
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325],
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325],
         [ 0.1238, -0.2782, -0.1369,  ...,  0.3139,  0.2353,  0.4325]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1033],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0441],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]],

         [[-0.0387,  0.1380,  0.0906],
          [ 0.0362, -0.0549,  0.1033],
          [-0.0270, -0.1255, -0.0818],
          ...,
          [-0.1207,  0.0125,  0.0441],
          [ 0.1437,  0.0141,  0.1344],
          [ 0.0132,  0.0924,  0.1007]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0549,  0.1033],
          [-0.0269, -0.1254, -0.0818],
          ...,
          [-0.1207,  0.0127,  0.0441],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]],

         ...,

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0128,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0926,  0.1006]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0926,  0.1006]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]]],


        [[[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1033],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0441],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]],

         [[-0.0387,  0.1380,  0.0906],
          [ 0.0362, -0.0549,  0.1033],
          [-0.0270, -0.1255, -0.0818],
          ...,
          [-0.1207,  0.0125,  0.0441],
          [ 0.1437,  0.0141,  0.1344],
          [ 0.0132,  0.0924,  0.1007]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0549,  0.1033],
          [-0.0269, -0.1254, -0.0818],
          ...,
          [-0.1207,  0.0127,  0.0441],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]],

         ...,

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0128,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0926,  0.1006]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0926,  0.1006]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]]],


        [[[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1033],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0441],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]],

         [[-0.0387,  0.1380,  0.0906],
          [ 0.0362, -0.0549,  0.1033],
          [-0.0270, -0.1255, -0.0818],
          ...,
          [-0.1207,  0.0125,  0.0441],
          [ 0.1437,  0.0141,  0.1344],
          [ 0.0132,  0.0924,  0.1007]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0549,  0.1033],
          [-0.0269, -0.1254, -0.0818],
          ...,
          [-0.1207,  0.0127,  0.0441],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]],

         ...,

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0128,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0926,  0.1006]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0926,  0.1006]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]]],


        ...,


        [[[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1033],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0441],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]],

         [[-0.0387,  0.1380,  0.0906],
          [ 0.0362, -0.0549,  0.1033],
          [-0.0270, -0.1255, -0.0818],
          ...,
          [-0.1207,  0.0125,  0.0441],
          [ 0.1437,  0.0141,  0.1344],
          [ 0.0132,  0.0924,  0.1007]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0549,  0.1033],
          [-0.0269, -0.1254, -0.0818],
          ...,
          [-0.1207,  0.0127,  0.0441],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]],

         ...,

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0128,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0926,  0.1006]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0926,  0.1006]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]]],


        [[[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1033],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0441],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]],

         [[-0.0387,  0.1380,  0.0906],
          [ 0.0362, -0.0549,  0.1033],
          [-0.0270, -0.1255, -0.0818],
          ...,
          [-0.1207,  0.0125,  0.0441],
          [ 0.1437,  0.0141,  0.1344],
          [ 0.0132,  0.0924,  0.1007]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0549,  0.1033],
          [-0.0269, -0.1254, -0.0818],
          ...,
          [-0.1207,  0.0127,  0.0441],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]],

         ...,

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0128,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0926,  0.1006]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0926,  0.1006]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]]],


        [[[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1033],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0441],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]],

         [[-0.0387,  0.1380,  0.0906],
          [ 0.0362, -0.0549,  0.1033],
          [-0.0270, -0.1255, -0.0818],
          ...,
          [-0.1207,  0.0125,  0.0441],
          [ 0.1437,  0.0141,  0.1344],
          [ 0.0132,  0.0924,  0.1007]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0549,  0.1033],
          [-0.0269, -0.1254, -0.0818],
          ...,
          [-0.1207,  0.0127,  0.0441],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]],

         ...,

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0128,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0926,  0.1006]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0926,  0.1006]],

         [[-0.0386,  0.1380,  0.0906],
          [ 0.0361, -0.0548,  0.1032],
          [-0.0269, -0.1255, -0.0818],
          ...,
          [-0.1206,  0.0127,  0.0440],
          [ 0.1436,  0.0142,  0.1343],
          [ 0.0132,  0.0925,  0.1006]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[ 0.1240, -0.2782, -0.1370, -0.1311,  0.1370,  0.3141,  0.2354,  0.4327],
        [ 0.1240, -0.2782, -0.1370, -0.1311,  0.1371,  0.3141,  0.2354,  0.4327],
        [ 0.1240, -0.2782, -0.1371, -0.1311,  0.1370,  0.3141,  0.2354,  0.4327],
        [ 0.1239, -0.2782, -0.1370, -0.1310,  0.1370,  0.3140,  0.2354,  0.4327],
        [ 0.1240, -0.2782, -0.1370, -0.1310,  0.1370,  0.3141,  0.2354,  0.4327]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[-0.0386,  0.1380,  0.0906],
         [ 0.0361, -0.0548,  0.1033],
         [-0.0269, -0.1255, -0.0818],
         [ 0.1405,  0.1493,  0.0846],
         [-0.1454, -0.0442,  0.0959],
         [-0.1206,  0.0127,  0.0441],
         [ 0.1436,  0.0142,  0.1343],
         [ 0.0132,  0.0925,  0.1006]],

        [[-0.0387,  0.1380,  0.0906],
         [ 0.0362, -0.0549,  0.1033],
         [-0.0270, -0.1255, -0.0818],
         [ 0.1405,  0.1494,  0.0846],
         [-0.1454, -0.0441,  0.0960],
         [-0.1207,  0.0125,  0.0441],
         [ 0.1437,  0.0141,  0.1344],
         [ 0.0132,  0.0924,  0.1007]],

        [[-0.0386,  0.1380,  0.0906],
         [ 0.0361, -0.0549,  0.1033],
         [-0.0269, -0.1254, -0.0818],
         [ 0.1405,  0.1493,  0.0846],
         [-0.1454, -0.0442,  0.0959],
         [-0.1207,  0.0127,  0.0441],
         [ 0.1436,  0.0142,  0.1343],
         [ 0.0132,  0.0925,  0.1006]],

        [[-0.0386,  0.1380,  0.0906],
         [ 0.0361, -0.0548,  0.1031],
         [-0.0268, -0.1255, -0.0818],
         [ 0.1404,  0.1493,  0.0846],
         [-0.1454, -0.0442,  0.0960],
         [-0.1206,  0.0130,  0.0439],
         [ 0.1435,  0.0143,  0.1342],
         [ 0.0132,  0.0927,  0.1005]],

        [[-0.0386,  0.1380,  0.0906],
         [ 0.0361, -0.0549,  0.1033],
         [-0.0270, -0.1255, -0.0818],
         [ 0.1405,  0.1493,  0.0846],
         [-0.1454, -0.0441,  0.0959],
         [-0.1207,  0.0127,  0.0440],
         [ 0.1437,  0.0141,  0.1344],
         [ 0.0132,  0.0925,  0.1006]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
==================================================

Batch 7 in Ensemble: 234_vi
Number of conformers in this batch: 16
Unique Atomic Numbers: [6, 1, 8, 15]
Average number of neighbors: 26.66
Processing batch of 16 conformers
Initialized CustomNonLinearReadout with input irreps: 32x0e+32x1o
EQUICATPlusNonLinearReadout(
  (equicat): EQUICAT(
    (model): MACE(
      (node_embedding): LinearNodeEmbeddingBlock(
        (linear): Linear(4x0e -> 32x0e | 128 weights)
      )
      (radial_embedding): RadialEmbeddingBlock(
        (bessel_fn): BesselBasis(r_max=5.0, num_basis=8, trainable=False)
        (cutoff_fn): PolynomialCutoff(p=6.0, r_max=5.0)
      )
      (spherical_harmonics): SphericalHarmonics()
      (atomic_energies_fn): AtomicEnergiesBlock(energies=[0.0000, 0.0000, 0.0000, 0.0000])
      (interactions): ModuleList(
        (0): RealAgnosticResidualInteractionBlock(
          (linear_up): Linear(32x0e -> 32x0e | 1024 weights)
          (conv_tp): TensorProduct(32x0e x 1x0e+1x1o+1x2e -> 32x0e+32x1o+32x2e | 96 paths | 96 weights)
          (conv_tp_weights): FullyConnectedNet[8, 64, 64, 64, 96]
          (linear): Linear(32x0e+32x1o+32x2e -> 32x0e+32x1o+32x2e | 3072 weights)
          (skip_tp): FullyConnectedTensorProduct(32x0e x 4x0e -> 32x0e+32x1o | 4096 paths | 4096 weights)
          (reshape): reshape_irreps()
        )
        (1): RealAgnosticResidualInteractionBlock(
          (linear_up): Linear(32x0e+32x1o -> 32x0e+32x1o | 2048 weights)
          (conv_tp): TensorProduct(32x0e+32x1o x 1x0e+1x1o+1x2e -> 64x0e+96x1o+64x2e | 224 paths | 224 weights)
          (conv_tp_weights): FullyConnectedNet[8, 64, 64, 64, 224]
          (linear): Linear(64x0e+96x1o+64x2e -> 32x0e+32x1o+32x2e | 7168 weights)
          (skip_tp): FullyConnectedTensorProduct(32x0e+32x1o x 4x0e -> 32x0e | 4096 paths | 4096 weights)
          (reshape): reshape_irreps()
        )
      )
      (products): ModuleList(
        (0): EquivariantProductBasisBlock(
          (symmetric_contractions): SymmetricContraction(
            (contractions): ModuleList(
              (0): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x3x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
              (1): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x4x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
            )
          )
          (linear): Linear(32x0e+32x1o -> 32x0e+32x1o | 2048 weights)
        )
        (1): EquivariantProductBasisBlock(
          (symmetric_contractions): SymmetricContraction(
            (contractions): ModuleList(
              (0): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x3x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
            )
          )
          (linear): Linear(32x0e -> 32x0e | 1024 weights)
        )
      )
      (readouts): ModuleList(
        (0): LinearReadoutBlock(
          (linear): Linear(32x0e+32x1o -> 1x0e | 32 weights)
        )
        (1): NonLinearReadoutBlock(
          (linear_1): Linear(32x0e -> 16x0e | 512 weights)
          (non_linearity): Activation [x] (16x0e -> 16x0e)
          (linear_2): Linear(16x0e -> 1x0e | 16 weights)
        )
      )
    )
  )
  (non_linear_readout): CustomNonLinearReadout(
    (linear_1): Linear(32x0e+32x1o -> 16x0e+16x1o | 1024 weights)
    (non_linearity_1): Activation [x ] (16x0e+16x1o -> 16x0e+16x1o)
    (linear_2): Linear(16x0e+16x1o -> 16x0e+16x1o | 512 weights)
    (non_linearity_2): Activation [x ] (16x0e+16x1o -> 16x0e+16x1o)
    (linear_3): Linear(16x0e+16x1o -> 8x0e+8x1o | 256 weights)
  )
)
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2956])
shifts shape: torch.Size([2956, 3])
sender shape: torch.Size([2956])
receiver shape: torch.Size([2956])
Edge attributes shape: torch.Size([2956, 9])
Edge attributes tensor([[ 1.0000,  1.3282,  0.9394,  ..., -0.1314, -0.7211, -0.9105],
        [ 1.0000, -0.1220,  1.7271,  ...,  2.2167, -0.1091, -0.0081],
        [ 1.0000,  1.4580, -0.7756,  ..., -0.4454,  0.5228, -1.1963],
        ...,
        [ 1.0000,  0.5463,  1.6290,  ...,  1.8489, -0.4601, -0.1617],
        [ 1.0000, -0.7886,  1.3526,  ...,  0.9276,  1.2932, -0.0475],
        [ 1.0000,  0.0251,  0.9664,  ..., -0.0738,  1.7931,  1.3328]])
Edge features shape: torch.Size([2956, 8])
Edge features tensor([[ 0.1673, -0.0651, -0.1420,  ..., -0.1573, -0.0341,  0.1706],
        [ 0.3439,  0.4319,  0.1986,  ..., -0.3548, -0.0179,  0.3323],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3708, -0.0435,  0.3156],
        ...,
        [ 0.0007, -0.0014,  0.0020,  ..., -0.0029,  0.0029, -0.0026],
        [ 0.0301, -0.0450,  0.0372,  ...,  0.0425, -0.0422,  0.0205],
        [ 0.3129,  0.2807, -0.0610,  ...,  0.1201,  0.3478,  0.1920]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        ...,
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2956, 96])
Tensor Product Weights tensor([[-0.0300,  0.1031, -0.0066,  ..., -0.0439,  0.0946,  0.1258],
        [ 0.2281,  0.0277, -0.0906,  ...,  0.0468,  0.0809, -0.3518],
        [ 0.2268,  0.0279, -0.0954,  ...,  0.0567,  0.0770, -0.3519],
        ...,
        [ 0.0006,  0.0005,  0.0007,  ...,  0.0012, -0.0016, -0.0005],
        [ 0.0141,  0.0236, -0.0257,  ...,  0.0185,  0.0238,  0.0063],
        [ 0.2887, -0.0328,  0.1818,  ..., -0.2323,  0.0458, -0.2786]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2361,  0.1068,  0.2752,  ..., -0.0531, -0.0314,  0.1679],
        [-0.1603,  0.2861, -0.2378,  ...,  0.0897,  0.1724,  0.0255],
        [-0.2435,  0.1631,  0.0209,  ..., -0.0540,  0.0972, -0.0012],
        ...,
        [-0.0581, -0.0176,  0.1373,  ...,  0.0765,  0.0820,  0.1054],
        [-0.0788, -0.0732,  0.0992,  ..., -0.1857,  0.1300, -0.1258],
        [-0.1028,  0.1092,  0.0187,  ..., -0.1445,  0.0078,  0.2527]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.1004,  0.3781, -0.2384,  ...,  0.0474,  0.1210, -0.0874],
        [-0.0304,  0.2912, -0.1858,  ...,  0.0940,  0.0784, -0.0029],
        [ 0.0502,  0.3438, -0.2155,  ...,  0.1422,  0.0050, -0.0643],
        ...,
        [-0.1698, -0.2130,  0.1818,  ...,  0.0698,  0.2646,  0.1541],
        [-0.0805, -0.1866,  0.0781,  ..., -0.3129, -0.0549,  0.0615],
        [-0.1035, -0.0584, -0.0430,  ...,  0.1341, -0.0902, -0.1783]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2944])
shifts shape: torch.Size([2944, 3])
sender shape: torch.Size([2944])
receiver shape: torch.Size([2944])
Edge attributes shape: torch.Size([2944, 9])
Edge attributes tensor([[ 1.0000,  1.2215,  0.9728,  ..., -0.0599, -0.9412, -0.6006],
        [ 1.0000, -0.1680,  1.7238,  ...,  2.2040, -0.0476, -0.0179],
        [ 1.0000,  1.3735, -0.7412,  ..., -0.5038,  0.7188, -0.8535],
        ...,
        [ 1.0000,  1.0021,  1.0474,  ...,  0.1085, -1.2818, -0.0682],
        [ 1.0000,  1.3161,  1.1233,  ...,  0.2927,  0.1137, -1.1140],
        [ 1.0000,  1.1878,  0.0311,  ..., -1.1170, -0.0506,  0.1144]])
Edge features shape: torch.Size([2944, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0365,  0.1710],
        [ 0.3439,  0.4322,  0.1992,  ..., -0.3556, -0.0191,  0.3316],
        [ 0.3448,  0.4374,  0.2099,  ..., -0.3705, -0.0429,  0.3160],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5772, -0.4171],
        [ 0.3129,  0.2810, -0.0606,  ...,  0.1193,  0.3478,  0.1930],
        [ 0.3131,  0.2818, -0.0596,  ...,  0.1174,  0.3479,  0.1957]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        ...,
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2944, 96])
Tensor Product Weights tensor([[-0.0299,  0.1032, -0.0064,  ..., -0.0450,  0.0952,  0.1259],
        [ 0.2281,  0.0277, -0.0908,  ...,  0.0472,  0.0807, -0.3518],
        [ 0.2269,  0.0279, -0.0953,  ...,  0.0565,  0.0771, -0.3519],
        ...,
        [ 0.2618, -0.0578, -0.1845,  ...,  0.0555,  0.0161, -0.3029],
        [ 0.2887, -0.0327,  0.1812,  ..., -0.2319,  0.0460, -0.2789],
        [ 0.2888, -0.0324,  0.1795,  ..., -0.2308,  0.0464, -0.2796]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2286,  0.1388,  0.2616,  ..., -0.0778, -0.0421,  0.1395],
        [-0.1647,  0.3153, -0.2272,  ...,  0.0322,  0.1626,  0.0926],
        [-0.2387,  0.1888,  0.0013,  ..., -0.0837,  0.0742, -0.0429],
        ...,
        [-0.0530, -0.0009,  0.1571,  ...,  0.1325,  0.0341,  0.1439],
        [-0.0991,  0.1430,  0.0726,  ..., -0.0913,  0.0672,  0.2687],
        [-0.0780, -0.0587,  0.1027,  ..., -0.1577,  0.1163, -0.1013]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.1044,  0.3683, -0.2153,  ...,  0.0633,  0.1352, -0.0551],
        [-0.0409,  0.3064, -0.2105,  ...,  0.0612,  0.0873, -0.0020],
        [ 0.0331,  0.3679, -0.2226,  ...,  0.1431,  0.0033, -0.0676],
        ...,
        [-0.1784, -0.2050,  0.1904,  ...,  0.0665,  0.2466,  0.1310],
        [-0.1239, -0.1365,  0.0277,  ...,  0.1304, -0.0630, -0.1528],
        [-0.0837, -0.2007,  0.0932,  ..., -0.2938, -0.0608,  0.1063]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2954])
shifts shape: torch.Size([2954, 3])
sender shape: torch.Size([2954])
receiver shape: torch.Size([2954])
Edge attributes shape: torch.Size([2954, 9])
Edge attributes tensor([[ 1.0000,  1.3202,  0.9533,  ..., -0.1020, -0.7264, -0.9001],
        [ 1.0000, -0.1153,  1.7282,  ...,  2.2210,  0.0290, -0.0085],
        [ 1.0000,  1.4426, -0.7643,  ..., -0.4649,  0.5709, -1.1272],
        ...,
        [ 1.0000, -0.1554, -0.0375,  ..., -1.1165, -0.0836,  1.9044],
        [ 1.0000,  0.3204,  0.8859,  ..., -0.2406,  1.6623,  1.2974],
        [ 1.0000, -1.1446, -0.0220,  ..., -1.1175, -0.0369,  0.2447]])
Edge features shape: torch.Size([2954, 8])
Edge features tensor([[ 0.1677, -0.0648, -0.1427,  ..., -0.1571, -0.0357,  0.1709],
        [ 0.3439,  0.4319,  0.1986,  ..., -0.3548, -0.0179,  0.3323],
        [ 0.3449,  0.4375,  0.2103,  ..., -0.3709, -0.0436,  0.3156],
        ...,
        [ 0.3663,  0.5674,  0.5125,  ..., -0.4770, -0.5771, -0.4169],
        [ 0.3127,  0.2798, -0.0622,  ...,  0.1225,  0.3477,  0.1887],
        [ 0.3131,  0.2818, -0.0594,  ...,  0.1172,  0.3479,  0.1959]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        ...,
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2954, 96])
Tensor Product Weights tensor([[-0.0300,  0.1032, -0.0065,  ..., -0.0447,  0.0950,  0.1259],
        [ 0.2281,  0.0277, -0.0906,  ...,  0.0467,  0.0809, -0.3518],
        [ 0.2268,  0.0279, -0.0954,  ...,  0.0567,  0.0770, -0.3519],
        ...,
        [ 0.2618, -0.0577, -0.1844,  ...,  0.0557,  0.0161, -0.3030],
        [ 0.2885, -0.0331,  0.1838,  ..., -0.2337,  0.0452, -0.2776],
        [ 0.2888, -0.0323,  0.1793,  ..., -0.2307,  0.0464, -0.2797]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2373,  0.0999,  0.2448,  ..., -0.0492, -0.0654,  0.0798],
        [-0.1622,  0.2872, -0.2225,  ...,  0.0894,  0.1861,  0.0242],
        [-0.2442,  0.1442,  0.0257,  ..., -0.0674,  0.1084,  0.0997],
        ...,
        [-0.0672, -0.0522,  0.0928,  ..., -0.1766,  0.0201,  0.0872],
        [-0.0762,  0.0945,  0.1251,  ..., -0.0681, -0.1094,  0.0671],
        [-0.0851, -0.0906,  0.0955,  ..., -0.0790,  0.2471,  0.0939]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0717,  0.3818, -0.2573,  ...,  0.0431,  0.1111, -0.1025],
        [-0.0282,  0.2985, -0.1848,  ...,  0.0902,  0.0852,  0.0025],
        [ 0.0816,  0.3124, -0.1791,  ...,  0.1534,  0.0129, -0.0496],
        ...,
        [-0.1436, -0.2304,  0.1670,  ...,  0.2492,  0.0923,  0.2141],
        [-0.0408, -0.1519,  0.0208,  ..., -0.1937, -0.0580,  0.0848],
        [-0.0829, -0.1903,  0.0747,  ...,  0.1389, -0.1440, -0.2438]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2904])
shifts shape: torch.Size([2904, 3])
sender shape: torch.Size([2904])
receiver shape: torch.Size([2904])
Edge attributes shape: torch.Size([2904, 9])
Edge attributes tensor([[ 1.0000e+00,  1.3169e+00,  9.5341e-01,  ..., -1.0175e-01,
         -7.3531e-01, -8.8900e-01],
        [ 1.0000e+00, -1.2892e-01,  1.7272e+00,  ...,  2.2173e+00,
         -2.6626e-02, -1.0637e-02],
        [ 1.0000e+00,  1.4428e+00, -7.7470e-01,  ..., -4.4703e-01,
          5.6407e-01, -1.1384e+00],
        ...,
        [ 1.0000e+00,  1.3021e+00,  2.9718e-02,  ..., -1.1170e+00,
         -4.3804e-02, -2.5301e-01],
        [ 1.0000e+00, -2.0910e-01,  1.7058e+00,  ...,  2.1353e+00,
          4.7442e-01,  1.7328e-03],
        [ 1.0000e+00,  1.3527e+00,  1.0511e+00,  ...,  1.1726e-01,
          3.4705e-01, -1.1389e+00]])
Edge features shape: torch.Size([2904, 8])
Edge features tensor([[ 0.1688, -0.0637, -0.1448,  ..., -0.1561, -0.0414,  0.1717],
        [ 0.3444,  0.4351,  0.2052,  ..., -0.3640, -0.0325,  0.3230],
        [ 0.3450,  0.4381,  0.2114,  ..., -0.3724, -0.0461,  0.3139],
        ...,
        [ 0.3130,  0.2811, -0.0604,  ...,  0.1190,  0.3478,  0.1934],
        [ 0.1138, -0.0906, -0.0417,  ..., -0.0786,  0.1194, -0.0164],
        [ 0.3127,  0.2800, -0.0619,  ...,  0.1219,  0.3477,  0.1894]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        ...,
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2904, 96])
Tensor Product Weights tensor([[-0.0297,  0.1035, -0.0058,  ..., -0.0472,  0.0966,  0.1261],
        [ 0.2273,  0.0278, -0.0934,  ...,  0.0525,  0.0787, -0.3519],
        [ 0.2267,  0.0279, -0.0959,  ...,  0.0577,  0.0766, -0.3519],
        ...,
        [ 0.2887, -0.0326,  0.1809,  ..., -0.2318,  0.0460, -0.2790],
        [-0.0118,  0.0653,  0.0296,  ...,  0.0167, -0.0066,  0.0899],
        [ 0.2886, -0.0330,  0.1834,  ..., -0.2334,  0.0454, -0.2779]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2393,  0.1080,  0.1753,  ..., -0.0843, -0.1019,  0.1469],
        [-0.1606,  0.2967, -0.2087,  ...,  0.0898,  0.1575,  0.0533],
        [-0.2408,  0.1580, -0.0032,  ..., -0.1100,  0.1288,  0.0678],
        ...,
        [-0.0597, -0.0100,  0.1428,  ...,  0.0753,  0.0786,  0.1058],
        [-0.1016,  0.1296,  0.0078,  ..., -0.1189,  0.0381,  0.2512],
        [-0.0796, -0.0672,  0.1014,  ..., -0.1790,  0.1336, -0.1294]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0226,  0.4443, -0.3145,  ...,  0.0949,  0.1058, -0.0429],
        [-0.0238,  0.2990, -0.1932,  ...,  0.0751,  0.0812, -0.0023],
        [ 0.0758,  0.3182, -0.1868,  ...,  0.1543,  0.0240, -0.0425],
        ...,
        [-0.1734, -0.2253,  0.1934,  ...,  0.0652,  0.2652,  0.1391],
        [-0.1102, -0.0787, -0.0273,  ...,  0.1323, -0.0805, -0.1767],
        [-0.0806, -0.1964,  0.0869,  ..., -0.3112, -0.0514,  0.0740]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2942])
shifts shape: torch.Size([2942, 3])
sender shape: torch.Size([2942])
receiver shape: torch.Size([2942])
Edge attributes shape: torch.Size([2942, 9])
Edge attributes tensor([[ 1.0000,  1.3201,  0.9536,  ..., -0.1013, -0.7261, -0.9004],
        [ 1.0000, -0.1178,  1.7280,  ...,  2.2205,  0.0180, -0.0089],
        [ 1.0000,  1.4468, -0.7635,  ..., -0.4662,  0.5610, -1.1420],
        ...,
        [ 1.0000,  1.3105,  0.0451,  ..., -1.1158, -0.0660, -0.2821],
        [ 1.0000, -0.2104,  1.7024,  ...,  2.1222,  0.5273,  0.0086],
        [ 1.0000,  1.3516,  1.0460,  ...,  0.1052,  0.3794, -1.1283]])
Edge features shape: torch.Size([2942, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1426,  ..., -0.1571, -0.0355,  0.1708],
        [ 0.3438,  0.4318,  0.1985,  ..., -0.3547, -0.0177,  0.3325],
        [ 0.3449,  0.4376,  0.2103,  ..., -0.3709, -0.0437,  0.3155],
        ...,
        [ 0.3130,  0.2812, -0.0604,  ...,  0.1190,  0.3478,  0.1935],
        [ 0.1141, -0.0906, -0.0421,  ..., -0.0792,  0.1193, -0.0155],
        [ 0.3127,  0.2800, -0.0620,  ...,  0.1220,  0.3477,  0.1893]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        ...,
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2942, 96])
Tensor Product Weights tensor([[-0.0300,  0.1032, -0.0065,  ..., -0.0446,  0.0950,  0.1259],
        [ 0.2281,  0.0277, -0.0905,  ...,  0.0466,  0.0809, -0.3518],
        [ 0.2268,  0.0279, -0.0954,  ...,  0.0568,  0.0770, -0.3519],
        ...,
        [ 0.2887, -0.0326,  0.1809,  ..., -0.2317,  0.0460, -0.2790],
        [-0.0119,  0.0655,  0.0294,  ...,  0.0166, -0.0063,  0.0901],
        [ 0.2886, -0.0330,  0.1835,  ..., -0.2334,  0.0453, -0.2778]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2374,  0.0996,  0.2441,  ..., -0.0484, -0.0654,  0.0804],
        [-0.1625,  0.2865, -0.2228,  ...,  0.0908,  0.1863,  0.0227],
        [-0.2445,  0.1439,  0.0263,  ..., -0.0671,  0.1102,  0.0995],
        ...,
        [-0.0600, -0.0112,  0.1407,  ...,  0.0712,  0.0813,  0.1045],
        [-0.1012,  0.1189,  0.0067,  ..., -0.1233,  0.0329,  0.2534],
        [-0.0790, -0.0744,  0.0989,  ..., -0.1808,  0.1281, -0.1298]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0699,  0.3828, -0.2588,  ...,  0.0423,  0.1108, -0.1040],
        [-0.0279,  0.2974, -0.1846,  ...,  0.0890,  0.0845,  0.0016],
        [ 0.0815,  0.3123, -0.1794,  ...,  0.1526,  0.0135, -0.0507],
        ...,
        [-0.1725, -0.2258,  0.1929,  ...,  0.0652,  0.2653,  0.1427],
        [-0.1096, -0.0587, -0.0413,  ...,  0.1295, -0.0906, -0.1767],
        [-0.0780, -0.1888,  0.0814,  ..., -0.3180, -0.0564,  0.0649]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2950])
shifts shape: torch.Size([2950, 3])
sender shape: torch.Size([2950])
receiver shape: torch.Size([2950])
Edge attributes shape: torch.Size([2950, 9])
Edge attributes tensor([[ 1.0000,  1.3285,  0.9398,  ..., -0.1306, -0.7196, -0.9123],
        [ 1.0000, -0.1248,  1.7267,  ...,  2.2153, -0.1221, -0.0081],
        [ 1.0000,  1.4631, -0.7743,  ..., -0.4477,  0.5094, -1.2142],
        ...,
        [ 1.0000,  1.3197,  0.0864,  ..., -1.1097, -0.1248, -0.3168],
        [ 1.0000, -0.2269,  1.6934,  ...,  2.0880,  0.6221,  0.0190],
        [ 1.0000,  1.3414,  1.0473,  ...,  0.1082,  0.4359, -1.0943]])
Edge features shape: torch.Size([2950, 8])
Edge features tensor([[ 0.1673, -0.0651, -0.1420,  ..., -0.1573, -0.0339,  0.1705],
        [ 0.3438,  0.4318,  0.1985,  ..., -0.3547, -0.0177,  0.3325],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3708, -0.0435,  0.3157],
        ...,
        [ 0.3130,  0.2814, -0.0601,  ...,  0.1185,  0.3478,  0.1942],
        [ 0.1137, -0.0906, -0.0415,  ..., -0.0781,  0.1194, -0.0170],
        [ 0.3127,  0.2800, -0.0620,  ...,  0.1221,  0.3477,  0.1892]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        ...,
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2950, 96])
Tensor Product Weights tensor([[-0.0300,  0.1031, -0.0066,  ..., -0.0439,  0.0945,  0.1258],
        [ 0.2281,  0.0277, -0.0905,  ...,  0.0466,  0.0809, -0.3518],
        [ 0.2268,  0.0279, -0.0954,  ...,  0.0567,  0.0770, -0.3519],
        ...,
        [ 0.2887, -0.0325,  0.1804,  ..., -0.2314,  0.0461, -0.2792],
        [-0.0117,  0.0652,  0.0297,  ...,  0.0167, -0.0068,  0.0898],
        [ 0.2886, -0.0330,  0.1835,  ..., -0.2335,  0.0453, -0.2778]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2362,  0.1064,  0.2744,  ..., -0.0522, -0.0311,  0.1681],
        [-0.1605,  0.2859, -0.2381,  ...,  0.0908,  0.1717,  0.0233],
        [-0.2438,  0.1623,  0.0212,  ..., -0.0529,  0.0991, -0.0013],
        ...,
        [-0.0580, -0.0174,  0.1377,  ...,  0.0770,  0.0818,  0.1061],
        [-0.1035,  0.1052,  0.0218,  ..., -0.1520,  0.0010,  0.2525],
        [-0.0787, -0.0744,  0.0980,  ..., -0.1857,  0.1298, -0.1249]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0989,  0.3791, -0.2399,  ...,  0.0469,  0.1204, -0.0888],
        [-0.0298,  0.2901, -0.1851,  ...,  0.0937,  0.0778, -0.0038],
        [ 0.0502,  0.3432, -0.2157,  ...,  0.1417,  0.0054, -0.0647],
        ...,
        [-0.1699, -0.2127,  0.1818,  ...,  0.0693,  0.2637,  0.1550],
        [-0.1007, -0.0602, -0.0423,  ...,  0.1349, -0.0900, -0.1777],
        [-0.0811, -0.1841,  0.0759,  ..., -0.3113, -0.0572,  0.0609]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2902])
shifts shape: torch.Size([2902, 3])
sender shape: torch.Size([2902])
receiver shape: torch.Size([2902])
Edge attributes shape: torch.Size([2902, 9])
Edge attributes tensor([[ 1.0000,  1.3207,  0.9457,  ..., -0.1182, -0.7339, -0.8927],
        [ 1.0000, -0.1306,  1.7265,  ...,  2.2146, -0.1041, -0.0096],
        [ 1.0000,  1.4535, -0.7693,  ..., -0.4563,  0.5399, -1.1729],
        ...,
        [ 1.0000, -0.1470, -0.0468,  ..., -1.1156, -0.1042,  1.9072],
        [ 1.0000,  0.3254,  0.8789,  ..., -0.2544,  1.6527,  1.3011],
        [ 1.0000, -1.1383, -0.0317,  ..., -1.1169, -0.0534,  0.2630]])
Edge features shape: torch.Size([2902, 8])
Edge features tensor([[ 0.1674, -0.0650, -0.1421,  ..., -0.1573, -0.0343,  0.1706],
        [ 0.3439,  0.4320,  0.1989,  ..., -0.3552, -0.0185,  0.3320],
        [ 0.3449,  0.4377,  0.2106,  ..., -0.3713, -0.0443,  0.3151],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4170],
        [ 0.3126,  0.2797, -0.0623,  ...,  0.1227,  0.3476,  0.1884],
        [ 0.3131,  0.2818, -0.0595,  ...,  0.1173,  0.3479,  0.1958]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        ...,
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2902, 96])
Tensor Product Weights tensor([[-0.0300,  0.1031, -0.0066,  ..., -0.0440,  0.0946,  0.1258],
        [ 0.2281,  0.0277, -0.0907,  ...,  0.0470,  0.0808, -0.3518],
        [ 0.2268,  0.0279, -0.0956,  ...,  0.0570,  0.0768, -0.3519],
        ...,
        [ 0.2618, -0.0577, -0.1844,  ...,  0.0556,  0.0161, -0.3030],
        [ 0.2885, -0.0331,  0.1840,  ..., -0.2338,  0.0452, -0.2776],
        [ 0.2888, -0.0324,  0.1794,  ..., -0.2308,  0.0464, -0.2796]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2295,  0.1372,  0.2674,  ..., -0.0835, -0.0152,  0.1604],
        [-0.1590,  0.2978, -0.2175,  ...,  0.0861,  0.1478,  0.0584],
        [-0.2399,  0.1820, -0.0060,  ..., -0.0796,  0.0722, -0.0282],
        ...,
        [-0.0674, -0.0524,  0.0916,  ..., -0.1757,  0.0173,  0.0875],
        [-0.0759,  0.0981,  0.1128,  ..., -0.0660, -0.1030,  0.0652],
        [-0.0854, -0.0879,  0.0961,  ..., -0.0809,  0.2443,  0.0981]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.1079,  0.3749, -0.2172,  ...,  0.0698,  0.1274, -0.0546],
        [-0.0221,  0.2976, -0.1928,  ...,  0.0785,  0.0779, -0.0057],
        [ 0.0368,  0.3572, -0.2206,  ...,  0.1477,  0.0033, -0.0488],
        ...,
        [-0.1423, -0.2316,  0.1669,  ...,  0.2510,  0.0918,  0.2143],
        [-0.0498, -0.1554,  0.0230,  ..., -0.1931, -0.0607,  0.0899],
        [-0.0828, -0.1940,  0.0780,  ...,  0.1395, -0.1416, -0.2457]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2910])
shifts shape: torch.Size([2910, 3])
sender shape: torch.Size([2910])
receiver shape: torch.Size([2910])
Edge attributes shape: torch.Size([2910, 9])
Edge attributes tensor([[ 1.0000,  1.3401,  0.9229,  ..., -0.1658, -0.7073, -0.9317],
        [ 1.0000, -0.0772,  1.7303,  ...,  2.2294,  0.0083, -0.0038],
        [ 1.0000,  1.4087, -0.7959,  ..., -0.4098,  0.6352, -1.0343],
        ...,
        [ 1.0000,  1.3041,  0.0482,  ..., -1.1154, -0.0709, -0.2607],
        [ 1.0000, -0.2171,  1.7019,  ...,  2.1202,  0.5224,  0.0061],
        [ 1.0000,  1.3487,  1.0521,  ...,  0.1196,  0.3699, -1.1262]])
Edge features shape: torch.Size([2910, 8])
Edge features tensor([[ 0.1666, -0.0657, -0.1407,  ..., -0.1578, -0.0308,  0.1699],
        [ 0.3439,  0.4324,  0.1997,  ..., -0.3563, -0.0203,  0.3309],
        [ 0.3449,  0.4379,  0.2110,  ..., -0.3719, -0.0453,  0.3144],
        ...,
        [ 0.3130,  0.2814, -0.0601,  ...,  0.1183,  0.3478,  0.1944],
        [ 0.1140, -0.0906, -0.0420,  ..., -0.0791,  0.1193, -0.0157],
        [ 0.3127,  0.2800, -0.0620,  ...,  0.1220,  0.3477,  0.1894]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        ...,
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2910, 96])
Tensor Product Weights tensor([[-0.0301,  0.1029, -0.0069,  ..., -0.0425,  0.0936,  0.1257],
        [ 0.2280,  0.0277, -0.0910,  ...,  0.0477,  0.0805, -0.3518],
        [ 0.2268,  0.0279, -0.0957,  ...,  0.0574,  0.0767, -0.3519],
        ...,
        [ 0.2887, -0.0325,  0.1803,  ..., -0.2313,  0.0462, -0.2792],
        [-0.0119,  0.0655,  0.0294,  ...,  0.0166, -0.0064,  0.0901],
        [ 0.2886, -0.0330,  0.1834,  ..., -0.2334,  0.0454, -0.2778]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2352,  0.1086,  0.2805,  ..., -0.0619, -0.0322,  0.1615],
        [-0.1527,  0.3205, -0.2353,  ...,  0.0468,  0.1783, -0.0159],
        [-0.2406,  0.1685,  0.0151,  ..., -0.0638,  0.0778,  0.0006],
        ...,
        [-0.0597, -0.0105,  0.1419,  ...,  0.0745,  0.0790,  0.1067],
        [-0.1004,  0.1317, -0.0048,  ..., -0.1050,  0.0474,  0.2540],
        [-0.0793, -0.0707,  0.0987,  ..., -0.1805,  0.1302, -0.1278]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.1086,  0.3715, -0.2279,  ...,  0.0543,  0.1250, -0.0719],
        [-0.0405,  0.2915, -0.1734,  ...,  0.1258,  0.0800,  0.0185],
        [ 0.0471,  0.3510, -0.2182,  ...,  0.1467,  0.0021, -0.0581],
        ...,
        [-0.1727, -0.2257,  0.1933,  ...,  0.0644,  0.2645,  0.1424],
        [-0.1186, -0.0737, -0.0330,  ...,  0.1267, -0.0773, -0.1739],
        [-0.0801, -0.1920,  0.0840,  ..., -0.3138, -0.0532,  0.0671]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2958])
shifts shape: torch.Size([2958, 3])
sender shape: torch.Size([2958])
receiver shape: torch.Size([2958])
Edge attributes shape: torch.Size([2958, 9])
Edge attributes tensor([[ 1.0000,  1.3200,  0.9393,  ..., -0.1315, -0.7428, -0.8826],
        [ 1.0000, -0.1080,  1.7286,  ...,  2.2227, -0.0359, -0.0074],
        [ 1.0000,  1.4333, -0.7782,  ..., -0.4410,  0.5858, -1.1066],
        ...,
        [ 1.0000,  1.3258,  0.0729,  ..., -1.1121, -0.1047, -0.3363],
        [ 1.0000, -0.2146,  1.6955,  ...,  2.0961,  0.6158,  0.0213],
        [ 1.0000,  1.3480,  1.0376,  ...,  0.0856,  0.4366, -1.1044]])
Edge features shape: torch.Size([2958, 8])
Edge features tensor([[ 0.1674, -0.0650, -0.1421,  ..., -0.1573, -0.0343,  0.1706],
        [ 0.3439,  0.4319,  0.1986,  ..., -0.3548, -0.0179,  0.3323],
        [ 0.3448,  0.4374,  0.2100,  ..., -0.3705, -0.0430,  0.3160],
        ...,
        [ 0.3130,  0.2812, -0.0603,  ...,  0.1188,  0.3478,  0.1937],
        [ 0.1142, -0.0906, -0.0424,  ..., -0.0798,  0.1193, -0.0148],
        [ 0.3127,  0.2799, -0.0621,  ...,  0.1222,  0.3477,  0.1890]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        ...,
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2958, 96])
Tensor Product Weights tensor([[-0.0300,  0.1031, -0.0066,  ..., -0.0440,  0.0946,  0.1258],
        [ 0.2281,  0.0277, -0.0906,  ...,  0.0467,  0.0809, -0.3518],
        [ 0.2269,  0.0279, -0.0953,  ...,  0.0565,  0.0771, -0.3519],
        ...,
        [ 0.2887, -0.0326,  0.1808,  ..., -0.2316,  0.0461, -0.2790],
        [-0.0120,  0.0656,  0.0293,  ...,  0.0165, -0.0061,  0.0903],
        [ 0.2886, -0.0331,  0.1836,  ..., -0.2336,  0.0453, -0.2777]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2361,  0.1088,  0.2571,  ..., -0.0461, -0.0665,  0.1701],
        [-0.1623,  0.2854, -0.2206,  ...,  0.0915,  0.1874,  0.0234],
        [-0.2456,  0.1540,  0.0336,  ..., -0.0561,  0.1240, -0.0205],
        ...,
        [-0.0604, -0.0132,  0.1380,  ...,  0.0646,  0.0858,  0.1028],
        [-0.1009,  0.1143,  0.0039,  ..., -0.1271,  0.0213,  0.2531],
        [-0.0789, -0.0776,  0.0981,  ..., -0.1844,  0.1281, -0.1308]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0818,  0.3821, -0.2503,  ...,  0.0450,  0.1181, -0.0917],
        [-0.0240,  0.2977, -0.1814,  ...,  0.0921,  0.0848,  0.0012],
        [ 0.0916,  0.3142, -0.1739,  ...,  0.1263,  0.0162, -0.0936],
        ...,
        [-0.1710, -0.2268,  0.1921,  ...,  0.0644,  0.2650,  0.1498],
        [-0.1079, -0.0484, -0.0485,  ...,  0.1268, -0.0909, -0.1801],
        [-0.0779, -0.1846,  0.0769,  ..., -0.3205, -0.0562,  0.0551]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2910])
shifts shape: torch.Size([2910, 3])
sender shape: torch.Size([2910])
receiver shape: torch.Size([2910])
Edge attributes shape: torch.Size([2910, 9])
Edge attributes tensor([[ 1.0000,  1.2150,  0.9702,  ..., -0.0657, -0.9560, -0.5768],
        [ 1.0000, -0.1506,  1.7255,  ...,  2.2107,  0.0083, -0.0146],
        [ 1.0000,  1.3337, -0.7456,  ..., -0.4966,  0.7851, -0.7187],
        ...,
        [ 1.0000,  1.0107,  1.0192,  ...,  0.0434, -1.2755, -0.0528],
        [ 1.0000,  1.3298,  1.1085,  ...,  0.2557,  0.0775, -1.1396],
        [ 1.0000,  1.1820, -0.0046,  ..., -1.1180,  0.0075,  0.1329]])
Edge features shape: torch.Size([2910, 8])
Edge features tensor([[ 0.1677, -0.0648, -0.1427,  ..., -0.1571, -0.0357,  0.1709],
        [ 0.3439,  0.4323,  0.1994,  ..., -0.3559, -0.0197,  0.3312],
        [ 0.3448,  0.4373,  0.2098,  ..., -0.3703, -0.0426,  0.3162],
        ...,
        [ 0.3663,  0.5674,  0.5127,  ..., -0.4769, -0.5772, -0.4172],
        [ 0.3129,  0.2810, -0.0606,  ...,  0.1194,  0.3478,  0.1928],
        [ 0.3132,  0.2819, -0.0593,  ...,  0.1169,  0.3479,  0.1962]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        ...,
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2910, 96])
Tensor Product Weights tensor([[-0.0300,  0.1032, -0.0065,  ..., -0.0447,  0.0950,  0.1259],
        [ 0.2280,  0.0277, -0.0909,  ...,  0.0474,  0.0806, -0.3518],
        [ 0.2269,  0.0279, -0.0953,  ...,  0.0564,  0.0771, -0.3519],
        ...,
        [ 0.2618, -0.0578, -0.1845,  ...,  0.0555,  0.0161, -0.3029],
        [ 0.2887, -0.0327,  0.1813,  ..., -0.2320,  0.0459, -0.2788],
        [ 0.2888, -0.0323,  0.1791,  ..., -0.2306,  0.0465, -0.2798]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2283,  0.1374,  0.2570,  ..., -0.0835, -0.0486,  0.1236],
        [-0.1604,  0.3493, -0.2297,  ..., -0.0151,  0.1485,  0.0402],
        [-0.2384,  0.1894,  0.0015,  ..., -0.0847,  0.0693, -0.0449],
        ...,
        [-0.0532, -0.0013,  0.1562,  ...,  0.1277,  0.0338,  0.1410],
        [-0.0984,  0.1365,  0.0645,  ..., -0.0932,  0.0745,  0.2672],
        [-0.0780, -0.0609,  0.1011,  ..., -0.1581,  0.1200, -0.1047]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.1016,  0.3658, -0.2150,  ...,  0.0652,  0.1359, -0.0499],
        [-0.0447,  0.3063, -0.1838,  ...,  0.1152,  0.0872,  0.0269],
        [ 0.0325,  0.3708, -0.2247,  ...,  0.1413,  0.0031, -0.0700],
        ...,
        [-0.1781, -0.2053,  0.1901,  ...,  0.0703,  0.2496,  0.1260],
        [-0.1242, -0.1273,  0.0158,  ...,  0.1325, -0.0742, -0.1581],
        [-0.0836, -0.1980,  0.0911,  ..., -0.2953, -0.0563,  0.1070]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2904])
shifts shape: torch.Size([2904, 3])
sender shape: torch.Size([2904])
receiver shape: torch.Size([2904])
Edge attributes shape: torch.Size([2904, 9])
Edge attributes tensor([[ 1.0000,  1.3167,  0.9537,  ..., -0.1012, -0.7355, -0.8887],
        [ 1.0000, -0.1290,  1.7272,  ...,  2.2173, -0.0239, -0.0107],
        [ 1.0000,  1.4420, -0.7747,  ..., -0.4471,  0.5663, -1.1353],
        ...,
        [ 1.0000,  1.3047,  0.0332,  ..., -1.1168, -0.0489, -0.2618],
        [ 1.0000, -0.2186,  1.7053,  ...,  2.1331,  0.4634, -0.0022],
        [ 1.0000,  1.3478,  1.0569,  ...,  0.1309,  0.3517, -1.1297]])
Edge features shape: torch.Size([2904, 8])
Edge features tensor([[ 0.1689, -0.0637, -0.1449,  ..., -0.1561, -0.0414,  0.1717],
        [ 0.3444,  0.4351,  0.2052,  ..., -0.3640, -0.0325,  0.3230],
        [ 0.3450,  0.4381,  0.2115,  ..., -0.3725, -0.0463,  0.3137],
        ...,
        [ 0.3130,  0.2812, -0.0603,  ...,  0.1188,  0.3478,  0.1937],
        [ 0.1135, -0.0906, -0.0411,  ..., -0.0775,  0.1194, -0.0179],
        [ 0.3127,  0.2801, -0.0618,  ...,  0.1217,  0.3477,  0.1898]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        ...,
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2904, 96])
Tensor Product Weights tensor([[-0.0297,  0.1035, -0.0058,  ..., -0.0472,  0.0966,  0.1261],
        [ 0.2273,  0.0278, -0.0934,  ...,  0.0525,  0.0787, -0.3519],
        [ 0.2267,  0.0279, -0.0959,  ...,  0.0578,  0.0765, -0.3519],
        ...,
        [ 0.2887, -0.0326,  0.1807,  ..., -0.2316,  0.0461, -0.2791],
        [-0.0115,  0.0650,  0.0299,  ...,  0.0168, -0.0071,  0.0895],
        [ 0.2886, -0.0330,  0.1832,  ..., -0.2332,  0.0454, -0.2780]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2393,  0.1080,  0.1751,  ..., -0.0844, -0.1022,  0.1466],
        [-0.1604,  0.2978, -0.2076,  ...,  0.0890,  0.1579,  0.0535],
        [-0.2409,  0.1581, -0.0031,  ..., -0.1101,  0.1287,  0.0678],
        ...,
        [-0.0576, -0.0157,  0.1409,  ...,  0.0853,  0.0762,  0.1059],
        [-0.1018,  0.1291,  0.0090,  ..., -0.1197,  0.0384,  0.2503],
        [-0.0795, -0.0671,  0.1021,  ..., -0.1783,  0.1340, -0.1286]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0226,  0.4445, -0.3146,  ...,  0.0950,  0.1058, -0.0426],
        [-0.0230,  0.2991, -0.1922,  ...,  0.0764,  0.0815, -0.0012],
        [ 0.0758,  0.3182, -0.1867,  ...,  0.1543,  0.0240, -0.0423],
        ...,
        [-0.1711, -0.2119,  0.1824,  ...,  0.0711,  0.2666,  0.1436],
        [-0.1105, -0.0815, -0.0274,  ...,  0.1342, -0.0808, -0.1791],
        [-0.0802, -0.1964,  0.0869,  ..., -0.3103, -0.0517,  0.0740]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2944])
shifts shape: torch.Size([2944, 3])
sender shape: torch.Size([2944])
receiver shape: torch.Size([2944])
Edge attributes shape: torch.Size([2944, 9])
Edge attributes tensor([[ 1.0000,  1.3206,  0.9534,  ..., -0.1018, -0.7252, -0.9016],
        [ 1.0000, -0.1176,  1.7280,  ...,  2.2205,  0.0176, -0.0089],
        [ 1.0000,  1.4470, -0.7638,  ..., -0.4658,  0.5604, -1.1430],
        ...,
        [ 1.0000, -0.1585, -0.0401,  ..., -1.1162, -0.0893,  1.9030],
        [ 1.0000,  0.3175,  0.8838,  ..., -0.2447,  1.6606,  1.3022],
        [ 1.0000, -1.1471, -0.0243,  ..., -1.1174, -0.0408,  0.2375]])
Edge features shape: torch.Size([2944, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1426,  ..., -0.1571, -0.0356,  0.1708],
        [ 0.3438,  0.4319,  0.1985,  ..., -0.3547, -0.0178,  0.3324],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3708, -0.0435,  0.3156],
        ...,
        [ 0.3663,  0.5674,  0.5125,  ..., -0.4770, -0.5770, -0.4168],
        [ 0.3127,  0.2798, -0.0623,  ...,  0.1225,  0.3477,  0.1886],
        [ 0.3131,  0.2819, -0.0594,  ...,  0.1171,  0.3479,  0.1960]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        ...,
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2944, 96])
Tensor Product Weights tensor([[-0.0300,  0.1032, -0.0065,  ..., -0.0446,  0.0950,  0.1259],
        [ 0.2281,  0.0277, -0.0905,  ...,  0.0467,  0.0809, -0.3518],
        [ 0.2268,  0.0279, -0.0954,  ...,  0.0567,  0.0770, -0.3519],
        ...,
        [ 0.2618, -0.0577, -0.1844,  ...,  0.0557,  0.0161, -0.3030],
        [ 0.2885, -0.0331,  0.1839,  ..., -0.2337,  0.0452, -0.2776],
        [ 0.2888, -0.0323,  0.1793,  ..., -0.2307,  0.0464, -0.2797]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2374,  0.0996,  0.2440,  ..., -0.0485, -0.0654,  0.0807],
        [-0.1623,  0.2873, -0.2222,  ...,  0.0902,  0.1862,  0.0222],
        [-0.2444,  0.1439,  0.0262,  ..., -0.0671,  0.1100,  0.0997],
        ...,
        [-0.0672, -0.0523,  0.0926,  ..., -0.1765,  0.0200,  0.0873],
        [-0.0761,  0.0948,  0.1254,  ..., -0.0675, -0.1096,  0.0668],
        [-0.0851, -0.0906,  0.0955,  ..., -0.0796,  0.2468,  0.0937]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0700,  0.3827, -0.2587,  ...,  0.0426,  0.1108, -0.1037],
        [-0.0273,  0.2974, -0.1838,  ...,  0.0901,  0.0845,  0.0024],
        [ 0.0814,  0.3125, -0.1795,  ...,  0.1529,  0.0134, -0.0504],
        ...,
        [-0.1434, -0.2305,  0.1669,  ...,  0.2487,  0.0921,  0.2149],
        [-0.0409, -0.1518,  0.0211,  ..., -0.1936, -0.0580,  0.0842],
        [-0.0828, -0.1904,  0.0747,  ...,  0.1394, -0.1437, -0.2437]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2904])
shifts shape: torch.Size([2904, 3])
sender shape: torch.Size([2904])
receiver shape: torch.Size([2904])
Edge attributes shape: torch.Size([2904, 9])
Edge attributes tensor([[ 1.0000e+00,  1.3317e+00,  9.3693e-01,  ..., -1.3658e-01,
         -7.1439e-01, -9.1952e-01],
        [ 1.0000e+00, -7.4020e-02,  1.7295e+00,  ...,  2.2263e+00,
          1.2674e-01, -1.4570e-03],
        [ 1.0000e+00,  1.3936e+00, -7.8107e-01,  ..., -4.3595e-01,
          6.7485e-01, -9.6445e-01],
        ...,
        [ 1.0000e+00, -1.3035e-01, -8.2761e-03,  ..., -1.1180e+00,
         -1.8453e-02,  1.9145e+00],
        [ 1.0000e+00,  3.3782e-01,  9.1207e-01,  ..., -1.8798e-01,
          1.6875e+00,  1.2522e+00],
        [ 1.0000e+00, -1.1260e+00, -3.1189e-03,  ..., -1.1180e+00,
         -5.2991e-03,  2.9960e-01]])
Edge features shape: torch.Size([2904, 8])
Edge features tensor([[ 0.1670, -0.0654, -0.1414,  ..., -0.1576, -0.0324,  0.1703],
        [ 0.3439,  0.4323,  0.1995,  ..., -0.3561, -0.0199,  0.3311],
        [ 0.3449,  0.4379,  0.2111,  ..., -0.3720, -0.0454,  0.3143],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4170],
        [ 0.3127,  0.2798, -0.0622,  ...,  0.1224,  0.3477,  0.1887],
        [ 0.3132,  0.2820, -0.0593,  ...,  0.1168,  0.3479,  0.1964]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        ...,
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2904, 96])
Tensor Product Weights tensor([[-0.0301,  0.1030, -0.0068,  ..., -0.0432,  0.0941,  0.1258],
        [ 0.2280,  0.0277, -0.0910,  ...,  0.0475,  0.0806, -0.3518],
        [ 0.2268,  0.0279, -0.0958,  ...,  0.0574,  0.0767, -0.3519],
        ...,
        [ 0.2618, -0.0577, -0.1844,  ...,  0.0556,  0.0161, -0.3030],
        [ 0.2886, -0.0331,  0.1838,  ..., -0.2337,  0.0453, -0.2777],
        [ 0.2888, -0.0323,  0.1790,  ..., -0.2305,  0.0465, -0.2798]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2356,  0.1014,  0.2473,  ..., -0.0560, -0.0663,  0.0691],
        [-0.1547,  0.3213, -0.2182,  ...,  0.0469,  0.1906, -0.0159],
        [-0.2416,  0.1458,  0.0170,  ..., -0.0723,  0.0924,  0.0983],
        ...,
        [-0.0673, -0.0524,  0.0923,  ..., -0.1746,  0.0242,  0.0868],
        [-0.0757,  0.0961,  0.1258,  ..., -0.0695, -0.1116,  0.0719],
        [-0.0852, -0.0907,  0.0956,  ..., -0.0707,  0.2489,  0.0949]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0799,  0.3771, -0.2487,  ...,  0.0483,  0.1155, -0.0896],
        [-0.0375,  0.2972, -0.1702,  ...,  0.1233,  0.0861,  0.0232],
        [ 0.0784,  0.3150, -0.1817,  ...,  0.1613,  0.0063, -0.0391],
        ...,
        [-0.1429, -0.2308,  0.1667,  ...,  0.2515,  0.0970,  0.2096],
        [-0.0418, -0.1518,  0.0222,  ..., -0.1906, -0.0561,  0.0877],
        [-0.0830, -0.1901,  0.0745,  ...,  0.1357, -0.1478, -0.2431]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2952])
shifts shape: torch.Size([2952, 3])
sender shape: torch.Size([2952])
receiver shape: torch.Size([2952])
Edge attributes shape: torch.Size([2952, 9])
Edge attributes tensor([[ 1.0000,  1.3196,  0.9394,  ..., -0.1315, -0.7438, -0.8812],
        [ 1.0000, -0.1073,  1.7287,  ...,  2.2230, -0.0320, -0.0073],
        [ 1.0000,  1.4310, -0.7783,  ..., -0.4409,  0.5915, -1.0981],
        ...,
        [ 1.0000, -0.1954, -0.0702,  ..., -1.1125, -0.1558,  1.8840],
        [ 1.0000,  0.2878,  0.8572,  ..., -0.2966,  1.6348,  1.3553],
        [ 1.0000, -1.1745, -0.0455,  ..., -1.1157, -0.0748,  0.1544]])
Edge features shape: torch.Size([2952, 8])
Edge features tensor([[ 0.1674, -0.0650, -0.1421,  ..., -0.1573, -0.0343,  0.1706],
        [ 0.3439,  0.4319,  0.1986,  ..., -0.3548, -0.0180,  0.3323],
        [ 0.3449,  0.4374,  0.2100,  ..., -0.3706, -0.0431,  0.3159],
        ...,
        [ 0.3663,  0.5674,  0.5126,  ..., -0.4769, -0.5771, -0.4170],
        [ 0.3126,  0.2798, -0.0623,  ...,  0.1227,  0.3476,  0.1884],
        [ 0.3131,  0.2817, -0.0596,  ...,  0.1175,  0.3479,  0.1955]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        ...,
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2952, 96])
Tensor Product Weights tensor([[-0.0300,  0.1031, -0.0066,  ..., -0.0440,  0.0946,  0.1258],
        [ 0.2281,  0.0277, -0.0906,  ...,  0.0468,  0.0809, -0.3518],
        [ 0.2269,  0.0279, -0.0953,  ...,  0.0565,  0.0770, -0.3519],
        ...,
        [ 0.2618, -0.0577, -0.1844,  ...,  0.0556,  0.0161, -0.3030],
        [ 0.2885, -0.0331,  0.1840,  ..., -0.2338,  0.0452, -0.2776],
        [ 0.2888, -0.0324,  0.1796,  ..., -0.2309,  0.0464, -0.2796]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2359,  0.1089,  0.2569,  ..., -0.0461, -0.0667,  0.1700],
        [-0.1621,  0.2865, -0.2190,  ...,  0.0904,  0.1881,  0.0240],
        [-0.2454,  0.1542,  0.0336,  ..., -0.0568,  0.1236, -0.0209],
        ...,
        [-0.0671, -0.0520,  0.0928,  ..., -0.1777,  0.0170,  0.0879],
        [-0.0771,  0.0911,  0.1227,  ..., -0.0655, -0.1041,  0.0632],
        [-0.0849, -0.0902,  0.0954,  ..., -0.0878,  0.2446,  0.0903]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0818,  0.3816, -0.2498,  ...,  0.0451,  0.1183, -0.0909],
        [-0.0232,  0.2982, -0.1805,  ...,  0.0935,  0.0851,  0.0026],
        [ 0.0918,  0.3139, -0.1733,  ...,  0.1267,  0.0162, -0.0931],
        ...,
        [-0.1439, -0.2308,  0.1675,  ...,  0.2454,  0.0879,  0.2211],
        [-0.0383, -0.1538,  0.0196,  ..., -0.1986, -0.0626,  0.0826],
        [-0.0824, -0.1906,  0.0748,  ...,  0.1441, -0.1394, -0.2439]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2930])
shifts shape: torch.Size([2930, 3])
sender shape: torch.Size([2930])
receiver shape: torch.Size([2930])
Edge attributes shape: torch.Size([2930, 9])
Edge attributes tensor([[ 1.0000,  1.2061,  0.9752,  ..., -0.0548, -0.9707, -0.5552],
        [ 1.0000, -0.1553,  1.7251,  ...,  2.2090,  0.0176, -0.0155],
        [ 1.0000,  1.3401, -0.7403,  ..., -0.5053,  0.7742, -0.7356],
        ...,
        [ 1.0000,  1.0144,  1.0313,  ...,  0.0712, -1.2682, -0.0787],
        [ 1.0000,  1.3259,  1.1120,  ...,  0.2645,  0.1060, -1.1312],
        [ 1.0000,  1.1915,  0.0119,  ..., -1.1179, -0.0194,  0.1036]])
Edge features shape: torch.Size([2930, 8])
Edge features tensor([[ 0.1679, -0.0645, -0.1432,  ..., -0.1568, -0.0371,  0.1711],
        [ 0.3439,  0.4321,  0.1991,  ..., -0.3555, -0.0190,  0.3316],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3699, -0.0420,  0.3166],
        ...,
        [ 0.3663,  0.5674,  0.5127,  ..., -0.4769, -0.5772, -0.4172],
        [ 0.3129,  0.2808, -0.0609,  ...,  0.1200,  0.3478,  0.1921],
        [ 0.3131,  0.2816, -0.0598,  ...,  0.1179,  0.3478,  0.1949]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        ...,
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2930, 96])
Tensor Product Weights tensor([[-0.0299,  0.1033, -0.0063,  ..., -0.0453,  0.0954,  0.1260],
        [ 0.2281,  0.0277, -0.0908,  ...,  0.0472,  0.0807, -0.3518],
        [ 0.2269,  0.0279, -0.0951,  ...,  0.0561,  0.0772, -0.3519],
        ...,
        [ 0.2618, -0.0578, -0.1845,  ...,  0.0555,  0.0161, -0.3029],
        [ 0.2887, -0.0327,  0.1817,  ..., -0.2323,  0.0458, -0.2786],
        [ 0.2887, -0.0325,  0.1800,  ..., -0.2311,  0.0463, -0.2794]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2279,  0.1397,  0.2389,  ..., -0.0709, -0.0792,  0.1312],
        [-0.1679,  0.3109, -0.2138,  ...,  0.0372,  0.1705,  0.0943],
        [-0.2415,  0.1744,  0.0087,  ..., -0.0792,  0.1031, -0.0646],
        ...,
        [-0.0554,  0.0082,  0.1614,  ...,  0.1215,  0.0393,  0.1393],
        [-0.0986,  0.1424,  0.0584,  ..., -0.0905,  0.0693,  0.2673],
        [-0.0778, -0.0644,  0.0982,  ..., -0.1571,  0.1183, -0.1059]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.0845,  0.3741, -0.2294,  ...,  0.0611,  0.1299, -0.0597],
        [-0.0379,  0.3101, -0.2066,  ...,  0.0590,  0.0933, -0.0009],
        [ 0.0730,  0.3303, -0.1781,  ...,  0.1292,  0.0121, -0.0923],
        ...,
        [-0.1828, -0.2205,  0.2031,  ...,  0.0573,  0.2429,  0.1250],
        [-0.1210, -0.1269,  0.0232,  ...,  0.1232, -0.0652, -0.1507],
        [-0.0832, -0.1935,  0.0878,  ..., -0.3001, -0.0604,  0.1011]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2952])
shifts shape: torch.Size([2952, 3])
sender shape: torch.Size([2952])
receiver shape: torch.Size([2952])
Edge attributes shape: torch.Size([2952, 9])
Edge attributes tensor([[ 1.0000,  1.2071,  0.9739,  ..., -0.0577, -0.9694, -0.5568],
        [ 1.0000, -0.1547,  1.7251,  ...,  2.2093,  0.0123, -0.0154],
        [ 1.0000,  1.3409, -0.7415,  ..., -0.5033,  0.7731, -0.7395],
        ...,
        [ 1.0000, -0.4281,  1.3967,  ...,  1.0629,  1.6780,  0.4407],
        [ 1.0000, -1.1376,  0.9581,  ..., -0.0918,  1.0979, -0.3268],
        [ 1.0000, -0.6786,  1.5684,  ...,  1.6322,  0.5712, -0.2459]])
Edge features shape: torch.Size([2952, 8])
Edge features tensor([[ 0.1679, -0.0645, -0.1432,  ..., -0.1568, -0.0371,  0.1711],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3554, -0.0188,  0.3318],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3698, -0.0419,  0.3167],
        ...,
        [ 0.0381, -0.0540,  0.0383,  ...,  0.0540, -0.0386,  0.0007],
        [ 0.1023, -0.0905, -0.0224,  ..., -0.0439,  0.1139, -0.0567],
        [ 0.2093, -0.0121, -0.2086,  ..., -0.0362, -0.2051,  0.0481]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        [ 0.2272, -0.6019,  0.8989,  ...,  0.2837,  0.1375,  0.9127],
        ...,
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321],
        [ 0.7670,  0.2199, -0.2533,  ..., -0.3619, -0.2348,  1.0321]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2952, 96])
Tensor Product Weights tensor([[-0.0299,  0.1033, -0.0063,  ..., -0.0453,  0.0954,  0.1260],
        [ 0.2281,  0.0277, -0.0907,  ...,  0.0471,  0.0807, -0.3518],
        [ 0.2269,  0.0279, -0.0951,  ...,  0.0561,  0.0772, -0.3519],
        ...,
        [ 0.0156,  0.0270, -0.0205,  ...,  0.0196,  0.0193,  0.0125],
        [-0.0045,  0.0565,  0.0366,  ...,  0.0192, -0.0187,  0.0788],
        [ 0.0045,  0.0783,  0.0848,  ..., -0.1601,  0.0931,  0.1005]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2279,  0.1398,  0.2391,  ..., -0.0711, -0.0787,  0.1316],
        [-0.1679,  0.3111, -0.2140,  ...,  0.0369,  0.1707,  0.0938],
        [-0.2415,  0.1745,  0.0086,  ..., -0.0789,  0.1032, -0.0646],
        ...,
        [-0.0428,  0.2134, -0.0963,  ..., -0.3637, -0.2155,  0.0726],
        [-0.0753,  0.1797,  0.1624,  ..., -0.2315, -0.1480,  0.0188],
        [-0.0817, -0.0251,  0.1443,  ..., -0.0454, -0.2956, -0.0287]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 8.4635e-02,  3.7397e-01, -2.2922e-01,  ...,  6.1203e-02,
          1.2982e-01, -5.9833e-02],
        [-3.6984e-02,  3.0981e-01, -2.0540e-01,  ...,  6.0034e-02,
          9.3381e-02, -2.3529e-04],
        [ 7.2853e-02,  3.3046e-01, -1.7822e-01,  ...,  1.2937e-01,
          1.1982e-02, -9.2162e-02],
        ...,
        [-1.6555e-01, -2.8295e-01,  2.6216e-01,  ..., -3.1457e-01,
          4.0894e-02,  1.3574e-01],
        [-8.8946e-02, -1.4544e-01,  1.1143e-01,  ...,  1.3732e-01,
          4.4577e-02,  1.0032e-01],
        [-8.6516e-02, -2.1471e-01,  1.0351e-01,  ...,  1.9493e-02,
          1.9085e-01, -2.3918e-01]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
process_conformer_ensemble input shape: torch.Size([16, 110, 32])
Num conformers: 16, Num atoms: 110, Total dim: 32
Scalar dim: 8, Vector dim: 8
mean_pooling:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[-0.2514,  0.2458,  0.2436,  ..., -0.0937,  0.5465, -0.2180],
         [-0.1116,  0.3011,  0.1120,  ...,  0.0082,  0.3564, -0.1057],
         [-0.1887,  0.3036,  0.2066,  ..., -0.0129,  0.5411, -0.1061],
         ...,
         [ 0.0227, -0.2324,  0.1075,  ..., -0.1096,  0.1602, -0.1692],
         [-0.0416, -0.2591,  0.0492,  ..., -0.1367,  0.0275, -0.1318],
         [-0.0697, -0.1864,  0.0504,  ..., -0.1317,  0.0780, -0.1286]],

        [[-0.2514,  0.2458,  0.2436,  ..., -0.0937,  0.5465, -0.2180],
         [-0.1116,  0.3011,  0.1120,  ...,  0.0082,  0.3564, -0.1057],
         [-0.1887,  0.3036,  0.2066,  ..., -0.0129,  0.5411, -0.1061],
         ...,
         [ 0.0227, -0.2324,  0.1075,  ..., -0.1096,  0.1602, -0.1692],
         [-0.0416, -0.2591,  0.0492,  ..., -0.1367,  0.0275, -0.1318],
         [-0.0697, -0.1864,  0.0504,  ..., -0.1317,  0.0780, -0.1286]],

        [[-0.2514,  0.2458,  0.2436,  ..., -0.0937,  0.5465, -0.2180],
         [-0.1116,  0.3011,  0.1120,  ...,  0.0082,  0.3564, -0.1057],
         [-0.1887,  0.3036,  0.2066,  ..., -0.0129,  0.5411, -0.1061],
         ...,
         [ 0.0227, -0.2324,  0.1075,  ..., -0.1096,  0.1602, -0.1692],
         [-0.0416, -0.2591,  0.0492,  ..., -0.1367,  0.0275, -0.1318],
         [-0.0697, -0.1864,  0.0504,  ..., -0.1317,  0.0780, -0.1286]],

        ...,

        [[-0.2514,  0.2458,  0.2436,  ..., -0.0937,  0.5465, -0.2180],
         [-0.1116,  0.3011,  0.1120,  ...,  0.0082,  0.3564, -0.1057],
         [-0.1887,  0.3036,  0.2066,  ..., -0.0129,  0.5411, -0.1061],
         ...,
         [ 0.0227, -0.2324,  0.1075,  ..., -0.1096,  0.1602, -0.1692],
         [-0.0416, -0.2591,  0.0492,  ..., -0.1367,  0.0275, -0.1318],
         [-0.0697, -0.1864,  0.0504,  ..., -0.1317,  0.0780, -0.1286]],

        [[-0.2514,  0.2458,  0.2436,  ..., -0.0937,  0.5465, -0.2180],
         [-0.1116,  0.3011,  0.1120,  ...,  0.0082,  0.3564, -0.1057],
         [-0.1887,  0.3036,  0.2066,  ..., -0.0129,  0.5411, -0.1061],
         ...,
         [ 0.0227, -0.2324,  0.1075,  ..., -0.1096,  0.1602, -0.1692],
         [-0.0416, -0.2591,  0.0492,  ..., -0.1367,  0.0275, -0.1318],
         [-0.0697, -0.1864,  0.0504,  ..., -0.1317,  0.0780, -0.1286]],

        [[-0.2514,  0.2458,  0.2436,  ..., -0.0937,  0.5465, -0.2180],
         [-0.1116,  0.3011,  0.1120,  ...,  0.0082,  0.3564, -0.1057],
         [-0.1887,  0.3036,  0.2066,  ..., -0.0129,  0.5411, -0.1061],
         ...,
         [ 0.0227, -0.2324,  0.1075,  ..., -0.1096,  0.1602, -0.1692],
         [-0.0416, -0.2591,  0.0492,  ..., -0.1367,  0.0275, -0.1318],
         [-0.0697, -0.1864,  0.0504,  ..., -0.1317,  0.0780, -0.1286]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[-0.1090,  0.0321,  0.1023],
          [-0.1392, -0.1120,  0.1088],
          [ 0.1035,  0.0238, -0.0805],
          ...,
          [ 0.1423,  0.0478, -0.1243],
          [ 0.0632,  0.0403, -0.0499],
          [ 0.0507,  0.1098, -0.0465]],

         [[-0.0157, -0.1694, -0.0119],
          [ 0.0369, -0.0856, -0.0354],
          [ 0.1414,  0.1905,  0.0084],
          ...,
          [ 0.0962,  0.1488, -0.0016],
          [-0.0523,  0.0070, -0.0041],
          [-0.0038,  0.0027,  0.0202]],

         [[-0.1455, -0.0091, -0.0039],
          [-0.1953,  0.1169,  0.0128],
          [ 0.1351, -0.0585, -0.0214],
          ...,
          [ 0.1917, -0.0493, -0.0490],
          [ 0.0787, -0.0106, -0.0160],
          [ 0.0960, -0.0698, -0.0406]],

         ...,

         [[-0.1172, -0.0823, -0.1095],
          [ 0.0412, -0.0351,  0.0518],
          [ 0.0688,  0.0693,  0.0591],
          ...,
          [ 0.0437,  0.0472,  0.0275],
          [-0.0181, -0.0263, -0.0388],
          [-0.0055,  0.0034,  0.0016]],

         [[ 0.0096,  0.0366, -0.0021],
          [ 0.0586, -0.0711,  0.0010],
          [-0.0095, -0.0300, -0.0147],
          ...,
          [-0.0232,  0.0014, -0.0028],
          [ 0.0084,  0.0280,  0.0198],
          [ 0.0008,  0.0130,  0.0059]],

         [[ 0.0610,  0.0751,  0.0399],
          [ 0.0160, -0.0779,  0.0277],
          [-0.0489, -0.0510, -0.0381],
          ...,
          [-0.0270, -0.0141, -0.0200],
          [ 0.0161,  0.0136,  0.0086],
          [-0.0040,  0.0027,  0.0052]]],


        [[[-0.1090,  0.0321,  0.1023],
          [-0.1392, -0.1120,  0.1088],
          [ 0.1035,  0.0238, -0.0805],
          ...,
          [ 0.1423,  0.0478, -0.1243],
          [ 0.0632,  0.0403, -0.0499],
          [ 0.0507,  0.1098, -0.0465]],

         [[-0.0157, -0.1694, -0.0119],
          [ 0.0369, -0.0856, -0.0354],
          [ 0.1414,  0.1905,  0.0084],
          ...,
          [ 0.0962,  0.1488, -0.0016],
          [-0.0523,  0.0070, -0.0041],
          [-0.0038,  0.0027,  0.0202]],

         [[-0.1455, -0.0091, -0.0039],
          [-0.1953,  0.1169,  0.0128],
          [ 0.1351, -0.0585, -0.0214],
          ...,
          [ 0.1917, -0.0493, -0.0490],
          [ 0.0787, -0.0106, -0.0160],
          [ 0.0960, -0.0698, -0.0406]],

         ...,

         [[-0.1172, -0.0823, -0.1095],
          [ 0.0412, -0.0351,  0.0518],
          [ 0.0688,  0.0693,  0.0591],
          ...,
          [ 0.0437,  0.0472,  0.0275],
          [-0.0181, -0.0263, -0.0388],
          [-0.0055,  0.0034,  0.0016]],

         [[ 0.0096,  0.0366, -0.0021],
          [ 0.0586, -0.0711,  0.0010],
          [-0.0095, -0.0300, -0.0147],
          ...,
          [-0.0232,  0.0014, -0.0028],
          [ 0.0084,  0.0280,  0.0198],
          [ 0.0008,  0.0130,  0.0059]],

         [[ 0.0610,  0.0751,  0.0399],
          [ 0.0160, -0.0779,  0.0277],
          [-0.0489, -0.0510, -0.0381],
          ...,
          [-0.0270, -0.0141, -0.0200],
          [ 0.0161,  0.0136,  0.0086],
          [-0.0040,  0.0027,  0.0052]]],


        [[[-0.1090,  0.0321,  0.1023],
          [-0.1392, -0.1120,  0.1088],
          [ 0.1035,  0.0238, -0.0805],
          ...,
          [ 0.1423,  0.0478, -0.1243],
          [ 0.0632,  0.0403, -0.0499],
          [ 0.0507,  0.1098, -0.0465]],

         [[-0.0157, -0.1694, -0.0119],
          [ 0.0369, -0.0856, -0.0354],
          [ 0.1414,  0.1905,  0.0084],
          ...,
          [ 0.0962,  0.1488, -0.0016],
          [-0.0523,  0.0070, -0.0041],
          [-0.0038,  0.0027,  0.0202]],

         [[-0.1455, -0.0091, -0.0039],
          [-0.1953,  0.1169,  0.0128],
          [ 0.1351, -0.0585, -0.0214],
          ...,
          [ 0.1917, -0.0493, -0.0490],
          [ 0.0787, -0.0106, -0.0160],
          [ 0.0960, -0.0698, -0.0406]],

         ...,

         [[-0.1172, -0.0823, -0.1095],
          [ 0.0412, -0.0351,  0.0518],
          [ 0.0688,  0.0693,  0.0591],
          ...,
          [ 0.0437,  0.0472,  0.0275],
          [-0.0181, -0.0263, -0.0388],
          [-0.0055,  0.0034,  0.0016]],

         [[ 0.0096,  0.0366, -0.0021],
          [ 0.0586, -0.0711,  0.0010],
          [-0.0095, -0.0300, -0.0147],
          ...,
          [-0.0232,  0.0014, -0.0028],
          [ 0.0084,  0.0280,  0.0198],
          [ 0.0008,  0.0130,  0.0059]],

         [[ 0.0610,  0.0751,  0.0399],
          [ 0.0160, -0.0779,  0.0277],
          [-0.0489, -0.0510, -0.0381],
          ...,
          [-0.0270, -0.0141, -0.0200],
          [ 0.0161,  0.0136,  0.0086],
          [-0.0040,  0.0027,  0.0052]]],


        ...,


        [[[-0.1090,  0.0321,  0.1023],
          [-0.1392, -0.1120,  0.1088],
          [ 0.1035,  0.0238, -0.0805],
          ...,
          [ 0.1423,  0.0478, -0.1243],
          [ 0.0632,  0.0403, -0.0499],
          [ 0.0507,  0.1098, -0.0465]],

         [[-0.0157, -0.1694, -0.0119],
          [ 0.0369, -0.0856, -0.0354],
          [ 0.1414,  0.1905,  0.0084],
          ...,
          [ 0.0962,  0.1488, -0.0016],
          [-0.0523,  0.0070, -0.0041],
          [-0.0038,  0.0027,  0.0202]],

         [[-0.1455, -0.0091, -0.0039],
          [-0.1953,  0.1169,  0.0128],
          [ 0.1351, -0.0585, -0.0214],
          ...,
          [ 0.1917, -0.0493, -0.0490],
          [ 0.0787, -0.0106, -0.0160],
          [ 0.0960, -0.0698, -0.0406]],

         ...,

         [[-0.1172, -0.0823, -0.1095],
          [ 0.0412, -0.0351,  0.0518],
          [ 0.0688,  0.0693,  0.0591],
          ...,
          [ 0.0437,  0.0472,  0.0275],
          [-0.0181, -0.0263, -0.0388],
          [-0.0055,  0.0034,  0.0016]],

         [[ 0.0096,  0.0366, -0.0021],
          [ 0.0586, -0.0711,  0.0010],
          [-0.0095, -0.0300, -0.0147],
          ...,
          [-0.0232,  0.0014, -0.0028],
          [ 0.0084,  0.0280,  0.0198],
          [ 0.0008,  0.0130,  0.0059]],

         [[ 0.0610,  0.0751,  0.0399],
          [ 0.0160, -0.0779,  0.0277],
          [-0.0489, -0.0510, -0.0381],
          ...,
          [-0.0270, -0.0141, -0.0200],
          [ 0.0161,  0.0136,  0.0086],
          [-0.0040,  0.0027,  0.0052]]],


        [[[-0.1090,  0.0321,  0.1023],
          [-0.1392, -0.1120,  0.1088],
          [ 0.1035,  0.0238, -0.0805],
          ...,
          [ 0.1423,  0.0478, -0.1243],
          [ 0.0632,  0.0403, -0.0499],
          [ 0.0507,  0.1098, -0.0465]],

         [[-0.0157, -0.1694, -0.0119],
          [ 0.0369, -0.0856, -0.0354],
          [ 0.1414,  0.1905,  0.0084],
          ...,
          [ 0.0962,  0.1488, -0.0016],
          [-0.0523,  0.0070, -0.0041],
          [-0.0038,  0.0027,  0.0202]],

         [[-0.1455, -0.0091, -0.0039],
          [-0.1953,  0.1169,  0.0128],
          [ 0.1351, -0.0585, -0.0214],
          ...,
          [ 0.1917, -0.0493, -0.0490],
          [ 0.0787, -0.0106, -0.0160],
          [ 0.0960, -0.0698, -0.0406]],

         ...,

         [[-0.1172, -0.0823, -0.1095],
          [ 0.0412, -0.0351,  0.0518],
          [ 0.0688,  0.0693,  0.0591],
          ...,
          [ 0.0437,  0.0472,  0.0275],
          [-0.0181, -0.0263, -0.0388],
          [-0.0055,  0.0034,  0.0016]],

         [[ 0.0096,  0.0366, -0.0021],
          [ 0.0586, -0.0711,  0.0010],
          [-0.0095, -0.0300, -0.0147],
          ...,
          [-0.0232,  0.0014, -0.0028],
          [ 0.0084,  0.0280,  0.0198],
          [ 0.0008,  0.0130,  0.0059]],

         [[ 0.0610,  0.0751,  0.0399],
          [ 0.0160, -0.0779,  0.0277],
          [-0.0489, -0.0510, -0.0381],
          ...,
          [-0.0270, -0.0141, -0.0200],
          [ 0.0161,  0.0136,  0.0086],
          [-0.0040,  0.0027,  0.0052]]],


        [[[-0.1090,  0.0321,  0.1023],
          [-0.1392, -0.1120,  0.1088],
          [ 0.1035,  0.0238, -0.0805],
          ...,
          [ 0.1423,  0.0478, -0.1243],
          [ 0.0632,  0.0403, -0.0499],
          [ 0.0507,  0.1098, -0.0465]],

         [[-0.0157, -0.1694, -0.0119],
          [ 0.0369, -0.0856, -0.0354],
          [ 0.1414,  0.1905,  0.0084],
          ...,
          [ 0.0962,  0.1488, -0.0016],
          [-0.0523,  0.0070, -0.0041],
          [-0.0038,  0.0027,  0.0202]],

         [[-0.1455, -0.0091, -0.0039],
          [-0.1953,  0.1169,  0.0128],
          [ 0.1351, -0.0585, -0.0214],
          ...,
          [ 0.1917, -0.0493, -0.0490],
          [ 0.0787, -0.0106, -0.0160],
          [ 0.0960, -0.0698, -0.0406]],

         ...,

         [[-0.1172, -0.0823, -0.1095],
          [ 0.0412, -0.0351,  0.0518],
          [ 0.0688,  0.0693,  0.0591],
          ...,
          [ 0.0437,  0.0472,  0.0275],
          [-0.0181, -0.0263, -0.0388],
          [-0.0055,  0.0034,  0.0016]],

         [[ 0.0096,  0.0366, -0.0021],
          [ 0.0586, -0.0711,  0.0010],
          [-0.0095, -0.0300, -0.0147],
          ...,
          [-0.0232,  0.0014, -0.0028],
          [ 0.0084,  0.0280,  0.0198],
          [ 0.0008,  0.0130,  0.0059]],

         [[ 0.0610,  0.0751,  0.0399],
          [ 0.0160, -0.0779,  0.0277],
          [-0.0489, -0.0510, -0.0381],
          ...,
          [-0.0270, -0.0141, -0.0200],
          [ 0.0161,  0.0136,  0.0086],
          [-0.0040,  0.0027,  0.0052]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[-0.2514,  0.2458,  0.2436,  0.1872, -0.0733, -0.0937,  0.5465, -0.2180],
        [-0.1116,  0.3011,  0.1120,  0.0850, -0.1303,  0.0082,  0.3564, -0.1057],
        [-0.1887,  0.3036,  0.2066,  0.1444, -0.0825, -0.0129,  0.5411, -0.1061],
        [-0.1038,  0.3596,  0.0709,  0.1498, -0.1838,  0.0276,  0.2694, -0.0491],
        [-0.2033,  0.5318,  0.1524,  0.2269, -0.2377,  0.0116,  0.5548, -0.0096]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[-0.1090,  0.0321,  0.1023],
         [-0.1392, -0.1120,  0.1088],
         [ 0.1035,  0.0238, -0.0805],
         [ 0.0280,  0.0646, -0.0273],
         [ 0.2218, -0.0021, -0.1858],
         [ 0.1423,  0.0478, -0.1243],
         [ 0.0632,  0.0403, -0.0499],
         [ 0.0507,  0.1098, -0.0465]],

        [[-0.0157, -0.1694, -0.0119],
         [ 0.0369, -0.0856, -0.0354],
         [ 0.1414,  0.1905,  0.0084],
         [ 0.0756, -0.0087, -0.0359],
         [ 0.0516,  0.2761, -0.0050],
         [ 0.0962,  0.1488, -0.0016],
         [-0.0523,  0.0070, -0.0041],
         [-0.0038,  0.0027,  0.0202]],

        [[-0.1455, -0.0091, -0.0039],
         [-0.1953,  0.1169,  0.0128],
         [ 0.1351, -0.0585, -0.0214],
         [ 0.0474,  0.0074, -0.0761],
         [ 0.2742, -0.0256, -0.0015],
         [ 0.1917, -0.0493, -0.0490],
         [ 0.0787, -0.0106, -0.0160],
         [ 0.0960, -0.0698, -0.0406]],

        [[ 0.1421, -0.0643,  0.0490],
         [ 0.1377, -0.1544,  0.0493],
         [-0.0849, -0.1373, -0.0461],
         [ 0.0563, -0.4150,  0.0530],
         [-0.1948,  0.0151, -0.1047],
         [-0.0805, -0.0687, -0.0428],
         [-0.0825,  0.0089,  0.0348],
         [-0.0149, -0.1034, -0.0025]],

        [[ 0.0248, -0.0436,  0.1052],
         [ 0.0872, -0.0741,  0.0658],
         [-0.0223,  0.1229, -0.0562],
         [-0.0017,  0.0571,  0.0151],
         [-0.1084,  0.0680, -0.1472],
         [-0.0159,  0.1459, -0.0730],
         [-0.0622, -0.0044, -0.0340],
         [-0.0265,  0.0558, -0.0114]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
deep_sets:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[-0.0432, -0.1710, -0.0671,  ..., -0.0712, -0.0164,  0.1658],
         [-0.0430, -0.1710, -0.0672,  ..., -0.0714, -0.0163,  0.1660],
         [-0.0430, -0.1710, -0.0672,  ..., -0.0714, -0.0167,  0.1661],
         ...,
         [-0.0438, -0.1708, -0.0668,  ..., -0.0706, -0.0130,  0.1650],
         [-0.0441, -0.1707, -0.0667,  ..., -0.0701, -0.0131,  0.1651],
         [-0.0439, -0.1707, -0.0669,  ..., -0.0702, -0.0137,  0.1652]],

        [[-0.0432, -0.1710, -0.0671,  ..., -0.0712, -0.0164,  0.1658],
         [-0.0430, -0.1710, -0.0672,  ..., -0.0714, -0.0163,  0.1660],
         [-0.0430, -0.1710, -0.0672,  ..., -0.0714, -0.0167,  0.1661],
         ...,
         [-0.0438, -0.1708, -0.0668,  ..., -0.0706, -0.0130,  0.1650],
         [-0.0441, -0.1707, -0.0667,  ..., -0.0701, -0.0131,  0.1651],
         [-0.0439, -0.1707, -0.0669,  ..., -0.0702, -0.0137,  0.1652]],

        [[-0.0432, -0.1710, -0.0671,  ..., -0.0712, -0.0164,  0.1658],
         [-0.0430, -0.1710, -0.0672,  ..., -0.0714, -0.0163,  0.1660],
         [-0.0430, -0.1710, -0.0672,  ..., -0.0714, -0.0167,  0.1661],
         ...,
         [-0.0438, -0.1708, -0.0668,  ..., -0.0706, -0.0130,  0.1650],
         [-0.0441, -0.1707, -0.0667,  ..., -0.0701, -0.0131,  0.1651],
         [-0.0439, -0.1707, -0.0669,  ..., -0.0702, -0.0137,  0.1652]],

        ...,

        [[-0.0432, -0.1710, -0.0671,  ..., -0.0712, -0.0164,  0.1658],
         [-0.0430, -0.1710, -0.0672,  ..., -0.0714, -0.0163,  0.1660],
         [-0.0430, -0.1710, -0.0672,  ..., -0.0714, -0.0167,  0.1661],
         ...,
         [-0.0438, -0.1708, -0.0668,  ..., -0.0706, -0.0130,  0.1650],
         [-0.0441, -0.1707, -0.0667,  ..., -0.0701, -0.0131,  0.1651],
         [-0.0439, -0.1707, -0.0669,  ..., -0.0702, -0.0137,  0.1652]],

        [[-0.0432, -0.1710, -0.0671,  ..., -0.0712, -0.0164,  0.1658],
         [-0.0430, -0.1710, -0.0672,  ..., -0.0714, -0.0163,  0.1660],
         [-0.0430, -0.1710, -0.0672,  ..., -0.0714, -0.0167,  0.1661],
         ...,
         [-0.0438, -0.1708, -0.0668,  ..., -0.0706, -0.0130,  0.1650],
         [-0.0441, -0.1707, -0.0667,  ..., -0.0701, -0.0131,  0.1651],
         [-0.0439, -0.1707, -0.0669,  ..., -0.0702, -0.0137,  0.1652]],

        [[-0.0432, -0.1710, -0.0671,  ..., -0.0712, -0.0164,  0.1658],
         [-0.0430, -0.1710, -0.0672,  ..., -0.0714, -0.0163,  0.1660],
         [-0.0430, -0.1710, -0.0672,  ..., -0.0714, -0.0167,  0.1661],
         ...,
         [-0.0438, -0.1708, -0.0668,  ..., -0.0706, -0.0130,  0.1650],
         [-0.0441, -0.1707, -0.0667,  ..., -0.0701, -0.0131,  0.1651],
         [-0.0439, -0.1707, -0.0669,  ..., -0.0702, -0.0137,  0.1652]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[-0.0534,  0.0907, -0.0212],
          [ 0.1297,  0.0159, -0.0688],
          [ 0.0685,  0.0910,  0.0136],
          ...,
          [-0.0102,  0.0353, -0.0344],
          [-0.0755, -0.0435,  0.0091],
          [ 0.1059, -0.0976, -0.0753]],

         [[-0.0521,  0.0902, -0.0216],
          [ 0.1286,  0.0156, -0.0693],
          [ 0.0690,  0.0909,  0.0135],
          ...,
          [-0.0098,  0.0354, -0.0351],
          [-0.0744, -0.0442,  0.0096],
          [ 0.1055, -0.0968, -0.0753]],

         [[-0.0532,  0.0902, -0.0214],
          [ 0.1290,  0.0156, -0.0692],
          [ 0.0676,  0.0914,  0.0137],
          ...,
          [-0.0105,  0.0349, -0.0345],
          [-0.0765, -0.0437,  0.0090],
          [ 0.1061, -0.0978, -0.0753]],

         ...,

         [[-0.0522,  0.0904, -0.0221],
          [ 0.1285,  0.0156, -0.0690],
          [ 0.0676,  0.0912,  0.0124],
          ...,
          [-0.0105,  0.0348, -0.0358],
          [-0.0755, -0.0440,  0.0087],
          [ 0.1053, -0.0970, -0.0751]],

         [[-0.0523,  0.0906, -0.0222],
          [ 0.1283,  0.0158, -0.0692],
          [ 0.0680,  0.0912,  0.0124],
          ...,
          [-0.0110,  0.0342, -0.0360],
          [-0.0754, -0.0444,  0.0081],
          [ 0.1054, -0.0972, -0.0757]],

         [[-0.0523,  0.0909, -0.0220],
          [ 0.1286,  0.0157, -0.0693],
          [ 0.0682,  0.0910,  0.0128],
          ...,
          [-0.0109,  0.0342, -0.0357],
          [-0.0754, -0.0446,  0.0081],
          [ 0.1056, -0.0972, -0.0758]]],


        [[[-0.0534,  0.0907, -0.0212],
          [ 0.1297,  0.0159, -0.0688],
          [ 0.0685,  0.0910,  0.0136],
          ...,
          [-0.0102,  0.0353, -0.0344],
          [-0.0755, -0.0435,  0.0091],
          [ 0.1059, -0.0976, -0.0753]],

         [[-0.0521,  0.0902, -0.0216],
          [ 0.1286,  0.0156, -0.0693],
          [ 0.0690,  0.0909,  0.0135],
          ...,
          [-0.0098,  0.0354, -0.0351],
          [-0.0744, -0.0442,  0.0096],
          [ 0.1055, -0.0968, -0.0753]],

         [[-0.0532,  0.0902, -0.0214],
          [ 0.1290,  0.0156, -0.0692],
          [ 0.0676,  0.0914,  0.0137],
          ...,
          [-0.0105,  0.0349, -0.0345],
          [-0.0765, -0.0437,  0.0090],
          [ 0.1061, -0.0978, -0.0753]],

         ...,

         [[-0.0522,  0.0904, -0.0221],
          [ 0.1285,  0.0156, -0.0690],
          [ 0.0676,  0.0912,  0.0124],
          ...,
          [-0.0105,  0.0348, -0.0358],
          [-0.0755, -0.0440,  0.0087],
          [ 0.1053, -0.0970, -0.0751]],

         [[-0.0523,  0.0906, -0.0222],
          [ 0.1283,  0.0158, -0.0692],
          [ 0.0680,  0.0912,  0.0124],
          ...,
          [-0.0110,  0.0342, -0.0360],
          [-0.0754, -0.0444,  0.0081],
          [ 0.1054, -0.0972, -0.0757]],

         [[-0.0523,  0.0909, -0.0220],
          [ 0.1286,  0.0157, -0.0693],
          [ 0.0682,  0.0910,  0.0128],
          ...,
          [-0.0109,  0.0342, -0.0357],
          [-0.0754, -0.0446,  0.0081],
          [ 0.1056, -0.0972, -0.0758]]],


        [[[-0.0534,  0.0907, -0.0212],
          [ 0.1297,  0.0159, -0.0688],
          [ 0.0685,  0.0910,  0.0136],
          ...,
          [-0.0102,  0.0353, -0.0344],
          [-0.0755, -0.0435,  0.0091],
          [ 0.1059, -0.0976, -0.0753]],

         [[-0.0521,  0.0902, -0.0216],
          [ 0.1286,  0.0156, -0.0693],
          [ 0.0690,  0.0909,  0.0135],
          ...,
          [-0.0098,  0.0354, -0.0351],
          [-0.0744, -0.0442,  0.0096],
          [ 0.1055, -0.0968, -0.0753]],

         [[-0.0532,  0.0902, -0.0214],
          [ 0.1290,  0.0156, -0.0692],
          [ 0.0676,  0.0914,  0.0137],
          ...,
          [-0.0105,  0.0349, -0.0345],
          [-0.0765, -0.0437,  0.0090],
          [ 0.1061, -0.0978, -0.0753]],

         ...,

         [[-0.0522,  0.0904, -0.0221],
          [ 0.1285,  0.0156, -0.0690],
          [ 0.0676,  0.0912,  0.0124],
          ...,
          [-0.0105,  0.0348, -0.0358],
          [-0.0755, -0.0440,  0.0087],
          [ 0.1053, -0.0970, -0.0751]],

         [[-0.0523,  0.0906, -0.0222],
          [ 0.1283,  0.0158, -0.0692],
          [ 0.0680,  0.0912,  0.0124],
          ...,
          [-0.0110,  0.0342, -0.0360],
          [-0.0754, -0.0444,  0.0081],
          [ 0.1054, -0.0972, -0.0757]],

         [[-0.0523,  0.0909, -0.0220],
          [ 0.1286,  0.0157, -0.0693],
          [ 0.0682,  0.0910,  0.0128],
          ...,
          [-0.0109,  0.0342, -0.0357],
          [-0.0754, -0.0446,  0.0081],
          [ 0.1056, -0.0972, -0.0758]]],


        ...,


        [[[-0.0534,  0.0907, -0.0212],
          [ 0.1297,  0.0159, -0.0688],
          [ 0.0685,  0.0910,  0.0136],
          ...,
          [-0.0102,  0.0353, -0.0344],
          [-0.0755, -0.0435,  0.0091],
          [ 0.1059, -0.0976, -0.0753]],

         [[-0.0521,  0.0902, -0.0216],
          [ 0.1286,  0.0156, -0.0693],
          [ 0.0690,  0.0909,  0.0135],
          ...,
          [-0.0098,  0.0354, -0.0351],
          [-0.0744, -0.0442,  0.0096],
          [ 0.1055, -0.0968, -0.0753]],

         [[-0.0532,  0.0902, -0.0214],
          [ 0.1290,  0.0156, -0.0692],
          [ 0.0676,  0.0914,  0.0137],
          ...,
          [-0.0105,  0.0349, -0.0345],
          [-0.0765, -0.0437,  0.0090],
          [ 0.1061, -0.0978, -0.0753]],

         ...,

         [[-0.0522,  0.0904, -0.0221],
          [ 0.1285,  0.0156, -0.0690],
          [ 0.0676,  0.0912,  0.0124],
          ...,
          [-0.0105,  0.0348, -0.0358],
          [-0.0755, -0.0440,  0.0087],
          [ 0.1053, -0.0970, -0.0751]],

         [[-0.0523,  0.0906, -0.0222],
          [ 0.1283,  0.0158, -0.0692],
          [ 0.0680,  0.0912,  0.0124],
          ...,
          [-0.0110,  0.0342, -0.0360],
          [-0.0754, -0.0444,  0.0081],
          [ 0.1054, -0.0972, -0.0757]],

         [[-0.0523,  0.0909, -0.0220],
          [ 0.1286,  0.0157, -0.0693],
          [ 0.0682,  0.0910,  0.0128],
          ...,
          [-0.0109,  0.0342, -0.0357],
          [-0.0754, -0.0446,  0.0081],
          [ 0.1056, -0.0972, -0.0758]]],


        [[[-0.0534,  0.0907, -0.0212],
          [ 0.1297,  0.0159, -0.0688],
          [ 0.0685,  0.0910,  0.0136],
          ...,
          [-0.0102,  0.0353, -0.0344],
          [-0.0755, -0.0435,  0.0091],
          [ 0.1059, -0.0976, -0.0753]],

         [[-0.0521,  0.0902, -0.0216],
          [ 0.1286,  0.0156, -0.0693],
          [ 0.0690,  0.0909,  0.0135],
          ...,
          [-0.0098,  0.0354, -0.0351],
          [-0.0744, -0.0442,  0.0096],
          [ 0.1055, -0.0968, -0.0753]],

         [[-0.0532,  0.0902, -0.0214],
          [ 0.1290,  0.0156, -0.0692],
          [ 0.0676,  0.0914,  0.0137],
          ...,
          [-0.0105,  0.0349, -0.0345],
          [-0.0765, -0.0437,  0.0090],
          [ 0.1061, -0.0978, -0.0753]],

         ...,

         [[-0.0522,  0.0904, -0.0221],
          [ 0.1285,  0.0156, -0.0690],
          [ 0.0676,  0.0912,  0.0124],
          ...,
          [-0.0105,  0.0348, -0.0358],
          [-0.0755, -0.0440,  0.0087],
          [ 0.1053, -0.0970, -0.0751]],

         [[-0.0523,  0.0906, -0.0222],
          [ 0.1283,  0.0158, -0.0692],
          [ 0.0680,  0.0912,  0.0124],
          ...,
          [-0.0110,  0.0342, -0.0360],
          [-0.0754, -0.0444,  0.0081],
          [ 0.1054, -0.0972, -0.0757]],

         [[-0.0523,  0.0909, -0.0220],
          [ 0.1286,  0.0157, -0.0693],
          [ 0.0682,  0.0910,  0.0128],
          ...,
          [-0.0109,  0.0342, -0.0357],
          [-0.0754, -0.0446,  0.0081],
          [ 0.1056, -0.0972, -0.0758]]],


        [[[-0.0534,  0.0907, -0.0212],
          [ 0.1297,  0.0159, -0.0688],
          [ 0.0685,  0.0910,  0.0136],
          ...,
          [-0.0102,  0.0353, -0.0344],
          [-0.0755, -0.0435,  0.0091],
          [ 0.1059, -0.0976, -0.0753]],

         [[-0.0521,  0.0902, -0.0216],
          [ 0.1286,  0.0156, -0.0693],
          [ 0.0690,  0.0909,  0.0135],
          ...,
          [-0.0098,  0.0354, -0.0351],
          [-0.0744, -0.0442,  0.0096],
          [ 0.1055, -0.0968, -0.0753]],

         [[-0.0532,  0.0902, -0.0214],
          [ 0.1290,  0.0156, -0.0692],
          [ 0.0676,  0.0914,  0.0137],
          ...,
          [-0.0105,  0.0349, -0.0345],
          [-0.0765, -0.0437,  0.0090],
          [ 0.1061, -0.0978, -0.0753]],

         ...,

         [[-0.0522,  0.0904, -0.0221],
          [ 0.1285,  0.0156, -0.0690],
          [ 0.0676,  0.0912,  0.0124],
          ...,
          [-0.0105,  0.0348, -0.0358],
          [-0.0755, -0.0440,  0.0087],
          [ 0.1053, -0.0970, -0.0751]],

         [[-0.0523,  0.0906, -0.0222],
          [ 0.1283,  0.0158, -0.0692],
          [ 0.0680,  0.0912,  0.0124],
          ...,
          [-0.0110,  0.0342, -0.0360],
          [-0.0754, -0.0444,  0.0081],
          [ 0.1054, -0.0972, -0.0757]],

         [[-0.0523,  0.0909, -0.0220],
          [ 0.1286,  0.0157, -0.0693],
          [ 0.0682,  0.0910,  0.0128],
          ...,
          [-0.0109,  0.0342, -0.0357],
          [-0.0754, -0.0446,  0.0081],
          [ 0.1056, -0.0972, -0.0758]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[-0.0432, -0.1710, -0.0671, -0.1021,  0.0719, -0.0712, -0.0164,  0.1658],
        [-0.0430, -0.1710, -0.0672, -0.1022,  0.0713, -0.0714, -0.0163,  0.1660],
        [-0.0430, -0.1710, -0.0672, -0.1021,  0.0712, -0.0714, -0.0167,  0.1661],
        [-0.0429, -0.1710, -0.0673, -0.1021,  0.0712, -0.0713, -0.0167,  0.1660],
        [-0.0425, -0.1712, -0.0673, -0.1016,  0.0695, -0.0719, -0.0183,  0.1663]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[-0.0534,  0.0907, -0.0212],
         [ 0.1297,  0.0159, -0.0688],
         [ 0.0685,  0.0910,  0.0136],
         [ 0.1019,  0.0784, -0.0224],
         [ 0.0675,  0.1138,  0.1063],
         [-0.0102,  0.0353, -0.0344],
         [-0.0755, -0.0435,  0.0091],
         [ 0.1059, -0.0976, -0.0753]],

        [[-0.0521,  0.0902, -0.0216],
         [ 0.1286,  0.0156, -0.0693],
         [ 0.0690,  0.0909,  0.0135],
         [ 0.1016,  0.0786, -0.0228],
         [ 0.0674,  0.1137,  0.1071],
         [-0.0098,  0.0354, -0.0351],
         [-0.0744, -0.0442,  0.0096],
         [ 0.1055, -0.0968, -0.0753]],

        [[-0.0532,  0.0902, -0.0214],
         [ 0.1290,  0.0156, -0.0692],
         [ 0.0676,  0.0914,  0.0137],
         [ 0.1021,  0.0782, -0.0218],
         [ 0.0676,  0.1131,  0.1060],
         [-0.0105,  0.0349, -0.0345],
         [-0.0765, -0.0437,  0.0090],
         [ 0.1061, -0.0978, -0.0753]],

        [[-0.0512,  0.0911, -0.0221],
         [ 0.1285,  0.0148, -0.0692],
         [ 0.0683,  0.0910,  0.0134],
         [ 0.1022,  0.0792, -0.0241],
         [ 0.0690,  0.1128,  0.1072],
         [-0.0107,  0.0335, -0.0361],
         [-0.0746, -0.0456,  0.0076],
         [ 0.1058, -0.0977, -0.0762]],

        [[-0.0525,  0.0905, -0.0216],
         [ 0.1290,  0.0155, -0.0692],
         [ 0.0692,  0.0909,  0.0133],
         [ 0.1017,  0.0790, -0.0232],
         [ 0.0678,  0.1142,  0.1070],
         [-0.0102,  0.0351, -0.0349],
         [-0.0742, -0.0438,  0.0096],
         [ 0.1058, -0.0969, -0.0758]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
self_attention:
  Scalar shape: torch.Size([16, 110, 8])
  Vector shape: torch.Size([16, 110, 8, 3])
  Scalar: tensor([[[ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         ...,
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234]],

        [[ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         ...,
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234]],

        [[ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         ...,
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234]],

        ...,

        [[ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         ...,
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234]],

        [[ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         ...,
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234]],

        [[ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0989,  0.1090,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         ...,
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234],
         [ 0.0990,  0.1089,  0.1662,  ..., -0.1043, -0.1624,  0.0234]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         ...,

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]]],


        [[[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         ...,

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]]],


        [[[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         ...,

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]]],


        ...,


        [[[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         ...,

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]]],


        [[[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         ...,

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]]],


        [[[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1436, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         ...,

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]],

         [[-0.0750,  0.0097,  0.1941],
          [ 0.0053, -0.0481, -0.0872],
          [ 0.2068, -0.0145, -0.0349],
          ...,
          [ 0.1395, -0.1488, -0.0494],
          [ 0.0055,  0.1435, -0.0069],
          [ 0.1200,  0.0389,  0.0469]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[ 0.0989,  0.1090,  0.1662, -0.0536,  0.2118, -0.1043, -0.1624,  0.0234],
        [ 0.0989,  0.1090,  0.1662, -0.0536,  0.2118, -0.1043, -0.1624,  0.0234],
        [ 0.0989,  0.1090,  0.1662, -0.0536,  0.2118, -0.1043, -0.1624,  0.0234],
        [ 0.0989,  0.1090,  0.1662, -0.0536,  0.2118, -0.1043, -0.1624,  0.0234],
        [ 0.0988,  0.1090,  0.1662, -0.0536,  0.2118, -0.1043, -0.1624,  0.0234]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[-0.0750,  0.0097,  0.1941],
         [ 0.0053, -0.0481, -0.0872],
         [ 0.2068, -0.0145, -0.0349],
         [ 0.2450,  0.0651,  0.1345],
         [-0.0228,  0.0029, -0.1068],
         [ 0.1395, -0.1488, -0.0494],
         [ 0.0055,  0.1436, -0.0069],
         [ 0.1200,  0.0389,  0.0469]],

        [[-0.0750,  0.0097,  0.1941],
         [ 0.0053, -0.0481, -0.0872],
         [ 0.2068, -0.0145, -0.0349],
         [ 0.2449,  0.0651,  0.1345],
         [-0.0228,  0.0029, -0.1068],
         [ 0.1395, -0.1488, -0.0494],
         [ 0.0055,  0.1436, -0.0069],
         [ 0.1200,  0.0389,  0.0469]],

        [[-0.0750,  0.0097,  0.1941],
         [ 0.0053, -0.0481, -0.0872],
         [ 0.2068, -0.0145, -0.0349],
         [ 0.2450,  0.0651,  0.1345],
         [-0.0228,  0.0029, -0.1068],
         [ 0.1395, -0.1488, -0.0494],
         [ 0.0055,  0.1436, -0.0069],
         [ 0.1200,  0.0389,  0.0469]],

        [[-0.0750,  0.0097,  0.1941],
         [ 0.0053, -0.0481, -0.0872],
         [ 0.2068, -0.0145, -0.0349],
         [ 0.2449,  0.0651,  0.1345],
         [-0.0228,  0.0029, -0.1068],
         [ 0.1395, -0.1488, -0.0494],
         [ 0.0055,  0.1435, -0.0069],
         [ 0.1200,  0.0389,  0.0469]],

        [[-0.0750,  0.0097,  0.1941],
         [ 0.0053, -0.0481, -0.0872],
         [ 0.2068, -0.0145, -0.0349],
         [ 0.2449,  0.0651,  0.1345],
         [-0.0228,  0.0029, -0.1068],
         [ 0.1395, -0.1488, -0.0494],
         [ 0.0055,  0.1436, -0.0069],
         [ 0.1200,  0.0389,  0.0469]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
==================================================

Batch 8 in Ensemble: 234_vi
Number of conformers in this batch: 4
Unique Atomic Numbers: [6, 1, 8, 15]
Average number of neighbors: 26.40
Processing batch of 4 conformers
Initialized CustomNonLinearReadout with input irreps: 32x0e+32x1o
EQUICATPlusNonLinearReadout(
  (equicat): EQUICAT(
    (model): MACE(
      (node_embedding): LinearNodeEmbeddingBlock(
        (linear): Linear(4x0e -> 32x0e | 128 weights)
      )
      (radial_embedding): RadialEmbeddingBlock(
        (bessel_fn): BesselBasis(r_max=5.0, num_basis=8, trainable=False)
        (cutoff_fn): PolynomialCutoff(p=6.0, r_max=5.0)
      )
      (spherical_harmonics): SphericalHarmonics()
      (atomic_energies_fn): AtomicEnergiesBlock(energies=[0.0000, 0.0000, 0.0000, 0.0000])
      (interactions): ModuleList(
        (0): RealAgnosticResidualInteractionBlock(
          (linear_up): Linear(32x0e -> 32x0e | 1024 weights)
          (conv_tp): TensorProduct(32x0e x 1x0e+1x1o+1x2e -> 32x0e+32x1o+32x2e | 96 paths | 96 weights)
          (conv_tp_weights): FullyConnectedNet[8, 64, 64, 64, 96]
          (linear): Linear(32x0e+32x1o+32x2e -> 32x0e+32x1o+32x2e | 3072 weights)
          (skip_tp): FullyConnectedTensorProduct(32x0e x 4x0e -> 32x0e+32x1o | 4096 paths | 4096 weights)
          (reshape): reshape_irreps()
        )
        (1): RealAgnosticResidualInteractionBlock(
          (linear_up): Linear(32x0e+32x1o -> 32x0e+32x1o | 2048 weights)
          (conv_tp): TensorProduct(32x0e+32x1o x 1x0e+1x1o+1x2e -> 64x0e+96x1o+64x2e | 224 paths | 224 weights)
          (conv_tp_weights): FullyConnectedNet[8, 64, 64, 64, 224]
          (linear): Linear(64x0e+96x1o+64x2e -> 32x0e+32x1o+32x2e | 7168 weights)
          (skip_tp): FullyConnectedTensorProduct(32x0e+32x1o x 4x0e -> 32x0e | 4096 paths | 4096 weights)
          (reshape): reshape_irreps()
        )
      )
      (products): ModuleList(
        (0): EquivariantProductBasisBlock(
          (symmetric_contractions): SymmetricContraction(
            (contractions): ModuleList(
              (0): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x3x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
              (1): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x4x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
            )
          )
          (linear): Linear(32x0e+32x1o -> 32x0e+32x1o | 2048 weights)
        )
        (1): EquivariantProductBasisBlock(
          (symmetric_contractions): SymmetricContraction(
            (contractions): ModuleList(
              (0): Contraction(
                (contractions_weighting): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (contractions_features): ModuleList(
                  (0-1): 2 x GraphModule()
                )
                (weights): ParameterList(
                    (0): Parameter containing: [torch.float32 of size 4x3x32]
                    (1): Parameter containing: [torch.float32 of size 4x1x32]
                )
                (graph_opt_main): GraphModule()
              )
            )
          )
          (linear): Linear(32x0e -> 32x0e | 1024 weights)
        )
      )
      (readouts): ModuleList(
        (0): LinearReadoutBlock(
          (linear): Linear(32x0e+32x1o -> 1x0e | 32 weights)
        )
        (1): NonLinearReadoutBlock(
          (linear_1): Linear(32x0e -> 16x0e | 512 weights)
          (non_linearity): Activation [x] (16x0e -> 16x0e)
          (linear_2): Linear(16x0e -> 1x0e | 16 weights)
        )
      )
    )
  )
  (non_linear_readout): CustomNonLinearReadout(
    (linear_1): Linear(32x0e+32x1o -> 16x0e+16x1o | 1024 weights)
    (non_linearity_1): Activation [x ] (16x0e+16x1o -> 16x0e+16x1o)
    (linear_2): Linear(16x0e+16x1o -> 16x0e+16x1o | 512 weights)
    (non_linearity_2): Activation [x ] (16x0e+16x1o -> 16x0e+16x1o)
    (linear_3): Linear(16x0e+16x1o -> 8x0e+8x1o | 256 weights)
  )
)
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2894])
shifts shape: torch.Size([2894, 3])
sender shape: torch.Size([2894])
receiver shape: torch.Size([2894])
Edge attributes shape: torch.Size([2894, 9])
Edge attributes tensor([[ 1.0000,  1.1996,  0.9742,  ..., -0.0569, -0.9838, -0.5340],
        [ 1.0000, -0.1372,  1.7262,  ...,  2.2136,  0.0797, -0.0113],
        [ 1.0000,  1.2991, -0.7416,  ..., -0.5031,  0.8359, -0.5974],
        ...,
        [ 1.0000,  1.0175,  0.9961,  ..., -0.0088, -1.2681, -0.0406],
        [ 1.0000,  1.3403,  1.0965,  ...,  0.2263,  0.0497, -1.1588],
        [ 1.0000,  1.1781, -0.0326,  ..., -1.1168,  0.0533,  0.1440]])
Edge features shape: torch.Size([2894, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1429,  ..., -0.1570, -0.0364,  0.1710],
        [ 0.3439,  0.4322,  0.1993,  ..., -0.3557, -0.0194,  0.3314],
        [ 0.3448,  0.4371,  0.2094,  ..., -0.3697, -0.0417,  0.3168],
        ...,
        [ 0.3663,  0.5674,  0.5127,  ..., -0.4769, -0.5772, -0.4172],
        [ 0.3129,  0.2808, -0.0609,  ...,  0.1199,  0.3478,  0.1922],
        [ 0.3131,  0.2817, -0.0596,  ...,  0.1175,  0.3479,  0.1955]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.4584,  0.2965, -0.0707,  ...,  0.0091,  0.6036, -0.4730],
        [-0.4584,  0.2965, -0.0707,  ...,  0.0091,  0.6036, -0.4730],
        [-0.4584,  0.2965, -0.0707,  ...,  0.0091,  0.6036, -0.4730],
        ...,
        [ 0.3709, -0.2537, -0.2361,  ...,  0.0201, -0.0438,  0.0649],
        [ 0.3709, -0.2537, -0.2361,  ...,  0.0201, -0.0438,  0.0649],
        [ 0.3709, -0.2537, -0.2361,  ...,  0.0201, -0.0438,  0.0649]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2894, 96])
Tensor Product Weights tensor([[ 0.0167, -0.0372, -0.0692,  ..., -0.0768,  0.1159,  0.0861],
        [-0.1372,  0.2046, -0.3789,  ..., -0.2329, -0.1720, -0.1283],
        [-0.1503,  0.2156, -0.3871,  ..., -0.2317, -0.1865, -0.1430],
        ...,
        [-0.4453,  0.2184, -0.4879,  ..., -0.2911, -0.4130, -0.4543],
        [ 0.0446,  0.0666,  0.0009,  ..., -0.1419, -0.0416,  0.0266],
        [ 0.0446,  0.0663, -0.0015,  ..., -0.1433, -0.0406,  0.0276]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-2.5557e-01,  2.2481e-01, -3.8434e-01,  ...,  1.1190e-02,
          2.4971e-03,  1.8548e-03],
        [-2.2964e-01,  2.1076e-01, -2.5154e-01,  ...,  2.3969e-03,
         -6.1814e-02, -8.2061e-02],
        [-3.5181e-01,  2.2579e-01, -2.6257e-01,  ...,  1.3209e-03,
          2.3161e-03, -6.8483e-03],
        ...,
        [-2.1598e-01,  8.1559e-02, -6.7198e-02,  ..., -2.1295e-04,
         -1.1939e-03, -4.4131e-03],
        [-3.0512e-01,  1.0792e-01, -7.7552e-02,  ...,  3.1576e-02,
          7.7173e-03, -3.8853e-02],
        [-2.2625e-01,  8.8169e-02, -6.5112e-02,  ...,  5.4999e-03,
         -8.3673e-03, -4.9118e-03]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.3375,  0.1390, -0.0169,  ..., -0.0611,  0.0429,  0.0470],
        [ 0.0506,  0.2877, -0.1432,  ...,  0.2921,  0.1851, -0.1445],
        [ 0.5101,  0.2373,  0.0087,  ..., -0.0587, -0.0817,  0.0032],
        ...,
        [-0.1201, -0.1029,  0.1158,  ...,  0.0691,  0.3281,  0.0276],
        [-0.1736, -0.2209, -0.0105,  ..., -0.0455,  0.0458, -0.2480],
        [-0.1823, -0.1483,  0.0545,  ..., -0.2855,  0.0464,  0.0213]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2894])
shifts shape: torch.Size([2894, 3])
sender shape: torch.Size([2894])
receiver shape: torch.Size([2894])
Edge attributes shape: torch.Size([2894, 9])
Edge attributes tensor([[ 1.0000e+00,  1.3349e+00,  9.3429e-01,  ..., -1.4211e-01,
         -7.0862e-01, -9.2744e-01],
        [ 1.0000e+00, -7.3500e-02,  1.7298e+00,  ...,  2.2272e+00,
          1.1261e-01, -1.8458e-03],
        [ 1.0000e+00,  1.3977e+00, -7.8399e-01,  ..., -4.3085e-01,
          6.6517e-01, -9.8214e-01],
        ...,
        [ 1.0000e+00, -1.3640e-01, -2.1041e-02,  ..., -1.1175e+00,
         -4.6900e-02,  1.9122e+00],
        [ 1.0000e+00,  3.3427e-01,  9.0067e-01,  ..., -2.1107e-01,
          1.6758e+00,  1.2686e+00],
        [ 1.0000e+00, -1.1304e+00, -1.1316e-02,  ..., -1.1179e+00,
         -1.9172e-02,  2.8676e-01]])
Edge features shape: torch.Size([2894, 8])
Edge features tensor([[ 0.1669, -0.0654, -0.1412,  ..., -0.1576, -0.0320,  0.1702],
        [ 0.3439,  0.4323,  0.1995,  ..., -0.3560, -0.0198,  0.3311],
        [ 0.3450,  0.4380,  0.2112,  ..., -0.3721, -0.0456,  0.3142],
        ...,
        [ 0.3663,  0.5674,  0.5125,  ..., -0.4770, -0.5770, -0.4168],
        [ 0.3127,  0.2798, -0.0623,  ...,  0.1225,  0.3477,  0.1886],
        [ 0.3131,  0.2819, -0.0594,  ...,  0.1171,  0.3479,  0.1960]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.4584,  0.2965, -0.0707,  ...,  0.0091,  0.6036, -0.4730],
        [-0.4584,  0.2965, -0.0707,  ...,  0.0091,  0.6036, -0.4730],
        [-0.4584,  0.2965, -0.0707,  ...,  0.0091,  0.6036, -0.4730],
        ...,
        [ 0.3709, -0.2537, -0.2361,  ...,  0.0201, -0.0438,  0.0649],
        [ 0.3709, -0.2537, -0.2361,  ...,  0.0201, -0.0438,  0.0649],
        [ 0.3709, -0.2537, -0.2361,  ...,  0.0201, -0.0438,  0.0649]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2894, 96])
Tensor Product Weights tensor([[ 0.0158, -0.0364, -0.0692,  ..., -0.0751,  0.1169,  0.0855],
        [-0.1375,  0.2048, -0.3790,  ..., -0.2329, -0.1723, -0.1286],
        [-0.1527,  0.2176, -0.3885,  ..., -0.2315, -0.1890, -0.1455],
        ...,
        [-0.4452,  0.2187, -0.4879,  ..., -0.2910, -0.4131, -0.4543],
        [ 0.0445,  0.0669,  0.0037,  ..., -0.1402, -0.0427,  0.0254],
        [ 0.0446,  0.0663, -0.0019,  ..., -0.1436, -0.0404,  0.0277]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2683,  0.2197, -0.3596,  ...,  0.0125,  0.0014, -0.0055],
        [-0.2319,  0.2159, -0.2309,  ..., -0.0313, -0.0540, -0.1255],
        [-0.3750,  0.2380, -0.2558,  ...,  0.0019,  0.0010,  0.0028],
        ...,
        [-0.2188,  0.0771, -0.0361,  ...,  0.0073,  0.0061,  0.0010],
        [-0.2839,  0.1238, -0.1296,  ..., -0.0031, -0.0028, -0.0062],
        [-0.2170,  0.0699, -0.0516,  ..., -0.0018, -0.0021,  0.0086]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.3894,  0.1734, -0.0123,  ..., -0.0442,  0.0402,  0.0684],
        [ 0.0542,  0.2791, -0.1344,  ...,  0.3227,  0.1648, -0.1210],
        [ 0.5778,  0.2756,  0.0306,  ..., -0.0527, -0.0924, -0.0174],
        ...,
        [-0.1856, -0.1262,  0.1115,  ...,  0.2289,  0.0503,  0.1669],
        [-0.1226, -0.1644, -0.0016,  ..., -0.1926, -0.2537,  0.1835],
        [-0.1959, -0.1438,  0.0445,  ...,  0.1529, -0.2010, -0.1459]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2910])
shifts shape: torch.Size([2910, 3])
sender shape: torch.Size([2910])
receiver shape: torch.Size([2910])
Edge attributes shape: torch.Size([2910, 9])
Edge attributes tensor([[ 1.0000,  1.1999,  0.9734,  ..., -0.0587, -0.9836, -0.5340],
        [ 1.0000, -0.1367,  1.7263,  ...,  2.2138,  0.0775, -0.0113],
        [ 1.0000,  1.2989, -0.7426,  ..., -0.5015,  0.8365, -0.5977],
        ...,
        [ 1.0000, -0.4136,  1.4226,  ...,  1.1445,  1.6480,  0.4094],
        [ 1.0000, -1.1248,  0.9855,  ..., -0.0323,  1.1118, -0.3237],
        [ 1.0000, -0.6711,  1.5775,  ...,  1.6641,  0.5038, -0.2512]])
Edge features shape: torch.Size([2910, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0365,  0.1710],
        [ 0.3439,  0.4322,  0.1992,  ..., -0.3557, -0.0193,  0.3315],
        [ 0.3448,  0.4371,  0.2094,  ..., -0.3697, -0.0417,  0.3169],
        ...,
        [ 0.0381, -0.0539,  0.0383,  ...,  0.0539, -0.0386,  0.0008],
        [ 0.1021, -0.0904, -0.0219,  ..., -0.0430,  0.1136, -0.0576],
        [ 0.2091, -0.0124, -0.2084,  ..., -0.0371, -0.2047,  0.0492]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.4584,  0.2965, -0.0707,  ...,  0.0091,  0.6036, -0.4730],
        [-0.4584,  0.2965, -0.0707,  ...,  0.0091,  0.6036, -0.4730],
        [-0.4584,  0.2965, -0.0707,  ...,  0.0091,  0.6036, -0.4730],
        ...,
        [ 0.3709, -0.2537, -0.2361,  ...,  0.0201, -0.0438,  0.0649],
        [ 0.3709, -0.2537, -0.2361,  ...,  0.0201, -0.0438,  0.0649],
        [ 0.3709, -0.2537, -0.2361,  ...,  0.0201, -0.0438,  0.0649]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2910, 96])
Tensor Product Weights tensor([[ 0.0167, -0.0372, -0.0692,  ..., -0.0768,  0.1159,  0.0861],
        [-0.1371,  0.2046, -0.3788,  ..., -0.2329, -0.1719, -0.1283],
        [-0.1503,  0.2156, -0.3871,  ..., -0.2317, -0.1865, -0.1430],
        ...,
        [-0.0017,  0.0213,  0.0241,  ...,  0.0591,  0.0085, -0.0071],
        [-0.0409,  0.0460, -0.0103,  ...,  0.0906,  0.0461, -0.0407],
        [ 0.0264, -0.0367, -0.0201,  ..., -0.0873, -0.0173,  0.0438]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2555,  0.2248, -0.3844,  ...,  0.0112,  0.0025,  0.0019],
        [-0.2303,  0.2117, -0.2518,  ...,  0.0027, -0.0617, -0.0819],
        [-0.3520,  0.2258, -0.2627,  ...,  0.0013,  0.0023, -0.0069],
        ...,
        [-0.3620,  0.1343, -0.0308,  ..., -0.0085, -0.0166,  0.0025],
        [-0.3154,  0.0940, -0.0544,  ..., -0.0140,  0.0016,  0.0029],
        [-0.2473,  0.0939, -0.0635,  ..., -0.0059,  0.0096,  0.0056]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.3373,  0.1388, -0.0170,  ..., -0.0612,  0.0430,  0.0468],
        [ 0.0517,  0.2884, -0.1433,  ...,  0.2926,  0.1853, -0.1445],
        [ 0.5099,  0.2373,  0.0086,  ..., -0.0585, -0.0818,  0.0032],
        ...,
        [-0.1856, -0.1647,  0.1886,  ..., -0.2853,  0.0800,  0.0935],
        [-0.1556, -0.2294,  0.0010,  ...,  0.1574,  0.1335,  0.1359],
        [-0.1341, -0.1559,  0.0634,  ...,  0.0502,  0.3018, -0.0901]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
positions shape: torch.Size([110, 3])
edge_index shape: torch.Size([2, 2918])
shifts shape: torch.Size([2918, 3])
sender shape: torch.Size([2918])
receiver shape: torch.Size([2918])
Edge attributes shape: torch.Size([2918, 9])
Edge attributes tensor([[ 1.0000e+00,  1.3343e+00,  9.2063e-01,  ..., -1.7044e-01,
         -7.2491e-01, -9.0913e-01],
        [ 1.0000e+00, -5.8094e-02,  1.7307e+00,  ...,  2.2307e+00,
          8.4817e-02, -1.2483e-03],
        [ 1.0000e+00,  1.3790e+00, -7.9785e-01,  ..., -4.0633e-01,
          6.9997e-01, -9.2939e-01],
        ...,
        [ 1.0000e+00, -1.6601e-01, -3.9603e-02,  ..., -1.1163e+00,
         -8.8125e-02,  1.8999e+00],
        [ 1.0000e+00,  3.0746e-01,  8.8595e-01,  ..., -2.4047e-01,
          1.6656e+00,  1.3078e+00],
        [ 1.0000e+00, -1.1528e+00, -2.8039e-02,  ..., -1.1172e+00,
         -4.6784e-02,  2.2043e-01]])
Edge features shape: torch.Size([2918, 8])
Edge features tensor([[ 0.1667, -0.0656, -0.1408,  ..., -0.1578, -0.0310,  0.1700],
        [ 0.3440,  0.4325,  0.1998,  ..., -0.3565, -0.0206,  0.3307],
        [ 0.3449,  0.4378,  0.2107,  ..., -0.3715, -0.0445,  0.3149],
        ...,
        [ 0.3663,  0.5674,  0.5125,  ..., -0.4770, -0.5771, -0.4168],
        [ 0.3126,  0.2798, -0.0623,  ...,  0.1226,  0.3476,  0.1885],
        [ 0.3131,  0.2818, -0.0595,  ...,  0.1173,  0.3479,  0.1957]])
Node attributes shape: torch.Size([110, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 0., 1., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([110, 32])
Initial node features tensor([[-0.4584,  0.2965, -0.0707,  ...,  0.0091,  0.6036, -0.4730],
        [-0.4584,  0.2965, -0.0707,  ...,  0.0091,  0.6036, -0.4730],
        [-0.4584,  0.2965, -0.0707,  ...,  0.0091,  0.6036, -0.4730],
        ...,
        [ 0.3709, -0.2537, -0.2361,  ...,  0.0201, -0.0438,  0.0649],
        [ 0.3709, -0.2537, -0.2361,  ...,  0.0201, -0.0438,  0.0649],
        [ 0.3709, -0.2537, -0.2361,  ...,  0.0201, -0.0438,  0.0649]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([110, 32])
Tensor product weights shape: torch.Size([2918, 96])
Tensor Product Weights tensor([[ 0.0156, -0.0363, -0.0692,  ..., -0.0747,  0.1170,  0.0853],
        [-0.1379,  0.2052, -0.3793,  ..., -0.2329, -0.1728, -0.1291],
        [-0.1520,  0.2170, -0.3881,  ..., -0.2316, -0.1883, -0.1448],
        ...,
        [-0.4452,  0.2187, -0.4879,  ..., -0.2910, -0.4131, -0.4543],
        [ 0.0445,  0.0669,  0.0037,  ..., -0.1402, -0.0427,  0.0254],
        [ 0.0446,  0.0663, -0.0017,  ..., -0.1435, -0.0405,  0.0277]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([110, 288])
Message tensor([[-0.2778,  0.2253, -0.3604,  ...,  0.0137,  0.0015,  0.0020],
        [-0.2352,  0.2189, -0.2297,  ..., -0.0311, -0.0522, -0.1267],
        [-0.3921,  0.2560, -0.2643,  ...,  0.0029,  0.0016, -0.0070],
        ...,
        [-0.2187,  0.0761, -0.0353,  ...,  0.0072,  0.0063,  0.0010],
        [-0.2871,  0.1234, -0.1264,  ..., -0.0031, -0.0025, -0.0065],
        [-0.2173,  0.0694, -0.0517,  ..., -0.0017, -0.0021,  0.0086]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([110, 32, 9])
Node features shape torch.Size([110, 128])
Node features tensor([[ 0.4103,  0.2044, -0.0022,  ..., -0.0523,  0.0422,  0.0571],
        [ 0.0597,  0.2828, -0.1332,  ...,  0.3237,  0.1663, -0.1199],
        [ 0.6107,  0.2968,  0.0415,  ..., -0.0398, -0.0915,  0.0109],
        ...,
        [-0.1862, -0.1260,  0.1121,  ...,  0.2244,  0.0494,  0.1712],
        [-0.1226, -0.1671, -0.0014,  ..., -0.1958, -0.2562,  0.1774],
        [-0.1966, -0.1438,  0.0443,  ...,  0.1558, -0.1988, -0.1453]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([110, 128])
Input shape to CustomNonLinearReadout: torch.Size([110, 128])
Final output shape after NonLinearReadout: torch.Size([110, 32])
Conformer embeddings shape: torch.Size([110, 32])
process_conformer_ensemble input shape: torch.Size([4, 110, 32])
Num conformers: 4, Num atoms: 110, Total dim: 32
Scalar dim: 8, Vector dim: 8
mean_pooling:
  Scalar shape: torch.Size([4, 110, 8])
  Vector shape: torch.Size([4, 110, 8, 3])
  Scalar: tensor([[[ 0.1677, -0.6267, -0.2794,  ..., -0.2401, -0.2150,  0.0664],
         [ 0.0979, -0.2801, -0.0304,  ..., -0.0435,  0.1003,  0.1345],
         [ 0.2388, -0.7339, -0.2543,  ..., -0.2846, -0.1669,  0.2571],
         ...,
         [-0.1504,  0.1913, -0.1065,  ...,  0.0935, -0.1147,  0.0744],
         [-0.1320,  0.2594, -0.1142,  ...,  0.0705, -0.2130,  0.1439],
         [-0.1464,  0.1938, -0.1285,  ...,  0.0710, -0.1575,  0.1390]],

        [[ 0.1677, -0.6267, -0.2794,  ..., -0.2401, -0.2150,  0.0664],
         [ 0.0979, -0.2801, -0.0304,  ..., -0.0435,  0.1003,  0.1345],
         [ 0.2388, -0.7339, -0.2543,  ..., -0.2846, -0.1669,  0.2571],
         ...,
         [-0.1504,  0.1913, -0.1065,  ...,  0.0935, -0.1147,  0.0744],
         [-0.1320,  0.2594, -0.1142,  ...,  0.0705, -0.2130,  0.1439],
         [-0.1464,  0.1938, -0.1285,  ...,  0.0710, -0.1575,  0.1390]],

        [[ 0.1677, -0.6267, -0.2794,  ..., -0.2401, -0.2150,  0.0664],
         [ 0.0979, -0.2801, -0.0304,  ..., -0.0435,  0.1003,  0.1345],
         [ 0.2388, -0.7339, -0.2543,  ..., -0.2846, -0.1669,  0.2571],
         ...,
         [-0.1504,  0.1913, -0.1065,  ...,  0.0935, -0.1147,  0.0744],
         [-0.1320,  0.2594, -0.1142,  ...,  0.0705, -0.2130,  0.1439],
         [-0.1464,  0.1938, -0.1285,  ...,  0.0710, -0.1575,  0.1390]],

        [[ 0.1677, -0.6267, -0.2794,  ..., -0.2401, -0.2150,  0.0664],
         [ 0.0979, -0.2801, -0.0304,  ..., -0.0435,  0.1003,  0.1345],
         [ 0.2388, -0.7339, -0.2543,  ..., -0.2846, -0.1669,  0.2571],
         ...,
         [-0.1504,  0.1913, -0.1065,  ...,  0.0935, -0.1147,  0.0744],
         [-0.1320,  0.2594, -0.1142,  ...,  0.0705, -0.2130,  0.1439],
         [-0.1464,  0.1938, -0.1285,  ...,  0.0710, -0.1575,  0.1390]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[ 9.1187e-02,  3.3643e-01, -8.5316e-02],
          [ 1.1577e-01, -2.6302e-01, -1.2923e-01],
          [ 4.7115e-02, -9.1081e-02, -6.7346e-02],
          ...,
          [-3.7307e-02, -1.4828e-01,  3.1014e-02],
          [-1.6692e-01,  2.8022e-01,  1.8063e-01],
          [-1.0056e-01, -3.1072e-01,  7.8583e-02]],

         [[-9.4410e-02, -4.2693e-02,  1.0557e-01],
          [-4.4179e-01, -2.6640e-01,  8.0156e-02],
          [ 9.8483e-02,  1.7142e-01,  8.4647e-02],
          ...,
          [ 1.2380e-01,  9.3328e-02, -4.7402e-02],
          [ 3.6155e-01,  1.7860e-01, -1.0676e-01],
          [ 1.5397e-01,  1.4588e-01, -2.1219e-02]],

         [[ 2.2375e-01, -1.1888e-01, -1.2689e-01],
          [ 1.5701e-03,  3.3377e-01,  2.7212e-02],
          [ 1.7666e-01, -2.0687e-02,  5.1318e-02],
          ...,
          [-5.5743e-02,  1.6279e-02,  6.1852e-02],
          [-1.0174e-01, -3.4765e-01, -3.9685e-03],
          [-1.6500e-01,  3.0445e-02,  1.5824e-01]],

         ...,

         [[ 7.2581e-03,  3.8127e-02,  3.6914e-02],
          [-7.6768e-02, -1.4231e-01, -1.6705e-01],
          [-3.2204e-02, -6.4348e-02,  5.5186e-02],
          ...,
          [ 2.0066e-03,  1.1800e-03,  6.6627e-02],
          [ 2.5296e-02,  6.1793e-02,  9.6511e-02],
          [ 4.6560e-02,  9.2294e-02,  1.3104e-01]],

         [[-2.9787e-03, -4.4512e-02,  2.7724e-02],
          [ 8.6770e-02,  1.2153e-01, -8.2914e-02],
          [ 3.6051e-02, -4.2813e-04,  3.5439e-02],
          ...,
          [-1.6291e-02, -1.3915e-03,  1.8351e-02],
          [-6.9524e-02, -5.9189e-02,  7.9193e-02],
          [-6.5160e-02, -7.8755e-02,  5.9020e-02]],

         [[-1.0085e-02, -1.3156e-02, -5.5029e-02],
          [-2.3497e-02,  2.6038e-02,  1.1632e-01],
          [-2.3692e-02, -2.2524e-02, -1.0210e-02],
          ...,
          [-1.8720e-03, -5.1315e-03, -2.0293e-02],
          [ 1.1125e-02, -4.2788e-03, -3.4032e-02],
          [ 5.5157e-03, -2.1723e-02, -1.2642e-01]]],


        [[[ 9.1187e-02,  3.3643e-01, -8.5316e-02],
          [ 1.1577e-01, -2.6302e-01, -1.2923e-01],
          [ 4.7115e-02, -9.1081e-02, -6.7346e-02],
          ...,
          [-3.7307e-02, -1.4828e-01,  3.1014e-02],
          [-1.6692e-01,  2.8022e-01,  1.8063e-01],
          [-1.0056e-01, -3.1072e-01,  7.8583e-02]],

         [[-9.4410e-02, -4.2693e-02,  1.0557e-01],
          [-4.4179e-01, -2.6640e-01,  8.0156e-02],
          [ 9.8483e-02,  1.7142e-01,  8.4647e-02],
          ...,
          [ 1.2380e-01,  9.3328e-02, -4.7402e-02],
          [ 3.6155e-01,  1.7860e-01, -1.0676e-01],
          [ 1.5397e-01,  1.4588e-01, -2.1219e-02]],

         [[ 2.2375e-01, -1.1888e-01, -1.2689e-01],
          [ 1.5701e-03,  3.3377e-01,  2.7212e-02],
          [ 1.7666e-01, -2.0687e-02,  5.1318e-02],
          ...,
          [-5.5743e-02,  1.6279e-02,  6.1852e-02],
          [-1.0174e-01, -3.4765e-01, -3.9685e-03],
          [-1.6500e-01,  3.0445e-02,  1.5824e-01]],

         ...,

         [[ 7.2581e-03,  3.8127e-02,  3.6914e-02],
          [-7.6768e-02, -1.4231e-01, -1.6705e-01],
          [-3.2204e-02, -6.4348e-02,  5.5186e-02],
          ...,
          [ 2.0066e-03,  1.1800e-03,  6.6627e-02],
          [ 2.5296e-02,  6.1793e-02,  9.6511e-02],
          [ 4.6560e-02,  9.2294e-02,  1.3104e-01]],

         [[-2.9787e-03, -4.4512e-02,  2.7724e-02],
          [ 8.6770e-02,  1.2153e-01, -8.2914e-02],
          [ 3.6051e-02, -4.2813e-04,  3.5439e-02],
          ...,
          [-1.6291e-02, -1.3915e-03,  1.8351e-02],
          [-6.9524e-02, -5.9189e-02,  7.9193e-02],
          [-6.5160e-02, -7.8755e-02,  5.9020e-02]],

         [[-1.0085e-02, -1.3156e-02, -5.5029e-02],
          [-2.3497e-02,  2.6038e-02,  1.1632e-01],
          [-2.3692e-02, -2.2524e-02, -1.0210e-02],
          ...,
          [-1.8720e-03, -5.1315e-03, -2.0293e-02],
          [ 1.1125e-02, -4.2788e-03, -3.4032e-02],
          [ 5.5157e-03, -2.1723e-02, -1.2642e-01]]],


        [[[ 9.1187e-02,  3.3643e-01, -8.5316e-02],
          [ 1.1577e-01, -2.6302e-01, -1.2923e-01],
          [ 4.7115e-02, -9.1081e-02, -6.7346e-02],
          ...,
          [-3.7307e-02, -1.4828e-01,  3.1014e-02],
          [-1.6692e-01,  2.8022e-01,  1.8063e-01],
          [-1.0056e-01, -3.1072e-01,  7.8583e-02]],

         [[-9.4410e-02, -4.2693e-02,  1.0557e-01],
          [-4.4179e-01, -2.6640e-01,  8.0156e-02],
          [ 9.8483e-02,  1.7142e-01,  8.4647e-02],
          ...,
          [ 1.2380e-01,  9.3328e-02, -4.7402e-02],
          [ 3.6155e-01,  1.7860e-01, -1.0676e-01],
          [ 1.5397e-01,  1.4588e-01, -2.1219e-02]],

         [[ 2.2375e-01, -1.1888e-01, -1.2689e-01],
          [ 1.5701e-03,  3.3377e-01,  2.7212e-02],
          [ 1.7666e-01, -2.0687e-02,  5.1318e-02],
          ...,
          [-5.5743e-02,  1.6279e-02,  6.1852e-02],
          [-1.0174e-01, -3.4765e-01, -3.9685e-03],
          [-1.6500e-01,  3.0445e-02,  1.5824e-01]],

         ...,

         [[ 7.2581e-03,  3.8127e-02,  3.6914e-02],
          [-7.6768e-02, -1.4231e-01, -1.6705e-01],
          [-3.2204e-02, -6.4348e-02,  5.5186e-02],
          ...,
          [ 2.0066e-03,  1.1800e-03,  6.6627e-02],
          [ 2.5296e-02,  6.1793e-02,  9.6511e-02],
          [ 4.6560e-02,  9.2294e-02,  1.3104e-01]],

         [[-2.9787e-03, -4.4512e-02,  2.7724e-02],
          [ 8.6770e-02,  1.2153e-01, -8.2914e-02],
          [ 3.6051e-02, -4.2813e-04,  3.5439e-02],
          ...,
          [-1.6291e-02, -1.3915e-03,  1.8351e-02],
          [-6.9524e-02, -5.9189e-02,  7.9193e-02],
          [-6.5160e-02, -7.8755e-02,  5.9020e-02]],

         [[-1.0085e-02, -1.3156e-02, -5.5029e-02],
          [-2.3497e-02,  2.6038e-02,  1.1632e-01],
          [-2.3692e-02, -2.2524e-02, -1.0210e-02],
          ...,
          [-1.8720e-03, -5.1315e-03, -2.0293e-02],
          [ 1.1125e-02, -4.2788e-03, -3.4032e-02],
          [ 5.5157e-03, -2.1723e-02, -1.2642e-01]]],


        [[[ 9.1187e-02,  3.3643e-01, -8.5316e-02],
          [ 1.1577e-01, -2.6302e-01, -1.2923e-01],
          [ 4.7115e-02, -9.1081e-02, -6.7346e-02],
          ...,
          [-3.7307e-02, -1.4828e-01,  3.1014e-02],
          [-1.6692e-01,  2.8022e-01,  1.8063e-01],
          [-1.0056e-01, -3.1072e-01,  7.8583e-02]],

         [[-9.4410e-02, -4.2693e-02,  1.0557e-01],
          [-4.4179e-01, -2.6640e-01,  8.0156e-02],
          [ 9.8483e-02,  1.7142e-01,  8.4647e-02],
          ...,
          [ 1.2380e-01,  9.3328e-02, -4.7402e-02],
          [ 3.6155e-01,  1.7860e-01, -1.0676e-01],
          [ 1.5397e-01,  1.4588e-01, -2.1219e-02]],

         [[ 2.2375e-01, -1.1888e-01, -1.2689e-01],
          [ 1.5701e-03,  3.3377e-01,  2.7212e-02],
          [ 1.7666e-01, -2.0687e-02,  5.1318e-02],
          ...,
          [-5.5743e-02,  1.6279e-02,  6.1852e-02],
          [-1.0174e-01, -3.4765e-01, -3.9685e-03],
          [-1.6500e-01,  3.0445e-02,  1.5824e-01]],

         ...,

         [[ 7.2581e-03,  3.8127e-02,  3.6914e-02],
          [-7.6768e-02, -1.4231e-01, -1.6705e-01],
          [-3.2204e-02, -6.4348e-02,  5.5186e-02],
          ...,
          [ 2.0066e-03,  1.1800e-03,  6.6627e-02],
          [ 2.5296e-02,  6.1793e-02,  9.6511e-02],
          [ 4.6560e-02,  9.2294e-02,  1.3104e-01]],

         [[-2.9787e-03, -4.4512e-02,  2.7724e-02],
          [ 8.6770e-02,  1.2153e-01, -8.2914e-02],
          [ 3.6051e-02, -4.2813e-04,  3.5439e-02],
          ...,
          [-1.6291e-02, -1.3915e-03,  1.8351e-02],
          [-6.9524e-02, -5.9189e-02,  7.9193e-02],
          [-6.5160e-02, -7.8755e-02,  5.9020e-02]],

         [[-1.0085e-02, -1.3156e-02, -5.5029e-02],
          [-2.3497e-02,  2.6038e-02,  1.1632e-01],
          [-2.3692e-02, -2.2524e-02, -1.0210e-02],
          ...,
          [-1.8720e-03, -5.1315e-03, -2.0293e-02],
          [ 1.1125e-02, -4.2788e-03, -3.4032e-02],
          [ 5.5157e-03, -2.1723e-02, -1.2642e-01]]]],
       grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[ 0.1677, -0.6267, -0.2794,  0.2026, -0.1514, -0.2401, -0.2150,  0.0664],
        [ 0.0979, -0.2801, -0.0304,  0.1282, -0.0945, -0.0435,  0.1003,  0.1345],
        [ 0.2388, -0.7339, -0.2543,  0.1392, -0.1368, -0.2846, -0.1669,  0.2571],
        [ 0.1643, -0.1027,  0.0364, -0.0649, -0.1093, -0.0395, -0.0268,  0.3252],
        [ 0.1701, -0.1736, -0.1432,  0.0020, -0.3222, -0.2306, -0.2069,  0.2401]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[ 0.0912,  0.3364, -0.0853],
         [ 0.1158, -0.2630, -0.1292],
         [ 0.0471, -0.0911, -0.0673],
         [ 0.1965,  0.1699, -0.2043],
         [ 0.0172, -0.2026, -0.0322],
         [-0.0373, -0.1483,  0.0310],
         [-0.1669,  0.2802,  0.1806],
         [-0.1006, -0.3107,  0.0786]],

        [[-0.0944, -0.0427,  0.1056],
         [-0.4418, -0.2664,  0.0802],
         [ 0.0985,  0.1714,  0.0846],
         [-0.2374, -0.1115,  0.1342],
         [-0.0745, -0.0439, -0.0347],
         [ 0.1238,  0.0933, -0.0474],
         [ 0.3616,  0.1786, -0.1068],
         [ 0.1540,  0.1459, -0.0212]],

        [[ 0.2238, -0.1189, -0.1269],
         [ 0.0016,  0.3338,  0.0272],
         [ 0.1767, -0.0207,  0.0513],
         [ 0.3177,  0.0916, -0.1491],
         [-0.0568,  0.1753,  0.0363],
         [-0.0557,  0.0163,  0.0619],
         [-0.1017, -0.3477, -0.0040],
         [-0.1650,  0.0304,  0.1582]],

        [[ 0.0173, -0.0558, -0.0371],
         [-0.0028,  0.6665,  0.2674],
         [ 0.0258,  0.0590, -0.3113],
         [ 0.0705,  0.1652,  0.0102],
         [ 0.0250,  0.1841,  0.0831],
         [ 0.0194,  0.0123, -0.0917],
         [-0.0725, -0.4706, -0.0773],
         [-0.0063,  0.0772, -0.1368]],

        [[ 0.1038,  0.2639, -0.0445],
         [-0.0325,  0.0798, -0.0586],
         [-0.0109,  0.0671,  0.0227],
         [ 0.0766,  0.3130, -0.0658],
         [-0.0460, -0.0643, -0.0014],
         [-0.0400, -0.1151,  0.0355],
         [ 0.0275, -0.0773,  0.0502],
         [-0.0856, -0.2050,  0.0542]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
deep_sets:
  Scalar shape: torch.Size([4, 110, 8])
  Vector shape: torch.Size([4, 110, 8, 3])
  Scalar: tensor([[[-0.1385,  0.1312, -0.0433,  ..., -0.0246, -0.0315,  0.1825],
         [-0.1382,  0.1328, -0.0434,  ..., -0.0252, -0.0319,  0.1811],
         [-0.1386,  0.1307, -0.0424,  ..., -0.0243, -0.0301,  0.1842],
         ...,
         [-0.1376,  0.1336, -0.0432,  ..., -0.0261, -0.0331,  0.1803],
         [-0.1375,  0.1328, -0.0427,  ..., -0.0261, -0.0329,  0.1812],
         [-0.1376,  0.1330, -0.0429,  ..., -0.0260, -0.0328,  0.1810]],

        [[-0.1385,  0.1312, -0.0433,  ..., -0.0246, -0.0315,  0.1825],
         [-0.1382,  0.1328, -0.0434,  ..., -0.0252, -0.0319,  0.1811],
         [-0.1386,  0.1307, -0.0424,  ..., -0.0243, -0.0301,  0.1842],
         ...,
         [-0.1376,  0.1336, -0.0432,  ..., -0.0261, -0.0331,  0.1803],
         [-0.1375,  0.1328, -0.0427,  ..., -0.0261, -0.0329,  0.1812],
         [-0.1376,  0.1330, -0.0429,  ..., -0.0260, -0.0328,  0.1810]],

        [[-0.1385,  0.1312, -0.0433,  ..., -0.0246, -0.0315,  0.1825],
         [-0.1382,  0.1328, -0.0434,  ..., -0.0252, -0.0319,  0.1811],
         [-0.1386,  0.1307, -0.0424,  ..., -0.0243, -0.0301,  0.1842],
         ...,
         [-0.1376,  0.1336, -0.0432,  ..., -0.0261, -0.0331,  0.1803],
         [-0.1375,  0.1328, -0.0427,  ..., -0.0261, -0.0329,  0.1812],
         [-0.1376,  0.1330, -0.0429,  ..., -0.0260, -0.0328,  0.1810]],

        [[-0.1385,  0.1312, -0.0433,  ..., -0.0246, -0.0315,  0.1825],
         [-0.1382,  0.1328, -0.0434,  ..., -0.0252, -0.0319,  0.1811],
         [-0.1386,  0.1307, -0.0424,  ..., -0.0243, -0.0301,  0.1842],
         ...,
         [-0.1376,  0.1336, -0.0432,  ..., -0.0261, -0.0331,  0.1803],
         [-0.1375,  0.1328, -0.0427,  ..., -0.0261, -0.0329,  0.1812],
         [-0.1376,  0.1330, -0.0429,  ..., -0.0260, -0.0328,  0.1810]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[-0.0146, -0.0628,  0.0199],
          [ 0.0669, -0.0089,  0.0755],
          [-0.0127, -0.0646,  0.0287],
          ...,
          [ 0.0207,  0.0074, -0.0387],
          [-0.0864, -0.0297, -0.0406],
          [-0.0156,  0.0926,  0.0217]],

         [[-0.0137, -0.0615,  0.0229],
          [ 0.0677, -0.0096,  0.0753],
          [-0.0125, -0.0639,  0.0264],
          ...,
          [ 0.0210,  0.0088, -0.0381],
          [-0.0841, -0.0330, -0.0414],
          [-0.0162,  0.0906,  0.0248]],

         [[-0.0136, -0.0649,  0.0223],
          [ 0.0681, -0.0108,  0.0749],
          [-0.0094, -0.0622,  0.0311],
          ...,
          [ 0.0201,  0.0093, -0.0424],
          [-0.0851, -0.0311, -0.0399],
          [-0.0157,  0.0954,  0.0205]],

         ...,

         [[-0.0139, -0.0626,  0.0218],
          [ 0.0671, -0.0100,  0.0748],
          [-0.0119, -0.0639,  0.0281],
          ...,
          [ 0.0201,  0.0084, -0.0395],
          [-0.0849, -0.0311, -0.0410],
          [-0.0157,  0.0920,  0.0233]],

         [[-0.0142, -0.0629,  0.0217],
          [ 0.0670, -0.0106,  0.0747],
          [-0.0117, -0.0639,  0.0283],
          ...,
          [ 0.0195,  0.0071, -0.0407],
          [-0.0851, -0.0312, -0.0411],
          [-0.0155,  0.0937,  0.0225]],

         [[-0.0136, -0.0620,  0.0219],
          [ 0.0667, -0.0102,  0.0742],
          [-0.0118, -0.0638,  0.0274],
          ...,
          [ 0.0200,  0.0076, -0.0394],
          [-0.0852, -0.0316, -0.0410],
          [-0.0162,  0.0925,  0.0239]]],


        [[[-0.0146, -0.0628,  0.0199],
          [ 0.0669, -0.0089,  0.0755],
          [-0.0127, -0.0646,  0.0287],
          ...,
          [ 0.0207,  0.0074, -0.0387],
          [-0.0864, -0.0297, -0.0406],
          [-0.0156,  0.0926,  0.0217]],

         [[-0.0137, -0.0615,  0.0229],
          [ 0.0677, -0.0096,  0.0753],
          [-0.0125, -0.0639,  0.0264],
          ...,
          [ 0.0210,  0.0088, -0.0381],
          [-0.0841, -0.0330, -0.0414],
          [-0.0162,  0.0906,  0.0248]],

         [[-0.0136, -0.0649,  0.0223],
          [ 0.0681, -0.0108,  0.0749],
          [-0.0094, -0.0622,  0.0311],
          ...,
          [ 0.0201,  0.0093, -0.0424],
          [-0.0851, -0.0311, -0.0399],
          [-0.0157,  0.0954,  0.0205]],

         ...,

         [[-0.0139, -0.0626,  0.0218],
          [ 0.0671, -0.0100,  0.0748],
          [-0.0119, -0.0639,  0.0281],
          ...,
          [ 0.0201,  0.0084, -0.0395],
          [-0.0849, -0.0311, -0.0410],
          [-0.0157,  0.0920,  0.0233]],

         [[-0.0142, -0.0629,  0.0217],
          [ 0.0670, -0.0106,  0.0747],
          [-0.0117, -0.0639,  0.0283],
          ...,
          [ 0.0195,  0.0071, -0.0407],
          [-0.0851, -0.0312, -0.0411],
          [-0.0155,  0.0937,  0.0225]],

         [[-0.0136, -0.0620,  0.0219],
          [ 0.0667, -0.0102,  0.0742],
          [-0.0118, -0.0638,  0.0274],
          ...,
          [ 0.0200,  0.0076, -0.0394],
          [-0.0852, -0.0316, -0.0410],
          [-0.0162,  0.0925,  0.0239]]],


        [[[-0.0146, -0.0628,  0.0199],
          [ 0.0669, -0.0089,  0.0755],
          [-0.0127, -0.0646,  0.0287],
          ...,
          [ 0.0207,  0.0074, -0.0387],
          [-0.0864, -0.0297, -0.0406],
          [-0.0156,  0.0926,  0.0217]],

         [[-0.0137, -0.0615,  0.0229],
          [ 0.0677, -0.0096,  0.0753],
          [-0.0125, -0.0639,  0.0264],
          ...,
          [ 0.0210,  0.0088, -0.0381],
          [-0.0841, -0.0330, -0.0414],
          [-0.0162,  0.0906,  0.0248]],

         [[-0.0136, -0.0649,  0.0223],
          [ 0.0681, -0.0108,  0.0749],
          [-0.0094, -0.0622,  0.0311],
          ...,
          [ 0.0201,  0.0093, -0.0424],
          [-0.0851, -0.0311, -0.0399],
          [-0.0157,  0.0954,  0.0205]],

         ...,

         [[-0.0139, -0.0626,  0.0218],
          [ 0.0671, -0.0100,  0.0748],
          [-0.0119, -0.0639,  0.0281],
          ...,
          [ 0.0201,  0.0084, -0.0395],
          [-0.0849, -0.0311, -0.0410],
          [-0.0157,  0.0920,  0.0233]],

         [[-0.0142, -0.0629,  0.0217],
          [ 0.0670, -0.0106,  0.0747],
          [-0.0117, -0.0639,  0.0283],
          ...,
          [ 0.0195,  0.0071, -0.0407],
          [-0.0851, -0.0312, -0.0411],
          [-0.0155,  0.0937,  0.0225]],

         [[-0.0136, -0.0620,  0.0219],
          [ 0.0667, -0.0102,  0.0742],
          [-0.0118, -0.0638,  0.0274],
          ...,
          [ 0.0200,  0.0076, -0.0394],
          [-0.0852, -0.0316, -0.0410],
          [-0.0162,  0.0925,  0.0239]]],


        [[[-0.0146, -0.0628,  0.0199],
          [ 0.0669, -0.0089,  0.0755],
          [-0.0127, -0.0646,  0.0287],
          ...,
          [ 0.0207,  0.0074, -0.0387],
          [-0.0864, -0.0297, -0.0406],
          [-0.0156,  0.0926,  0.0217]],

         [[-0.0137, -0.0615,  0.0229],
          [ 0.0677, -0.0096,  0.0753],
          [-0.0125, -0.0639,  0.0264],
          ...,
          [ 0.0210,  0.0088, -0.0381],
          [-0.0841, -0.0330, -0.0414],
          [-0.0162,  0.0906,  0.0248]],

         [[-0.0136, -0.0649,  0.0223],
          [ 0.0681, -0.0108,  0.0749],
          [-0.0094, -0.0622,  0.0311],
          ...,
          [ 0.0201,  0.0093, -0.0424],
          [-0.0851, -0.0311, -0.0399],
          [-0.0157,  0.0954,  0.0205]],

         ...,

         [[-0.0139, -0.0626,  0.0218],
          [ 0.0671, -0.0100,  0.0748],
          [-0.0119, -0.0639,  0.0281],
          ...,
          [ 0.0201,  0.0084, -0.0395],
          [-0.0849, -0.0311, -0.0410],
          [-0.0157,  0.0920,  0.0233]],

         [[-0.0142, -0.0629,  0.0217],
          [ 0.0670, -0.0106,  0.0747],
          [-0.0117, -0.0639,  0.0283],
          ...,
          [ 0.0195,  0.0071, -0.0407],
          [-0.0851, -0.0312, -0.0411],
          [-0.0155,  0.0937,  0.0225]],

         [[-0.0136, -0.0620,  0.0219],
          [ 0.0667, -0.0102,  0.0742],
          [-0.0118, -0.0638,  0.0274],
          ...,
          [ 0.0200,  0.0076, -0.0394],
          [-0.0852, -0.0316, -0.0410],
          [-0.0162,  0.0925,  0.0239]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[-0.1385,  0.1312, -0.0433,  0.2266,  0.1561, -0.0246, -0.0315,  0.1825],
        [-0.1382,  0.1328, -0.0434,  0.2260,  0.1559, -0.0252, -0.0319,  0.1811],
        [-0.1386,  0.1307, -0.0424,  0.2261,  0.1546, -0.0243, -0.0301,  0.1842],
        [-0.1379,  0.1322, -0.0422,  0.2252,  0.1548, -0.0253, -0.0310,  0.1829],
        [-0.1382,  0.1302, -0.0423,  0.2257,  0.1564, -0.0249, -0.0315,  0.1837]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[-0.0146, -0.0628,  0.0199],
         [ 0.0669, -0.0089,  0.0755],
         [-0.0127, -0.0646,  0.0287],
         [-0.0385,  0.0027,  0.0249],
         [ 0.0760, -0.0204, -0.0699],
         [ 0.0207,  0.0074, -0.0387],
         [-0.0864, -0.0297, -0.0406],
         [-0.0156,  0.0926,  0.0217]],

        [[-0.0137, -0.0615,  0.0229],
         [ 0.0677, -0.0096,  0.0753],
         [-0.0125, -0.0639,  0.0264],
         [-0.0381,  0.0051,  0.0227],
         [ 0.0724, -0.0217, -0.0693],
         [ 0.0210,  0.0088, -0.0381],
         [-0.0841, -0.0330, -0.0414],
         [-0.0162,  0.0906,  0.0248]],

        [[-0.0136, -0.0649,  0.0223],
         [ 0.0681, -0.0108,  0.0749],
         [-0.0094, -0.0622,  0.0311],
         [-0.0391,  0.0022,  0.0224],
         [ 0.0773, -0.0222, -0.0710],
         [ 0.0201,  0.0093, -0.0424],
         [-0.0851, -0.0311, -0.0399],
         [-0.0157,  0.0954,  0.0205]],

        [[-0.0131, -0.0634,  0.0232],
         [ 0.0673, -0.0117,  0.0744],
         [-0.0092, -0.0615,  0.0302],
         [-0.0396,  0.0036,  0.0238],
         [ 0.0743, -0.0235, -0.0704],
         [ 0.0191,  0.0086, -0.0420],
         [-0.0842, -0.0323, -0.0406],
         [-0.0167,  0.0941,  0.0233]],

        [[-0.0141, -0.0632,  0.0218],
         [ 0.0673, -0.0102,  0.0756],
         [-0.0114, -0.0635,  0.0291],
         [-0.0389,  0.0036,  0.0242],
         [ 0.0749, -0.0216, -0.0698],
         [ 0.0200,  0.0078, -0.0400],
         [-0.0850, -0.0315, -0.0408],
         [-0.0162,  0.0930,  0.0225]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
self_attention:
  Scalar shape: torch.Size([4, 110, 8])
  Vector shape: torch.Size([4, 110, 8, 3])
  Scalar: tensor([[[-0.1260, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         [-0.1259, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         [-0.1260, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         ...,
         [-0.1259, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         [-0.1259, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         [-0.1259, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615]],

        [[-0.1260, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         [-0.1259, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         [-0.1260, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         ...,
         [-0.1259, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         [-0.1259, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         [-0.1259, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615]],

        [[-0.1260, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         [-0.1259, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         [-0.1260, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         ...,
         [-0.1259, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         [-0.1259, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         [-0.1259, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615]],

        [[-0.1260, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         [-0.1259, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         [-0.1260, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         ...,
         [-0.1259, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         [-0.1259, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615],
         [-0.1259, -0.1388,  0.3576,  ...,  0.1532,  0.0443,  0.0615]]],
       grad_fn=<RepeatBackward0>)
  Vector: tensor([[[[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0707,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         ...,

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]]],


        [[[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0707,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         ...,

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]]],


        [[[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0707,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         ...,

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]]],


        [[[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0707,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         ...,

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]],

         [[ 0.1094,  0.0066, -0.0696],
          [ 0.1152,  0.0708,  0.1213],
          [ 0.0402, -0.0331, -0.0281],
          ...,
          [ 0.1613,  0.1021, -0.0436],
          [ 0.0053, -0.0757,  0.0955],
          [-0.0136, -0.0581,  0.1054]]]], grad_fn=<RepeatBackward0>)
  Scalar (first 5 atoms, all values):
tensor([[-0.1260, -0.1388,  0.3576,  0.0275,  0.0388,  0.1532,  0.0443,  0.0615],
        [-0.1259, -0.1388,  0.3576,  0.0275,  0.0388,  0.1532,  0.0443,  0.0615],
        [-0.1260, -0.1388,  0.3576,  0.0275,  0.0388,  0.1532,  0.0443,  0.0615],
        [-0.1259, -0.1388,  0.3576,  0.0275,  0.0388,  0.1532,  0.0443,  0.0615],
        [-0.1259, -0.1388,  0.3576,  0.0275,  0.0388,  0.1532,  0.0443,  0.0615]],
       grad_fn=<SliceBackward0>)
  Vector (first 5 atoms, all values):
tensor([[[ 0.1094,  0.0066, -0.0696],
         [ 0.1152,  0.0707,  0.1213],
         [ 0.0402, -0.0331, -0.0281],
         [ 0.0142, -0.0829,  0.0204],
         [ 0.0509, -0.0452,  0.0207],
         [ 0.1613,  0.1021, -0.0436],
         [ 0.0053, -0.0757,  0.0955],
         [-0.0136, -0.0581,  0.1054]],

        [[ 0.1094,  0.0066, -0.0696],
         [ 0.1152,  0.0708,  0.1213],
         [ 0.0402, -0.0331, -0.0281],
         [ 0.0142, -0.0829,  0.0204],
         [ 0.0509, -0.0452,  0.0207],
         [ 0.1613,  0.1021, -0.0436],
         [ 0.0053, -0.0757,  0.0955],
         [-0.0136, -0.0581,  0.1054]],

        [[ 0.1094,  0.0066, -0.0696],
         [ 0.1152,  0.0708,  0.1213],
         [ 0.0402, -0.0331, -0.0281],
         [ 0.0142, -0.0829,  0.0204],
         [ 0.0509, -0.0452,  0.0207],
         [ 0.1613,  0.1021, -0.0436],
         [ 0.0053, -0.0757,  0.0955],
         [-0.0136, -0.0581,  0.1054]],

        [[ 0.1094,  0.0066, -0.0696],
         [ 0.1152,  0.0708,  0.1213],
         [ 0.0402, -0.0331, -0.0281],
         [ 0.0142, -0.0829,  0.0204],
         [ 0.0509, -0.0452,  0.0207],
         [ 0.1613,  0.1021, -0.0436],
         [ 0.0053, -0.0757,  0.0955],
         [-0.0136, -0.0581,  0.1054]],

        [[ 0.1094,  0.0066, -0.0696],
         [ 0.1152,  0.0708,  0.1213],
         [ 0.0402, -0.0331, -0.0281],
         [ 0.0142, -0.0829,  0.0204],
         [ 0.0509, -0.0452,  0.0207],
         [ 0.1613,  0.1021, -0.0436],
         [ 0.0053, -0.0757,  0.0955],
         [-0.0136, -0.0581,  0.1054]]], grad_fn=<SliceBackward0>)
--------------------------------------------------
==================================================

Finished processing Conformer Ensemble: 234_vi
==================================================

Total number of batches processed: 8
Total number of conformers processed: 108
Finished processing all conformers in all ensembles.
