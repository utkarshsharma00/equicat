Initialized ConformerDataset with 2 conformer ensembles
Retrieved conformer ensemble 102_vi with 178 conformers
Atomic Numbers: tensor([ 6,  6,  6,  6,  6,  6,  1,  6,  6,  6,  6,  6,  6,  1,  8,  8, 15,  6,
         6,  6,  6,  1,  1,  1,  1,  1,  1,  1,  1,  6,  6,  6,  6,  1,  1,  1,
         1,  1,  1,  1,  1,  8,  8,  1,  6,  6,  1,  6,  6,  6,  1,  1,  1,  6,
         6,  1,  1,  1,  1,  6,  1,  1,  1,  6,  6,  1,  1,  1,  6,  1,  6,  6,
         1,  6,  6,  6,  1,  1,  1,  6,  6,  1,  1,  1,  1,  6,  1,  1,  1,  6,
         6,  1,  1,  1,  6,  1])

Processing Conformer Ensemble: 102_vi
Number of conformers in this ensemble: 178

Batch 1 in Ensemble: 102_vi
Number of conformers in this batch: 32
Unique Atomic Numbers: [6, 1, 8, 15]
Average number of neighbors: 23.94
Processing batch of 32 conformers
Initialized CustomNonLinearReadout with input irreps: 32x0e+32x1o
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2294])
shifts shape: torch.Size([2294, 3])
sender shape: torch.Size([2294])
receiver shape: torch.Size([2294])
Edge attributes shape: torch.Size([2294, 9])
Edge attributes tensor([[ 1.0000,  1.2062,  0.9902,  ..., -0.0218, -0.9605, -0.5747],
        [ 1.0000, -0.2037,  1.7197,  ...,  2.1883, -0.0770, -0.0260],
        [ 1.0000,  1.4075, -0.7185,  ..., -0.5409,  0.6576, -0.9544],
        ...,
        [ 1.0000,  0.8891,  1.2478,  ...,  0.6227,  1.3013, -0.0890],
        [ 1.0000,  0.2728,  1.2265,  ...,  0.5638,  1.8877,  0.8694],
        [ 1.0000,  0.9942,  0.5578,  ..., -0.7701,  0.9391,  0.4595]])
Edge features shape: torch.Size([2294, 8])
Edge features tensor([[ 0.1680, -0.0644, -0.1434,  ..., -0.1568, -0.0376,  0.1712],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3550, -0.0182,  0.3322],
        [ 0.3448,  0.4370,  0.2090,  ..., -0.3692, -0.0409,  0.3174],
        ...,
        [ 0.0440, -0.0599,  0.0376,  ...,  0.0586, -0.0303, -0.0174],
        [ 0.2221,  0.0105, -0.2216,  ...,  0.0314, -0.2192, -0.0418],
        [ 0.1059, -0.0907, -0.0282,  ..., -0.0548,  0.1171, -0.0455]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2294, 96])
Tensor Product Weights tensor([[ 4.4809e-02,  6.2170e-02, -5.1641e-02,  ...,  6.5538e-02,
         -1.3413e-01,  8.9006e-03],
        [ 9.1440e-02,  1.4930e-01, -3.5597e-01,  ...,  6.0597e-02,
         -6.0456e-01, -4.5237e-01],
        [ 8.9646e-02,  1.5816e-01, -3.4703e-01,  ...,  4.2171e-02,
         -6.1252e-01, -4.5343e-01],
        ...,
        [ 3.3021e-02, -4.9030e-04, -8.9137e-03,  ..., -5.8116e-03,
          1.8056e-02,  1.6247e-03],
        [-2.7559e-02,  1.3267e-01, -2.9640e-02,  ..., -1.2300e-01,
         -2.2333e-01, -7.6707e-02],
        [ 8.8432e-02, -1.6311e-02,  4.9923e-02,  ...,  9.4648e-02,
          1.0532e-01,  8.9276e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.4455,  0.4061,  0.0653,  ...,  0.0986, -0.0348, -0.0690],
        [ 0.2055,  0.3476,  0.1052,  ...,  0.0393,  0.1971,  0.1175],
        [ 0.6206,  0.3628,  0.1347,  ...,  0.0551,  0.0416, -0.0580],
        ...,
        [ 0.0917,  0.1723, -0.2422,  ..., -0.0425,  0.0131, -0.0896],
        [ 0.3121,  0.4008,  0.1276,  ..., -0.0438,  0.0914,  0.0047],
        [ 0.1338,  0.2032,  0.0168,  ..., -0.0149, -0.0146, -0.0505]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1779, -0.5919, -0.1040,  ...,  0.0926,  0.1700, -0.0655],
        [ 0.2300, -0.1479,  0.1343,  ..., -0.4745, -0.3999,  0.1762],
        [-0.3170, -0.5807, -0.0619,  ...,  0.1857, -0.2124,  0.0172],
        ...,
        [-0.0963, -0.1773,  0.0724,  ...,  0.7699, -0.0322, -0.0044],
        [ 0.0552, -0.2757,  0.0191,  ...,  0.3372,  0.1211, -0.0630],
        [-0.2275, -0.0854, -0.0577,  ...,  0.5425,  0.0392, -0.3338]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2312])
shifts shape: torch.Size([2312, 3])
sender shape: torch.Size([2312])
receiver shape: torch.Size([2312])
Edge attributes shape: torch.Size([2312, 9])
Edge attributes tensor([[ 1.0000,  1.2146,  0.9712,  ..., -0.0636, -0.9562, -0.5767],
        [ 1.0000, -0.2104,  1.7165,  ...,  2.1762, -0.2139, -0.0226],
        [ 1.0000,  1.4233, -0.7339,  ..., -0.5158,  0.6253, -1.0265],
        ...,
        [ 1.0000,  0.1688,  1.2723,  ...,  0.6917,  1.9104,  0.8548],
        [ 1.0000,  0.8219,  1.2764,  ...,  0.7034,  1.3740,  0.0128],
        [ 1.0000,  0.8500,  0.6108,  ..., -0.7009,  1.0882,  0.7629]])
Edge features shape: torch.Size([2312, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1431,  ..., -0.1569, -0.0367,  0.1710],
        [ 0.3438,  0.4318,  0.1985,  ..., -0.3546, -0.0176,  0.3325],
        [ 0.3448,  0.4370,  0.2090,  ..., -0.3693, -0.0409,  0.3174],
        ...,
        [ 0.2251,  0.0163, -0.2240,  ...,  0.0485, -0.2181, -0.0643],
        [ 0.0460, -0.0618,  0.0370,  ...,  0.0595, -0.0265, -0.0238],
        [ 0.1014, -0.0904, -0.0208,  ..., -0.0409,  0.1127, -0.0596]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2312, 96])
Tensor Product Weights tensor([[ 0.0451,  0.0618, -0.0514,  ...,  0.0660, -0.1333,  0.0093],
        [ 0.0915,  0.1491, -0.3562,  ...,  0.0610, -0.6044, -0.4523],
        [ 0.0896,  0.1582, -0.3470,  ...,  0.0421, -0.6125, -0.4534],
        ...,
        [-0.0268,  0.1320, -0.0234,  ..., -0.1317, -0.2144, -0.0765],
        [ 0.0365, -0.0016, -0.0054,  ..., -0.0037,  0.0244,  0.0059],
        [ 0.0884, -0.0178,  0.0522,  ...,  0.0886,  0.1118,  0.0887]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.5117,  0.3887,  0.0982,  ...,  0.0892, -0.0414, -0.0728],
        [ 0.2084,  0.3471,  0.0879,  ...,  0.0416,  0.1791,  0.1155],
        [ 0.4879,  0.4204,  0.0847,  ...,  0.0461,  0.0017, -0.0511],
        ...,
        [ 0.2402,  0.0629, -0.2026,  ...,  0.0289, -0.1072,  0.0193],
        [ 0.3051,  0.4163,  0.1188,  ..., -0.0451,  0.0984, -0.0120],
        [ 0.1161,  0.2380, -0.0050,  ..., -0.0158,  0.0009, -0.0490]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1947, -0.6234, -0.1266,  ...,  0.0945,  0.1679, -0.0679],
        [ 0.2207, -0.1450,  0.1385,  ..., -0.4940, -0.3864,  0.1806],
        [-0.2054, -0.4717, -0.0284,  ...,  0.1524, -0.1870,  0.0099],
        ...,
        [ 0.0227, -0.2568,  0.0642,  ..., -0.1900,  0.3826, -0.4064],
        [ 0.0744, -0.2785,  0.0344,  ...,  0.3560,  0.0971, -0.0192],
        [-0.2292, -0.0535, -0.0546,  ...,  0.5705,  0.0093, -0.2356]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2300])
shifts shape: torch.Size([2300, 3])
sender shape: torch.Size([2300])
receiver shape: torch.Size([2300])
Edge attributes shape: torch.Size([2300, 9])
Edge attributes tensor([[ 1.0000,  1.2022,  0.9841,  ..., -0.0352, -0.9728, -0.5544],
        [ 1.0000, -0.2274,  1.7148,  ...,  2.1694, -0.1965, -0.0283],
        [ 1.0000,  1.4221, -0.7212,  ..., -0.5364,  0.6298, -1.0100],
        ...,
        [ 1.0000,  0.8249,  1.2722,  ...,  0.6916,  1.3751,  0.0132],
        [ 1.0000,  0.1747,  1.2655,  ...,  0.6725,  1.9109,  0.8633],
        [ 1.0000,  0.8624,  0.6023,  ..., -0.7124,  1.0700,  0.7422]])
Edge features shape: torch.Size([2300, 8])
Edge features tensor([[ 0.1682, -0.0643, -0.1436,  ..., -0.1567, -0.0381,  0.1712],
        [ 0.3438,  0.4316,  0.1981,  ..., -0.3541, -0.0168,  0.3330],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0415,  0.3170],
        ...,
        [ 0.0457, -0.0615,  0.0371,  ...,  0.0593, -0.0273, -0.0226],
        [ 0.2247,  0.0153, -0.2236,  ...,  0.0458, -0.2184, -0.0607],
        [ 0.1024, -0.0905, -0.0224,  ..., -0.0439,  0.1139, -0.0567]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2300, 96])
Tensor Product Weights tensor([[ 0.0446,  0.0624, -0.0518,  ...,  0.0653, -0.1346,  0.0086],
        [ 0.0915,  0.1487, -0.3565,  ...,  0.0617, -0.6040, -0.4523],
        [ 0.0896,  0.1584, -0.3468,  ...,  0.0417, -0.6127, -0.4535],
        ...,
        [ 0.0358, -0.0014, -0.0061,  ..., -0.0041,  0.0232,  0.0051],
        [-0.0270,  0.1322, -0.0244,  ..., -0.1303, -0.2160, -0.0766],
        [ 0.0884, -0.0175,  0.0518,  ...,  0.0900,  0.1106,  0.0889]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.5004,  0.3951,  0.0914,  ...,  0.0918, -0.0333, -0.0707],
        [ 0.2048,  0.3485,  0.0852,  ...,  0.0352,  0.1816,  0.1120],
        [ 0.4877,  0.4228,  0.0808,  ...,  0.0471,  0.0095, -0.0505],
        ...,
        [ 0.0939,  0.1724, -0.2396,  ..., -0.0420,  0.0123, -0.0828],
        [ 0.3072,  0.4126,  0.1213,  ..., -0.0457,  0.0971, -0.0105],
        [ 0.1237,  0.2280,  0.0008,  ..., -0.0150, -0.0015, -0.0516]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1924, -0.6213, -0.1202,  ...,  0.0947,  0.1673, -0.0655],
        [ 0.2224, -0.1418,  0.1393,  ..., -0.4921, -0.3911,  0.1798],
        [-0.2184, -0.4834, -0.0185,  ...,  0.1566, -0.1826, -0.0043],
        ...,
        [-0.1009, -0.1797,  0.0697,  ...,  0.7684, -0.0366,  0.0767],
        [ 0.0695, -0.2778,  0.0315,  ...,  0.3535,  0.1023, -0.0233],
        [-0.2293, -0.0619, -0.0554,  ...,  0.5695,  0.0136, -0.2503]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2288])
shifts shape: torch.Size([2288, 3])
sender shape: torch.Size([2288])
receiver shape: torch.Size([2288])
Edge attributes shape: torch.Size([2288, 9])
Edge attributes tensor([[ 1.0000,  1.1979,  0.9907,  ..., -0.0207, -0.9770, -0.5496],
        [ 1.0000, -0.2315,  1.7147,  ...,  2.1693, -0.1741, -0.0306],
        [ 1.0000,  1.4225, -0.7142,  ..., -0.5478,  0.6298, -1.0050],
        ...,
        [ 1.0000,  0.8930,  1.2306,  ...,  0.5750,  1.3179, -0.0706],
        [ 1.0000,  0.2794,  1.1995,  ...,  0.4906,  1.8859,  0.9070],
        [ 1.0000,  1.0017,  0.5299,  ..., -0.8041,  0.8960,  0.4599]])
Edge features shape: torch.Size([2288, 8])
Edge features tensor([[ 0.1681, -0.0644, -0.1434,  ..., -0.1568, -0.0376,  0.1712],
        [ 0.3438,  0.4317,  0.1982,  ..., -0.3542, -0.0170,  0.3329],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0414,  0.3170],
        ...,
        [ 0.0441, -0.0600,  0.0376,  ...,  0.0587, -0.0302, -0.0176],
        [ 0.2222,  0.0107, -0.2217,  ...,  0.0319, -0.2192, -0.0424],
        [ 0.1057, -0.0907, -0.0279,  ..., -0.0541,  0.1169, -0.0462]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2288, 96])
Tensor Product Weights tensor([[ 4.4796e-02,  6.2186e-02, -5.1654e-02,  ...,  6.5517e-02,
         -1.3416e-01,  8.8820e-03],
        [ 9.1525e-02,  1.4882e-01, -3.5644e-01,  ...,  6.1564e-02,
         -6.0412e-01, -4.5230e-01],
        [ 8.9598e-02,  1.5837e-01, -3.4680e-01,  ...,  4.1709e-02,
         -6.1270e-01, -4.5345e-01],
        ...,
        [ 3.3111e-02, -5.1928e-04, -8.8252e-03,  ..., -5.7597e-03,
          1.8216e-02,  1.7335e-03],
        [-2.7549e-02,  1.3266e-01, -2.9476e-02,  ..., -1.2324e-01,
         -2.2312e-01, -7.6711e-02],
        [ 8.8441e-02, -1.6401e-02,  5.0066e-02,  ...,  9.4357e-02,
          1.0571e-01,  8.9273e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.5002,  0.3952,  0.0912,  ...,  0.0922, -0.0323, -0.0707],
        [ 0.2034,  0.3480,  0.0859,  ...,  0.0318,  0.1808,  0.1112],
        [ 0.4876,  0.4235,  0.0808,  ...,  0.0470,  0.0104, -0.0492],
        ...,
        [ 0.0916,  0.1723, -0.2421,  ..., -0.0431,  0.0134, -0.0896],
        [ 0.3121,  0.4001,  0.1278,  ..., -0.0455,  0.0908,  0.0072],
        [ 0.1341,  0.2022,  0.0176,  ..., -0.0151, -0.0152, -0.0508]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1925, -0.6214, -0.1197,  ...,  0.0940,  0.1680, -0.0648],
        [ 0.2230, -0.1405,  0.1393,  ..., -0.4918, -0.3925,  0.1793],
        [-0.2183, -0.4836, -0.0185,  ...,  0.1570, -0.1817, -0.0057],
        ...,
        [-0.0965, -0.1774,  0.0724,  ...,  0.7700, -0.0310, -0.0100],
        [ 0.0547, -0.2752,  0.0180,  ...,  0.3363,  0.1223, -0.0623],
        [-0.2273, -0.0867, -0.0578,  ...,  0.5409,  0.0454, -0.3372]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2306])
shifts shape: torch.Size([2306, 3])
sender shape: torch.Size([2306])
receiver shape: torch.Size([2306])
Edge attributes shape: torch.Size([2306, 9])
Edge attributes tensor([[ 1.0000,  1.2107,  0.9827,  ..., -0.0383, -0.9566, -0.5791],
        [ 1.0000, -0.1994,  1.7199,  ...,  2.1892, -0.1028, -0.0243],
        [ 1.0000,  1.4071, -0.7266,  ..., -0.5278,  0.6580, -0.9605],
        ...,
        [ 1.0000,  0.1735,  1.2820,  ...,  0.7196,  1.9061,  0.8367],
        [ 1.0000,  0.8208,  1.2923,  ...,  0.7490,  1.3517, -0.0111],
        [ 1.0000,  0.8652,  0.6313,  ..., -0.6725,  1.1094,  0.7128]])
Edge features shape: torch.Size([2306, 8])
Edge features tensor([[ 0.1681, -0.0643, -0.1435,  ..., -0.1567, -0.0380,  0.1712],
        [ 0.3439,  0.4319,  0.1986,  ..., -0.3548, -0.0179,  0.3323],
        [ 0.3448,  0.4370,  0.2092,  ..., -0.3694, -0.0412,  0.3172],
        ...,
        [ 0.2252,  0.0165, -0.2240,  ...,  0.0490, -0.2181, -0.0649],
        [ 0.0462, -0.0619,  0.0370,  ...,  0.0595, -0.0263, -0.0242],
        [ 0.1009, -0.0903, -0.0201,  ..., -0.0396,  0.1122, -0.0608]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2306, 96])
Tensor Product Weights tensor([[ 0.0447,  0.0624, -0.0518,  ...,  0.0653, -0.1346,  0.0087],
        [ 0.0915,  0.1492, -0.3561,  ...,  0.0608, -0.6045, -0.4524],
        [ 0.0896,  0.1583, -0.3469,  ...,  0.0419, -0.6126, -0.4534],
        ...,
        [-0.0268,  0.1320, -0.0233,  ..., -0.1319, -0.2142, -0.0765],
        [ 0.0367, -0.0017, -0.0052,  ..., -0.0036,  0.0247,  0.0062],
        [ 0.0884, -0.0179,  0.0523,  ...,  0.0880,  0.1123,  0.0886]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.4453,  0.4059,  0.0661,  ...,  0.0980, -0.0361, -0.0690],
        [ 0.2093,  0.3480,  0.1031,  ...,  0.0429,  0.1970,  0.1180],
        [ 0.6197,  0.3632,  0.1342,  ...,  0.0554,  0.0405, -0.0599],
        ...,
        [ 0.2399,  0.0631, -0.2027,  ...,  0.0261, -0.1061,  0.0180],
        [ 0.3070,  0.4131,  0.1215,  ..., -0.0427,  0.0979, -0.0123],
        [ 0.1233,  0.2293,  0.0007,  ..., -0.0148, -0.0011, -0.0508]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1774, -0.5914, -0.1048,  ...,  0.0934,  0.1691, -0.0662],
        [ 0.2245, -0.1493,  0.1354,  ..., -0.4744, -0.3966,  0.1775],
        [-0.3154, -0.5791, -0.0618,  ...,  0.1845, -0.2123,  0.0180],
        ...,
        [ 0.0226, -0.2565,  0.0642,  ..., -0.2013,  0.3762, -0.4072],
        [ 0.0712, -0.2781,  0.0316,  ...,  0.3538,  0.1012, -0.0250],
        [-0.2297, -0.0609, -0.0563,  ...,  0.5687,  0.0097, -0.2486]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2306])
shifts shape: torch.Size([2306, 3])
sender shape: torch.Size([2306])
receiver shape: torch.Size([2306])
Edge attributes shape: torch.Size([2306, 9])
Edge attributes tensor([[ 1.0000,  1.2158,  0.9710,  ..., -0.0639, -0.9539, -0.5804],
        [ 1.0000, -0.2088,  1.7168,  ...,  2.1774, -0.2088, -0.0224],
        [ 1.0000,  1.4227, -0.7344,  ..., -0.5150,  0.6265, -1.0246],
        ...,
        [ 1.0000,  0.8198,  1.2764,  ...,  0.7035,  1.3775,  0.0173],
        [ 1.0000,  0.1710,  1.2609,  ...,  0.6596,  1.9129,  0.8724],
        [ 1.0000,  0.8595,  0.6060,  ..., -0.7075,  1.0767,  0.7457]])
Edge features shape: torch.Size([2306, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0367,  0.1710],
        [ 0.3438,  0.4318,  0.1985,  ..., -0.3546, -0.0176,  0.3325],
        [ 0.3448,  0.4369,  0.2090,  ..., -0.3692, -0.0409,  0.3174],
        ...,
        [ 0.0463, -0.0621,  0.0369,  ...,  0.0595, -0.0261, -0.0246],
        [ 0.2254,  0.0169, -0.2242,  ...,  0.0502, -0.2179, -0.0665],
        [ 0.1006, -0.0903, -0.0196,  ..., -0.0386,  0.1118, -0.0617]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2306, 96])
Tensor Product Weights tensor([[ 0.0451,  0.0618, -0.0514,  ...,  0.0660, -0.1333,  0.0093],
        [ 0.0915,  0.1491, -0.3562,  ...,  0.0610, -0.6044, -0.4523],
        [ 0.0896,  0.1581, -0.3470,  ...,  0.0422, -0.6125, -0.4534],
        ...,
        [ 0.0369, -0.0018, -0.0050,  ..., -0.0034,  0.0251,  0.0064],
        [-0.0267,  0.1319, -0.0228,  ..., -0.1325, -0.2135, -0.0765],
        [ 0.0883, -0.0180,  0.0524,  ...,  0.0875,  0.1127,  0.0885]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 5.1287e-01,  3.8875e-01,  9.7849e-02,  ...,  8.9275e-02,
         -4.0974e-02, -7.2968e-02],
        [ 2.0999e-01,  3.4750e-01,  8.7770e-02,  ...,  4.1335e-02,
          1.7982e-01,  1.1501e-01],
        [ 4.8832e-01,  4.2039e-01,  8.4640e-02,  ...,  4.6215e-02,
          2.0134e-03, -5.1120e-02],
        ...,
        [ 9.3547e-02,  1.7266e-01, -2.3919e-01,  ..., -4.2392e-02,
          1.2631e-02, -8.2656e-02],
        [ 3.0598e-01,  4.1470e-01,  1.2028e-01,  ..., -4.5900e-02,
          9.7424e-02, -1.0846e-02],
        [ 1.1949e-01,  2.3380e-01, -2.1449e-03,  ..., -1.5586e-02,
         -2.4145e-04, -4.9727e-02]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1953, -0.6242, -0.1261,  ...,  0.0951,  0.1677, -0.0677],
        [ 0.2210, -0.1463,  0.1392,  ..., -0.4930, -0.3872,  0.1804],
        [-0.2058, -0.4718, -0.0282,  ...,  0.1520, -0.1869,  0.0097],
        ...,
        [-0.1026, -0.1803,  0.0689,  ...,  0.7707, -0.0298,  0.0754],
        [ 0.0726, -0.2781,  0.0327,  ...,  0.3549,  0.0997, -0.0207],
        [-0.2291, -0.0570, -0.0557,  ...,  0.5691,  0.0124, -0.2425]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2300])
shifts shape: torch.Size([2300, 3])
sender shape: torch.Size([2300])
receiver shape: torch.Size([2300])
Edge attributes shape: torch.Size([2300, 9])
Edge attributes tensor([[ 1.0000,  1.2104,  0.9772,  ..., -0.0504, -0.9609, -0.5712],
        [ 1.0000, -0.2114,  1.7172,  ...,  2.1787, -0.1801, -0.0246],
        [ 1.0000,  1.4187, -0.7284,  ..., -0.5249,  0.6355, -1.0044],
        ...,
        [ 1.0000,  0.1016,  0.9552,  ..., -0.0979,  1.7773,  1.3342],
        [ 1.0000,  0.3693,  1.0151,  ...,  0.0340,  1.7743,  1.0953],
        [ 1.0000,  1.0990,  1.3170,  ...,  0.8213,  0.4082, -0.7424]])
Edge features shape: torch.Size([2300, 8])
Edge features tensor([[ 1.6781e-01, -6.4616e-02, -1.4293e-01,  ..., -1.5695e-01,
         -3.6426e-02,  1.7097e-01],
        [ 3.4386e-01,  4.3193e-01,  1.9871e-01,  ..., -3.5496e-01,
         -1.8144e-02,  3.3217e-01],
        [ 3.4478e-01,  4.3703e-01,  2.0918e-01,  ..., -3.6942e-01,
         -4.1219e-02,  3.1718e-01],
        ...,
        [ 7.6328e-02, -8.3018e-02,  1.3966e-02,  ...,  2.7601e-02,
          5.7718e-02, -9.0378e-02],
        [ 5.9699e-03, -1.0760e-02,  1.3422e-02,  ..., -6.0077e-03,
          4.1976e-05,  5.9320e-03],
        [ 1.1497e-01, -9.0511e-02, -4.3720e-02,  ..., -8.1924e-02,
          1.1912e-01, -1.1853e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2300, 96])
Tensor Product Weights tensor([[ 0.0452,  0.0617, -0.0513,  ...,  0.0661, -0.1330,  0.0094],
        [ 0.0914,  0.1493, -0.3560,  ...,  0.0606, -0.6046, -0.4524],
        [ 0.0896,  0.1583, -0.3469,  ...,  0.0419, -0.6126, -0.4534],
        ...,
        [ 0.0775, -0.0171,  0.0433,  ...,  0.0454,  0.1065,  0.0669],
        [-0.0114,  0.0010, -0.0050,  ..., -0.0058, -0.0064, -0.0141],
        [ 0.0873, -0.0117,  0.0422,  ...,  0.1041,  0.0862,  0.0874]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.5143,  0.3879,  0.0986,  ...,  0.0899, -0.0393, -0.0717],
        [ 0.1851,  0.3600,  0.0791,  ...,  0.0386,  0.1832,  0.1161],
        [ 0.4871,  0.4215,  0.0846,  ...,  0.0460,  0.0032, -0.0487],
        ...,
        [ 0.2443,  0.0576, -0.1977,  ...,  0.0690, -0.0867,  0.0351],
        [ 0.2773,  0.4012,  0.1088,  ...,  0.0418,  0.1068, -0.0403],
        [ 0.1025,  0.2426, -0.0476,  ...,  0.0459, -0.0415,  0.0284]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1955, -0.6252, -0.1263,  ...,  0.0951,  0.1683, -0.0672],
        [ 0.2387, -0.1381,  0.1474,  ..., -0.4928, -0.3946,  0.1769],
        [-0.2047, -0.4708, -0.0282,  ...,  0.1520, -0.1858,  0.0080],
        ...,
        [ 0.0235, -0.2625,  0.0633,  ...,  0.1134, -0.4771,  0.3206],
        [ 0.0841, -0.2772,  0.0024,  ..., -0.0253,  0.1956,  0.2936],
        [-0.3418, -0.1139, -0.0708,  ..., -0.2581,  0.1883,  0.5206]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2288])
shifts shape: torch.Size([2288, 3])
sender shape: torch.Size([2288])
receiver shape: torch.Size([2288])
Edge attributes shape: torch.Size([2288, 9])
Edge attributes tensor([[ 1.0000,  1.2057,  0.9892,  ..., -0.0241, -0.9623, -0.5718],
        [ 1.0000, -0.2042,  1.7196,  ...,  2.1878, -0.0842, -0.0260],
        [ 1.0000,  1.4073, -0.7194,  ..., -0.5394,  0.6581, -0.9542],
        ...,
        [ 1.0000,  0.8813,  1.2518,  ...,  0.6339,  1.3092, -0.0777],
        [ 1.0000,  0.2677,  1.2199,  ...,  0.5459,  1.8900,  0.8833],
        [ 1.0000,  0.9918,  0.5601,  ..., -0.7673,  0.9435,  0.4641]])
Edge features shape: torch.Size([2288, 8])
Edge features tensor([[ 0.1680, -0.0644, -0.1433,  ..., -0.1568, -0.0374,  0.1711],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3550, -0.0182,  0.3322],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3694, -0.0411,  0.3173],
        ...,
        [ 0.0445, -0.0604,  0.0375,  ...,  0.0589, -0.0295, -0.0188],
        [ 0.2228,  0.0118, -0.2222,  ...,  0.0354, -0.2191, -0.0470],
        [ 0.1045, -0.0906, -0.0259,  ..., -0.0504,  0.1160, -0.0501]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2288, 96])
Tensor Product Weights tensor([[ 0.0448,  0.0621, -0.0516,  ...,  0.0656, -0.1340,  0.0090],
        [ 0.0914,  0.1493, -0.3560,  ...,  0.0606, -0.6046, -0.4524],
        [ 0.0896,  0.1582, -0.3469,  ...,  0.0420, -0.6126, -0.4534],
        ...,
        [ 0.0338, -0.0007, -0.0081,  ..., -0.0054,  0.0195,  0.0026],
        [-0.0275,  0.1326, -0.0282,  ..., -0.1251, -0.2214, -0.0767],
        [ 0.0885, -0.0168,  0.0508,  ...,  0.0928,  0.1076,  0.0892]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.4448,  0.4060,  0.0656,  ...,  0.0983, -0.0353, -0.0687],
        [ 0.2105,  0.3469,  0.1049,  ...,  0.0396,  0.1961,  0.1180],
        [ 0.6207,  0.3626,  0.1349,  ...,  0.0552,  0.0413, -0.0580],
        ...,
        [ 0.0914,  0.1726, -0.2418,  ..., -0.0429,  0.0133, -0.0895],
        [ 0.3120,  0.4008,  0.1282,  ..., -0.0442,  0.0912,  0.0044],
        [ 0.1346,  0.2031,  0.0177,  ..., -0.0150, -0.0143, -0.0507]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1773, -0.5913, -0.1044,  ...,  0.0925,  0.1696, -0.0655],
        [ 0.2241, -0.1497,  0.1351,  ..., -0.4748, -0.3978,  0.1766],
        [-0.3163, -0.5805, -0.0625,  ...,  0.1857, -0.2123,  0.0170],
        ...,
        [-0.0978, -0.1778,  0.0718,  ...,  0.7717, -0.0238, -0.0064],
        [ 0.0557, -0.2755,  0.0185,  ...,  0.3377,  0.1211, -0.0610],
        [-0.2282, -0.0859, -0.0584,  ...,  0.5436,  0.0391, -0.3314]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2298])
shifts shape: torch.Size([2298, 3])
sender shape: torch.Size([2298])
receiver shape: torch.Size([2298])
Edge attributes shape: torch.Size([2298, 9])
Edge attributes tensor([[ 1.0000,  1.2032,  0.9839,  ..., -0.0356, -0.9709, -0.5574],
        [ 1.0000, -0.2258,  1.7151,  ...,  2.1706, -0.1922, -0.0280],
        [ 1.0000,  1.4215, -0.7217,  ..., -0.5358,  0.6309, -1.0083],
        ...,
        [ 1.0000,  0.8237,  1.2746,  ...,  0.6983,  1.3738,  0.0120],
        [ 1.0000,  0.1745,  1.2648,  ...,  0.6704,  1.9111,  0.8646],
        [ 1.0000,  0.8637,  0.6047,  ..., -0.7092,  1.0728,  0.7374]])
Edge features shape: torch.Size([2298, 8])
Edge features tensor([[ 0.1682, -0.0643, -0.1436,  ..., -0.1567, -0.0381,  0.1712],
        [ 0.3438,  0.4317,  0.1982,  ..., -0.3542, -0.0170,  0.3329],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0416,  0.3169],
        ...,
        [ 0.0458, -0.0616,  0.0371,  ...,  0.0594, -0.0270, -0.0231],
        [ 0.2249,  0.0158, -0.2238,  ...,  0.0469, -0.2183, -0.0622],
        [ 0.1019, -0.0904, -0.0216,  ..., -0.0425,  0.1133, -0.0581]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2298, 96])
Tensor Product Weights tensor([[ 0.0446,  0.0624, -0.0518,  ...,  0.0652, -0.1347,  0.0086],
        [ 0.0915,  0.1488, -0.3564,  ...,  0.0616, -0.6041, -0.4523],
        [ 0.0896,  0.1584, -0.3468,  ...,  0.0416, -0.6127, -0.4535],
        ...,
        [ 0.0361, -0.0015, -0.0058,  ..., -0.0039,  0.0237,  0.0055],
        [-0.0269,  0.1321, -0.0240,  ..., -0.1309, -0.2153, -0.0766],
        [ 0.0884, -0.0177,  0.0520,  ...,  0.0893,  0.1112,  0.0888]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.5019,  0.3952,  0.0913,  ...,  0.0919, -0.0328, -0.0709],
        [ 0.2066,  0.3488,  0.0853,  ...,  0.0353,  0.1823,  0.1120],
        [ 0.4873,  0.4231,  0.0809,  ...,  0.0471,  0.0098, -0.0505],
        ...,
        [ 0.0938,  0.1725, -0.2396,  ..., -0.0421,  0.0124, -0.0829],
        [ 0.3072,  0.4126,  0.1215,  ..., -0.0456,  0.0971, -0.0105],
        [ 0.1238,  0.2281,  0.0010,  ..., -0.0151, -0.0016, -0.0515]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1933, -0.6223, -0.1199,  ...,  0.0953,  0.1674, -0.0654],
        [ 0.2224, -0.1428,  0.1399,  ..., -0.4916, -0.3917,  0.1797],
        [-0.2180, -0.4829, -0.0186,  ...,  0.1563, -0.1827, -0.0047],
        ...,
        [-0.1014, -0.1798,  0.0695,  ...,  0.7694, -0.0338,  0.0748],
        [ 0.0697, -0.2778,  0.0314,  ...,  0.3535,  0.1023, -0.0233],
        [-0.2294, -0.0619, -0.0557,  ...,  0.5693,  0.0134, -0.2503]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2296])
shifts shape: torch.Size([2296, 3])
sender shape: torch.Size([2296])
receiver shape: torch.Size([2296])
Edge attributes shape: torch.Size([2296, 9])
Edge attributes tensor([[ 1.0000,  1.2104,  0.9775,  ..., -0.0499, -0.9606, -0.5716],
        [ 1.0000, -0.2113,  1.7172,  ...,  2.1789, -0.1785, -0.0246],
        [ 1.0000,  1.4188, -0.7282,  ..., -0.5252,  0.6353, -1.0045],
        ...,
        [ 1.0000,  0.1063,  0.9557,  ..., -0.0969,  1.7774,  1.3324],
        [ 1.0000,  0.3672,  1.0145,  ...,  0.0327,  1.7746,  1.0980],
        [ 1.0000,  1.1023,  1.3164,  ...,  0.8194,  0.3875, -0.7508]])
Edge features shape: torch.Size([2296, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1429,  ..., -0.1569, -0.0364,  0.1710],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3549, -0.0181,  0.3322],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3694, -0.0411,  0.3173],
        ...,
        [ 0.0767, -0.0832,  0.0136,  ...,  0.0269,  0.0587, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.1168, -0.0903, -0.0470,  ..., -0.0872,  0.1184, -0.0043]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2296, 96])
Tensor Product Weights tensor([[ 0.0452,  0.0617, -0.0513,  ...,  0.0661, -0.1330,  0.0094],
        [ 0.0914,  0.1493, -0.3560,  ...,  0.0607, -0.6045, -0.4524],
        [ 0.0896,  0.1582, -0.3469,  ...,  0.0420, -0.6126, -0.4534],
        ...,
        [ 0.0777, -0.0172,  0.0437,  ...,  0.0460,  0.1070,  0.0674],
        [-0.0112,  0.0009, -0.0045,  ..., -0.0055, -0.0058, -0.0135],
        [ 0.0868, -0.0104,  0.0401,  ...,  0.1055,  0.0814,  0.0866]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.5145,  0.3880,  0.0986,  ...,  0.0899, -0.0392, -0.0718],
        [ 0.1848,  0.3603,  0.0788,  ...,  0.0386,  0.1833,  0.1160],
        [ 0.4871,  0.4215,  0.0846,  ...,  0.0461,  0.0033, -0.0487],
        ...,
        [ 0.2451,  0.0562, -0.1962,  ...,  0.0666, -0.0876,  0.0357],
        [ 0.2781,  0.4011,  0.1079,  ...,  0.0427,  0.1064, -0.0399],
        [ 0.1013,  0.2436, -0.0499,  ...,  0.0457, -0.0417,  0.0290]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1955, -0.6253, -0.1264,  ...,  0.0949,  0.1683, -0.0671],
        [ 0.2388, -0.1380,  0.1476,  ..., -0.4928, -0.3947,  0.1769],
        [-0.2049, -0.4707, -0.0282,  ...,  0.1521, -0.1857,  0.0079],
        ...,
        [ 0.0229, -0.2638,  0.0620,  ...,  0.1175, -0.4710,  0.3265],
        [ 0.0829, -0.2779,  0.0039,  ..., -0.0241,  0.1960,  0.2940],
        [-0.3402, -0.1117, -0.0692,  ..., -0.2562,  0.1888,  0.5214]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2286])
shifts shape: torch.Size([2286, 3])
sender shape: torch.Size([2286])
receiver shape: torch.Size([2286])
Edge attributes shape: torch.Size([2286, 9])
Edge attributes tensor([[ 1.0000,  1.1986,  0.9902,  ..., -0.0219, -0.9760, -0.5511],
        [ 1.0000, -0.2298,  1.7150,  ...,  2.1704, -0.1710, -0.0302],
        [ 1.0000,  1.4210, -0.7150,  ..., -0.5465,  0.6325, -1.0002],
        ...,
        [ 1.0000,  0.8936,  1.2290,  ...,  0.5707,  1.3189, -0.0694],
        [ 1.0000,  0.2760,  1.2058,  ...,  0.5076,  1.8873,  0.8995],
        [ 1.0000,  0.9956,  0.5302,  ..., -0.8038,  0.8997,  0.4754]])
Edge features shape: torch.Size([2286, 8])
Edge features tensor([[ 0.1680, -0.0644, -0.1433,  ..., -0.1568, -0.0375,  0.1711],
        [ 0.3438,  0.4317,  0.1983,  ..., -0.3543, -0.0172,  0.3328],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3695, -0.0414,  0.3171],
        ...,
        [ 0.0438, -0.0597,  0.0376,  ...,  0.0585, -0.0307, -0.0167],
        [ 0.2218,  0.0098, -0.2214,  ...,  0.0295, -0.2192, -0.0392],
        [ 0.1067, -0.0907, -0.0295,  ..., -0.0570,  0.1176, -0.0430]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2286, 96])
Tensor Product Weights tensor([[ 4.4838e-02,  6.2133e-02, -5.1611e-02,  ...,  6.5585e-02,
         -1.3404e-01,  8.9444e-03],
        [ 9.1511e-02,  1.4890e-01, -3.5636e-01,  ...,  6.1396e-02,
         -6.0419e-01, -4.5232e-01],
        [ 8.9603e-02,  1.5835e-01, -3.4683e-01,  ...,  4.1762e-02,
         -6.1268e-01, -4.5345e-01],
        ...,
        [ 3.2626e-02, -3.6239e-04, -9.3040e-03,  ..., -6.0392e-03,
          1.7346e-02,  1.1443e-03],
        [-2.7594e-02,  1.3270e-01, -3.0354e-02,  ..., -1.2195e-01,
         -2.2427e-01, -7.6689e-02],
        [ 8.8397e-02, -1.6021e-02,  4.9460e-02,  ...,  9.5538e-02,
          1.0409e-01,  8.9270e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.5015,  0.3953,  0.0908,  ...,  0.0922, -0.0320, -0.0705],
        [ 0.2041,  0.3490,  0.0852,  ...,  0.0319,  0.1817,  0.1112],
        [ 0.4879,  0.4234,  0.0808,  ...,  0.0471,  0.0107, -0.0491],
        ...,
        [ 0.0919,  0.1721, -0.2424,  ..., -0.0428,  0.0133, -0.0894],
        [ 0.3121,  0.4004,  0.1273,  ..., -0.0455,  0.0910,  0.0068],
        [ 0.1335,  0.2028,  0.0167,  ..., -0.0150, -0.0149, -0.0510]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1931, -0.6223, -0.1194,  ...,  0.0945,  0.1678, -0.0646],
        [ 0.2235, -0.1415,  0.1404,  ..., -0.4910, -0.3935,  0.1792],
        [-0.2185, -0.4835, -0.0185,  ...,  0.1568, -0.1817, -0.0060],
        ...,
        [-0.0956, -0.1771,  0.0727,  ...,  0.7688, -0.0369, -0.0041],
        [ 0.0545, -0.2754,  0.0187,  ...,  0.3367,  0.1222, -0.0617],
        [-0.2269, -0.0858, -0.0571,  ...,  0.5420,  0.0450, -0.3352]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2318])
shifts shape: torch.Size([2318, 3])
sender shape: torch.Size([2318])
receiver shape: torch.Size([2318])
Edge attributes shape: torch.Size([2318, 9])
Edge attributes tensor([[ 1.0000,  1.2087,  0.9835,  ..., -0.0366, -0.9601, -0.5739],
        [ 1.0000, -0.2157,  1.7170,  ...,  2.1781, -0.1609, -0.0266],
        [ 1.0000,  1.4215, -0.7213,  ..., -0.5363,  0.6309, -1.0081],
        ...,
        [ 1.0000,  0.9469,  1.2143,  ...,  0.5306,  1.2432, -0.1728],
        [ 1.0000,  0.7781,  1.5385,  ...,  1.5283,  0.3302, -0.3730],
        [ 1.0000,  1.4940,  0.8390,  ..., -0.3310,  0.2743, -1.3993]])
Edge features shape: torch.Size([2318, 8])
Edge features tensor([[ 0.1677, -0.0648, -0.1427,  ..., -0.1571, -0.0357,  0.1709],
        [ 0.3439,  0.4320,  0.1988,  ..., -0.3551, -0.0184,  0.3320],
        [ 0.3448,  0.4369,  0.2090,  ..., -0.3691, -0.0407,  0.3175],
        ...,
        [ 0.0438, -0.0597,  0.0376,  ...,  0.0585, -0.0306, -0.0168],
        [ 0.2221,  0.0104, -0.2216,  ...,  0.0312, -0.2192, -0.0414],
        [ 0.1110, -0.0907, -0.0369,  ..., -0.0703,  0.1194, -0.0273]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2318, 96])
Tensor Product Weights tensor([[ 4.5410e-02,  6.1417e-02, -5.1029e-02,  ...,  6.6499e-02,
         -1.3234e-01,  9.7898e-03],
        [ 9.1423e-02,  1.4939e-01, -3.5588e-01,  ...,  6.0405e-02,
         -6.0465e-01, -4.5239e-01],
        [ 8.9659e-02,  1.5810e-01, -3.4709e-01,  ...,  4.2292e-02,
         -6.1247e-01, -4.5342e-01],
        ...,
        [ 3.2686e-02, -3.8159e-04, -9.2454e-03,  ..., -6.0051e-03,
          1.7453e-02,  1.2165e-03],
        [-2.7564e-02,  1.3267e-01, -2.9735e-02,  ..., -1.2287e-01,
         -2.2346e-01, -7.6705e-02],
        [ 8.7960e-02, -1.3966e-02,  4.6077e-02,  ...,  1.0043e-01,
          9.5503e-02,  8.8705e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.5123,  0.3883,  0.0978,  ...,  0.0902, -0.0387, -0.0723],
        [ 0.1907,  0.3544,  0.0838,  ...,  0.0316,  0.1809,  0.1118],
        [ 0.4901,  0.4207,  0.0846,  ...,  0.0466,  0.0039, -0.0497],
        ...,
        [ 0.2433,  0.0597, -0.1996,  ..., -0.0281,  0.0512, -0.0512],
        [ 0.2810,  0.4487,  0.0967,  ...,  0.0012, -0.0456,  0.0382],
        [ 0.0247,  0.3095, -0.0164,  ..., -0.0172, -0.0213,  0.0334]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1943, -0.6238, -0.1256,  ...,  0.0939,  0.1687, -0.0662],
        [ 0.2349, -0.1397,  0.1427,  ..., -0.4894, -0.3974,  0.1761],
        [-0.2070, -0.4732, -0.0271,  ...,  0.1516, -0.1847,  0.0075],
        ...,
        [ 0.0240, -0.2609,  0.0647,  ..., -0.4740,  0.2522,  0.2326],
        [ 0.1161, -0.2794,  0.0504,  ...,  0.1582, -0.0290,  0.3315],
        [-0.2567, -0.0167, -0.0296,  ...,  0.1555, -0.1909,  0.5495]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2304])
shifts shape: torch.Size([2304, 3])
sender shape: torch.Size([2304])
receiver shape: torch.Size([2304])
Edge attributes shape: torch.Size([2304, 9])
Edge attributes tensor([[ 1.0000,  1.2070,  0.9836,  ..., -0.0363, -0.9634, -0.5689],
        [ 1.0000, -0.2042,  1.7192,  ...,  2.1864, -0.1153, -0.0252],
        [ 1.0000,  1.4090, -0.7250,  ..., -0.5304,  0.6546, -0.9658],
        ...,
        [ 1.0000,  0.8291,  1.2822,  ...,  0.7201,  1.3534, -0.0122],
        [ 1.0000,  0.1715,  1.2997,  ...,  0.7706,  1.8994,  0.8081],
        [ 1.0000,  0.8455,  0.6281,  ..., -0.6770,  1.1149,  0.7590]])
Edge features shape: torch.Size([2304, 8])
Edge features tensor([[ 0.1681, -0.0643, -0.1435,  ..., -0.1567, -0.0379,  0.1712],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3546, -0.0176,  0.3325],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0410,  0.3173],
        ...,
        [ 0.0453, -0.0611,  0.0372,  ...,  0.0592, -0.0280, -0.0214],
        [ 0.2242,  0.0144, -0.2233,  ...,  0.0430, -0.2187, -0.0570],
        [ 0.1037, -0.0906, -0.0246,  ..., -0.0481,  0.1153, -0.0526]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2304, 96])
Tensor Product Weights tensor([[ 0.0447,  0.0623, -0.0518,  ...,  0.0653, -0.1345,  0.0087],
        [ 0.0915,  0.1491, -0.3562,  ...,  0.0611, -0.6043, -0.4523],
        [ 0.0896,  0.1582, -0.3470,  ...,  0.0421, -0.6125, -0.4534],
        ...,
        [ 0.0352, -0.0012, -0.0067,  ..., -0.0045,  0.0220,  0.0043],
        [-0.0271,  0.1323, -0.0254,  ..., -0.1290, -0.2175, -0.0767],
        [ 0.0885, -0.0171,  0.0512,  ...,  0.0918,  0.1088,  0.0891]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.4441,  0.4059,  0.0665,  ...,  0.0977, -0.0372, -0.0688],
        [ 0.2252,  0.3371,  0.1114,  ...,  0.0432,  0.1935,  0.1177],
        [ 0.6197,  0.3630,  0.1345,  ...,  0.0554,  0.0398, -0.0598],
        ...,
        [ 0.0940,  0.1722, -0.2398,  ..., -0.0411,  0.0112, -0.0815],
        [ 0.3060,  0.4152,  0.1191,  ..., -0.0422,  0.0993, -0.0140],
        [ 0.1182,  0.2351, -0.0042,  ..., -0.0146,  0.0007, -0.0505]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1770, -0.5906, -0.1054,  ...,  0.0927,  0.1690, -0.0662],
        [ 0.2138, -0.1537,  0.1277,  ..., -0.4758, -0.3931,  0.1814],
        [-0.3145, -0.5792, -0.0629,  ...,  0.1852, -0.2122,  0.0178],
        ...,
        [-0.0997, -0.1794,  0.0701,  ...,  0.7645, -0.0491,  0.0939],
        [ 0.0731, -0.2786,  0.0346,  ...,  0.3555,  0.0971, -0.0216],
        [-0.2294, -0.0559, -0.0535,  ...,  0.5716,  0.0055, -0.2375]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2282])
shifts shape: torch.Size([2282, 3])
sender shape: torch.Size([2282])
receiver shape: torch.Size([2282])
Edge attributes shape: torch.Size([2282, 9])
Edge attributes tensor([[ 1.0000,  1.2027,  0.9899,  ..., -0.0224, -0.9679, -0.5635],
        [ 1.0000, -0.2082,  1.7190,  ...,  2.1856, -0.0955, -0.0268],
        [ 1.0000,  1.4086, -0.7180,  ..., -0.5416,  0.6556, -0.9579],
        ...,
        [ 1.0000,  0.2671,  1.2373,  ...,  0.5937,  1.8885,  0.8561],
        [ 1.0000,  0.8944,  1.2362,  ...,  0.5905,  1.3081, -0.0828],
        [ 1.0000,  0.9796,  0.5490,  ..., -0.7811,  0.9346,  0.5030]])
Edge features shape: torch.Size([2282, 8])
Edge features tensor([[ 0.1680, -0.0645, -0.1433,  ..., -0.1568, -0.0373,  0.1711],
        [ 0.3438,  0.4318,  0.1985,  ..., -0.3546, -0.0176,  0.3325],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0410,  0.3173],
        ...,
        [ 0.2207,  0.0077, -0.2204,  ...,  0.0232, -0.2190, -0.0309],
        [ 0.0431, -0.0591,  0.0378,  ...,  0.0581, -0.0318, -0.0145],
        [ 0.1091, -0.0908, -0.0336,  ..., -0.0646,  0.1189, -0.0342]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2282, 96])
Tensor Product Weights tensor([[ 4.4905e-02,  6.2050e-02, -5.1544e-02,  ...,  6.5692e-02,
         -1.3384e-01,  9.0426e-03],
        [ 9.1480e-02,  1.4907e-01, -3.5619e-01,  ...,  6.1047e-02,
         -6.0436e-01, -4.5234e-01],
        [ 8.9634e-02,  1.5821e-01, -3.4697e-01,  ...,  4.2055e-02,
         -6.1256e-01, -4.5343e-01],
        ...,
        [-2.7631e-02,  1.3274e-01, -3.2652e-02,  ..., -1.1848e-01,
         -2.2715e-01, -7.6574e-02],
        [ 3.1456e-02,  1.1599e-05, -1.0445e-02,  ..., -6.6955e-03,
          1.5266e-02, -2.6402e-04],
        [ 8.8195e-02, -1.4916e-02,  4.7658e-02,  ...,  9.8423e-02,
          9.9437e-02,  8.9058e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 4.4361e-01,  4.0596e-01,  6.6033e-02,  ...,  9.8077e-02,
         -3.6280e-02, -6.8490e-02],
        [ 2.2616e-01,  3.3586e-01,  1.1337e-01,  ...,  3.9899e-02,
          1.9276e-01,  1.1741e-01],
        [ 6.2069e-01,  3.6222e-01,  1.3531e-01,  ...,  5.5138e-02,
          4.0711e-02, -5.8125e-02],
        ...,
        [ 2.4461e-01,  5.6864e-02, -1.9698e-01,  ...,  4.6921e-02,
         -9.6928e-02, -5.5485e-04],
        [ 3.1196e-01,  4.0150e-01,  1.2612e-01,  ..., -4.4313e-02,
          9.1479e-02,  4.3761e-03],
        [ 1.3207e-01,  2.0478e-01,  1.4026e-02,  ..., -1.4464e-02,
         -1.3886e-02, -5.1278e-02]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1771, -0.5907, -0.1049,  ...,  0.0918,  0.1694, -0.0655],
        [ 0.2135, -0.1542,  0.1272,  ..., -0.4758, -0.3943,  0.1804],
        [-0.3152, -0.5806, -0.0636,  ...,  0.1864, -0.2120,  0.0166],
        ...,
        [ 0.0228, -0.2633,  0.0625,  ..., -0.2216,  0.4181, -0.3428],
        [ 0.0546, -0.2761,  0.0211,  ...,  0.3378,  0.1211, -0.0612],
        [-0.2261, -0.0830, -0.0557,  ...,  0.5449,  0.0401, -0.3293]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2298])
shifts shape: torch.Size([2298, 3])
sender shape: torch.Size([2298])
receiver shape: torch.Size([2298])
Edge attributes shape: torch.Size([2298, 9])
Edge attributes tensor([[ 1.0000,  1.2034,  0.9902,  ..., -0.0217, -0.9662, -0.5661],
        [ 1.0000, -0.2038,  1.7197,  ...,  2.1884, -0.0749, -0.0261],
        [ 1.0000,  1.4044, -0.7186,  ..., -0.5407,  0.6634, -0.9430],
        ...,
        [ 1.0000,  0.1099,  0.9836,  ..., -0.0363,  1.8050,  1.2963],
        [ 1.0000,  0.3771,  1.0416,  ...,  0.0950,  1.7905,  1.0526],
        [ 1.0000,  1.1014,  1.3202,  ...,  0.8305,  0.3576, -0.7546]])
Edge features shape: torch.Size([2298, 8])
Edge features tensor([[ 1.6808e-01, -6.4374e-02, -1.4342e-01,  ..., -1.5674e-01,
         -3.7701e-02,  1.7117e-01],
        [ 3.4386e-01,  4.3195e-01,  1.9874e-01,  ..., -3.5502e-01,
         -1.8228e-02,  3.3212e-01],
        [ 3.4478e-01,  4.3702e-01,  2.0917e-01,  ..., -3.6941e-01,
         -4.1194e-02,  3.1719e-01],
        ...,
        [ 7.6351e-02, -8.3029e-02,  1.3939e-02,  ...,  2.7550e-02,
          5.7786e-02, -9.0390e-02],
        [ 5.9769e-03, -1.0771e-02,  1.3435e-02,  ..., -6.0016e-03,
          2.7395e-05,  5.9522e-03],
        [ 1.1462e-01, -9.0542e-02, -4.3102e-02,  ..., -8.0896e-02,
          1.1921e-01, -1.3273e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2298, 96])
Tensor Product Weights tensor([[ 0.0448,  0.0622, -0.0517,  ...,  0.0655, -0.1343,  0.0088],
        [ 0.0914,  0.1493, -0.3560,  ...,  0.0606, -0.6046, -0.4524],
        [ 0.0896,  0.1583, -0.3469,  ...,  0.0419, -0.6126, -0.4534],
        ...,
        [ 0.0775, -0.0171,  0.0434,  ...,  0.0454,  0.1065,  0.0669],
        [-0.0114,  0.0010, -0.0050,  ..., -0.0058, -0.0064, -0.0141],
        [ 0.0873, -0.0119,  0.0426,  ...,  0.1038,  0.0871,  0.0876]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 4.4623e-01,  4.0624e-01,  6.5078e-02,  ...,  9.8532e-02,
         -3.4794e-02, -6.8077e-02],
        [ 2.0394e-01,  3.4904e-01,  1.0407e-01,  ...,  4.0723e-02,
          1.9768e-01,  1.1958e-01],
        [ 6.1982e-01,  3.6363e-01,  1.3399e-01,  ...,  5.5162e-02,
          4.1613e-02, -5.6646e-02],
        ...,
        [ 9.4075e-02,  1.6794e-01, -2.4490e-01,  ...,  1.0023e-01,
          1.0071e-01, -5.6611e-04],
        [ 2.7922e-01,  4.0057e-01,  1.0963e-01,  ...,  4.6514e-02,
          1.0461e-01, -4.1592e-02],
        [ 1.0451e-01,  2.4223e-01, -4.7398e-02,  ...,  4.4306e-02,
         -4.2460e-02,  3.0279e-02]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1783, -0.5924, -0.1038,  ...,  0.0924,  0.1702, -0.0661],
        [ 0.2304, -0.1475,  0.1356,  ..., -0.4758, -0.4004,  0.1763],
        [-0.3175, -0.5801, -0.0609,  ...,  0.1861, -0.2124,  0.0170],
        ...,
        [-0.1111, -0.1722,  0.0986,  ..., -0.1544,  0.6693,  0.3921],
        [ 0.0828, -0.2783,  0.0019,  ..., -0.0237,  0.2015,  0.2904],
        [-0.3414, -0.1147, -0.0712,  ..., -0.2542,  0.1958,  0.5177]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2302])
shifts shape: torch.Size([2302, 3])
sender shape: torch.Size([2302])
receiver shape: torch.Size([2302])
Edge attributes shape: torch.Size([2302, 9])
Edge attributes tensor([[ 1.0000,  1.2083,  0.9833,  ..., -0.0370, -0.9611, -0.5724],
        [ 1.0000, -0.2022,  1.7195,  ...,  2.1876, -0.1101, -0.0248],
        [ 1.0000,  1.4079, -0.7255,  ..., -0.5295,  0.6567, -0.9622],
        ...,
        [ 1.0000,  0.1720,  1.2765,  ...,  0.7038,  1.9083,  0.8465],
        [ 1.0000,  0.8170,  1.2948,  ...,  0.7565,  1.3538, -0.0075],
        [ 1.0000,  0.8658,  0.6325,  ..., -0.6708,  1.1107,  0.7105]])
Edge features shape: torch.Size([2302, 8])
Edge features tensor([[ 0.1681, -0.0643, -0.1435,  ..., -0.1567, -0.0379,  0.1712],
        [ 0.3438,  0.4318,  0.1985,  ..., -0.3546, -0.0176,  0.3325],
        [ 0.3448,  0.4370,  0.2092,  ..., -0.3694, -0.0412,  0.3172],
        ...,
        [ 0.2258,  0.0176, -0.2244,  ...,  0.0523, -0.2176, -0.0692],
        [ 0.0466, -0.0624,  0.0368,  ...,  0.0596, -0.0254, -0.0256],
        [ 0.0997, -0.0901, -0.0181,  ..., -0.0358,  0.1106, -0.0643]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2302, 96])
Tensor Product Weights tensor([[ 0.0447,  0.0623, -0.0517,  ...,  0.0654, -0.1344,  0.0087],
        [ 0.0915,  0.1491, -0.3562,  ...,  0.0610, -0.6044, -0.4523],
        [ 0.0896,  0.1583, -0.3469,  ...,  0.0419, -0.6126, -0.4534],
        ...,
        [-0.0265,  0.1318, -0.0221,  ..., -0.1334, -0.2123, -0.0764],
        [ 0.0374, -0.0020, -0.0044,  ..., -0.0031,  0.0262,  0.0071],
        [ 0.0882, -0.0182,  0.0527,  ...,  0.0861,  0.1137,  0.0883]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.4454,  0.4060,  0.0659,  ...,  0.0977, -0.0368, -0.0688],
        [ 0.2266,  0.3375,  0.1113,  ...,  0.0431,  0.1943,  0.1175],
        [ 0.6196,  0.3630,  0.1344,  ...,  0.0554,  0.0402, -0.0597],
        ...,
        [ 0.2391,  0.0641, -0.2036,  ...,  0.0246, -0.1057,  0.0179],
        [ 0.3068,  0.4133,  0.1218,  ..., -0.0430,  0.0980, -0.0125],
        [ 0.1235,  0.2298,  0.0010,  ..., -0.0151, -0.0009, -0.0506]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1776, -0.5914, -0.1048,  ...,  0.0932,  0.1689, -0.0662],
        [ 0.2138, -0.1546,  0.1284,  ..., -0.4750, -0.3937,  0.1813],
        [-0.3148, -0.5791, -0.0626,  ...,  0.1851, -0.2123,  0.0177],
        ...,
        [ 0.0224, -0.2554,  0.0643,  ..., -0.2057,  0.3731, -0.4095],
        [ 0.0719, -0.2780,  0.0312,  ...,  0.3541,  0.1005, -0.0238],
        [-0.2301, -0.0607, -0.0571,  ...,  0.5692,  0.0088, -0.2465]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2294])
shifts shape: torch.Size([2294, 3])
sender shape: torch.Size([2294])
receiver shape: torch.Size([2294])
Edge attributes shape: torch.Size([2294, 9])
Edge attributes tensor([[ 1.0000,  1.2034,  0.9906,  ..., -0.0209, -0.9660, -0.5665],
        [ 1.0000, -0.2043,  1.7196,  ...,  2.1881, -0.0757, -0.0262],
        [ 1.0000,  1.4055, -0.7180,  ..., -0.5416,  0.6613, -0.9467],
        ...,
        [ 1.0000,  0.3781,  1.0329,  ...,  0.0747,  1.7841,  1.0633],
        [ 1.0000,  1.2731,  0.8055,  ..., -0.3927,  0.8887, -0.5749],
        [ 1.0000,  1.1058,  1.3185,  ...,  0.8257,  0.3344, -0.7644]])
Edge features shape: torch.Size([2294, 8])
Edge features tensor([[ 0.1681, -0.0644, -0.1434,  ..., -0.1567, -0.0377,  0.1712],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3550, -0.0182,  0.3322],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0411,  0.3173],
        ...,
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.0426, -0.0586,  0.0379,  ...,  0.0579, -0.0326, -0.0131],
        [ 0.1181, -0.0902, -0.0493,  ..., -0.0909,  0.1177,  0.0011]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2294, 96])
Tensor Product Weights tensor([[ 4.4769e-02,  6.2220e-02, -5.1681e-02,  ...,  6.5474e-02,
         -1.3425e-01,  8.8420e-03],
        [ 9.1440e-02,  1.4930e-01, -3.5597e-01,  ...,  6.0600e-02,
         -6.0456e-01, -4.5237e-01],
        [ 8.9632e-02,  1.5822e-01, -3.4696e-01,  ...,  4.2031e-02,
         -6.1257e-01, -4.5344e-01],
        ...,
        [-1.1209e-02,  8.5281e-04, -4.4766e-03,  ..., -5.5323e-03,
         -5.7678e-03, -1.3487e-02],
        [ 3.0657e-02,  2.6338e-04, -1.1213e-02,  ..., -7.1297e-03,
          1.3859e-02, -1.2157e-03],
        [ 8.6501e-02, -9.5012e-03,  3.8570e-02,  ...,  1.0647e-01,
          7.7743e-02,  8.5933e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.4461,  0.4062,  0.0651,  ...,  0.0986, -0.0348, -0.0684],
        [ 0.2044,  0.3488,  0.1043,  ...,  0.0404,  0.1973,  0.1193],
        [ 0.6196,  0.3638,  0.1339,  ...,  0.0550,  0.0415, -0.0568],
        ...,
        [ 0.0925,  0.1675, -0.2472,  ...,  0.1032,  0.0984, -0.0027],
        [ 0.2805,  0.4007,  0.1082,  ...,  0.0467,  0.1037, -0.0403],
        [ 0.1029,  0.2436, -0.0514,  ...,  0.0441, -0.0430,  0.0315]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1784, -0.5924, -0.1038,  ...,  0.0923,  0.1703, -0.0660],
        [ 0.2301, -0.1476,  0.1354,  ..., -0.4759, -0.4001,  0.1764],
        [-0.3170, -0.5799, -0.0609,  ...,  0.1861, -0.2123,  0.0170],
        ...,
        [-0.1062, -0.1703,  0.1011,  ..., -0.1574,  0.6750,  0.3748],
        [ 0.0808, -0.2796,  0.0041,  ..., -0.0218,  0.1995,  0.2923],
        [-0.3381, -0.1113, -0.0675,  ..., -0.2518,  0.1934,  0.5217]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2314])
shifts shape: torch.Size([2314, 3])
sender shape: torch.Size([2314])
receiver shape: torch.Size([2314])
Edge attributes shape: torch.Size([2314, 9])
Edge attributes tensor([[ 1.0000,  1.2031,  0.9957,  ..., -0.0096, -0.9629, -0.5721],
        [ 1.0000, -0.2085,  1.7192,  ...,  2.1865, -0.0634, -0.0275],
        [ 1.0000,  1.4093, -0.7119,  ..., -0.5514,  0.6544, -0.9548],
        ...,
        [ 1.0000,  0.9587,  1.2213,  ...,  0.5496,  1.2103, -0.2130],
        [ 1.0000,  0.7803,  1.5399,  ...,  1.5330,  0.2807, -0.3802],
        [ 1.0000,  1.4988,  0.8376,  ..., -0.3337,  0.2469, -1.4164]])
Edge features shape: torch.Size([2314, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0367,  0.1710],
        [ 0.3439,  0.4320,  0.1988,  ..., -0.3552, -0.0184,  0.3320],
        [ 0.3448,  0.4370,  0.2090,  ..., -0.3692, -0.0409,  0.3174],
        ...,
        [ 0.0435, -0.0594,  0.0377,  ...,  0.0584, -0.0312, -0.0158],
        [ 0.2216,  0.0094, -0.2212,  ...,  0.0281, -0.2192, -0.0374],
        [ 0.1123, -0.0907, -0.0391,  ..., -0.0741,  0.1195, -0.0224]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2314, 96])
Tensor Product Weights tensor([[ 4.5093e-02,  6.1814e-02, -5.1353e-02,  ...,  6.5993e-02,
         -1.3328e-01,  9.3208e-03],
        [ 9.1422e-02,  1.4940e-01, -3.5587e-01,  ...,  6.0389e-02,
         -6.0466e-01, -4.5239e-01],
        [ 8.9645e-02,  1.5816e-01, -3.4703e-01,  ...,  4.2163e-02,
         -6.1252e-01, -4.5343e-01],
        ...,
        [ 3.2162e-02, -2.1317e-04, -9.7593e-03,  ..., -6.3027e-03,
          1.6517e-02,  5.8307e-04],
        [-2.7611e-02,  1.3272e-01, -3.0842e-02,  ..., -1.2123e-01,
         -2.2490e-01, -7.6672e-02],
        [ 8.7763e-02, -1.3267e-02,  4.4906e-02,  ...,  1.0169e-01,
          9.2648e-02,  8.8372e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.4444,  0.4058,  0.0655,  ...,  0.0987, -0.0341, -0.0692],
        [ 0.2119,  0.3418,  0.1109,  ...,  0.0339,  0.1944,  0.1152],
        [ 0.6226,  0.3610,  0.1364,  ...,  0.0553,  0.0423, -0.0583],
        ...,
        [ 0.2435,  0.0594, -0.1994,  ..., -0.0253,  0.0528, -0.0502],
        [ 0.2796,  0.4502,  0.0955,  ..., -0.0020, -0.0460,  0.0379],
        [ 0.0268,  0.3106, -0.0147,  ..., -0.0181, -0.0202,  0.0341]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1773, -0.5913, -0.1041,  ...,  0.0920,  0.1700, -0.0648],
        [ 0.2253, -0.1499,  0.1298,  ..., -0.4725, -0.4025,  0.1759],
        [-0.3176, -0.5824, -0.0640,  ...,  0.1859, -0.2119,  0.0161],
        ...,
        [ 0.0240, -0.2612,  0.0647,  ..., -0.4686,  0.2598,  0.2345],
        [ 0.1167, -0.2790,  0.0507,  ...,  0.1586, -0.0237,  0.3316],
        [-0.2580, -0.0169, -0.0289,  ...,  0.1592, -0.1815,  0.5534]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2284])
shifts shape: torch.Size([2284, 3])
sender shape: torch.Size([2284])
receiver shape: torch.Size([2284])
Edge attributes shape: torch.Size([2284, 9])
Edge attributes tensor([[ 1.0000,  1.2038,  0.9900,  ..., -0.0223, -0.9655, -0.5671],
        [ 1.0000, -0.2071,  1.7191,  ...,  2.1863, -0.0911, -0.0266],
        [ 1.0000,  1.4088, -0.7182,  ..., -0.5413,  0.6554, -0.9586],
        ...,
        [ 1.0000,  0.2722,  1.2194,  ...,  0.5445,  1.8884,  0.8809],
        [ 1.0000,  0.8860,  1.2482,  ...,  0.6239,  1.3062, -0.0825],
        [ 1.0000,  0.9964,  0.5558,  ..., -0.7727,  0.9351,  0.4553]])
Edge features shape: torch.Size([2284, 8])
Edge features tensor([[ 0.1680, -0.0645, -0.1432,  ..., -0.1568, -0.0372,  0.1711],
        [ 0.3438,  0.4319,  0.1986,  ..., -0.3548, -0.0179,  0.3323],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0411,  0.3173],
        ...,
        [ 0.2225,  0.0111, -0.2219,  ...,  0.0332, -0.2191, -0.0441],
        [ 0.0442, -0.0601,  0.0375,  ...,  0.0587, -0.0299, -0.0180],
        [ 0.1052, -0.0907, -0.0271,  ..., -0.0526,  0.1166, -0.0478]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2284, 96])
Tensor Product Weights tensor([[ 4.4917e-02,  6.2034e-02, -5.1531e-02,  ...,  6.5711e-02,
         -1.3380e-01,  9.0609e-03],
        [ 9.1461e-02,  1.4918e-01, -3.5609e-01,  ...,  6.0836e-02,
         -6.0445e-01, -4.5236e-01],
        [ 8.9629e-02,  1.5823e-01, -3.4695e-01,  ...,  4.2009e-02,
         -6.1258e-01, -4.5344e-01],
        ...,
        [-2.7518e-02,  1.3263e-01, -2.9006e-02,  ..., -1.2393e-01,
         -2.2249e-01, -7.6717e-02],
        [ 3.3371e-02, -6.0388e-04, -8.5670e-03,  ..., -5.6080e-03,
          1.8685e-02,  2.0508e-03],
        [ 8.8455e-02, -1.6583e-02,  5.0351e-02,  ...,  9.3749e-02,
          1.0649e-01,  8.9258e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.4447,  0.4062,  0.0655,  ...,  0.0981, -0.0359, -0.0688],
        [ 0.2286,  0.3357,  0.1138,  ...,  0.0398,  0.1932,  0.1172],
        [ 0.6209,  0.3622,  0.1354,  ...,  0.0552,  0.0410, -0.0582],
        ...,
        [ 0.0872,  0.1680, -0.2458,  ...,  0.0716, -0.0110, -0.0305],
        [ 0.3121,  0.4005,  0.1280,  ..., -0.0441,  0.0910,  0.0052],
        [ 0.1343,  0.2027,  0.0176,  ..., -0.0149, -0.0148, -0.0505]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1777, -0.5913, -0.1044,  ...,  0.0923,  0.1695, -0.0654],
        [ 0.2124, -0.1555,  0.1272,  ..., -0.4753, -0.3946,  0.1804],
        [-0.3158, -0.5808, -0.0636,  ...,  0.1864, -0.2124,  0.0168],
        ...,
        [-0.0783, -0.1754,  0.0775,  ..., -0.3134, -0.6778, -0.0157],
        [ 0.0552, -0.2755,  0.0184,  ...,  0.3367,  0.1219, -0.0629],
        [-0.2279, -0.0862, -0.0582,  ...,  0.5422,  0.0409, -0.3348]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2310])
shifts shape: torch.Size([2310, 3])
sender shape: torch.Size([2310])
receiver shape: torch.Size([2310])
Edge attributes shape: torch.Size([2310, 9])
Edge attributes tensor([[ 1.0000,  1.2080,  0.9839,  ..., -0.0357, -0.9613, -0.5722],
        [ 1.0000, -0.2161,  1.7170,  ...,  2.1781, -0.1595, -0.0268],
        [ 1.0000,  1.4206, -0.7209,  ..., -0.5370,  0.6327, -1.0044],
        ...,
        [ 1.0000,  0.9615,  1.2083,  ...,  0.5142,  1.2238, -0.1995],
        [ 1.0000,  0.7748,  1.5399,  ...,  1.5332,  0.3351, -0.3691],
        [ 1.0000,  1.5000,  0.8307,  ..., -0.3465,  0.2627, -1.4136]])
Edge features shape: torch.Size([2310, 8])
Edge features tensor([[ 0.1677, -0.0648, -0.1426,  ..., -0.1571, -0.0357,  0.1709],
        [ 0.3439,  0.4320,  0.1988,  ..., -0.3551, -0.0184,  0.3320],
        [ 0.3448,  0.4369,  0.2090,  ..., -0.3691, -0.0407,  0.3175],
        ...,
        [ 0.0425, -0.0584,  0.0379,  ...,  0.0577, -0.0329, -0.0125],
        [ 0.2194,  0.0055, -0.2193,  ...,  0.0164, -0.2186, -0.0218],
        [ 0.1152, -0.0905, -0.0440,  ..., -0.0824,  0.1191, -0.0111]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2310, 96])
Tensor Product Weights tensor([[ 4.5418e-02,  6.1407e-02, -5.1021e-02,  ...,  6.6512e-02,
         -1.3231e-01,  9.8016e-03],
        [ 9.1425e-02,  1.4938e-01, -3.5589e-01,  ...,  6.0429e-02,
         -6.0464e-01, -4.5238e-01],
        [ 8.9661e-02,  1.5809e-01, -3.4710e-01,  ...,  4.2313e-02,
         -6.1246e-01, -4.5342e-01],
        ...,
        [ 3.0364e-02,  3.5468e-04, -1.1491e-02,  ..., -7.2855e-03,
          1.3348e-02, -1.5616e-03],
        [-2.7539e-02,  1.3269e-01, -3.5155e-02,  ..., -1.1455e-01,
         -2.3006e-01, -7.6350e-02],
        [ 8.7219e-02, -1.1544e-02,  4.2005e-02,  ...,  1.0424e-01,
          8.5733e-02,  8.7366e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.5122,  0.3883,  0.0978,  ...,  0.0902, -0.0387, -0.0719],
        [ 0.1908,  0.3548,  0.0835,  ...,  0.0313,  0.1815,  0.1117],
        [ 0.4907,  0.4205,  0.0846,  ...,  0.0466,  0.0040, -0.0496],
        ...,
        [ 0.2448,  0.0572, -0.1971,  ..., -0.0228,  0.0542, -0.0490],
        [ 0.2836,  0.4470,  0.0960,  ..., -0.0036, -0.0447,  0.0400],
        [ 0.0253,  0.3091, -0.0233,  ..., -0.0204, -0.0196,  0.0360]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1943, -0.6238, -0.1256,  ...,  0.0938,  0.1687, -0.0663],
        [ 0.2350, -0.1398,  0.1431,  ..., -0.4890, -0.3976,  0.1760],
        [-0.2074, -0.4736, -0.0270,  ...,  0.1515, -0.1846,  0.0073],
        ...,
        [ 0.0234, -0.2634,  0.0633,  ..., -0.4621,  0.2667,  0.2356],
        [ 0.1098, -0.2801,  0.0525,  ...,  0.1535, -0.0229,  0.3347],
        [-0.2504, -0.0117, -0.0242,  ...,  0.1461, -0.1830,  0.5548]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2292])
shifts shape: torch.Size([2292, 3])
sender shape: torch.Size([2292])
receiver shape: torch.Size([2292])
Edge attributes shape: torch.Size([2292, 9])
Edge attributes tensor([[ 1.0000,  1.2100,  0.9769,  ..., -0.0510, -0.9618, -0.5696],
        [ 1.0000, -0.2117,  1.7171,  ...,  2.1784, -0.1830, -0.0245],
        [ 1.0000,  1.4186, -0.7286,  ..., -0.5246,  0.6356, -1.0043],
        ...,
        [ 1.0000,  0.1004,  0.9543,  ..., -0.0999,  1.7765,  1.3356],
        [ 1.0000,  0.3681,  1.0142,  ...,  0.0321,  1.7741,  1.0975],
        [ 1.0000,  1.0976,  1.3172,  ...,  0.8217,  0.4178, -0.7387]])
Edge features shape: torch.Size([2292, 8])
Edge features tensor([[ 1.6778e-01, -6.4643e-02, -1.4288e-01,  ..., -1.5697e-01,
         -3.6287e-02,  1.7095e-01],
        [ 3.4386e-01,  4.3193e-01,  1.9871e-01,  ..., -3.5497e-01,
         -1.8149e-02,  3.3217e-01],
        [ 3.4478e-01,  4.3703e-01,  2.0918e-01,  ..., -3.6942e-01,
         -4.1217e-02,  3.1718e-01],
        ...,
        [ 7.6323e-02, -8.3016e-02,  1.3972e-02,  ...,  2.7611e-02,
          5.7705e-02, -9.0376e-02],
        [ 5.9710e-03, -1.0762e-02,  1.3424e-02,  ..., -6.0067e-03,
          3.9617e-05,  5.9353e-03],
        [ 1.1392e-01, -9.0597e-02, -4.1868e-02,  ..., -7.8831e-02,
          1.1936e-01, -1.6090e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2292, 96])
Tensor Product Weights tensor([[ 0.0452,  0.0617, -0.0512,  ...,  0.0662, -0.1329,  0.0095],
        [ 0.0914,  0.1493, -0.3560,  ...,  0.0606, -0.6046, -0.4524],
        [ 0.0896,  0.1583, -0.3469,  ...,  0.0419, -0.6126, -0.4534],
        ...,
        [ 0.0775, -0.0171,  0.0433,  ...,  0.0454,  0.1065,  0.0669],
        [-0.0114,  0.0010, -0.0050,  ..., -0.0058, -0.0064, -0.0141],
        [ 0.0875, -0.0123,  0.0433,  ...,  0.1032,  0.0888,  0.0878]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.5136,  0.3881,  0.0987,  ...,  0.0898, -0.0396, -0.0716],
        [ 0.1899,  0.3596,  0.0786,  ...,  0.0388,  0.1827,  0.1165],
        [ 0.4874,  0.4213,  0.0847,  ...,  0.0462,  0.0031, -0.0487],
        ...,
        [ 0.2442,  0.0577, -0.1978,  ...,  0.0703, -0.0861,  0.0347],
        [ 0.2772,  0.4010,  0.1092,  ...,  0.0416,  0.1070, -0.0402],
        [ 0.1031,  0.2421, -0.0467,  ...,  0.0460, -0.0415,  0.0283]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1951, -0.6247, -0.1266,  ...,  0.0945,  0.1683, -0.0674],
        [ 0.2326, -0.1400,  0.1483,  ..., -0.4930, -0.3927,  0.1771],
        [-0.2051, -0.4710, -0.0282,  ...,  0.1522, -0.1860,  0.0080],
        ...,
        [ 0.0235, -0.2623,  0.0633,  ...,  0.1120, -0.4804,  0.3164],
        [ 0.0845, -0.2769,  0.0018,  ..., -0.0256,  0.1953,  0.2936],
        [-0.3423, -0.1149, -0.0714,  ..., -0.2587,  0.1873,  0.5202]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2286])
shifts shape: torch.Size([2286, 3])
sender shape: torch.Size([2286])
receiver shape: torch.Size([2286])
Edge attributes shape: torch.Size([2286, 9])
Edge attributes tensor([[ 1.0000,  1.2098,  0.9774,  ..., -0.0499, -0.9619, -0.5697],
        [ 1.0000, -0.2122,  1.7170,  ...,  2.1781, -0.1825, -0.0247],
        [ 1.0000,  1.4193, -0.7279,  ..., -0.5256,  0.6344, -1.0060],
        ...,
        [ 1.0000,  0.1102,  0.9478,  ..., -0.1136,  1.7688,  1.3409],
        [ 1.0000,  0.3707,  1.0073,  ...,  0.0165,  1.7678,  1.1040],
        [ 1.0000,  1.1005,  1.3170,  ...,  0.8212,  0.3962, -0.7468]])
Edge features shape: torch.Size([2286, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1429,  ..., -0.1570, -0.0363,  0.1710],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3550, -0.0182,  0.3322],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3694, -0.0411,  0.3172],
        ...,
        [ 0.0766, -0.0832,  0.0136,  ...,  0.0269,  0.0586, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.1163, -0.0904, -0.0460,  ..., -0.0857,  0.1187, -0.0065]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2286, 96])
Tensor Product Weights tensor([[ 0.0452,  0.0617, -0.0512,  ...,  0.0662, -0.1329,  0.0095],
        [ 0.0914,  0.1493, -0.3560,  ...,  0.0606, -0.6046, -0.4524],
        [ 0.0896,  0.1583, -0.3469,  ...,  0.0420, -0.6126, -0.4534],
        ...,
        [ 0.0777, -0.0171,  0.0436,  ...,  0.0460,  0.1070,  0.0673],
        [-0.0112,  0.0009, -0.0045,  ..., -0.0055, -0.0058, -0.0135],
        [ 0.0870, -0.0108,  0.0407,  ...,  0.1051,  0.0828,  0.0869]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.5135,  0.3881,  0.0986,  ...,  0.0898, -0.0396, -0.0718],
        [ 0.1892,  0.3602,  0.0782,  ...,  0.0384,  0.1825,  0.1161],
        [ 0.4874,  0.4213,  0.0847,  ...,  0.0462,  0.0031, -0.0488],
        ...,
        [ 0.2451,  0.0561, -0.1962,  ...,  0.0678, -0.0867,  0.0347],
        [ 0.2787,  0.4008,  0.1084,  ...,  0.0422,  0.1059, -0.0389],
        [ 0.1021,  0.2429, -0.0496,  ...,  0.0457, -0.0422,  0.0298]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1950, -0.6246, -0.1266,  ...,  0.0944,  0.1683, -0.0673],
        [ 0.2331, -0.1398,  0.1487,  ..., -0.4927, -0.3929,  0.1771],
        [-0.2050, -0.4711, -0.0282,  ...,  0.1524, -0.1859,  0.0080],
        ...,
        [ 0.0229, -0.2639,  0.0620,  ...,  0.1188, -0.4739,  0.3216],
        [ 0.0825, -0.2780,  0.0033,  ..., -0.0233,  0.1937,  0.2952],
        [-0.3398, -0.1125, -0.0681,  ..., -0.2561,  0.1848,  0.5244]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2308])
shifts shape: torch.Size([2308, 3])
sender shape: torch.Size([2308])
receiver shape: torch.Size([2308])
Edge attributes shape: torch.Size([2308, 9])
Edge attributes tensor([[ 1.0000,  1.2013,  0.9765,  ..., -0.0519, -0.9793, -0.5420],
        [ 1.0000, -0.2075,  1.7181,  ...,  2.1821, -0.1606, -0.0244],
        [ 1.0000,  1.4019, -0.7313,  ..., -0.5201,  0.6675, -0.9459],
        ...,
        [ 1.0000,  0.1590,  1.2738,  ...,  0.6960,  1.9122,  0.8566],
        [ 1.0000,  0.8133,  1.2819,  ...,  0.7193,  1.3799,  0.0218],
        [ 1.0000,  0.8397,  0.6180,  ..., -0.6910,  1.1035,  0.7797]])
Edge features shape: torch.Size([2308, 8])
Edge features tensor([[ 0.1681, -0.0643, -0.1435,  ..., -0.1567, -0.0379,  0.1712],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3546, -0.0175,  0.3326],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0410,  0.3173],
        ...,
        [ 0.2255,  0.0170, -0.2242,  ...,  0.0507, -0.2179, -0.0671],
        [ 0.0464, -0.0622,  0.0369,  ...,  0.0596, -0.0259, -0.0249],
        [ 0.1004, -0.0902, -0.0192,  ..., -0.0379,  0.1115, -0.0623]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2308, 96])
Tensor Product Weights tensor([[ 0.0447,  0.0623, -0.0518,  ...,  0.0653, -0.1345,  0.0087],
        [ 0.0915,  0.1490, -0.3562,  ...,  0.0611, -0.6043, -0.4523],
        [ 0.0896,  0.1582, -0.3470,  ...,  0.0421, -0.6125, -0.4534],
        ...,
        [-0.0266,  0.1319, -0.0227,  ..., -0.1327, -0.2132, -0.0765],
        [ 0.0371, -0.0018, -0.0048,  ..., -0.0033,  0.0254,  0.0066],
        [ 0.0883, -0.0181,  0.0525,  ...,  0.0872,  0.1129,  0.0885]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.4499,  0.3973,  0.0785,  ...,  0.0936, -0.0494, -0.0631],
        [ 0.2103,  0.3480,  0.1054,  ...,  0.0418,  0.1941,  0.1184],
        [ 0.6334,  0.3501,  0.1510,  ...,  0.0549,  0.0310, -0.0591],
        ...,
        [ 0.0942,  0.1657, -0.2436,  ...,  0.0697, -0.0182, -0.0355],
        [ 0.3062,  0.4146,  0.1206,  ..., -0.0444,  0.0988, -0.0140],
        [ 0.1196,  0.2337, -0.0018,  ..., -0.0147,  0.0013, -0.0511]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1767, -0.5902, -0.1148,  ...,  0.0952,  0.1688, -0.0647],
        [ 0.2263, -0.1509,  0.1352,  ..., -0.4711, -0.3971,  0.1822],
        [-0.2992, -0.5853, -0.0867,  ...,  0.1804, -0.1989,  0.0154],
        ...,
        [-0.0719, -0.1767,  0.0774,  ..., -0.3187, -0.6664,  0.0124],
        [ 0.0739, -0.2785,  0.0327,  ...,  0.3559,  0.0966, -0.0160],
        [-0.2296, -0.0572, -0.0561,  ...,  0.5731,  0.0061, -0.2315]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2310])
shifts shape: torch.Size([2310, 3])
sender shape: torch.Size([2310])
receiver shape: torch.Size([2310])
Edge attributes shape: torch.Size([2310, 9])
Edge attributes tensor([[ 1.0000,  1.2075,  0.9834,  ..., -0.0368, -0.9626, -0.5701],
        [ 1.0000, -0.2166,  1.7169,  ...,  2.1775, -0.1639, -0.0268],
        [ 1.0000,  1.4205, -0.7213,  ..., -0.5363,  0.6329, -1.0042],
        ...,
        [ 1.0000,  0.9447,  1.2151,  ...,  0.5327,  1.2461, -0.1688],
        [ 1.0000,  0.7800,  1.5376,  ...,  1.5253,  0.3284, -0.3750],
        [ 1.0000,  1.4937,  0.8384,  ..., -0.3322,  0.2781, -1.3976]])
Edge features shape: torch.Size([2310, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1426,  ..., -0.1571, -0.0356,  0.1708],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3550, -0.0182,  0.3322],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0410,  0.3173],
        ...,
        [ 0.0439, -0.0598,  0.0376,  ...,  0.0586, -0.0305, -0.0170],
        [ 0.2223,  0.0107, -0.2217,  ...,  0.0321, -0.2192, -0.0427],
        [ 0.1106, -0.0908, -0.0362,  ..., -0.0690,  0.1193, -0.0288]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2310, 96])
Tensor Product Weights tensor([[ 4.5456e-02,  6.1359e-02, -5.0982e-02,  ...,  6.6572e-02,
         -1.3220e-01,  9.8580e-03],
        [ 9.1440e-02,  1.4930e-01, -3.5598e-01,  ...,  6.0601e-02,
         -6.0456e-01, -4.5237e-01],
        [ 8.9638e-02,  1.5820e-01, -3.4699e-01,  ...,  4.2087e-02,
         -6.1255e-01, -4.5343e-01],
        ...,
        [ 3.2838e-02, -4.3078e-04, -9.0953e-03,  ..., -5.9177e-03,
          1.7726e-02,  1.4012e-03],
        [-2.7544e-02,  1.3265e-01, -2.9397e-02,  ..., -1.2336e-01,
         -2.2301e-01, -7.6712e-02],
        [ 8.8018e-02, -1.4183e-02,  4.6440e-02,  ...,  1.0000e-01,
          9.6395e-02,  8.8796e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.5115,  0.3883,  0.0978,  ...,  0.0901, -0.0390, -0.0718],
        [ 0.1951,  0.3547,  0.0830,  ...,  0.0316,  0.1806,  0.1123],
        [ 0.4906,  0.4204,  0.0846,  ...,  0.0467,  0.0039, -0.0496],
        ...,
        [ 0.2432,  0.0598, -0.1997,  ..., -0.0281,  0.0507, -0.0517],
        [ 0.2811,  0.4485,  0.0969,  ...,  0.0010, -0.0456,  0.0384],
        [ 0.0250,  0.3093, -0.0161,  ..., -0.0174, -0.0213,  0.0335]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1939, -0.6232, -0.1258,  ...,  0.0935,  0.1686, -0.0666],
        [ 0.2292, -0.1416,  0.1440,  ..., -0.4892, -0.3960,  0.1761],
        [-0.2074, -0.4736, -0.0271,  ...,  0.1518, -0.1848,  0.0074],
        ...,
        [ 0.0240, -0.2608,  0.0647,  ..., -0.4754,  0.2520,  0.2302],
        [ 0.1160, -0.2793,  0.0502,  ...,  0.1577, -0.0290,  0.3316],
        [-0.2566, -0.0169, -0.0299,  ...,  0.1544, -0.1908,  0.5497]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2288])
shifts shape: torch.Size([2288, 3])
sender shape: torch.Size([2288])
receiver shape: torch.Size([2288])
Edge attributes shape: torch.Size([2288, 9])
Edge attributes tensor([[ 1.0000,  1.2060,  0.9784,  ..., -0.0479, -0.9689, -0.5590],
        [ 1.0000, -0.2169,  1.7162,  ...,  2.1748, -0.1944, -0.0254],
        [ 1.0000,  1.4205, -0.7264,  ..., -0.5280,  0.6322, -1.0091],
        ...,
        [ 1.0000,  0.0992,  0.9561,  ..., -0.0959,  1.7785,  1.3337],
        [ 1.0000,  0.3672,  1.0153,  ...,  0.0346,  1.7753,  1.0970],
        [ 1.0000,  1.1004,  1.3147,  ...,  0.8143,  0.4185, -0.7424]])
Edge features shape: torch.Size([2288, 8])
Edge features tensor([[ 1.6777e-01, -6.4655e-02, -1.4285e-01,  ..., -1.5698e-01,
         -3.6221e-02,  1.7094e-01],
        [ 3.4384e-01,  4.3182e-01,  1.9848e-01,  ..., -3.5465e-01,
         -1.7656e-02,  3.3248e-01],
        [ 3.4477e-01,  4.3698e-01,  2.0909e-01,  ..., -3.6930e-01,
         -4.1018e-02,  3.1731e-01],
        ...,
        [ 7.6339e-02, -8.3023e-02,  1.3953e-02,  ...,  2.7576e-02,
          5.7752e-02, -9.0384e-02],
        [ 5.9712e-03, -1.0762e-02,  1.3425e-02,  ..., -6.0065e-03,
          3.9119e-05,  5.9359e-03],
        [ 1.1397e-01, -9.0593e-02, -4.1966e-02,  ..., -7.8996e-02,
          1.1935e-01, -1.5867e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2288, 96])
Tensor Product Weights tensor([[ 0.0452,  0.0616, -0.0512,  ...,  0.0662, -0.1328,  0.0095],
        [ 0.0915,  0.1491, -0.3562,  ...,  0.0610, -0.6044, -0.4523],
        [ 0.0896,  0.1582, -0.3470,  ...,  0.0421, -0.6126, -0.4534],
        ...,
        [ 0.0775, -0.0171,  0.0433,  ...,  0.0454,  0.1065,  0.0669],
        [-0.0114,  0.0010, -0.0050,  ..., -0.0058, -0.0064, -0.0141],
        [ 0.0875, -0.0123,  0.0433,  ...,  0.1032,  0.0887,  0.0878]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.5118,  0.3885,  0.0983,  ...,  0.0895, -0.0409, -0.0712],
        [ 0.2068,  0.3477,  0.0880,  ...,  0.0387,  0.1789,  0.1161],
        [ 0.4875,  0.4209,  0.0847,  ...,  0.0460,  0.0025, -0.0488],
        ...,
        [ 0.2442,  0.0577, -0.1978,  ...,  0.0703, -0.0865,  0.0352],
        [ 0.2769,  0.4011,  0.1090,  ...,  0.0417,  0.1076, -0.0409],
        [ 0.1028,  0.2423, -0.0467,  ...,  0.0457, -0.0411,  0.0279]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1947, -0.6236, -0.1266,  ...,  0.0934,  0.1685, -0.0675],
        [ 0.2205, -0.1440,  0.1396,  ..., -0.4946, -0.3883,  0.1804],
        [-0.2052, -0.4718, -0.0286,  ...,  0.1534, -0.1861,  0.0083],
        ...,
        [ 0.0236, -0.2623,  0.0633,  ...,  0.1100, -0.4800,  0.3174],
        [ 0.0847, -0.2770,  0.0021,  ..., -0.0259,  0.1965,  0.2935],
        [-0.3426, -0.1147, -0.0721,  ..., -0.2585,  0.1883,  0.5187]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2306])
shifts shape: torch.Size([2306, 3])
sender shape: torch.Size([2306])
receiver shape: torch.Size([2306])
Edge attributes shape: torch.Size([2306, 9])
Edge attributes tensor([[ 1.0000,  1.1946,  0.9965,  ..., -0.0079, -0.9798, -0.5466],
        [ 1.0000, -0.2347,  1.7147,  ...,  2.1691, -0.1532, -0.0325],
        [ 1.0000,  1.4224, -0.7077,  ..., -0.5581,  0.6304, -0.9986],
        ...,
        [ 1.0000,  1.2841,  1.1594,  ...,  0.3848, -0.1243, -1.0599],
        [ 1.0000,  1.3368,  0.9232,  ..., -0.1651,  0.7158, -0.9207],
        [ 1.0000,  0.6703,  1.4589,  ...,  1.2616,  1.2240, -0.0174]])
Edge features shape: torch.Size([2306, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0366,  0.1710],
        [ 0.3438,  0.4317,  0.1983,  ..., -0.3544, -0.0173,  0.3327],
        [ 0.3448,  0.4370,  0.2092,  ..., -0.3695, -0.0413,  0.3171],
        ...,
        [ 0.2227,  0.0116, -0.2221,  ...,  0.0346, -0.2191, -0.0460],
        [ 0.0442, -0.0601,  0.0375,  ...,  0.0587, -0.0300, -0.0179],
        [ 0.1099, -0.0908, -0.0350,  ..., -0.0670,  0.1191, -0.0314]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2306, 96])
Tensor Product Weights tensor([[ 4.5112e-02,  6.1791e-02, -5.1334e-02,  ...,  6.6023e-02,
         -1.3323e-01,  9.3484e-03],
        [ 9.1500e-02,  1.4896e-01, -3.5630e-01,  ...,  6.1275e-02,
         -6.0425e-01, -4.5232e-01],
        [ 8.9613e-02,  1.5830e-01, -3.4688e-01,  ...,  4.1859e-02,
         -6.1264e-01, -4.5344e-01],
        ...,
        [-2.7478e-02,  1.3260e-01, -2.8481e-02,  ..., -1.2469e-01,
         -2.2178e-01, -7.6721e-02],
        [ 3.3318e-02, -5.8669e-04, -8.6195e-03,  ..., -5.6389e-03,
          1.8590e-02,  1.9863e-03],
        [ 8.8106e-02, -1.4535e-02,  4.7026e-02,  ...,  9.9272e-02,
          9.7851e-02,  8.8932e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.4989,  0.3952,  0.0906,  ...,  0.0926, -0.0314, -0.0705],
        [ 0.2071,  0.3442,  0.0896,  ...,  0.0261,  0.1792,  0.1084],
        [ 0.4903,  0.4231,  0.0808,  ...,  0.0474,  0.0114, -0.0495],
        ...,
        [ 0.2441,  0.0575, -0.1978,  ...,  0.0012,  0.0600, -0.0379],
        [ 0.2803,  0.4492,  0.0970,  ..., -0.0144, -0.0487,  0.0343],
        [ 0.0248,  0.3094, -0.0146,  ..., -0.0386, -0.0308,  0.0193]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1921, -0.6207, -0.1193,  ...,  0.0929,  0.1684, -0.0644],
        [ 0.2200, -0.1419,  0.1360,  ..., -0.4891, -0.3958,  0.1785],
        [-0.2204, -0.4852, -0.0180,  ...,  0.1564, -0.1808, -0.0067],
        ...,
        [ 0.0231, -0.2622,  0.0630,  ...,  0.3850, -0.4002, -0.1859],
        [ 0.1155, -0.2785,  0.0486,  ...,  0.1632, -0.0343,  0.3294],
        [-0.2702, -0.0202, -0.0208,  ...,  0.1619, -0.1952,  0.5470]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2286])
shifts shape: torch.Size([2286, 3])
sender shape: torch.Size([2286])
receiver shape: torch.Size([2286])
Edge attributes shape: torch.Size([2286, 9])
Edge attributes tensor([[ 1.0000,  1.1951,  0.9909,  ..., -0.0202, -0.9825, -0.5412],
        [ 1.0000, -0.2304,  1.7150,  ...,  2.1704, -0.1662, -0.0306],
        [ 1.0000,  1.4178, -0.7144,  ..., -0.5474,  0.6386, -0.9881],
        ...,
        [ 1.0000,  0.1105,  0.9571,  ..., -0.0938,  1.7785,  1.3294],
        [ 1.0000,  0.3775,  1.0172,  ...,  0.0387,  1.7729,  1.0847],
        [ 1.0000,  1.1002,  1.3176,  ...,  0.8230,  0.3937, -0.7467]])
Edge features shape: torch.Size([2286, 8])
Edge features tensor([[ 1.6806e-01, -6.4387e-02, -1.4340e-01,  ..., -1.5675e-01,
         -3.7632e-02,  1.7116e-01],
        [ 3.4381e-01,  4.3168e-01,  1.9819e-01,  ..., -3.5424e-01,
         -1.7017e-02,  3.3288e-01],
        [ 3.4479e-01,  4.3710e-01,  2.0933e-01,  ..., -3.6963e-01,
         -4.1557e-02,  3.1695e-01],
        ...,
        [ 7.6322e-02, -8.3015e-02,  1.3973e-02,  ...,  2.7615e-02,
          5.7700e-02, -9.0375e-02],
        [ 5.9673e-03, -1.0755e-02,  1.3418e-02,  ..., -6.0100e-03,
          4.7398e-05,  5.9245e-03],
        [ 1.1500e-01, -9.0509e-02, -4.3760e-02,  ..., -8.1989e-02,
          1.1912e-01, -1.1762e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2286, 96])
Tensor Product Weights tensor([[ 0.0448,  0.0622, -0.0517,  ...,  0.0655, -0.1342,  0.0089],
        [ 0.0915,  0.1488, -0.3564,  ...,  0.0615, -0.6041, -0.4523],
        [ 0.0896,  0.1584, -0.3468,  ...,  0.0416, -0.6127, -0.4535],
        ...,
        [ 0.0775, -0.0171,  0.0433,  ...,  0.0454,  0.1065,  0.0669],
        [-0.0114,  0.0010, -0.0050,  ..., -0.0058, -0.0064, -0.0141],
        [ 0.0873, -0.0116,  0.0422,  ...,  0.1041,  0.0861,  0.0874]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.5018,  0.3948,  0.0917,  ...,  0.0923, -0.0316, -0.0695],
        [ 0.2010,  0.3502,  0.0842,  ...,  0.0334,  0.1826,  0.1134],
        [ 0.4867,  0.4241,  0.0809,  ...,  0.0469,  0.0109, -0.0478],
        ...,
        [ 0.0943,  0.1679, -0.2449,  ...,  0.0965,  0.1020,  0.0008],
        [ 0.2802,  0.4002,  0.1097,  ...,  0.0443,  0.1057, -0.0393],
        [ 0.1047,  0.2416, -0.0483,  ...,  0.0444, -0.0428,  0.0305]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1931, -0.6225, -0.1202,  ...,  0.0939,  0.1680, -0.0651],
        [ 0.2241, -0.1401,  0.1415,  ..., -0.4928, -0.3938,  0.1791],
        [-0.2178, -0.4825, -0.0189,  ...,  0.1570, -0.1816, -0.0071],
        ...,
        [-0.1105, -0.1721,  0.0980,  ..., -0.1555,  0.6618,  0.4014],
        [ 0.0820, -0.2788,  0.0019,  ..., -0.0238,  0.1951,  0.2943],
        [-0.3400, -0.1152, -0.0686,  ..., -0.2561,  0.1827,  0.5234]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2306])
shifts shape: torch.Size([2306, 3])
sender shape: torch.Size([2306])
receiver shape: torch.Size([2306])
Edge attributes shape: torch.Size([2306, 9])
Edge attributes tensor([[ 1.0000,  1.2028,  0.9964,  ..., -0.0080, -0.9630, -0.5721],
        [ 1.0000, -0.2083,  1.7193,  ...,  2.1868, -0.0584, -0.0276],
        [ 1.0000,  1.4086, -0.7114,  ..., -0.5522,  0.6557, -0.9517],
        ...,
        [ 1.0000,  1.5047,  0.8287,  ..., -0.3503,  0.2369, -1.4299],
        [ 1.0000,  0.9710,  1.2184,  ...,  0.5416,  1.1903, -0.2390],
        [ 1.0000,  0.7811,  1.5399,  ...,  1.5332,  0.2712, -0.3818]])
Edge features shape: torch.Size([2306, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0367,  0.1710],
        [ 0.3439,  0.4320,  0.1988,  ..., -0.3552, -0.0184,  0.3320],
        [ 0.3448,  0.4369,  0.2090,  ..., -0.3692, -0.0408,  0.3174],
        ...,
        [ 0.1155, -0.0905, -0.0447,  ..., -0.0835,  0.1189, -0.0096],
        [ 0.0424, -0.0584,  0.0379,  ...,  0.0577, -0.0330, -0.0123],
        [ 0.2193,  0.0052, -0.2192,  ...,  0.0155, -0.2185, -0.0206]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2306, 96])
Tensor Product Weights tensor([[ 4.5089e-02,  6.1820e-02, -5.1358e-02,  ...,  6.5986e-02,
         -1.3330e-01,  9.3139e-03],
        [ 9.1422e-02,  1.4940e-01, -3.5588e-01,  ...,  6.0396e-02,
         -6.0466e-01, -4.5239e-01],
        [ 8.9653e-02,  1.5813e-01, -3.4706e-01,  ...,  4.2230e-02,
         -6.1249e-01, -4.5343e-01],
        ...,
        [ 8.7135e-02, -1.1297e-02,  4.1589e-02,  ...,  1.0455e-01,
          8.4756e-02,  8.7205e-02],
        [ 3.0255e-02,  3.8870e-04, -1.1595e-02,  ..., -7.3434e-03,
          1.3157e-02, -1.6905e-03],
        [-2.7517e-02,  1.3267e-01, -3.5474e-02,  ..., -1.1404e-01,
         -2.3042e-01, -7.6314e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.4448,  0.4058,  0.0654,  ...,  0.0988, -0.0337, -0.0691],
        [ 0.2114,  0.3421,  0.1107,  ...,  0.0337,  0.1951,  0.1152],
        [ 0.6226,  0.3612,  0.1362,  ...,  0.0552,  0.0425, -0.0581],
        ...,
        [ 0.0898,  0.1703, -0.2428,  ..., -0.0294, -0.0176, -0.0247],
        [ 0.2821,  0.4483,  0.0954,  ..., -0.0072, -0.0450,  0.0397],
        [ 0.0271,  0.3102, -0.0213,  ..., -0.0216, -0.0183,  0.0365]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1776, -0.5916, -0.1040,  ...,  0.0919,  0.1702, -0.0650],
        [ 0.2256, -0.1498,  0.1300,  ..., -0.4721, -0.4029,  0.1757],
        [-0.3181, -0.5825, -0.0637,  ...,  0.1858, -0.2120,  0.0161],
        ...,
        [-0.0889, -0.1765,  0.0746,  ...,  0.5341, -0.2305,  0.4893],
        [ 0.1104, -0.2797,  0.0523,  ...,  0.1541, -0.0168,  0.3347],
        [-0.2522, -0.0118, -0.0241,  ...,  0.1499, -0.1727,  0.5589]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2286])
shifts shape: torch.Size([2286, 3])
sender shape: torch.Size([2286])
receiver shape: torch.Size([2286])
Edge attributes shape: torch.Size([2286, 9])
Edge attributes tensor([[ 1.0000,  1.1943,  0.9840,  ..., -0.0355, -0.9883, -0.5301],
        [ 1.0000, -0.2155,  1.7173,  ...,  2.1792, -0.1474, -0.0271],
        [ 1.0000,  1.4015, -0.7231,  ..., -0.5334,  0.6685, -0.9370],
        ...,
        [ 1.0000,  0.8748,  1.2356,  ...,  0.5889,  1.3422, -0.0370],
        [ 1.0000,  0.2478,  1.2167,  ...,  0.5370,  1.8968,  0.9016],
        [ 1.0000,  0.9622,  0.5414,  ..., -0.7904,  0.9327,  0.5520]])
Edge features shape: torch.Size([2286, 8])
Edge features tensor([[ 0.1680, -0.0644, -0.1434,  ..., -0.1568, -0.0375,  0.1712],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3546, -0.0175,  0.3326],
        [ 0.3448,  0.4369,  0.2090,  ..., -0.3692, -0.0408,  0.3175],
        ...,
        [ 0.0439, -0.0598,  0.0376,  ...,  0.0586, -0.0305, -0.0171],
        [ 0.2220,  0.0103, -0.2215,  ...,  0.0307, -0.2192, -0.0409],
        [ 0.1063, -0.0907, -0.0289,  ..., -0.0560,  0.1174, -0.0441]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2286, 96])
Tensor Product Weights tensor([[ 4.4812e-02,  6.2166e-02, -5.1638e-02,  ...,  6.5543e-02,
         -1.3412e-01,  8.9055e-03],
        [ 9.1486e-02,  1.4904e-01, -3.5622e-01,  ...,  6.1117e-02,
         -6.0432e-01, -4.5234e-01],
        [ 8.9653e-02,  1.5813e-01, -3.4706e-01,  ...,  4.2237e-02,
         -6.1249e-01, -4.5343e-01],
        ...,
        [ 3.2865e-02, -4.3977e-04, -9.0679e-03,  ..., -5.9017e-03,
          1.7776e-02,  1.4350e-03],
        [-2.7572e-02,  1.3268e-01, -2.9888e-02,  ..., -1.2264e-01,
         -2.2366e-01, -7.6702e-02],
        [ 8.8414e-02, -1.6155e-02,  4.9674e-02,  ...,  9.5136e-02,
          1.0466e-01,  8.9276e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.4496,  0.3972,  0.0786,  ...,  0.0940, -0.0491, -0.0620],
        [ 0.2105,  0.3479,  0.1069,  ...,  0.0378,  0.1934,  0.1181],
        [ 0.6348,  0.3489,  0.1526,  ...,  0.0545,  0.0314, -0.0578],
        ...,
        [ 0.0918,  0.1722, -0.2422,  ..., -0.0426,  0.0130, -0.0882],
        [ 0.3119,  0.4016,  0.1273,  ..., -0.0470,  0.0910,  0.0029],
        [ 0.1320,  0.2045,  0.0159,  ..., -0.0140, -0.0122, -0.0527]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1771, -0.5904, -0.1146,  ...,  0.0945,  0.1695, -0.0640],
        [ 0.2272, -0.1514,  0.1356,  ..., -0.4708, -0.3992,  0.1810],
        [-0.2992, -0.5876, -0.0887,  ...,  0.1812, -0.1979,  0.0143],
        ...,
        [-0.0960, -0.1773,  0.0725,  ...,  0.7690, -0.0380,  0.0163],
        [ 0.0558, -0.2760,  0.0203,  ...,  0.3398,  0.1202, -0.0529],
        [-0.2274, -0.0840, -0.0573,  ...,  0.5500,  0.0395, -0.3185]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2280])
shifts shape: torch.Size([2280, 3])
sender shape: torch.Size([2280])
receiver shape: torch.Size([2280])
Edge attributes shape: torch.Size([2280, 9])
Edge attributes tensor([[ 1.0000,  1.1950,  0.9911,  ..., -0.0197, -0.9826, -0.5410],
        [ 1.0000, -0.2318,  1.7147,  ...,  2.1693, -0.1711, -0.0308],
        [ 1.0000,  1.4196, -0.7138,  ..., -0.5483,  0.6353, -0.9941],
        ...,
        [ 1.0000,  0.1205,  0.9467,  ..., -0.1161,  1.7665,  1.3393],
        [ 1.0000,  0.3804,  1.0064,  ...,  0.0144,  1.7636,  1.0959],
        [ 1.0000,  1.1045,  1.3161,  ...,  0.8186,  0.3722, -0.7564]])
Edge features shape: torch.Size([2280, 8])
Edge features tensor([[ 0.1680, -0.0644, -0.1434,  ..., -0.1568, -0.0375,  0.1711],
        [ 0.3438,  0.4317,  0.1981,  ..., -0.3542, -0.0169,  0.3329],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0415,  0.3170],
        ...,
        [ 0.0766, -0.0832,  0.0136,  ...,  0.0269,  0.0586, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.1183, -0.0901, -0.0496,  ..., -0.0914,  0.1176,  0.0017]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2280, 96])
Tensor Product Weights tensor([[ 0.0448,  0.0622, -0.0516,  ...,  0.0656, -0.1341,  0.0089],
        [ 0.0915,  0.1488, -0.3565,  ...,  0.0616, -0.6041, -0.4523],
        [ 0.0896,  0.1584, -0.3468,  ...,  0.0416, -0.6127, -0.4535],
        ...,
        [ 0.0777, -0.0172,  0.0437,  ...,  0.0460,  0.1070,  0.0674],
        [-0.0112,  0.0009, -0.0045,  ..., -0.0055, -0.0058, -0.0135],
        [ 0.0865, -0.0094,  0.0384,  ...,  0.1066,  0.0773,  0.0859]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.5010,  0.3950,  0.0915,  ...,  0.0922, -0.0321, -0.0698],
        [ 0.2019,  0.3496,  0.0848,  ...,  0.0329,  0.1816,  0.1130],
        [ 0.4871,  0.4238,  0.0809,  ...,  0.0469,  0.0107, -0.0481],
        ...,
        [ 0.0928,  0.1674, -0.2471,  ...,  0.0994,  0.1002, -0.0012],
        [ 0.2816,  0.4001,  0.1085,  ...,  0.0444,  0.1046, -0.0378],
        [ 0.1034,  0.2428, -0.0520,  ...,  0.0441, -0.0434,  0.0319]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1928, -0.6220, -0.1200,  ...,  0.0938,  0.1680, -0.0650],
        [ 0.2232, -0.1401,  0.1408,  ..., -0.4929, -0.3931,  0.1793],
        [-0.2180, -0.4831, -0.0189,  ...,  0.1573, -0.1816, -0.0066],
        ...,
        [-0.1057, -0.1703,  0.1004,  ..., -0.1578,  0.6667,  0.3863],
        [ 0.0799, -0.2802,  0.0039,  ..., -0.0215,  0.1927,  0.2965],
        [-0.3368, -0.1120, -0.0651,  ..., -0.2533,  0.1792,  0.5282]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2302])
shifts shape: torch.Size([2302, 3])
sender shape: torch.Size([2302])
receiver shape: torch.Size([2302])
Edge attributes shape: torch.Size([2302, 9])
Edge attributes tensor([[ 1.0000,  1.2053,  0.9837,  ..., -0.0362, -0.9668, -0.5636],
        [ 1.0000, -0.2195,  1.7163,  ...,  2.1753, -0.1743, -0.0271],
        [ 1.0000,  1.4221, -0.7204,  ..., -0.5377,  0.6298, -1.0096],
        ...,
        [ 1.0000,  0.7666,  1.5429,  ...,  1.5435,  0.3552, -0.3588],
        [ 1.0000,  1.4917,  0.8447,  ..., -0.3204,  0.2703, -1.3967],
        [ 1.0000,  0.9488,  1.2106,  ...,  0.5205,  1.2446, -0.1717]])
Edge features shape: torch.Size([2302, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1425,  ..., -0.1571, -0.0354,  0.1708],
        [ 0.3438,  0.4319,  0.1986,  ..., -0.3548, -0.0178,  0.3324],
        [ 0.3448,  0.4369,  0.2090,  ..., -0.3692, -0.0408,  0.3174],
        ...,
        [ 0.2214,  0.0092, -0.2211,  ...,  0.0275, -0.2192, -0.0366],
        [ 0.1125, -0.0907, -0.0393,  ..., -0.0745,  0.1195, -0.0218],
        [ 0.0435, -0.0594,  0.0377,  ...,  0.0584, -0.0312, -0.0157]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2302, 96])
Tensor Product Weights tensor([[ 4.5516e-02,  6.1284e-02, -5.0920e-02,  ...,  6.6668e-02,
         -1.3202e-01,  9.9472e-03],
        [ 9.1465e-02,  1.4916e-01, -3.5611e-01,  ...,  6.0877e-02,
         -6.0443e-01, -4.5235e-01],
        [ 8.9652e-02,  1.5813e-01, -3.4706e-01,  ...,  4.2224e-02,
         -6.1249e-01, -4.5343e-01],
        ...,
        [-2.7618e-02,  1.3272e-01, -3.1070e-02,  ..., -1.2089e-01,
         -2.2519e-01, -7.6662e-02],
        [ 8.7738e-02, -1.3180e-02,  4.4759e-02,  ...,  1.0184e-01,
          9.2292e-02,  8.8327e-02],
        [ 3.2080e-02, -1.8717e-04, -9.8387e-03,  ..., -6.3484e-03,
          1.6373e-02,  4.8516e-04]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.5104,  0.3887,  0.0975,  ...,  0.0898, -0.0401, -0.0716],
        [ 0.2110,  0.3434,  0.0917,  ...,  0.0321,  0.1771,  0.1119],
        [ 0.4908,  0.4201,  0.0847,  ...,  0.0466,  0.0034, -0.0498],
        ...,
        [ 0.0880,  0.1693, -0.2407,  ...,  0.0085,  0.0760,  0.0635],
        [ 0.2802,  0.4499,  0.0954,  ...,  0.0029, -0.0453,  0.0377],
        [ 0.0231,  0.3109, -0.0167,  ..., -0.0162, -0.0214,  0.0327]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1938, -0.6226, -0.1257,  ...,  0.0927,  0.1687, -0.0666],
        [ 0.2181, -0.1458,  0.1359,  ..., -0.4906, -0.3916,  0.1794],
        [-0.2074, -0.4741, -0.0274,  ...,  0.1527, -0.1849,  0.0077],
        ...,
        [-0.0854, -0.1788,  0.0736,  ..., -0.1300, -0.5012, -0.5483],
        [ 0.1178, -0.2792,  0.0513,  ...,  0.1585, -0.0309,  0.3308],
        [-0.2577, -0.0163, -0.0284,  ...,  0.1582, -0.1929,  0.5484]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2304])
shifts shape: torch.Size([2304, 3])
sender shape: torch.Size([2304])
receiver shape: torch.Size([2304])
Edge attributes shape: torch.Size([2304, 9])
Edge attributes tensor([[ 1.0000,  1.2037,  0.9962,  ..., -0.0084, -0.9613, -0.5746],
        [ 1.0000, -0.2085,  1.7192,  ...,  2.1866, -0.0611, -0.0276],
        [ 1.0000,  1.4099, -0.7113,  ..., -0.5523,  0.6533, -0.9565],
        ...,
        [ 1.0000,  1.0806,  1.3534,  ...,  0.9299, -0.0392, -0.7535],
        [ 1.0000,  0.6862,  0.6068,  ..., -0.7064,  1.1515,  1.0909],
        [ 1.0000,  0.9248,  1.0880,  ...,  0.2055,  1.3770,  0.0684]])
Edge features shape: torch.Size([2304, 8])
Edge features tensor([[ 1.6785e-01, -6.4584e-02, -1.4300e-01,  ..., -1.5692e-01,
         -3.6598e-02,  1.7100e-01],
        [ 3.4387e-01,  4.3199e-01,  1.9882e-01,  ..., -3.5513e-01,
         -1.8398e-02,  3.3201e-01],
        [ 3.4476e-01,  4.3694e-01,  2.0900e-01,  ..., -3.6919e-01,
         -4.0831e-02,  3.1744e-01],
        ...,
        [ 5.9122e-03, -1.0662e-02,  1.3315e-02,  ..., -6.0560e-03,
          1.5990e-04,  5.7676e-03],
        [ 2.2341e-01,  1.2919e-02, -2.2266e-01,  ...,  3.8585e-02,
         -2.1894e-01, -5.1245e-02],
        [ 4.4573e-02, -6.0458e-02,  3.7430e-02,  ...,  5.8905e-02,
         -2.9325e-02, -1.9129e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        ...,
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238],
        [ 0.4356, -0.3593,  0.0091,  ...,  0.2086, -0.0110,  1.1050],
        [-0.4001, -0.1520,  0.2151,  ...,  0.3061, -0.3031, -0.3238]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2304, 96])
Tensor Product Weights tensor([[ 0.0451,  0.0618, -0.0513,  ...,  0.0660, -0.1332,  0.0094],
        [ 0.0914,  0.1494, -0.3559,  ...,  0.0604, -0.6046, -0.4524],
        [ 0.0897,  0.1581, -0.3471,  ...,  0.0422, -0.6125, -0.4534],
        ...,
        [-0.0114,  0.0009, -0.0049,  ..., -0.0057, -0.0063, -0.0140],
        [-0.0273,  0.1325, -0.0270,  ..., -0.1268, -0.2198, -0.0767],
        [ 0.0340, -0.0008, -0.0080,  ..., -0.0053,  0.0198,  0.0028]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.4444,  0.4057,  0.0655,  ...,  0.0987, -0.0339, -0.0694],
        [ 0.2121,  0.3417,  0.1110,  ...,  0.0334,  0.1950,  0.1144],
        [ 0.6230,  0.3608,  0.1366,  ...,  0.0552,  0.0424, -0.0586],
        ...,
        [ 0.0901,  0.1681, -0.2419,  ...,  0.0850,  0.0487,  0.0150],
        [ 0.2319,  0.4191,  0.1038,  ...,  0.0084,  0.0010,  0.0695],
        [ 0.0391,  0.2455,  0.0178,  ...,  0.0156, -0.0753,  0.0010]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.1773, -0.5913, -0.1041,  ...,  0.0919,  0.1700, -0.0647],
        [ 0.2252, -0.1499,  0.1297,  ..., -0.4716, -0.4023,  0.1760],
        [-0.3177, -0.5827, -0.0643,  ...,  0.1857, -0.2120,  0.0161],
        ...,
        [-0.0801, -0.1776,  0.0752,  ..., -0.1205, -0.6733, -0.3035],
        [ 0.1389, -0.2400,  0.0304,  ...,  0.1659,  0.3454, -0.0933],
        [-0.3009, -0.0744, -0.0869,  ...,  0.1921,  0.4744, -0.3308]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
process_conformer_ensemble input shape: torch.Size([32, 96, 32])
Num conformers: 32, Total dim: 3072
Scalar dim: 768, Vector dim: 768
mean_pooling:
  Scalar shape: torch.Size([32, 768])
  Vector shape: torch.Size([32, 768, 3])
  Scalar: tensor([[-0.0076,  1.1036, -0.5630,  ...,  0.6310, -0.3278,  0.3654],
        [-0.0144,  1.2027, -0.5986,  ..., -0.3331, -0.0451,  0.3869],
        [-0.0126,  1.1844, -0.5912,  ..., -0.3500, -0.0108,  0.3719],
        ...,
        [-0.0126,  1.1853, -0.5915,  ..., -0.3444, -0.0089,  0.3783],
        [-0.0144,  1.2014, -0.5978,  ..., -0.3309, -0.0340,  0.3913],
        [-0.0077,  1.1026, -0.5621,  ...,  0.6235, -0.3335,  0.3730]],
       grad_fn=<DivBackward0>)
  Vector: tensor([[[-0.0190, -0.0459,  0.0123],
         [ 0.0040,  0.0446, -0.1195],
         [ 0.1053,  0.1268,  0.0562],
         ...,
         [-0.2622, -0.0670,  0.0968],
         [ 0.2611,  0.1150,  0.0042],
         [ 0.6006,  0.2402, -0.0364]],

        [[ 0.0238, -0.2483,  0.1187],
         [ 0.0129,  0.2056, -0.1714],
         [ 0.1902,  0.1268,  0.1836],
         ...,
         [-0.2783, -0.0359,  0.0420],
         [ 0.2600,  0.0979,  0.0075],
         [ 0.6268,  0.2015,  0.0717]],

        [[ 0.0238, -0.2492,  0.1200],
         [ 0.0134,  0.2059, -0.1707],
         [ 0.1903,  0.1269,  0.1764],
         ...,
         [-0.2761, -0.0416,  0.0497],
         [ 0.2612,  0.1018,  0.0167],
         [ 0.6227,  0.2094,  0.0657]],

        ...,

        [[ 0.0238, -0.2492,  0.1200],
         [ 0.0134,  0.2060, -0.1706],
         [ 0.1903,  0.1269,  0.1782],
         ...,
         [ 0.0388, -0.1011, -0.2464],
         [ 0.0117,  0.1903,  0.2541],
         [-0.0050,  0.3735,  0.5668]],

        [[ 0.0237, -0.2483,  0.1187],
         [ 0.0130,  0.2057, -0.1714],
         [ 0.1902,  0.1269,  0.1825],
         ...,
         [-0.0895,  0.0840, -0.2595],
         [ 0.0128, -0.0230,  0.2627],
         [ 0.2516, -0.0234,  0.5783]],

        [[-0.0188, -0.0477,  0.0137],
         [ 0.0039,  0.0449, -0.1201],
         [ 0.1052,  0.1264,  0.0573],
         ...,
         [-0.1107, -0.2052,  0.1512],
         [ 0.1012,  0.3059,  0.0298],
         [ 0.3122,  0.6003, -0.0431]]], grad_fn=<DivBackward0>)
--------------------------------------------------
deep_sets:
  Scalar shape: torch.Size([32, 768])
  Vector shape: torch.Size([32, 768, 3])
  Scalar: tensor([[-0.0059, -0.0070,  0.0134,  ..., -0.0086, -0.0018,  0.0017],
        [-0.0070, -0.0061,  0.0138,  ..., -0.0072, -0.0018,  0.0022],
        [-0.0069, -0.0061,  0.0136,  ..., -0.0072, -0.0019,  0.0020],
        ...,
        [-0.0070, -0.0061,  0.0136,  ..., -0.0073, -0.0018,  0.0019],
        [-0.0070, -0.0062,  0.0139,  ..., -0.0073, -0.0016,  0.0018],
        [-0.0059, -0.0071,  0.0136,  ..., -0.0085, -0.0016,  0.0015]],
       grad_fn=<SiluBackward0>)
  Vector: tensor([[[ 0.0079,  0.0014, -0.0023],
         [-0.0046, -0.0061,  0.0084],
         [-0.0027,  0.0103,  0.0100],
         ...,
         [ 0.0078,  0.0077,  0.0098],
         [-0.0099, -0.0010,  0.0025],
         [-0.0045,  0.0139, -0.0118]],

        [[ 0.0103,  0.0010, -0.0019],
         [-0.0050, -0.0057,  0.0085],
         [-0.0036,  0.0085,  0.0093],
         ...,
         [ 0.0094,  0.0100,  0.0055],
         [-0.0081,  0.0013,  0.0015],
         [-0.0056,  0.0104, -0.0099]],

        [[ 0.0101,  0.0005, -0.0003],
         [-0.0049, -0.0045,  0.0082],
         [-0.0043,  0.0094,  0.0086],
         ...,
         [ 0.0098,  0.0071,  0.0080],
         [-0.0089, -0.0014,  0.0013],
         [-0.0051,  0.0114, -0.0093]],

        ...,

        [[ 0.0096,  0.0015, -0.0017],
         [-0.0053, -0.0040,  0.0090],
         [-0.0035,  0.0116,  0.0083],
         ...,
         [ 0.0096,  0.0093,  0.0060],
         [-0.0067,  0.0004,  0.0022],
         [-0.0043,  0.0089, -0.0078]],

        [[ 0.0107,  0.0023, -0.0024],
         [-0.0062, -0.0050,  0.0078],
         [-0.0039,  0.0084,  0.0094],
         ...,
         [ 0.0089,  0.0091,  0.0074],
         [-0.0069, -0.0004,  0.0010],
         [-0.0038,  0.0090, -0.0087]],

        [[ 0.0085,  0.0021, -0.0006],
         [-0.0049, -0.0046,  0.0089],
         [-0.0022,  0.0107,  0.0095],
         ...,
         [ 0.0097,  0.0074,  0.0110],
         [-0.0104, -0.0003,  0.0023],
         [-0.0044,  0.0120, -0.0117]]], grad_fn=<ViewBackward0>)
--------------------------------------------------
self_attention:
  Scalar shape: torch.Size([32, 768])
  Vector shape: torch.Size([32, 768, 3])
  Scalar: tensor([[ 0.0155,  0.0144, -0.0166,  ..., -0.0083, -0.0183,  0.0103],
        [ 0.0154,  0.0149, -0.0176,  ..., -0.0090, -0.0183,  0.0095],
        [ 0.0155,  0.0149, -0.0180,  ..., -0.0090, -0.0184,  0.0093],
        ...,
        [ 0.0155,  0.0150, -0.0180,  ..., -0.0091, -0.0184,  0.0093],
        [ 0.0150,  0.0146, -0.0177,  ..., -0.0087, -0.0182,  0.0093],
        [ 0.0153,  0.0141, -0.0168,  ..., -0.0078, -0.0182,  0.0101]],
       grad_fn=<SiluBackward0>)
  Vector: tensor([[[ 0.0080, -0.0067,  0.0036],
         [-0.0049, -0.0062, -0.0029],
         [-0.0076, -0.0039, -0.0120],
         ...,
         [-0.0001,  0.0022,  0.0042],
         [ 0.0071, -0.0009, -0.0071],
         [-0.0019, -0.0092,  0.0057]],

        [[ 0.0108, -0.0058,  0.0031],
         [-0.0037, -0.0057, -0.0027],
         [-0.0048, -0.0034, -0.0135],
         ...,
         [-0.0004,  0.0017,  0.0059],
         [ 0.0085, -0.0024, -0.0078],
         [-0.0006, -0.0095,  0.0087]],

        [[ 0.0095, -0.0065,  0.0024],
         [-0.0051, -0.0077, -0.0024],
         [-0.0074, -0.0040, -0.0124],
         ...,
         [-0.0011,  0.0014,  0.0052],
         [ 0.0075, -0.0032, -0.0067],
         [-0.0026, -0.0090,  0.0059]],

        ...,

        [[ 0.0114, -0.0057,  0.0024],
         [-0.0056, -0.0072, -0.0019],
         [-0.0087, -0.0030, -0.0136],
         ...,
         [-0.0005,  0.0010,  0.0066],
         [ 0.0078, -0.0037, -0.0074],
         [-0.0022, -0.0085,  0.0080]],

        [[ 0.0112, -0.0060,  0.0016],
         [-0.0048, -0.0054, -0.0035],
         [-0.0059, -0.0027, -0.0149],
         ...,
         [ 0.0004,  0.0024,  0.0036],
         [ 0.0091, -0.0029, -0.0081],
         [-0.0028, -0.0096,  0.0061]],

        [[ 0.0081, -0.0052,  0.0038],
         [-0.0040, -0.0054, -0.0027],
         [-0.0080, -0.0043, -0.0112],
         ...,
         [ 0.0011,  0.0033,  0.0051],
         [ 0.0070, -0.0022, -0.0073],
         [-0.0009, -0.0079,  0.0052]]], grad_fn=<ViewBackward0>)
--------------------------------------------------
==================================================

Batch 2 in Ensemble: 102_vi
Number of conformers in this batch: 32
Unique Atomic Numbers: [6, 1, 8, 15]
Average number of neighbors: 23.87
Processing batch of 32 conformers
Initialized CustomNonLinearReadout with input irreps: 32x0e+32x1o
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2304])
shifts shape: torch.Size([2304, 3])
sender shape: torch.Size([2304])
receiver shape: torch.Size([2304])
Edge attributes shape: torch.Size([2304, 9])
Edge attributes tensor([[ 1.0000,  1.2024,  0.9956,  ..., -0.0099, -0.9644, -0.5699],
        [ 1.0000, -0.2084,  1.7192,  ...,  2.1866, -0.0630, -0.0275],
        [ 1.0000,  1.4078, -0.7122,  ..., -0.5509,  0.6572, -0.9495],
        ...,
        [ 1.0000,  0.9516,  1.2266,  ...,  0.5642,  1.2162, -0.2038],
        [ 1.0000,  0.7900,  1.5358,  ...,  1.5190,  0.2604, -0.3917],
        [ 1.0000,  1.4986,  0.8349,  ..., -0.3386,  0.2574, -1.4129]])
Edge features shape: torch.Size([2304, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0366,  0.1710],
        [ 0.3439,  0.4320,  0.1988,  ..., -0.3551, -0.0184,  0.3320],
        [ 0.3448,  0.4370,  0.2090,  ..., -0.3692, -0.0409,  0.3174],
        ...,
        [ 0.0440, -0.0599,  0.0376,  ...,  0.0586, -0.0303, -0.0174],
        [ 0.2224,  0.0111, -0.2219,  ...,  0.0331, -0.2191, -0.0439],
        [ 0.1103, -0.0908, -0.0357,  ..., -0.0682,  0.1192, -0.0299]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2304, 96])
Tensor Product Weights tensor([[-0.0505,  0.0707,  0.0694,  ...,  0.0410,  0.0903,  0.0189],
        [ 0.1778,  0.0086,  0.0821,  ..., -0.0008,  0.1779, -0.0754],
        [ 0.1773,  0.0107,  0.0764,  ..., -0.0078,  0.1653, -0.0746],
        ...,
        [-0.0003, -0.0050,  0.0068,  ..., -0.0283, -0.0190, -0.0363],
        [-0.0045,  0.0364, -0.0230,  ..., -0.0181,  0.0561,  0.0839],
        [-0.0740,  0.0493,  0.1007,  ...,  0.0167,  0.0362, -0.0411]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 4.5689e-02, -1.8880e-01, -1.7950e-01,  ...,  1.4629e-02,
         -1.0496e-02, -7.2281e-03],
        [ 1.9855e-01, -1.1886e-01, -3.4588e-01,  ..., -2.3712e-02,
         -4.8889e-02, -1.0314e-01],
        [ 4.7255e-01, -1.8633e-01, -2.8272e-01,  ..., -1.5463e-02,
         -1.4462e-02, -5.3758e-02],
        ...,
        [-1.5724e-01, -1.1406e-01, -1.0730e-01,  ...,  3.5916e-03,
          1.8313e-03,  1.8154e-03],
        [ 8.8025e-02, -7.8513e-02, -1.3457e-01,  ...,  6.5679e-02,
          1.0344e-02, -1.6454e-02],
        [ 8.3860e-02, -6.0019e-02, -6.0340e-02,  ...,  8.5445e-03,
         -3.3409e-03, -1.4545e-04]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3293, -0.1182,  0.2160,  ...,  0.4362,  0.3747, -0.3075],
        [ 0.1952, -0.0627,  0.0276,  ...,  0.0993,  0.1850, -0.0770],
        [ 0.2593, -0.1599,  0.2249,  ...,  0.5216, -0.1200, -0.0701],
        ...,
        [-0.0824,  0.0973, -0.1921,  ...,  0.4795, -0.4340, -0.1903],
        [-0.0169, -0.0366,  0.0797,  ..., -0.1940, -0.0541, -0.3587],
        [-0.1174,  0.0410, -0.0291,  ..., -0.0952,  0.0836,  0.0116]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2284])
shifts shape: torch.Size([2284, 3])
sender shape: torch.Size([2284])
receiver shape: torch.Size([2284])
Edge attributes shape: torch.Size([2284, 9])
Edge attributes tensor([[ 1.0000,  1.2028,  0.9898,  ..., -0.0228, -0.9678, -0.5636],
        [ 1.0000, -0.2042,  1.7196,  ...,  2.1880, -0.0788, -0.0261],
        [ 1.0000,  1.4039, -0.7189,  ..., -0.5402,  0.6642, -0.9418],
        ...,
        [ 1.0000,  0.3742,  1.0331,  ...,  0.0751,  1.7857,  1.0668],
        [ 1.0000,  1.2719,  0.8030,  ..., -0.3971,  0.8902, -0.5682],
        [ 1.0000,  1.1032,  1.3198,  ...,  0.8294,  0.3455, -0.7590]])
Edge features shape: torch.Size([2284, 8])
Edge features tensor([[ 0.1680, -0.0644, -0.1433,  ..., -0.1568, -0.0375,  0.1711],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3550, -0.0182,  0.3322],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3694, -0.0412,  0.3172],
        ...,
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0052],
        [ 0.0429, -0.0588,  0.0378,  ...,  0.0580, -0.0322, -0.0138],
        [ 0.1171, -0.0903, -0.0475,  ..., -0.0880,  0.1183, -0.0032]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2284, 96])
Tensor Product Weights tensor([[-0.0503,  0.0707,  0.0691,  ...,  0.0408,  0.0903,  0.0192],
        [ 0.1778,  0.0086,  0.0822,  ..., -0.0007,  0.1780, -0.0754],
        [ 0.1773,  0.0108,  0.0764,  ..., -0.0079,  0.1652, -0.0746],
        ...,
        [ 0.0045, -0.0037,  0.0054,  ...,  0.0102,  0.0040, -0.0067],
        [ 0.0012, -0.0058,  0.0056,  ..., -0.0275, -0.0185, -0.0357],
        [-0.0759,  0.0542,  0.1059,  ...,  0.0251,  0.0471, -0.0371]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0450, -0.1889, -0.1792,  ...,  0.0145, -0.0108, -0.0074],
        [ 0.1894, -0.1168, -0.3456,  ..., -0.0172, -0.0422, -0.0978],
        [ 0.4690, -0.1870, -0.2830,  ..., -0.0160, -0.0151, -0.0528],
        ...,
        [-0.3717, -0.1136, -0.0560,  ...,  0.0720,  0.0407, -0.0030],
        [ 0.0898, -0.0617, -0.2359,  ...,  0.1797,  0.0390, -0.0110],
        [ 0.1470, -0.0529, -0.1556,  ..., -0.0563, -0.1049,  0.0150]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3291, -0.1187,  0.2159,  ...,  0.4349,  0.3736, -0.3116],
        [ 0.1907, -0.0635,  0.0237,  ...,  0.1196,  0.1865, -0.0740],
        [ 0.2583, -0.1591,  0.2231,  ...,  0.5146, -0.1123, -0.0789],
        ...,
        [-0.0670, -0.0014, -0.1181,  ..., -0.0924, -0.5284, -0.2219],
        [-0.0415, -0.0454,  0.1234,  ...,  0.0422, -0.1340, -0.3120],
        [-0.1778,  0.0710, -0.0788,  ...,  0.0861,  0.1048, -0.0619]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2304])
shifts shape: torch.Size([2304, 3])
sender shape: torch.Size([2304])
receiver shape: torch.Size([2304])
Edge attributes shape: torch.Size([2304, 9])
Edge attributes tensor([[ 1.0000,  1.1951,  0.9965,  ..., -0.0079, -0.9787, -0.5483],
        [ 1.0000, -0.2337,  1.7149,  ...,  2.1699, -0.1491, -0.0323],
        [ 1.0000,  1.4215, -0.7079,  ..., -0.5577,  0.6321, -0.9955],
        ...,
        [ 1.0000,  1.3376,  0.9228,  ..., -0.1659,  0.7139, -0.9232],
        [ 1.0000,  0.6731,  1.4608,  ...,  1.2678,  1.2120, -0.0258],
        [ 1.0000,  1.2897,  1.1529,  ...,  0.3680, -0.1286, -1.0689]])
Edge features shape: torch.Size([2304, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0367,  0.1710],
        [ 0.3438,  0.4318,  0.1983,  ..., -0.3545, -0.0174,  0.3327],
        [ 0.3448,  0.4371,  0.2092,  ..., -0.3695, -0.0413,  0.3171],
        ...,
        [ 0.0441, -0.0600,  0.0376,  ...,  0.0587, -0.0303, -0.0175],
        [ 0.1104, -0.0908, -0.0358,  ..., -0.0684,  0.1192, -0.0296],
        [ 0.2225,  0.0112, -0.2219,  ...,  0.0334, -0.2191, -0.0444]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2304, 96])
Tensor Product Weights tensor([[-0.0504,  0.0707,  0.0694,  ...,  0.0409,  0.0903,  0.0190],
        [ 0.1778,  0.0085,  0.0824,  ..., -0.0005,  0.1785, -0.0754],
        [ 0.1773,  0.0108,  0.0763,  ..., -0.0079,  0.1651, -0.0746],
        ...,
        [-0.0003, -0.0050,  0.0068,  ..., -0.0283, -0.0190, -0.0363],
        [-0.0740,  0.0493,  0.1007,  ...,  0.0168,  0.0363, -0.0411],
        [-0.0045,  0.0363, -0.0231,  ..., -0.0182,  0.0561,  0.0840]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 1.0758e-01, -1.7840e-01, -1.8311e-01,  ...,  1.4549e-02,
         -1.0642e-02, -6.7723e-03],
        [ 1.2574e-01, -1.3823e-01, -3.3241e-01,  ..., -2.6355e-02,
         -5.3652e-02, -1.0386e-01],
        [ 2.9808e-01, -2.1194e-01, -2.4760e-01,  ..., -1.6235e-02,
         -1.5641e-02, -5.4450e-02],
        ...,
        [-3.8612e-01, -1.2195e-01, -2.3874e-02,  ...,  8.2401e-05,
          8.8923e-03, -3.9341e-03],
        [ 8.8198e-02, -7.8766e-02, -1.3429e-01,  ...,  6.6509e-02,
          1.2176e-02, -1.6938e-02],
        [ 8.1675e-02, -6.0452e-02, -6.1140e-02,  ...,  7.2901e-03,
         -4.4414e-03, -2.0367e-03]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3513, -0.1210,  0.2438,  ...,  0.4679,  0.3027, -0.2540],
        [ 0.1736, -0.0494, -0.0077,  ..., -0.0647,  0.2595, -0.1360],
        [ 0.2129, -0.1241,  0.1832,  ...,  0.4343,  0.0272, -0.3377],
        ...,
        [-0.0623,  0.0477, -0.1236,  ..., -0.1693, -0.3919, -0.5388],
        [-0.0171, -0.0377,  0.0773,  ..., -0.1369, -0.0907, -0.3842],
        [-0.1236,  0.0323, -0.0265,  ..., -0.0165,  0.0238, -0.0231]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2284])
shifts shape: torch.Size([2284, 3])
sender shape: torch.Size([2284])
receiver shape: torch.Size([2284])
Edge attributes shape: torch.Size([2284, 9])
Edge attributes tensor([[ 1.0000,  1.1963,  0.9909,  ..., -0.0202, -0.9801, -0.5449],
        [ 1.0000, -0.2303,  1.7150,  ...,  2.1704, -0.1667, -0.0306],
        [ 1.0000,  1.4190, -0.7143,  ..., -0.5476,  0.6364, -0.9924],
        ...,
        [ 1.0000,  0.3874,  1.0048,  ...,  0.0108,  1.7597,  1.0910],
        [ 1.0000,  1.2770,  0.7844,  ..., -0.4301,  0.8793, -0.5659],
        [ 1.0000,  1.0995,  1.3188,  ...,  0.8265,  0.3877, -0.7469]])
Edge features shape: torch.Size([2284, 8])
Edge features tensor([[ 1.6806e-01, -6.4395e-02, -1.4338e-01,  ..., -1.5675e-01,
         -3.7589e-02,  1.7116e-01],
        [ 3.4382e-01,  4.3170e-01,  1.9822e-01,  ..., -3.5429e-01,
         -1.7086e-02,  3.3283e-01],
        [ 3.4480e-01,  4.3713e-01,  2.0939e-01,  ..., -3.6971e-01,
         -4.1685e-02,  3.1686e-01],
        ...,
        [ 5.9627e-03, -1.0747e-02,  1.3409e-02,  ..., -6.0137e-03,
          5.6635e-05,  5.9116e-03],
        [ 4.3155e-02, -5.9093e-02,  3.7761e-02,  ...,  5.8170e-02,
         -3.1777e-02, -1.4656e-02],
        [ 1.1649e-01, -9.0360e-02, -4.6399e-02,  ..., -8.6319e-02,
          1.1857e-01, -5.6515e-03]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2284, 96])
Tensor Product Weights tensor([[-0.0503,  0.0707,  0.0690,  ...,  0.0408,  0.0903,  0.0192],
        [ 0.1778,  0.0085,  0.0825,  ..., -0.0004,  0.1786, -0.0754],
        [ 0.1773,  0.0108,  0.0762,  ..., -0.0080,  0.1649, -0.0746],
        ...,
        [ 0.0049, -0.0039,  0.0053,  ...,  0.0103,  0.0041, -0.0070],
        [ 0.0008, -0.0056,  0.0059,  ..., -0.0277, -0.0186, -0.0358],
        [-0.0758,  0.0538,  0.1055,  ...,  0.0244,  0.0461, -0.0375]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1101, -0.1778, -0.1832,  ...,  0.0144, -0.0109, -0.0069],
        [ 0.1214, -0.1358, -0.3329,  ..., -0.0206, -0.0472, -0.0988],
        [ 0.2964, -0.2130, -0.2483,  ..., -0.0168, -0.0162, -0.0535],
        ...,
        [-0.3702, -0.1135, -0.0546,  ...,  0.0717,  0.0402, -0.0033],
        [ 0.0921, -0.0612, -0.2358,  ...,  0.1806,  0.0413, -0.0112],
        [ 0.1463, -0.0527, -0.1521,  ..., -0.0530, -0.1080,  0.0137]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3522, -0.1213,  0.2449,  ...,  0.4700,  0.2974, -0.2533],
        [ 0.1718, -0.0509, -0.0096,  ..., -0.0433,  0.2608, -0.1338],
        [ 0.2134, -0.1228,  0.1820,  ...,  0.4345,  0.0287, -0.3398],
        ...,
        [-0.0663,  0.0009, -0.1198,  ..., -0.0957, -0.5273, -0.2421],
        [-0.0413, -0.0455,  0.1239,  ...,  0.0427, -0.1277, -0.3167],
        [-0.1763,  0.0701, -0.0813,  ...,  0.0813,  0.0991, -0.0599]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2280])
shifts shape: torch.Size([2280, 3])
sender shape: torch.Size([2280])
receiver shape: torch.Size([2280])
Edge attributes shape: torch.Size([2280, 9])
Edge attributes tensor([[ 1.0000,  1.2074,  0.9777,  ..., -0.0492, -0.9664, -0.5626],
        [ 1.0000, -0.2158,  1.7163,  ...,  2.1755, -0.1932, -0.0252],
        [ 1.0000,  1.4207, -0.7270,  ..., -0.5271,  0.6318, -1.0103],
        ...,
        [ 1.0000,  0.1058,  0.9516,  ..., -0.1057,  1.7731,  1.3375],
        [ 1.0000,  0.3669,  1.0104,  ...,  0.0234,  1.7716,  1.1037],
        [ 1.0000,  1.1030,  1.3147,  ...,  0.8144,  0.3982, -0.7498]])
Edge features shape: torch.Size([2280, 8])
Edge features tensor([[ 0.1678, -0.0647, -0.1429,  ..., -0.1570, -0.0362,  0.1709],
        [ 0.3438,  0.4318,  0.1985,  ..., -0.3547, -0.0177,  0.3325],
        [ 0.3448,  0.4370,  0.2092,  ..., -0.3694, -0.0412,  0.3172],
        ...,
        [ 0.0767, -0.0832,  0.0136,  ...,  0.0269,  0.0587, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0052],
        [ 0.1163, -0.0904, -0.0461,  ..., -0.0859,  0.1186, -0.0063]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2280, 96])
Tensor Product Weights tensor([[-0.0505,  0.0707,  0.0696,  ...,  0.0410,  0.0903,  0.0188],
        [ 0.1778,  0.0085,  0.0823,  ..., -0.0006,  0.1783, -0.0754],
        [ 0.1773,  0.0108,  0.0764,  ..., -0.0079,  0.1652, -0.0746],
        ...,
        [-0.0456,  0.0220,  0.0542,  ..., -0.0239, -0.0109, -0.0467],
        [ 0.0045, -0.0037,  0.0054,  ...,  0.0102,  0.0040, -0.0067],
        [-0.0757,  0.0537,  0.1054,  ...,  0.0242,  0.0459, -0.0376]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 1.2319e-01, -1.7861e-01, -1.8583e-01,  ...,  1.3939e-02,
         -1.2551e-02,  2.5699e-04],
        [ 1.2955e-01, -1.3423e-01, -3.3376e-01,  ..., -2.2127e-02,
         -4.6201e-02, -1.0015e-01],
        [ 3.0545e-01, -2.1102e-01, -2.4998e-01,  ..., -1.7578e-02,
         -1.5428e-02, -6.2707e-02],
        ...,
        [-1.5438e-01, -1.1584e-01, -1.0734e-01,  ..., -9.7177e-04,
          5.2232e-03, -1.0854e-03],
        [ 8.6515e-02, -6.2160e-02, -2.3536e-01,  ...,  1.7758e-01,
          4.5563e-02, -9.8921e-03],
        [ 1.4616e-01, -5.2636e-02, -1.5621e-01,  ..., -5.4713e-02,
         -1.0730e-01,  1.2322e-02]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3596, -0.1173,  0.2520,  ...,  0.4499,  0.2721, -0.3249],
        [ 0.1754, -0.0523, -0.0063,  ..., -0.0274,  0.2617, -0.1354],
        [ 0.2098, -0.1317,  0.1937,  ...,  0.4753,  0.0201, -0.2734],
        ...,
        [-0.0836,  0.1014, -0.1935,  ..., -0.2914,  0.5233, -0.3093],
        [-0.0425, -0.0452,  0.1224,  ...,  0.0377, -0.1295, -0.3155],
        [-0.1786,  0.0716, -0.0781,  ...,  0.0923,  0.1090, -0.0603]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2302])
shifts shape: torch.Size([2302, 3])
sender shape: torch.Size([2302])
receiver shape: torch.Size([2302])
Edge attributes shape: torch.Size([2302, 9])
Edge attributes tensor([[ 1.0000,  1.2075,  0.9835,  ..., -0.0366, -0.9625, -0.5703],
        [ 1.0000, -0.2166,  1.7169,  ...,  2.1775, -0.1641, -0.0267],
        [ 1.0000,  1.4208, -0.7211,  ..., -0.5367,  0.6323, -1.0052],
        ...,
        [ 1.0000,  0.9618,  1.2064,  ...,  0.5090,  1.2260, -0.1970],
        [ 1.0000,  0.7780,  1.5381,  ...,  1.5269,  0.3383, -0.3720],
        [ 1.0000,  1.5012,  0.8271,  ..., -0.3532,  0.2668, -1.4143]])
Edge features shape: torch.Size([2302, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1426,  ..., -0.1571, -0.0355,  0.1708],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3550, -0.0182,  0.3322],
        [ 0.3448,  0.4369,  0.2090,  ..., -0.3691, -0.0407,  0.3175],
        ...,
        [ 0.0425, -0.0584,  0.0379,  ...,  0.0577, -0.0329, -0.0125],
        [ 0.2194,  0.0054, -0.2192,  ...,  0.0160, -0.2186, -0.0214],
        [ 0.1152, -0.0905, -0.0440,  ..., -0.0825,  0.1191, -0.0111]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2302, 96])
Tensor Product Weights tensor([[-0.0507,  0.0708,  0.0699,  ...,  0.0411,  0.0903,  0.0186],
        [ 0.1778,  0.0086,  0.0822,  ..., -0.0007,  0.1780, -0.0754],
        [ 0.1773,  0.0107,  0.0765,  ..., -0.0077,  0.1654, -0.0746],
        ...,
        [ 0.0017, -0.0061,  0.0052,  ..., -0.0271, -0.0183, -0.0355],
        [-0.0060,  0.0392, -0.0203,  ..., -0.0148,  0.0581,  0.0816],
        [-0.0755,  0.0528,  0.1046,  ...,  0.0228,  0.0440, -0.0384]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 1.2219e-01, -1.7888e-01, -1.8597e-01,  ...,  1.4066e-02,
         -1.2257e-02,  2.0323e-04],
        [ 1.1845e-01, -1.3663e-01, -3.3094e-01,  ..., -2.7056e-02,
         -5.1685e-02, -1.0487e-01],
        [ 3.0696e-01, -2.0991e-01, -2.4914e-01,  ..., -1.7065e-02,
         -1.4945e-02, -6.3542e-02],
        ...,
        [-1.5519e-01, -1.1502e-01, -1.0768e-01,  ...,  3.6437e-03,
          1.6600e-03,  1.9559e-03],
        [ 9.1198e-02, -7.7961e-02, -1.3545e-01,  ...,  6.8454e-02,
          1.2084e-02, -1.6812e-02],
        [ 8.8784e-02, -5.5954e-02, -6.4381e-02,  ...,  1.1412e-02,
         -3.5664e-03, -4.9266e-04]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3602, -0.1173,  0.2524,  ...,  0.4476,  0.2769, -0.3240],
        [ 0.1700, -0.0558, -0.0055,  ..., -0.0314,  0.2385, -0.1608],
        [ 0.2094, -0.1328,  0.1945,  ...,  0.4746,  0.0200, -0.2714],
        ...,
        [-0.0832,  0.1001, -0.1928,  ...,  0.4706, -0.4429, -0.1955],
        [-0.0136, -0.0359,  0.0799,  ..., -0.1692, -0.0428, -0.3571],
        [-0.1077,  0.0410, -0.0294,  ..., -0.0888,  0.0735,  0.0115]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2278])
shifts shape: torch.Size([2278, 3])
sender shape: torch.Size([2278])
receiver shape: torch.Size([2278])
Edge attributes shape: torch.Size([2278, 9])
Edge attributes tensor([[ 1.0000,  1.1963,  0.9904,  ..., -0.0214, -0.9803, -0.5444],
        [ 1.0000, -0.2297,  1.7151,  ...,  2.1707, -0.1675, -0.0304],
        [ 1.0000,  1.4185, -0.7148,  ..., -0.5468,  0.6372, -0.9911],
        ...,
        [ 1.0000,  0.3765,  1.0084,  ...,  0.0188,  1.7665,  1.0971],
        [ 1.0000,  1.2734,  0.7881,  ..., -0.4236,  0.8854, -0.5578],
        [ 1.0000,  1.1016,  1.3175,  ...,  0.8227,  0.3829, -0.7506]])
Edge features shape: torch.Size([2278, 8])
Edge features tensor([[ 0.1680, -0.0644, -0.1434,  ..., -0.1568, -0.0375,  0.1711],
        [ 0.3438,  0.4317,  0.1983,  ..., -0.3544, -0.0172,  0.3328],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3695, -0.0414,  0.3171],
        ...,
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.0429, -0.0588,  0.0378,  ...,  0.0580, -0.0322, -0.0138],
        [ 0.1169, -0.0903, -0.0471,  ..., -0.0875,  0.1184, -0.0040]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2278, 96])
Tensor Product Weights tensor([[-0.0503,  0.0707,  0.0691,  ...,  0.0408,  0.0903,  0.0192],
        [ 0.1778,  0.0085,  0.0824,  ..., -0.0004,  0.1786, -0.0754],
        [ 0.1773,  0.0108,  0.0763,  ..., -0.0079,  0.1651, -0.0746],
        ...,
        [ 0.0045, -0.0037,  0.0054,  ...,  0.0102,  0.0040, -0.0067],
        [ 0.0012, -0.0058,  0.0056,  ..., -0.0275, -0.0185, -0.0357],
        [-0.0758,  0.0540,  0.1058,  ...,  0.0249,  0.0468, -0.0372]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1102, -0.1778, -0.1832,  ...,  0.0144, -0.0109, -0.0069],
        [ 0.1221, -0.1357, -0.3330,  ..., -0.0204, -0.0470, -0.0987],
        [ 0.2966, -0.2130, -0.2484,  ..., -0.0168, -0.0162, -0.0535],
        ...,
        [-0.1544, -0.1159, -0.1073,  ..., -0.0010,  0.0053, -0.0012],
        [ 0.0915, -0.0613, -0.2362,  ...,  0.1799,  0.0419, -0.0109],
        [ 0.1466, -0.0527, -0.1533,  ..., -0.0542, -0.1077,  0.0135]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3522, -0.1213,  0.2449,  ...,  0.4699,  0.2971, -0.2534],
        [ 0.1721, -0.0505, -0.0097,  ..., -0.0431,  0.2619, -0.1328],
        [ 0.2134, -0.1228,  0.1821,  ...,  0.4346,  0.0281, -0.3400],
        ...,
        [-0.0836,  0.1014, -0.1935,  ..., -0.2965,  0.5219, -0.3069],
        [-0.0410, -0.0452,  0.1237,  ...,  0.0455, -0.1275, -0.3150],
        [-0.1762,  0.0699, -0.0804,  ...,  0.0830,  0.1010, -0.0604]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2304])
shifts shape: torch.Size([2304, 3])
sender shape: torch.Size([2304])
receiver shape: torch.Size([2304])
Edge attributes shape: torch.Size([2304, 9])
Edge attributes tensor([[ 1.0000,  1.2054,  0.9839,  ..., -0.0356, -0.9665, -0.5641],
        [ 1.0000, -0.2185,  1.7165,  ...,  2.1762, -0.1682, -0.0271],
        [ 1.0000,  1.4205, -0.7205,  ..., -0.5377,  0.6329, -1.0037],
        ...,
        [ 1.0000,  0.6602,  1.4569,  ...,  1.2551,  1.2499,  0.0037],
        [ 1.0000,  1.2700,  1.1753,  ...,  0.4264, -0.1144, -1.0375],
        [ 1.0000,  1.3320,  0.9280,  ..., -0.1553,  0.7235, -0.9098]])
Edge features shape: torch.Size([2304, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1425,  ..., -0.1571, -0.0354,  0.1708],
        [ 0.3438,  0.4319,  0.1986,  ..., -0.3548, -0.0179,  0.3323],
        [ 0.3448,  0.4369,  0.2090,  ..., -0.3691, -0.0407,  0.3175],
        ...,
        [ 0.1091, -0.0908, -0.0336,  ..., -0.0646,  0.1188, -0.0343],
        [ 0.2231,  0.0122, -0.2224,  ...,  0.0366, -0.2190, -0.0486],
        [ 0.0444, -0.0603,  0.0375,  ...,  0.0588, -0.0296, -0.0186]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2304, 96])
Tensor Product Weights tensor([[-0.0507,  0.0708,  0.0699,  ...,  0.0411,  0.0903,  0.0186],
        [ 0.1778,  0.0086,  0.0823,  ..., -0.0007,  0.1782, -0.0754],
        [ 0.1773,  0.0107,  0.0765,  ..., -0.0077,  0.1654, -0.0746],
        ...,
        [-0.0735,  0.0484,  0.0995,  ...,  0.0152,  0.0342, -0.0417],
        [-0.0042,  0.0358, -0.0235,  ..., -0.0188,  0.0557,  0.0844],
        [-0.0008, -0.0048,  0.0072,  ..., -0.0285, -0.0191, -0.0364]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 1.2138e-01, -1.7910e-01, -1.8578e-01,  ...,  1.4103e-02,
         -1.2306e-02,  2.6382e-04],
        [ 1.3232e-01, -1.3683e-01, -3.3315e-01,  ..., -2.7396e-02,
         -5.2002e-02, -1.0503e-01],
        [ 3.0677e-01, -2.0988e-01, -2.4911e-01,  ..., -1.6985e-02,
         -1.4945e-02, -6.3672e-02],
        ...,
        [-3.8463e-01, -1.2448e-01, -2.7874e-02,  ..., -1.5074e-03,
          5.4653e-03,  4.6357e-03],
        [ 8.9291e-02, -7.8234e-02, -1.3504e-01,  ...,  6.2282e-02,
          1.1501e-02, -1.6450e-02],
        [ 8.1925e-02, -6.0468e-02, -6.0550e-02,  ...,  4.5817e-03,
         -4.3507e-03, -1.6539e-03]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3591, -0.1171,  0.2514,  ...,  0.4484,  0.2770, -0.3254],
        [ 0.1764, -0.0517, -0.0043,  ..., -0.0478,  0.2564, -0.1401],
        [ 0.2092, -0.1331,  0.1946,  ...,  0.4744,  0.0196, -0.2723],
        ...,
        [-0.0610,  0.0463, -0.1176,  ...,  0.5189, -0.1751,  0.4046],
        [-0.0157, -0.0376,  0.0772,  ..., -0.1392, -0.0861, -0.3849],
        [-0.1246,  0.0320, -0.0263,  ..., -0.0165,  0.0313, -0.0220]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2294])
shifts shape: torch.Size([2294, 3])
sender shape: torch.Size([2294])
receiver shape: torch.Size([2294])
Edge attributes shape: torch.Size([2294, 9])
Edge attributes tensor([[ 1.0000,  1.2005,  0.9767,  ..., -0.0515, -0.9807, -0.5398],
        [ 1.0000, -0.2084,  1.7179,  ...,  2.1814, -0.1633, -0.0245],
        [ 1.0000,  1.4020, -0.7310,  ..., -0.5206,  0.6674, -0.9459],
        ...,
        [ 1.0000,  0.1639,  1.2681,  ...,  0.6799,  1.9127,  0.8638],
        [ 1.0000,  0.8161,  1.2785,  ...,  0.7095,  1.3803,  0.0215],
        [ 1.0000,  0.8483,  0.6114,  ..., -0.7002,  1.0898,  0.7661]])
Edge features shape: torch.Size([2294, 8])
Edge features tensor([[ 0.1681, -0.0644, -0.1435,  ..., -0.1567, -0.0378,  0.1712],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3546, -0.0175,  0.3326],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0409,  0.3174],
        ...,
        [ 0.2253,  0.0166, -0.2241,  ...,  0.0494, -0.2180, -0.0655],
        [ 0.0462, -0.0620,  0.0370,  ...,  0.0595, -0.0263, -0.0243],
        [ 0.1008, -0.0903, -0.0199,  ..., -0.0392,  0.1121, -0.0612]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2294, 96])
Tensor Product Weights tensor([[-0.0502,  0.0707,  0.0689,  ...,  0.0408,  0.0903,  0.0193],
        [ 0.1778,  0.0085,  0.0824,  ..., -0.0005,  0.1784, -0.0754],
        [ 0.1773,  0.0107,  0.0764,  ..., -0.0078,  0.1653, -0.0746],
        ...,
        [-0.0033,  0.0336, -0.0251,  ..., -0.0212,  0.0545,  0.0858],
        [-0.0031, -0.0035,  0.0091,  ..., -0.0296, -0.0197, -0.0372],
        [-0.0691,  0.0419,  0.0903,  ...,  0.0041,  0.0207, -0.0451]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0685, -0.1881, -0.1826,  ...,  0.0141, -0.0135, -0.0008],
        [ 0.1982, -0.1149, -0.3456,  ..., -0.0193, -0.0422, -0.1007],
        [ 0.4729, -0.1880, -0.2789,  ..., -0.0162, -0.0133, -0.0652],
        ...,
        [-0.3743, -0.1238, -0.0320,  ..., -0.0054, -0.0090, -0.0039],
        [ 0.1274, -0.0813, -0.1383,  ...,  0.0531,  0.0299,  0.0165],
        [ 0.1747, -0.0516, -0.0873,  ...,  0.0092,  0.0025, -0.0019]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3410, -0.1154,  0.2288,  ...,  0.4165,  0.3264, -0.3849],
        [ 0.1918, -0.0657,  0.0273,  ...,  0.1284,  0.1811, -0.0719],
        [ 0.2702, -0.1627,  0.2218,  ...,  0.5588, -0.1333, -0.0036],
        ...,
        [-0.0634,  0.0458, -0.1189,  ...,  0.4218,  0.4602, -0.2376],
        [ 0.0022, -0.0260,  0.0815,  ..., -0.3405, -0.1366,  0.1020],
        [-0.0984,  0.0673, -0.0848,  ..., -0.0028,  0.0556,  0.0374]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2296])
shifts shape: torch.Size([2296, 3])
sender shape: torch.Size([2296])
receiver shape: torch.Size([2296])
Edge attributes shape: torch.Size([2296, 9])
Edge attributes tensor([[ 1.0000,  1.1946,  0.9967,  ..., -0.0075, -0.9795, -0.5471],
        [ 1.0000, -0.2351,  1.7146,  ...,  2.1689, -0.1536, -0.0326],
        [ 1.0000,  1.4230, -0.7074,  ..., -0.5586,  0.6292, -1.0006],
        ...,
        [ 1.0000,  1.3265,  0.9307,  ..., -0.1496,  0.7350, -0.8943],
        [ 1.0000,  0.6676,  1.4713,  ...,  1.3023,  1.1856, -0.0362],
        [ 1.0000,  1.3089,  1.1314,  ...,  0.3130, -0.1217, -1.1013]])
Edge features shape: torch.Size([2296, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0367,  0.1710],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3545, -0.0174,  0.3327],
        [ 0.3448,  0.4370,  0.2092,  ..., -0.3694, -0.0412,  0.3172],
        ...,
        [ 0.0429, -0.0589,  0.0378,  ...,  0.0580, -0.0322, -0.0139],
        [ 0.1137, -0.0906, -0.0415,  ..., -0.0782,  0.1194, -0.0169],
        [ 0.2203,  0.0070, -0.2200,  ...,  0.0210, -0.2189, -0.0279]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2296, 96])
Tensor Product Weights tensor([[-0.0504,  0.0707,  0.0694,  ...,  0.0409,  0.0903,  0.0190],
        [ 0.1778,  0.0085,  0.0824,  ..., -0.0005,  0.1785, -0.0754],
        [ 0.1773,  0.0108,  0.0763,  ..., -0.0079,  0.1652, -0.0746],
        ...,
        [ 0.0011, -0.0058,  0.0056,  ..., -0.0275, -0.0185, -0.0357],
        [-0.0751,  0.0518,  0.1035,  ...,  0.0210,  0.0417, -0.0392],
        [-0.0055,  0.0384, -0.0211,  ..., -0.0158,  0.0575,  0.0823]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1079, -0.1783, -0.1832,  ...,  0.0145, -0.0107, -0.0068],
        [ 0.1261, -0.1385, -0.3324,  ..., -0.0264, -0.0539, -0.1039],
        [ 0.2982, -0.2117, -0.2475,  ..., -0.0162, -0.0156, -0.0544],
        ...,
        [-0.3854, -0.1222, -0.0251,  ...,  0.0004,  0.0084, -0.0036],
        [ 0.0888, -0.0786, -0.1345,  ...,  0.0685,  0.0123, -0.0173],
        [ 0.0842, -0.0581, -0.0625,  ...,  0.0090, -0.0046, -0.0024]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3516, -0.1212,  0.2440,  ...,  0.4650,  0.3044, -0.2546],
        [ 0.1742, -0.0485, -0.0082,  ..., -0.0669,  0.2619, -0.1335],
        [ 0.2127, -0.1244,  0.1831,  ...,  0.4344,  0.0270, -0.3371],
        ...,
        [-0.0627,  0.0463, -0.1223,  ..., -0.1449, -0.4032, -0.5294],
        [-0.0161, -0.0375,  0.0774,  ..., -0.1253, -0.0886, -0.3820],
        [-0.1191,  0.0319, -0.0276,  ..., -0.0148,  0.0146, -0.0235]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2284])
shifts shape: torch.Size([2284, 3])
sender shape: torch.Size([2284])
receiver shape: torch.Size([2284])
Edge attributes shape: torch.Size([2284, 9])
Edge attributes tensor([[ 1.0000,  1.2005,  0.9901,  ..., -0.0221, -0.9722, -0.5568],
        [ 1.0000, -0.2082,  1.7190,  ...,  2.1856, -0.0932, -0.0269],
        [ 1.0000,  1.4066, -0.7181,  ..., -0.5415,  0.6594, -0.9505],
        ...,
        [ 1.0000,  0.1097,  0.9721,  ..., -0.0616,  1.7937,  1.3110],
        [ 1.0000,  0.3765,  1.0316,  ...,  0.0717,  1.7838,  1.0666],
        [ 1.0000,  1.0968,  1.3224,  ...,  0.8372,  0.3746, -0.7455]])
Edge features shape: torch.Size([2284, 8])
Edge features tensor([[ 1.6798e-01, -6.4461e-02, -1.4325e-01,  ..., -1.5681e-01,
         -3.7244e-02,  1.7110e-01],
        [ 3.4384e-01,  4.3183e-01,  1.9850e-01,  ..., -3.5467e-01,
         -1.7692e-02,  3.3245e-01],
        [ 3.4477e-01,  4.3700e-01,  2.0912e-01,  ..., -3.6934e-01,
         -4.1082e-02,  3.1727e-01],
        ...,
        [ 7.6312e-02, -8.3010e-02,  1.3984e-02,  ...,  2.7636e-02,
          5.7672e-02, -9.0370e-02],
        [ 5.9685e-03, -1.0757e-02,  1.3420e-02,  ..., -6.0088e-03,
          4.4779e-05,  5.9281e-03],
        [ 1.1431e-01, -9.0567e-02, -4.2556e-02,  ..., -7.9985e-02,
          1.1928e-01, -1.4522e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2284, 96])
Tensor Product Weights tensor([[-0.0503,  0.0707,  0.0692,  ...,  0.0409,  0.0903,  0.0191],
        [ 0.1778,  0.0085,  0.0823,  ..., -0.0006,  0.1783, -0.0754],
        [ 0.1773,  0.0107,  0.0764,  ..., -0.0078,  0.1652, -0.0746],
        ...,
        [-0.0452,  0.0217,  0.0537,  ..., -0.0242, -0.0112, -0.0467],
        [ 0.0049, -0.0039,  0.0053,  ...,  0.0103,  0.0041, -0.0070],
        [-0.0753,  0.0522,  0.1040,  ...,  0.0218,  0.0426, -0.0389]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0461, -0.1886, -0.1793,  ...,  0.0145, -0.0109, -0.0073],
        [ 0.2054, -0.1175, -0.3481,  ..., -0.0182, -0.0433, -0.0984],
        [ 0.4682, -0.1871, -0.2826,  ..., -0.0159, -0.0149, -0.0531],
        ...,
        [-0.1541, -0.1150, -0.1076,  ..., -0.0009,  0.0053, -0.0011],
        [ 0.0897, -0.0621, -0.2349,  ...,  0.1797,  0.0402, -0.0108],
        [ 0.1462, -0.0540, -0.1547,  ..., -0.0557, -0.1057,  0.0141]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3289, -0.1186,  0.2157,  ...,  0.4338,  0.3727, -0.3113],
        [ 0.1984, -0.0583,  0.0243,  ...,  0.0964,  0.2085, -0.0495],
        [ 0.2589, -0.1589,  0.2234,  ...,  0.5153, -0.1150, -0.0792],
        ...,
        [-0.0829,  0.1001, -0.1937,  ..., -0.2915,  0.5225, -0.3113],
        [-0.0426, -0.0461,  0.1241,  ...,  0.0381, -0.1365, -0.3145],
        [-0.1800,  0.0723, -0.0794,  ...,  0.0919,  0.1088, -0.0614]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2300])
shifts shape: torch.Size([2300, 3])
sender shape: torch.Size([2300])
receiver shape: torch.Size([2300])
Edge attributes shape: torch.Size([2300, 9])
Edge attributes tensor([[ 1.0000,  1.2029,  0.9964,  ..., -0.0080, -0.9628, -0.5724],
        [ 1.0000, -0.2090,  1.7192,  ...,  2.1864, -0.0611, -0.0277],
        [ 1.0000,  1.4093, -0.7112,  ..., -0.5525,  0.6545, -0.9540],
        ...,
        [ 1.0000,  1.0730,  1.3595,  ...,  0.9483, -0.0438, -0.7427],
        [ 1.0000,  0.9438,  1.0782,  ...,  0.1818,  1.3544,  0.0362],
        [ 1.0000,  0.6676,  0.6289,  ..., -0.6758,  1.1930,  1.1057]])
Edge features shape: torch.Size([2300, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0367,  0.1710],
        [ 0.3439,  0.4320,  0.1989,  ..., -0.3552, -0.0185,  0.3320],
        [ 0.3448,  0.4369,  0.2090,  ..., -0.3692, -0.0409,  0.3174],
        ...,
        [ 0.0056, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.0428, -0.0588,  0.0378,  ...,  0.0580, -0.0323, -0.0137],
        [ 0.2203,  0.0070, -0.2201,  ...,  0.0210, -0.2189, -0.0280]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2300, 96])
Tensor Product Weights tensor([[-0.0504,  0.0707,  0.0694,  ...,  0.0409,  0.0903,  0.0189],
        [ 0.1778,  0.0086,  0.0821,  ..., -0.0008,  0.1779, -0.0754],
        [ 0.1773,  0.0107,  0.0764,  ..., -0.0078,  0.1654, -0.0746],
        ...,
        [ 0.0045, -0.0037,  0.0054,  ...,  0.0101,  0.0040, -0.0066],
        [ 0.0012, -0.0058,  0.0056,  ..., -0.0274, -0.0185, -0.0357],
        [-0.0055,  0.0384, -0.0212,  ..., -0.0158,  0.0575,  0.0823]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0453, -0.1890, -0.1795,  ...,  0.0146, -0.0105, -0.0072],
        [ 0.1974, -0.1190, -0.3465,  ..., -0.0231, -0.0489, -0.1030],
        [ 0.4729, -0.1862, -0.2827,  ..., -0.0155, -0.0145, -0.0536],
        ...,
        [-0.3869, -0.1223, -0.0245,  ...,  0.0065,  0.0045, -0.0105],
        [ 0.0260, -0.0780, -0.1965,  ...,  0.0286,  0.0660,  0.0116],
        [ 0.0804, -0.0472, -0.0938,  ..., -0.0082, -0.0730, -0.0411]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3294, -0.1183,  0.2162,  ...,  0.4369,  0.3748, -0.3070],
        [ 0.1941, -0.0644,  0.0281,  ...,  0.0999,  0.1823, -0.0741],
        [ 0.2595, -0.1598,  0.2249,  ...,  0.5223, -0.1200, -0.0689],
        ...,
        [-0.0626,  0.0461, -0.1220,  ..., -0.6242, -0.2723, -0.0104],
        [-0.0071,  0.0066,  0.0548,  ..., -0.3002, -0.2843,  0.0785],
        [-0.1504,  0.0770, -0.0465,  ...,  0.0171,  0.0027,  0.0455]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2304])
shifts shape: torch.Size([2304, 3])
sender shape: torch.Size([2304])
receiver shape: torch.Size([2304])
Edge attributes shape: torch.Size([2304, 9])
Edge attributes tensor([[ 1.0000,  1.1986,  0.9967,  ..., -0.0073, -0.9715, -0.5594],
        [ 1.0000, -0.2137,  1.7185,  ...,  2.1837, -0.0766, -0.0287],
        [ 1.0000,  1.4101, -0.7103,  ..., -0.5540,  0.6530, -0.9562],
        ...,
        [ 1.0000,  0.9568,  1.2208,  ...,  0.5483,  1.2149, -0.2074],
        [ 1.0000,  0.7829,  1.5385,  ...,  1.5282,  0.2828, -0.3825],
        [ 1.0000,  1.4987,  0.8364,  ..., -0.3359,  0.2517, -1.4148]])
Edge features shape: torch.Size([2304, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0365,  0.1710],
        [ 0.3438,  0.4319,  0.1985,  ..., -0.3547, -0.0178,  0.3324],
        [ 0.3448,  0.4369,  0.2090,  ..., -0.3691, -0.0407,  0.3175],
        ...,
        [ 0.0437, -0.0596,  0.0376,  ...,  0.0585, -0.0309, -0.0163],
        [ 0.2218,  0.0099, -0.2214,  ...,  0.0297, -0.2192, -0.0395],
        [ 0.1117, -0.0907, -0.0381,  ..., -0.0724,  0.1194, -0.0246]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2304, 96])
Tensor Product Weights tensor([[-5.0481e-02,  7.0713e-02,  6.9469e-02,  ...,  4.0971e-02,
          9.0317e-02,  1.8897e-02],
        [ 1.7777e-01,  8.5456e-03,  8.2290e-02,  ..., -6.2075e-04,
          1.7825e-01, -7.5398e-02],
        [ 1.7729e-01,  1.0715e-02,  7.6464e-02,  ..., -7.7179e-03,
          1.6544e-01, -7.4604e-02],
        ...,
        [ 1.4729e-04, -5.2762e-03,  6.4013e-03,  ..., -2.8044e-02,
         -1.8816e-02, -3.6094e-02],
        [-4.7944e-03,  3.6967e-02, -2.2511e-02,  ..., -1.7468e-02,
          5.6492e-02,  8.3478e-02],
        [-7.4505e-02,  5.0309e-02,  1.0191e-01,  ...,  1.8543e-02,
          3.8464e-02, -4.0364e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 4.6804e-02, -1.8859e-01, -1.7961e-01,  ...,  1.4654e-02,
         -1.0633e-02, -7.1960e-03],
        [ 2.1256e-01, -1.1933e-01, -3.4790e-01,  ..., -2.4283e-02,
         -5.0103e-02, -1.0337e-01],
        [ 4.7174e-01, -1.8634e-01, -2.8226e-01,  ..., -1.5304e-02,
         -1.4342e-02, -5.3934e-02],
        ...,
        [-1.5629e-01, -1.1409e-01, -1.0757e-01,  ...,  3.5684e-03,
          1.8418e-03,  1.7646e-03],
        [ 8.7219e-02, -7.8245e-02, -1.3456e-01,  ...,  6.4817e-02,
          1.0519e-02, -1.6347e-02],
        [ 8.3541e-02, -5.9586e-02, -6.0119e-02,  ...,  7.8662e-03,
         -3.1875e-03, -2.2571e-05]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3292, -0.1181,  0.2159,  ...,  0.4345,  0.3742, -0.3080],
        [ 0.2021, -0.0575,  0.0274,  ...,  0.0812,  0.2067, -0.0519],
        [ 0.2599, -0.1598,  0.2252,  ...,  0.5218, -0.1220, -0.0712],
        ...,
        [-0.0824,  0.0977, -0.1924,  ...,  0.4771, -0.4336, -0.1985],
        [-0.0171, -0.0367,  0.0795,  ..., -0.1958, -0.0521, -0.3574],
        [-0.1163,  0.0408, -0.0289,  ..., -0.1002,  0.0819,  0.0120]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2282])
shifts shape: torch.Size([2282, 3])
sender shape: torch.Size([2282])
receiver shape: torch.Size([2282])
Edge attributes shape: torch.Size([2282, 9])
Edge attributes tensor([[ 1.0000,  1.1996,  0.9913,  ..., -0.0194, -0.9731, -0.5557],
        [ 1.0000, -0.2089,  1.7189,  ...,  2.1854, -0.0898, -0.0271],
        [ 1.0000,  1.4070, -0.7167,  ..., -0.5437,  0.6586, -0.9508],
        ...,
        [ 1.0000,  0.3794,  1.0277,  ...,  0.0628,  1.7800,  1.0689],
        [ 1.0000,  1.2742,  0.8028,  ..., -0.3974,  0.8867, -0.5755],
        [ 1.0000,  1.1032,  1.3200,  ...,  0.8301,  0.3428, -0.7595]])
Edge features shape: torch.Size([2282, 8])
Edge features tensor([[ 0.1680, -0.0645, -0.1432,  ..., -0.1568, -0.0372,  0.1711],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3546, -0.0175,  0.3325],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0410,  0.3173],
        ...,
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.0427, -0.0587,  0.0378,  ...,  0.0579, -0.0325, -0.0133],
        [ 0.1176, -0.0902, -0.0485,  ..., -0.0896,  0.1180, -0.0008]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2282, 96])
Tensor Product Weights tensor([[-0.0503,  0.0707,  0.0692,  ...,  0.0409,  0.0903,  0.0191],
        [ 0.1778,  0.0085,  0.0824,  ..., -0.0005,  0.1784, -0.0754],
        [ 0.1773,  0.0107,  0.0764,  ..., -0.0078,  0.1653, -0.0746],
        ...,
        [ 0.0045, -0.0037,  0.0054,  ...,  0.0102,  0.0040, -0.0067],
        [ 0.0014, -0.0059,  0.0054,  ..., -0.0274, -0.0184, -0.0356],
        [-0.0759,  0.0546,  0.1062,  ...,  0.0258,  0.0479, -0.0367]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0460, -0.1886, -0.1793,  ...,  0.0145, -0.0109, -0.0074],
        [ 0.2050, -0.1175, -0.3479,  ..., -0.0181, -0.0435, -0.0982],
        [ 0.4685, -0.1869, -0.2826,  ..., -0.0158, -0.0150, -0.0530],
        ...,
        [-0.1545, -0.1159, -0.1073,  ..., -0.0009,  0.0053, -0.0012],
        [ 0.0908, -0.0615, -0.2360,  ...,  0.1803,  0.0385, -0.0114],
        [ 0.1470, -0.0525, -0.1549,  ..., -0.0549, -0.1048,  0.0154]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3288, -0.1186,  0.2156,  ...,  0.4335,  0.3736, -0.3113],
        [ 0.1984, -0.0581,  0.0240,  ...,  0.0971,  0.2096, -0.0493],
        [ 0.2588, -0.1590,  0.2234,  ...,  0.5158, -0.1148, -0.0792],
        ...,
        [-0.0836,  0.1014, -0.1935,  ..., -0.2974,  0.5159, -0.3157],
        [-0.0412, -0.0455,  0.1236,  ...,  0.0435, -0.1317, -0.3124],
        [-0.1770,  0.0705, -0.0794,  ...,  0.0822,  0.1021, -0.0614]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2296])
shifts shape: torch.Size([2296, 3])
sender shape: torch.Size([2296])
receiver shape: torch.Size([2296])
Edge attributes shape: torch.Size([2296, 9])
Edge attributes tensor([[ 1.0000,  1.1944,  0.9978,  ..., -0.0049, -0.9791, -0.5479],
        [ 1.0000, -0.2359,  1.7146,  ...,  2.1687, -0.1511, -0.0329],
        [ 1.0000,  1.4235, -0.7062,  ..., -0.5605,  0.6283, -1.0014],
        ...,
        [ 1.0000,  1.1066,  1.3324,  ...,  0.8668, -0.0263, -0.7902],
        [ 1.0000,  0.9355,  1.0749,  ...,  0.1737,  1.3664,  0.0610],
        [ 1.0000,  0.6722,  0.6093,  ..., -0.7030,  1.1606,  1.1135]])
Edge features shape: torch.Size([2296, 8])
Edge features tensor([[ 1.6787e-01, -6.4567e-02, -1.4303e-01,  ..., -1.5691e-01,
         -3.6684e-02,  1.7102e-01],
        [ 3.4382e-01,  4.3173e-01,  1.9829e-01,  ..., -3.5437e-01,
         -1.7222e-02,  3.3275e-01],
        [ 3.4478e-01,  4.3703e-01,  2.0918e-01,  ..., -3.6943e-01,
         -4.1228e-02,  3.1717e-01],
        ...,
        [ 5.9015e-03, -1.0644e-02,  1.3296e-02,  ..., -6.0647e-03,
          1.8159e-04,  5.7372e-03],
        [ 4.4131e-02, -6.0036e-02,  3.7541e-02,  ...,  5.8697e-02,
         -3.0113e-02, -1.7732e-02],
        [ 2.2271e-01,  1.1574e-02, -2.2211e-01,  ...,  3.4597e-02,
         -2.1911e-01, -4.5984e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2296, 96])
Tensor Product Weights tensor([[-0.0504,  0.0707,  0.0694,  ...,  0.0409,  0.0903,  0.0190],
        [ 0.1778,  0.0085,  0.0824,  ..., -0.0005,  0.1786, -0.0754],
        [ 0.1773,  0.0108,  0.0763,  ..., -0.0079,  0.1652, -0.0746],
        ...,
        [ 0.0048, -0.0039,  0.0053,  ...,  0.0102,  0.0041, -0.0069],
        [-0.0004, -0.0050,  0.0069,  ..., -0.0284, -0.0190, -0.0363],
        [-0.0044,  0.0361, -0.0232,  ..., -0.0184,  0.0560,  0.0841]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1073, -0.1784, -0.1831,  ...,  0.0145, -0.0106, -0.0068],
        [ 0.1260, -0.1388, -0.3326,  ..., -0.0265, -0.0539, -0.1043],
        [ 0.2984, -0.2115, -0.2474,  ..., -0.0162, -0.0156, -0.0544],
        ...,
        [-0.3883, -0.1220, -0.0229,  ...,  0.0065,  0.0048, -0.0107],
        [ 0.0288, -0.0791, -0.1969,  ...,  0.0319,  0.0696,  0.0133],
        [ 0.0821, -0.0491, -0.1016,  ..., -0.0056, -0.0583, -0.0324]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3513, -0.1211,  0.2437,  ...,  0.4645,  0.3054, -0.2549],
        [ 0.1739, -0.0490, -0.0079,  ..., -0.0682,  0.2625, -0.1328],
        [ 0.2128, -0.1244,  0.1831,  ...,  0.4346,  0.0268, -0.3368],
        ...,
        [-0.0620,  0.0473, -0.1233,  ..., -0.6248, -0.2864, -0.0234],
        [-0.0097,  0.0050,  0.0562,  ..., -0.3116, -0.2797,  0.0767],
        [-0.1569,  0.0781, -0.0468,  ...,  0.0172,  0.0233,  0.0706]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2294])
shifts shape: torch.Size([2294, 3])
sender shape: torch.Size([2294])
receiver shape: torch.Size([2294])
Edge attributes shape: torch.Size([2294, 9])
Edge attributes tensor([[ 1.0000,  1.2043,  0.9847,  ..., -0.0338, -0.9682, -0.5618],
        [ 1.0000, -0.2202,  1.7163,  ...,  2.1752, -0.1702, -0.0275],
        [ 1.0000,  1.4215, -0.7194,  ..., -0.5394,  0.6311, -1.0063],
        ...,
        [ 1.0000,  0.6534,  1.4761,  ...,  1.3180,  1.1965, -0.0211],
        [ 1.0000,  1.3117,  1.1289,  ...,  0.3068, -0.1021, -1.1075],
        [ 1.0000,  1.3128,  0.9396,  ..., -0.1311,  0.7613, -0.8582]])
Edge features shape: torch.Size([2294, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1426,  ..., -0.1571, -0.0355,  0.1708],
        [ 0.3439,  0.4319,  0.1986,  ..., -0.3549, -0.0180,  0.3323],
        [ 0.3448,  0.4369,  0.2089,  ..., -0.3691, -0.0406,  0.3176],
        ...,
        [ 0.1160, -0.0904, -0.0456,  ..., -0.0850,  0.1188, -0.0076],
        [ 0.2190,  0.0047, -0.2189,  ...,  0.0141, -0.2184, -0.0187],
        [ 0.0423, -0.0583,  0.0379,  ...,  0.0576, -0.0331, -0.0120]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2294, 96])
Tensor Product Weights tensor([[-0.0507,  0.0708,  0.0699,  ...,  0.0411,  0.0903,  0.0186],
        [ 0.1778,  0.0086,  0.0822,  ..., -0.0007,  0.1781, -0.0754],
        [ 0.1773,  0.0107,  0.0765,  ..., -0.0077,  0.1655, -0.0746],
        ...,
        [-0.0757,  0.0534,  0.1052,  ...,  0.0238,  0.0454, -0.0378],
        [-0.0061,  0.0395, -0.0200,  ..., -0.0144,  0.0584,  0.0813],
        [ 0.0019, -0.0062,  0.0050,  ..., -0.0270, -0.0182, -0.0354]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 1.2163e-01, -1.7893e-01, -1.8577e-01,  ...,  1.4096e-02,
         -1.2320e-02,  2.4652e-04],
        [ 1.3276e-01, -1.3714e-01, -3.3334e-01,  ..., -2.7257e-02,
         -5.2117e-02, -1.0499e-01],
        [ 3.0689e-01, -2.0963e-01, -2.4901e-01,  ..., -1.6915e-02,
         -1.4948e-02, -6.3588e-02],
        ...,
        [-3.9336e-01, -1.2471e-01, -2.5666e-02,  ..., -1.8505e-03,
          5.5411e-03,  4.7446e-03],
        [ 9.0571e-02, -7.7724e-02, -1.3543e-01,  ...,  6.6472e-02,
          1.1824e-02, -1.7174e-02],
        [ 8.8366e-02, -5.5629e-02, -6.4144e-02,  ...,  7.8072e-03,
         -4.6407e-03, -2.2514e-03]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3592, -0.1172,  0.2515,  ...,  0.4450,  0.2787, -0.3261],
        [ 0.1770, -0.0507, -0.0049,  ..., -0.0502,  0.2595, -0.1366],
        [ 0.2092, -0.1333,  0.1946,  ...,  0.4745,  0.0197, -0.2723],
        ...,
        [-0.0592,  0.0453, -0.1132,  ...,  0.4994, -0.1447,  0.4451],
        [-0.0139, -0.0368,  0.0771,  ..., -0.1163, -0.0830, -0.3801],
        [-0.1154,  0.0312, -0.0293,  ..., -0.0139,  0.0109, -0.0236]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2296])
shifts shape: torch.Size([2296, 3])
sender shape: torch.Size([2296])
receiver shape: torch.Size([2296])
Edge attributes shape: torch.Size([2296, 9])
Edge attributes tensor([[ 1.0000,  1.2017,  0.9963,  ..., -0.0082, -0.9653, -0.5686],
        [ 1.0000, -0.2095,  1.7191,  ...,  2.1861, -0.0631, -0.0278],
        [ 1.0000,  1.4083, -0.7112,  ..., -0.5525,  0.6563, -0.9504],
        ...,
        [ 1.0000,  0.6631,  1.4845,  ...,  1.3460,  1.1441, -0.0538],
        [ 1.0000,  1.3171,  1.1207,  ...,  0.2862, -0.1389, -1.1139],
        [ 1.0000,  1.3198,  0.9444,  ..., -0.1210,  0.7379, -0.8880]])
Edge features shape: torch.Size([2296, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0366,  0.1710],
        [ 0.3439,  0.4320,  0.1988,  ..., -0.3551, -0.0184,  0.3320],
        [ 0.3448,  0.4369,  0.2090,  ..., -0.3692, -0.0409,  0.3174],
        ...,
        [ 0.1159, -0.0904, -0.0453,  ..., -0.0845,  0.1188, -0.0082],
        [ 0.2192,  0.0049, -0.2190,  ...,  0.0148, -0.2185, -0.0197],
        [ 0.0424, -0.0583,  0.0379,  ...,  0.0577, -0.0330, -0.0122]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2296, 96])
Tensor Product Weights tensor([[-0.0505,  0.0707,  0.0694,  ...,  0.0410,  0.0903,  0.0189],
        [ 0.1778,  0.0086,  0.0821,  ..., -0.0008,  0.1779, -0.0754],
        [ 0.1773,  0.0107,  0.0764,  ..., -0.0078,  0.1654, -0.0746],
        ...,
        [-0.0756,  0.0533,  0.1051,  ...,  0.0237,  0.0451, -0.0379],
        [-0.0061,  0.0394, -0.0201,  ..., -0.0145,  0.0583,  0.0814],
        [ 0.0018, -0.0061,  0.0051,  ..., -0.0271, -0.0183, -0.0355]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0458, -0.1888, -0.1795,  ...,  0.0146, -0.0105, -0.0072],
        [ 0.1986, -0.1188, -0.3459,  ..., -0.0235, -0.0489, -0.1031],
        [ 0.4728, -0.1862, -0.2827,  ..., -0.0154, -0.0145, -0.0537],
        ...,
        [-0.3932, -0.1247, -0.0257,  ..., -0.0015,  0.0057,  0.0047],
        [ 0.0892, -0.0782, -0.1348,  ...,  0.0687,  0.0105, -0.0175],
        [ 0.0885, -0.0561, -0.0631,  ...,  0.0090, -0.0048, -0.0025]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3294, -0.1183,  0.2161,  ...,  0.4359,  0.3747, -0.3075],
        [ 0.1951, -0.0628,  0.0275,  ...,  0.1007,  0.1858, -0.0759],
        [ 0.2595, -0.1599,  0.2249,  ...,  0.5221, -0.1203, -0.0696],
        ...,
        [-0.0592,  0.0453, -0.1133,  ...,  0.4999, -0.1391,  0.4461],
        [-0.0156, -0.0371,  0.0771,  ..., -0.1205, -0.0914, -0.3788],
        [-0.1184,  0.0317, -0.0318,  ..., -0.0182,  0.0075, -0.0240]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2282])
shifts shape: torch.Size([2282, 3])
sender shape: torch.Size([2282])
receiver shape: torch.Size([2282])
Edge attributes shape: torch.Size([2282, 9])
Edge attributes tensor([[ 1.0000,  1.2004,  0.9902,  ..., -0.0217, -0.9722, -0.5568],
        [ 1.0000, -0.2073,  1.7191,  ...,  2.1862, -0.0885, -0.0267],
        [ 1.0000,  1.4050, -0.7181,  ..., -0.5414,  0.6623, -0.9448],
        ...,
        [ 1.0000,  0.1097,  0.9746,  ..., -0.0560,  1.7963,  1.3078],
        [ 1.0000,  0.3767,  1.0336,  ...,  0.0763,  1.7851,  1.0637],
        [ 1.0000,  1.0993,  1.3211,  ...,  0.8333,  0.3663, -0.7503]])
Edge features shape: torch.Size([2282, 8])
Edge features tensor([[ 1.6799e-01, -6.4452e-02, -1.4327e-01,  ..., -1.5680e-01,
         -3.7292e-02,  1.7111e-01],
        [ 3.4385e-01,  4.3187e-01,  1.9857e-01,  ..., -3.5477e-01,
         -1.7846e-02,  3.3236e-01],
        [ 3.4478e-01,  4.3701e-01,  2.0915e-01,  ..., -3.6939e-01,
         -4.1164e-02,  3.1721e-01],
        ...,
        [ 7.6335e-02, -8.3021e-02,  1.3958e-02,  ...,  2.7586e-02,
          5.7739e-02, -9.0382e-02],
        [ 5.9707e-03, -1.0761e-02,  1.3424e-02,  ..., -6.0071e-03,
          4.0456e-05,  5.9342e-03],
        [ 1.1515e-01, -9.0496e-02, -4.4033e-02,  ..., -8.2442e-02,
          1.1907e-01, -1.1134e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2282, 96])
Tensor Product Weights tensor([[-0.0503,  0.0707,  0.0692,  ...,  0.0409,  0.0903,  0.0191],
        [ 0.1778,  0.0086,  0.0823,  ..., -0.0006,  0.1782, -0.0754],
        [ 0.1773,  0.0108,  0.0764,  ..., -0.0079,  0.1652, -0.0746],
        ...,
        [-0.0452,  0.0217,  0.0537,  ..., -0.0242, -0.0112, -0.0467],
        [ 0.0049, -0.0039,  0.0053,  ...,  0.0103,  0.0041, -0.0070],
        [-0.0755,  0.0528,  0.1046,  ...,  0.0228,  0.0440, -0.0384]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0453, -0.1888, -0.1791,  ...,  0.0145, -0.0109, -0.0073],
        [ 0.2048, -0.1172, -0.3480,  ..., -0.0179, -0.0429, -0.0982],
        [ 0.4683, -0.1871, -0.2826,  ..., -0.0159, -0.0150, -0.0530],
        ...,
        [-0.1539, -0.1149, -0.1077,  ..., -0.0009,  0.0053, -0.0011],
        [ 0.0892, -0.0620, -0.2352,  ...,  0.1796,  0.0398, -0.0109],
        [ 0.1464, -0.0537, -0.1549,  ..., -0.0565, -0.1054,  0.0143]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3284, -0.1186,  0.2153,  ...,  0.4356,  0.3725, -0.3117],
        [ 0.1978, -0.0593,  0.0246,  ...,  0.1007,  0.2064, -0.0515],
        [ 0.2587, -0.1590,  0.2233,  ...,  0.5148, -0.1139, -0.0795],
        ...,
        [-0.0829,  0.1002, -0.1938,  ..., -0.2911,  0.5206, -0.3149],
        [-0.0425, -0.0458,  0.1236,  ...,  0.0380, -0.1367, -0.3138],
        [-0.1792,  0.0719, -0.0792,  ...,  0.0913,  0.1074, -0.0617]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2292])
shifts shape: torch.Size([2292, 3])
sender shape: torch.Size([2292])
receiver shape: torch.Size([2292])
Edge attributes shape: torch.Size([2292, 9])
Edge attributes tensor([[ 1.0000,  1.1946,  0.9968,  ..., -0.0071, -0.9795, -0.5472],
        [ 1.0000, -0.2335,  1.7150,  ...,  2.1702, -0.1465, -0.0324],
        [ 1.0000,  1.4204, -0.7077,  ..., -0.5580,  0.6340, -0.9916],
        ...,
        [ 1.0000,  1.3304,  1.1060,  ...,  0.2496, -0.1167, -1.1383],
        [ 1.0000,  1.3221,  0.9318,  ..., -0.1474,  0.7454, -0.8804],
        [ 1.0000,  0.6713,  1.4779,  ...,  1.3238,  1.1532, -0.0550]])
Edge features shape: torch.Size([2292, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0367,  0.1710],
        [ 0.3438,  0.4318,  0.1983,  ..., -0.3544, -0.0173,  0.3327],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0414,  0.3170],
        ...,
        [ 0.2188,  0.0043, -0.2187,  ...,  0.0128, -0.2183, -0.0171],
        [ 0.0422, -0.0581,  0.0379,  ...,  0.0576, -0.0333, -0.0116],
        [ 0.1165, -0.0904, -0.0464,  ..., -0.0863,  0.1186, -0.0057]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2292, 96])
Tensor Product Weights tensor([[-0.0504,  0.0707,  0.0694,  ...,  0.0409,  0.0903,  0.0190],
        [ 0.1778,  0.0085,  0.0824,  ..., -0.0005,  0.1785, -0.0754],
        [ 0.1773,  0.0108,  0.0763,  ..., -0.0079,  0.1651, -0.0746],
        ...,
        [-0.0063,  0.0397, -0.0198,  ..., -0.0141,  0.0585,  0.0811],
        [ 0.0020, -0.0063,  0.0049,  ..., -0.0269, -0.0182, -0.0354],
        [-0.0757,  0.0537,  0.1055,  ...,  0.0244,  0.0461, -0.0375]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 1.0760e-01, -1.7843e-01, -1.8313e-01,  ...,  1.4555e-02,
         -1.0637e-02, -6.7753e-03],
        [ 1.2558e-01, -1.3817e-01, -3.3250e-01,  ..., -2.6005e-02,
         -5.3200e-02, -1.0378e-01],
        [ 2.9837e-01, -2.1184e-01, -2.4761e-01,  ..., -1.6207e-02,
         -1.5680e-02, -5.4416e-02],
        ...,
        [-1.5505e-01, -1.1634e-01, -1.0707e-01,  ..., -7.3060e-03,
          1.8007e-03,  7.2407e-05],
        [ 9.0139e-02, -7.8460e-02, -1.3458e-01,  ...,  7.1690e-02,
          1.2559e-02, -1.7734e-02],
        [ 8.8425e-02, -5.5961e-02, -6.4615e-02,  ...,  1.1653e-02,
         -4.9125e-03, -2.7921e-03]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3514, -0.1210,  0.2438,  ...,  0.4675,  0.3029, -0.2542],
        [ 0.1734, -0.0499, -0.0076,  ..., -0.0628,  0.2586, -0.1355],
        [ 0.2130, -0.1242,  0.1833,  ...,  0.4339,  0.0272, -0.3376],
        ...,
        [-0.0839,  0.1022, -0.1933,  ..., -0.5313,  0.3317,  0.2509],
        [-0.0153, -0.0371,  0.0776,  ..., -0.1129, -0.0883, -0.3794],
        [-0.1146,  0.0319, -0.0298,  ..., -0.0114,  0.0034, -0.0239]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2276])
shifts shape: torch.Size([2276, 3])
sender shape: torch.Size([2276])
receiver shape: torch.Size([2276])
Edge attributes shape: torch.Size([2276, 9])
Edge attributes tensor([[ 1.0000,  1.1942,  0.9840,  ..., -0.0355, -0.9886, -0.5296],
        [ 1.0000, -0.2154,  1.7173,  ...,  2.1793, -0.1472, -0.0271],
        [ 1.0000,  1.4011, -0.7231,  ..., -0.5335,  0.6693, -0.9354],
        ...,
        [ 1.0000,  0.2541,  1.2080,  ...,  0.5136,  1.8948,  0.9111],
        [ 1.0000,  0.8762,  1.2354,  ...,  0.5884,  1.3401, -0.0398],
        [ 1.0000,  0.9734,  0.5381,  ..., -0.7944,  0.9223,  0.5263]])
Edge features shape: torch.Size([2276, 8])
Edge features tensor([[ 0.1680, -0.0645, -0.1432,  ..., -0.1568, -0.0372,  0.1711],
        [ 0.3438,  0.4317,  0.1983,  ..., -0.3544, -0.0173,  0.3327],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0410,  0.3173],
        ...,
        [ 0.2222,  0.0106, -0.2217,  ...,  0.0318, -0.2192, -0.0422],
        [ 0.0441, -0.0600,  0.0376,  ...,  0.0587, -0.0302, -0.0175],
        [ 0.1058, -0.0907, -0.0280,  ..., -0.0543,  0.1170, -0.0460]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2276, 96])
Tensor Product Weights tensor([[-0.0503,  0.0707,  0.0692,  ...,  0.0409,  0.0903,  0.0191],
        [ 0.1778,  0.0085,  0.0824,  ..., -0.0005,  0.1785, -0.0754],
        [ 0.1773,  0.0107,  0.0764,  ..., -0.0078,  0.1653, -0.0746],
        ...,
        [-0.0046,  0.0366, -0.0228,  ..., -0.0179,  0.0563,  0.0837],
        [-0.0003, -0.0050,  0.0068,  ..., -0.0283, -0.0190, -0.0363],
        [-0.0720,  0.0458,  0.0961,  ...,  0.0108,  0.0287, -0.0433]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0689, -0.1880, -0.1828,  ...,  0.0142, -0.0134, -0.0008],
        [ 0.1999, -0.1153, -0.3457,  ..., -0.0202, -0.0444, -0.1013],
        [ 0.4757, -0.1876, -0.2788,  ..., -0.0156, -0.0134, -0.0653],
        ...,
        [-0.3833, -0.1239, -0.0299,  ..., -0.0035, -0.0099, -0.0057],
        [ 0.1291, -0.0854, -0.1384,  ...,  0.0653,  0.0455,  0.0168],
        [ 0.1891, -0.0587, -0.0866,  ...,  0.0179,  0.0198,  0.0016]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 3.4090e-01, -1.1518e-01,  2.2886e-01,  ...,  4.1502e-01,
          3.2924e-01, -3.8529e-01],
        [ 1.9401e-01, -6.5167e-02,  2.8276e-02,  ...,  1.2677e-01,
          1.8374e-01, -7.2093e-02],
        [ 2.7082e-01, -1.6233e-01,  2.2306e-01,  ...,  5.6408e-01,
         -1.3536e-01,  3.8434e-04],
        ...,
        [-6.1819e-02,  4.4673e-02, -1.1418e-01,  ...,  3.9619e-01,
          4.8858e-01, -2.3094e-01],
        [-3.2593e-03, -2.0980e-02,  8.5575e-02,  ..., -3.1884e-01,
         -1.3503e-01,  1.7434e-01],
        [-1.1640e-01,  8.3372e-02, -9.9559e-02,  ...,  9.8003e-04,
          3.5302e-03, -4.1554e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2298])
shifts shape: torch.Size([2298, 3])
sender shape: torch.Size([2298])
receiver shape: torch.Size([2298])
Edge attributes shape: torch.Size([2298, 9])
Edge attributes tensor([[ 1.0000,  1.1961,  0.9776,  ..., -0.0495, -0.9886, -0.5275],
        [ 1.0000, -0.2142,  1.7169,  ...,  2.1776, -0.1779, -0.0254],
        [ 1.0000,  1.4033, -0.7294,  ..., -0.5233,  0.6650, -0.9493],
        ...,
        [ 1.0000,  0.8212,  1.2707,  ...,  0.6873,  1.3832,  0.0236],
        [ 1.0000,  0.1597,  1.2851,  ...,  0.7284,  1.9083,  0.8375],
        [ 1.0000,  0.8283,  0.6101,  ..., -0.7019,  1.0975,  0.8106]])
Edge features shape: torch.Size([2298, 8])
Edge features tensor([[ 0.1681, -0.0644, -0.1434,  ..., -0.1567, -0.0377,  0.1712],
        [ 0.3438,  0.4317,  0.1981,  ..., -0.3542, -0.0169,  0.3329],
        [ 0.3448,  0.4369,  0.2090,  ..., -0.3691, -0.0407,  0.3175],
        ...,
        [ 0.0454, -0.0612,  0.0372,  ...,  0.0592, -0.0278, -0.0217],
        [ 0.2243,  0.0146, -0.2233,  ...,  0.0437, -0.2186, -0.0579],
        [ 0.1033, -0.0905, -0.0240,  ..., -0.0469,  0.1149, -0.0538]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2298, 96])
Tensor Product Weights tensor([[-0.0502,  0.0707,  0.0690,  ...,  0.0408,  0.0903,  0.0192],
        [ 0.1778,  0.0085,  0.0825,  ..., -0.0004,  0.1787, -0.0754],
        [ 0.1773,  0.0107,  0.0765,  ..., -0.0077,  0.1654, -0.0746],
        ...,
        [-0.0021, -0.0041,  0.0082,  ..., -0.0292, -0.0195, -0.0369],
        [-0.0037,  0.0346, -0.0244,  ..., -0.0202,  0.0550,  0.0852],
        [-0.0706,  0.0439,  0.0933,  ...,  0.0075,  0.0248, -0.0442]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 6.9970e-02, -1.8770e-01, -1.8274e-01,  ...,  1.4077e-02,
         -1.3643e-02, -7.4958e-04],
        [ 2.1415e-01, -1.1526e-01, -3.4807e-01,  ..., -1.9572e-02,
         -4.2924e-02, -1.0071e-01],
        [ 4.7173e-01, -1.8815e-01, -2.7844e-01,  ..., -1.6061e-02,
         -1.3307e-02, -6.5445e-02],
        ...,
        [-3.9145e-01, -1.2240e-01, -2.1625e-02,  ...,  1.5682e-03,
         -6.6516e-03, -2.0177e-04],
        [ 1.2588e-01, -8.0451e-02, -1.3830e-01,  ...,  5.1997e-02,
          2.8486e-02,  1.6553e-02],
        [ 1.7184e-01, -4.9945e-02, -8.6737e-02,  ...,  8.6279e-03,
          1.2036e-03, -2.1323e-03]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3406, -0.1152,  0.2286,  ...,  0.4148,  0.3255, -0.3849],
        [ 0.1994, -0.0599,  0.0275,  ...,  0.1086,  0.2045, -0.0464],
        [ 0.2706, -0.1627,  0.2220,  ...,  0.5595, -0.1343, -0.0043],
        ...,
        [-0.0615,  0.0474, -0.1231,  ..., -0.5881, -0.1282, -0.3408],
        [ 0.0026, -0.0265,  0.0810,  ..., -0.3418, -0.1325,  0.0940],
        [-0.0962,  0.0646, -0.0824,  ..., -0.0062,  0.0584,  0.0338]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2300])
shifts shape: torch.Size([2300, 3])
sender shape: torch.Size([2300])
receiver shape: torch.Size([2300])
Edge attributes shape: torch.Size([2300, 9])
Edge attributes tensor([[ 1.0000,  1.2000,  0.9961,  ..., -0.0088, -0.9690, -0.5631],
        [ 1.0000, -0.2115,  1.7188,  ...,  2.1849, -0.0723, -0.0282],
        [ 1.0000,  1.4092, -0.7113,  ..., -0.5524,  0.6547, -0.9536],
        ...,
        [ 1.0000,  1.4975,  0.8389,  ..., -0.3312,  0.2512, -1.4128],
        [ 1.0000,  0.9562,  1.2210,  ...,  0.5487,  1.2158, -0.2061],
        [ 1.0000,  0.7788,  1.5403,  ...,  1.5345,  0.2883, -0.3779]])
Edge features shape: torch.Size([2300, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0365,  0.1710],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3550, -0.0182,  0.3321],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0410,  0.3173],
        ...,
        [ 0.1121, -0.0907, -0.0387,  ..., -0.0735,  0.1195, -0.0232],
        [ 0.0436, -0.0595,  0.0377,  ...,  0.0584, -0.0311, -0.0159],
        [ 0.2216,  0.0095, -0.2212,  ...,  0.0284, -0.2192, -0.0378]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2300, 96])
Tensor Product Weights tensor([[-0.0505,  0.0707,  0.0695,  ...,  0.0410,  0.0903,  0.0189],
        [ 0.1778,  0.0086,  0.0822,  ..., -0.0007,  0.1780, -0.0754],
        [ 0.1773,  0.0107,  0.0764,  ..., -0.0078,  0.1653, -0.0746],
        ...,
        [-0.0746,  0.0506,  0.1022,  ...,  0.0190,  0.0391, -0.0402],
        [ 0.0003, -0.0054,  0.0063,  ..., -0.0280, -0.0188, -0.0360],
        [-0.0049,  0.0372, -0.0223,  ..., -0.0172,  0.0566,  0.0833]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 4.5804e-02, -1.8887e-01, -1.7944e-01,  ...,  1.4659e-02,
         -1.0591e-02, -7.1404e-03],
        [ 2.1245e-01, -1.1910e-01, -3.4792e-01,  ..., -2.4324e-02,
         -4.9631e-02, -1.0345e-01],
        [ 4.7167e-01, -1.8629e-01, -2.8230e-01,  ..., -1.5361e-02,
         -1.4381e-02, -5.3864e-02],
        ...,
        [-3.8675e-01, -1.2240e-01, -2.4648e-02,  ..., -7.4933e-03,
          1.0857e-02, -2.4953e-03],
        [ 8.6963e-02, -7.8153e-02, -1.3460e-01,  ...,  6.4423e-02,
          1.0385e-02, -1.6324e-02],
        [ 8.3555e-02, -5.9445e-02, -6.0102e-02,  ...,  7.6112e-03,
         -3.1640e-03, -4.0467e-06]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3286, -0.1181,  0.2154,  ...,  0.4371,  0.3741, -0.3079],
        [ 0.2016, -0.0585,  0.0280,  ...,  0.0829,  0.2050, -0.0542],
        [ 0.2594, -0.1599,  0.2249,  ...,  0.5209, -0.1206, -0.0714],
        ...,
        [-0.0613,  0.0470, -0.1202,  ..., -0.5981, -0.0635, -0.3265],
        [-0.0171, -0.0366,  0.0794,  ..., -0.1961, -0.0520, -0.3572],
        [-0.1160,  0.0408, -0.0289,  ..., -0.1016,  0.0813,  0.0121]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2278])
shifts shape: torch.Size([2278, 3])
sender shape: torch.Size([2278])
receiver shape: torch.Size([2278])
Edge attributes shape: torch.Size([2278, 9])
Edge attributes tensor([[ 1.0000,  1.2007,  0.9907,  ..., -0.0208, -0.9714, -0.5583],
        [ 1.0000, -0.2074,  1.7191,  ...,  2.1862, -0.0870, -0.0268],
        [ 1.0000,  1.4055, -0.7175,  ..., -0.5425,  0.6613, -0.9462],
        ...,
        [ 1.0000,  0.3799,  1.0270,  ...,  0.0612,  1.7793,  1.0693],
        [ 1.0000,  1.2723,  0.8090,  ..., -0.3863,  0.8904, -0.5756],
        [ 1.0000,  1.1025,  1.3214,  ...,  0.8343,  0.3341, -0.7598]])
Edge features shape: torch.Size([2278, 8])
Edge features tensor([[ 0.1680, -0.0645, -0.1432,  ..., -0.1568, -0.0372,  0.1711],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3546, -0.0175,  0.3326],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3694, -0.0412,  0.3172],
        ...,
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.0424, -0.0584,  0.0379,  ...,  0.0577, -0.0330, -0.0123],
        [ 0.1189, -0.0900, -0.0508,  ..., -0.0933,  0.1171,  0.0046]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2278, 96])
Tensor Product Weights tensor([[-0.0503,  0.0707,  0.0692,  ...,  0.0409,  0.0903,  0.0191],
        [ 0.1778,  0.0085,  0.0824,  ..., -0.0005,  0.1784, -0.0754],
        [ 0.1773,  0.0108,  0.0764,  ..., -0.0079,  0.1652, -0.0746],
        ...,
        [ 0.0045, -0.0037,  0.0054,  ...,  0.0102,  0.0040, -0.0067],
        [ 0.0017, -0.0061,  0.0052,  ..., -0.0271, -0.0183, -0.0355],
        [-0.0761,  0.0555,  0.1070,  ...,  0.0273,  0.0500, -0.0358]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0452, -0.1889, -0.1792,  ...,  0.0146, -0.0109, -0.0073],
        [ 0.2049, -0.1172, -0.3480,  ..., -0.0181, -0.0431, -0.0984],
        [ 0.4688, -0.1870, -0.2827,  ..., -0.0159, -0.0150, -0.0530],
        ...,
        [-0.1549, -0.1158, -0.1072,  ..., -0.0009,  0.0053, -0.0013],
        [ 0.0908, -0.0614, -0.2357,  ...,  0.1806,  0.0383, -0.0114],
        [ 0.1472, -0.0517, -0.1548,  ..., -0.0541, -0.1050,  0.0155]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3284, -0.1185,  0.2153,  ...,  0.4360,  0.3730, -0.3114],
        [ 0.1977, -0.0597,  0.0250,  ...,  0.1015,  0.2052, -0.0521],
        [ 0.2589, -0.1591,  0.2234,  ...,  0.5159, -0.1145, -0.0781],
        ...,
        [-0.0836,  0.1012, -0.1933,  ..., -0.2999,  0.5129, -0.3181],
        [-0.0412, -0.0456,  0.1238,  ...,  0.0456, -0.1302, -0.3117],
        [-0.1761,  0.0698, -0.0798,  ...,  0.0781,  0.0998, -0.0611]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2294])
shifts shape: torch.Size([2294, 3])
sender shape: torch.Size([2294])
receiver shape: torch.Size([2294])
Edge attributes shape: torch.Size([2294, 9])
Edge attributes tensor([[ 1.0000,  1.2056,  0.9838,  ..., -0.0359, -0.9662, -0.5647],
        [ 1.0000, -0.2193,  1.7163,  ...,  2.1755, -0.1725, -0.0271],
        [ 1.0000,  1.4219, -0.7203,  ..., -0.5379,  0.6302, -1.0086],
        ...,
        [ 1.0000,  0.7592,  1.5452,  ...,  1.5513,  0.3790, -0.3488],
        [ 1.0000,  1.4995,  0.8349,  ..., -0.3387,  0.2518, -1.4161],
        [ 1.0000,  0.9715,  1.1979,  ...,  0.4862,  1.2190, -0.2081]])
Edge features shape: torch.Size([2294, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1425,  ..., -0.1571, -0.0354,  0.1708],
        [ 0.3438,  0.4319,  0.1986,  ..., -0.3548, -0.0178,  0.3324],
        [ 0.3448,  0.4369,  0.2090,  ..., -0.3692, -0.0408,  0.3174],
        ...,
        [ 0.2177,  0.0023, -0.2177,  ...,  0.0069, -0.2176, -0.0092],
        [ 0.1186, -0.0901, -0.0501,  ..., -0.0923,  0.1174,  0.0031],
        [ 0.0417, -0.0577,  0.0380,  ...,  0.0572, -0.0341, -0.0101]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2294, 96])
Tensor Product Weights tensor([[-0.0507,  0.0708,  0.0699,  ...,  0.0411,  0.0903,  0.0186],
        [ 0.1778,  0.0085,  0.0823,  ..., -0.0006,  0.1782, -0.0754],
        [ 0.1773,  0.0107,  0.0764,  ..., -0.0077,  0.1654, -0.0746],
        ...,
        [-0.0068,  0.0406, -0.0187,  ..., -0.0129,  0.0593,  0.0802],
        [-0.0761,  0.0552,  0.1068,  ...,  0.0269,  0.0494, -0.0361],
        [ 0.0026, -0.0066,  0.0045,  ..., -0.0266, -0.0179, -0.0352]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 1.2085e-01, -1.7920e-01, -1.8567e-01,  ...,  1.4090e-02,
         -1.2309e-02,  2.9667e-04],
        [ 1.3366e-01, -1.3697e-01, -3.3331e-01,  ..., -2.7675e-02,
         -5.2213e-02, -1.0528e-01],
        [ 3.0698e-01, -2.0972e-01, -2.4914e-01,  ..., -1.6996e-02,
         -1.4869e-02, -6.3660e-02],
        ...,
        [-3.9279e-01, -1.2490e-01, -2.5471e-02,  ..., -1.1201e-02,
          3.1872e-03,  6.3491e-04],
        [ 8.9376e-02, -7.7253e-02, -1.3538e-01,  ...,  6.6671e-02,
          1.2024e-02, -1.6643e-02],
        [ 8.7536e-02, -5.4725e-02, -6.3936e-02,  ...,  9.8823e-03,
         -3.2756e-03, -2.7910e-04]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3589, -0.1171,  0.2512,  ...,  0.4476,  0.2776, -0.3258],
        [ 0.1770, -0.0512, -0.0043,  ..., -0.0502,  0.2592, -0.1386],
        [ 0.2091, -0.1332,  0.1946,  ...,  0.4748,  0.0191, -0.2718],
        ...,
        [-0.0591,  0.0452, -0.1138,  ...,  0.0593,  0.1935,  0.6523],
        [-0.0139, -0.0360,  0.0795,  ..., -0.1723, -0.0401, -0.3544],
        [-0.1051,  0.0401, -0.0284,  ..., -0.0996,  0.0688,  0.0125]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2288])
shifts shape: torch.Size([2288, 3])
sender shape: torch.Size([2288])
receiver shape: torch.Size([2288])
Edge attributes shape: torch.Size([2288, 9])
Edge attributes tensor([[ 1.0000,  1.1945,  0.9969,  ..., -0.0070, -0.9795, -0.5471],
        [ 1.0000, -0.2344,  1.7148,  ...,  2.1695, -0.1502, -0.0325],
        [ 1.0000,  1.4215, -0.7074,  ..., -0.5585,  0.6320, -0.9952],
        ...,
        [ 1.0000,  1.0856,  1.3496,  ...,  0.9182, -0.0163, -0.7607],
        [ 1.0000,  0.9421,  1.0671,  ...,  0.1552,  1.3594,  0.0556],
        [ 1.0000,  0.6583,  0.6174,  ..., -0.6919,  1.1783,  1.1310]])
Edge features shape: torch.Size([2288, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0366,  0.1710],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3545, -0.0175,  0.3326],
        [ 0.3448,  0.4371,  0.2092,  ..., -0.3695, -0.0414,  0.3171],
        ...,
        [ 0.0056, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.0429, -0.0588,  0.0378,  ...,  0.0580, -0.0322, -0.0138],
        [ 0.2204,  0.0072, -0.2201,  ...,  0.0216, -0.2190, -0.0287]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2288, 96])
Tensor Product Weights tensor([[-0.0505,  0.0707,  0.0694,  ...,  0.0410,  0.0903,  0.0189],
        [ 0.1778,  0.0085,  0.0824,  ..., -0.0005,  0.1784, -0.0754],
        [ 0.1773,  0.0108,  0.0763,  ..., -0.0079,  0.1651, -0.0746],
        ...,
        [ 0.0045, -0.0037,  0.0054,  ...,  0.0101,  0.0040, -0.0066],
        [ 0.0011, -0.0058,  0.0056,  ..., -0.0275, -0.0185, -0.0357],
        [-0.0055,  0.0383, -0.0212,  ..., -0.0159,  0.0574,  0.0824]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1077, -0.1783, -0.1831,  ...,  0.0145, -0.0106, -0.0068],
        [ 0.1260, -0.1386, -0.3327,  ..., -0.0261, -0.0533, -0.1040],
        [ 0.2987, -0.2116, -0.2475,  ..., -0.0162, -0.0156, -0.0544],
        ...,
        [-0.3871, -0.1222, -0.0243,  ...,  0.0065,  0.0046, -0.0104],
        [ 0.0269, -0.0782, -0.1967,  ...,  0.0285,  0.0671,  0.0126],
        [ 0.0809, -0.0472, -0.0962,  ..., -0.0066, -0.0687, -0.0393]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3516, -0.1211,  0.2440,  ...,  0.4649,  0.3044, -0.2548],
        [ 0.1738, -0.0493, -0.0077,  ..., -0.0654,  0.2597, -0.1332],
        [ 0.2130, -0.1244,  0.1833,  ...,  0.4345,  0.0265, -0.3367],
        ...,
        [-0.0626,  0.0460, -0.1220,  ..., -0.6260, -0.2679, -0.0183],
        [-0.0076,  0.0065,  0.0550,  ..., -0.3030, -0.2816,  0.0761],
        [-0.1513,  0.0770, -0.0463,  ...,  0.0151,  0.0079,  0.0507]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2292])
shifts shape: torch.Size([2292, 3])
sender shape: torch.Size([2292])
receiver shape: torch.Size([2292])
Edge attributes shape: torch.Size([2292, 9])
Edge attributes tensor([[ 1.0000,  1.1954,  0.9967,  ..., -0.0073, -0.9778, -0.5497],
        [ 1.0000, -0.2331,  1.7150,  ...,  2.1705, -0.1456, -0.0323],
        [ 1.0000,  1.4204, -0.7079,  ..., -0.5578,  0.6340, -0.9916],
        ...,
        [ 1.0000,  1.0939,  1.3428,  ...,  0.8980, -0.0170, -0.7724],
        [ 1.0000,  0.9320,  1.0753,  ...,  0.1746,  1.3708,  0.0688],
        [ 1.0000,  0.6698,  0.6082,  ..., -0.7045,  1.1597,  1.1185]])
Edge features shape: torch.Size([2292, 8])
Edge features tensor([[ 1.6785e-01, -6.4580e-02, -1.4301e-01,  ..., -1.5692e-01,
         -3.6617e-02,  1.7100e-01],
        [ 3.4384e-01,  4.3181e-01,  1.9846e-01,  ..., -3.5461e-01,
         -1.7597e-02,  3.3251e-01],
        [ 3.4478e-01,  4.3705e-01,  2.0922e-01,  ..., -3.6948e-01,
         -4.1312e-02,  3.1711e-01],
        ...,
        [ 5.9078e-03, -1.0654e-02,  1.3307e-02,  ..., -6.0596e-03,
          1.6890e-04,  5.7550e-03],
        [ 4.3967e-02, -5.9878e-02,  3.7580e-02,  ...,  5.8614e-02,
         -3.0401e-02, -1.7211e-02],
        [ 2.2244e-01,  1.1068e-02, -2.2189e-01,  ...,  3.3095e-02,
         -2.1914e-01, -4.4000e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2292, 96])
Tensor Product Weights tensor([[-0.0505,  0.0707,  0.0694,  ...,  0.0410,  0.0903,  0.0189],
        [ 0.1778,  0.0085,  0.0823,  ..., -0.0006,  0.1784, -0.0754],
        [ 0.1773,  0.0108,  0.0763,  ..., -0.0079,  0.1651, -0.0746],
        ...,
        [ 0.0048, -0.0039,  0.0053,  ...,  0.0102,  0.0041, -0.0069],
        [-0.0002, -0.0051,  0.0067,  ..., -0.0282, -0.0189, -0.0362],
        [-0.0045,  0.0364, -0.0230,  ..., -0.0181,  0.0561,  0.0839]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1074, -0.1785, -0.1831,  ...,  0.0146, -0.0106, -0.0067],
        [ 0.1250, -0.1383, -0.3326,  ..., -0.0261, -0.0530, -0.1042],
        [ 0.2987, -0.2117, -0.2475,  ..., -0.0162, -0.0156, -0.0544],
        ...,
        [-0.3877, -0.1220, -0.0231,  ...,  0.0065,  0.0049, -0.0106],
        [ 0.0279, -0.0788, -0.1967,  ...,  0.0304,  0.0685,  0.0129],
        [ 0.0812, -0.0488, -0.0987,  ..., -0.0062, -0.0637, -0.0359]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3514, -0.1209,  0.2438,  ...,  0.4679,  0.3030, -0.2540],
        [ 0.1729, -0.0508, -0.0071,  ..., -0.0619,  0.2565, -0.1362],
        [ 0.2131, -0.1242,  0.1832,  ...,  0.4344,  0.0270, -0.3367],
        ...,
        [-0.0622,  0.0474, -0.1233,  ..., -0.6235, -0.2878, -0.0221],
        [-0.0091,  0.0055,  0.0557,  ..., -0.3085, -0.2830,  0.0746],
        [-0.1553,  0.0781, -0.0467,  ...,  0.0184,  0.0157,  0.0624]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2298])
shifts shape: torch.Size([2298, 3])
sender shape: torch.Size([2298])
receiver shape: torch.Size([2298])
Edge attributes shape: torch.Size([2298, 9])
Edge attributes tensor([[ 1.0000,  1.2033,  0.9962,  ..., -0.0084, -0.9621, -0.5734],
        [ 1.0000, -0.2094,  1.7191,  ...,  2.1861, -0.0643, -0.0277],
        [ 1.0000,  1.4105, -0.7112,  ..., -0.5526,  0.6522, -0.9585],
        ...,
        [ 1.0000,  1.0749,  1.3580,  ...,  0.9437, -0.0397, -0.7455],
        [ 1.0000,  0.6914,  0.6053,  ..., -0.7083,  1.1474,  1.0827],
        [ 1.0000,  0.9309,  1.0849,  ...,  0.1979,  1.3698,  0.0581]])
Edge features shape: torch.Size([2298, 8])
Edge features tensor([[ 1.6783e-01, -6.4602e-02, -1.4296e-01,  ..., -1.5694e-01,
         -3.6501e-02,  1.7099e-01],
        [ 3.4387e-01,  4.3197e-01,  1.9879e-01,  ..., -3.5508e-01,
         -1.8321e-02,  3.3206e-01],
        [ 3.4477e-01,  4.3699e-01,  2.0910e-01,  ..., -3.6932e-01,
         -4.1044e-02,  3.1730e-01],
        ...,
        [ 5.9145e-03, -1.0666e-02,  1.3320e-02,  ..., -6.0539e-03,
          1.5493e-04,  5.7744e-03],
        [ 2.2306e-01,  1.2240e-02, -2.2239e-01,  ...,  3.6572e-02,
         -2.1904e-01, -4.8591e-02],
        [ 4.4337e-02, -6.0233e-02,  3.7490e-02,  ...,  5.8796e-02,
         -2.9748e-02, -1.8383e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2298, 96])
Tensor Product Weights tensor([[-0.0505,  0.0707,  0.0695,  ...,  0.0410,  0.0903,  0.0189],
        [ 0.1778,  0.0086,  0.0822,  ..., -0.0008,  0.1780, -0.0754],
        [ 0.1773,  0.0107,  0.0764,  ..., -0.0078,  0.1653, -0.0746],
        ...,
        [ 0.0048, -0.0039,  0.0053,  ...,  0.0102,  0.0041, -0.0069],
        [-0.0042,  0.0358, -0.0235,  ..., -0.0188,  0.0557,  0.0844],
        [-0.0007, -0.0048,  0.0071,  ..., -0.0285, -0.0191, -0.0364]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0458, -0.1888, -0.1795,  ...,  0.0146, -0.0105, -0.0072],
        [ 0.1986, -0.1190, -0.3458,  ..., -0.0239, -0.0492, -0.1035],
        [ 0.4725, -0.1863, -0.2825,  ..., -0.0155, -0.0144, -0.0536],
        ...,
        [-0.1585, -0.1145, -0.1068,  ...,  0.0007,  0.0037,  0.0018],
        [ 0.0262, -0.0786, -0.1962,  ...,  0.0286,  0.0664,  0.0118],
        [ 0.0791, -0.0497, -0.0930,  ..., -0.0086, -0.0734, -0.0411]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3294, -0.1182,  0.2161,  ...,  0.4369,  0.3750, -0.3063],
        [ 0.1949, -0.0632,  0.0279,  ...,  0.0992,  0.1861, -0.0759],
        [ 0.2596, -0.1598,  0.2249,  ...,  0.5222, -0.1203, -0.0688],
        ...,
        [-0.0827,  0.0976, -0.1917,  ...,  0.4901, -0.3625, -0.2868],
        [-0.0081,  0.0065,  0.0551,  ..., -0.3055, -0.2894,  0.0746],
        [-0.1541,  0.0787, -0.0468,  ...,  0.0260,  0.0026,  0.0516]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2292])
shifts shape: torch.Size([2292, 3])
sender shape: torch.Size([2292])
receiver shape: torch.Size([2292])
Edge attributes shape: torch.Size([2292, 9])
Edge attributes tensor([[ 1.0000,  1.1987,  0.9969,  ..., -0.0069, -0.9711, -0.5600],
        [ 1.0000, -0.2131,  1.7186,  ...,  2.1841, -0.0737, -0.0286],
        [ 1.0000,  1.4096, -0.7102,  ..., -0.5541,  0.6540, -0.9541],
        ...,
        [ 1.0000,  1.5072,  0.8216,  ..., -0.3634,  0.2451, -1.4319],
        [ 1.0000,  0.9716,  1.2149,  ...,  0.5322,  1.1945, -0.2349],
        [ 1.0000,  0.7881,  1.5361,  ...,  1.5199,  0.2762, -0.3884]])
Edge features shape: torch.Size([2292, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1429,  ..., -0.1569, -0.0365,  0.1710],
        [ 0.3438,  0.4319,  0.1986,  ..., -0.3548, -0.0179,  0.3323],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0410,  0.3173],
        ...,
        [ 0.1154, -0.0905, -0.0445,  ..., -0.0832,  0.1190, -0.0101],
        [ 0.0424, -0.0583,  0.0379,  ...,  0.0577, -0.0330, -0.0122],
        [ 0.2193,  0.0051, -0.2191,  ...,  0.0153, -0.2185, -0.0204]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2292, 96])
Tensor Product Weights tensor([[-0.0505,  0.0707,  0.0695,  ...,  0.0410,  0.0903,  0.0189],
        [ 0.1778,  0.0086,  0.0823,  ..., -0.0006,  0.1782, -0.0754],
        [ 0.1773,  0.0107,  0.0764,  ..., -0.0078,  0.1653, -0.0746],
        ...,
        [-0.0755,  0.0530,  0.1048,  ...,  0.0231,  0.0444, -0.0382],
        [ 0.0018, -0.0061,  0.0051,  ..., -0.0271, -0.0183, -0.0355],
        [-0.0060,  0.0393, -0.0202,  ..., -0.0146,  0.0582,  0.0815]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0466, -0.1887, -0.1795,  ...,  0.0147, -0.0106, -0.0072],
        [ 0.2115, -0.1194, -0.3479,  ..., -0.0240, -0.0496, -0.1034],
        [ 0.4718, -0.1863, -0.2823,  ..., -0.0153, -0.0144, -0.0539],
        ...,
        [-0.3855, -0.1224, -0.0259,  ..., -0.0072,  0.0108, -0.0025],
        [ 0.0901, -0.0784, -0.1349,  ...,  0.0708,  0.0107, -0.0172],
        [ 0.0898, -0.0561, -0.0638,  ...,  0.0127, -0.0039, -0.0008]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3292, -0.1182,  0.2159,  ...,  0.4348,  0.3741, -0.3080],
        [ 0.2015, -0.0582,  0.0276,  ...,  0.0825,  0.2051, -0.0528],
        [ 0.2598, -0.1598,  0.2251,  ...,  0.5216, -0.1217, -0.0714],
        ...,
        [-0.0620,  0.0457, -0.1195,  ..., -0.5961, -0.0480, -0.3194],
        [-0.0150, -0.0360,  0.0799,  ..., -0.1709, -0.0496, -0.3562],
        [-0.1095,  0.0414, -0.0320,  ..., -0.0926,  0.0702,  0.0099]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2274])
shifts shape: torch.Size([2274, 3])
sender shape: torch.Size([2274])
receiver shape: torch.Size([2274])
Edge attributes shape: torch.Size([2274, 9])
Edge attributes tensor([[ 1.0000,  1.1911,  0.9851,  ..., -0.0331, -0.9939, -0.5215],
        [ 1.0000, -0.2209,  1.7164,  ...,  2.1756, -0.1616, -0.0281],
        [ 1.0000,  1.4044, -0.7212,  ..., -0.5366,  0.6633, -0.9456],
        ...,
        [ 1.0000,  0.2548,  1.1995,  ...,  0.4905,  1.8942,  0.9240],
        [ 1.0000,  0.8737,  1.2358,  ...,  0.5894,  1.3438, -0.0348],
        [ 1.0000,  0.9764,  0.5358,  ..., -0.7971,  0.9175,  0.5203]])
Edge features shape: torch.Size([2274, 8])
Edge features tensor([[ 0.1680, -0.0645, -0.1432,  ..., -0.1568, -0.0371,  0.1711],
        [ 0.3438,  0.4317,  0.1982,  ..., -0.3542, -0.0169,  0.3329],
        [ 0.3448,  0.4370,  0.2092,  ..., -0.3694, -0.0412,  0.3172],
        ...,
        [ 0.2227,  0.0116, -0.2221,  ...,  0.0346, -0.2191, -0.0460],
        [ 0.0444, -0.0603,  0.0375,  ...,  0.0588, -0.0296, -0.0186],
        [ 0.1047, -0.0906, -0.0261,  ..., -0.0509,  0.1161, -0.0496]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2274, 96])
Tensor Product Weights tensor([[-0.0504,  0.0707,  0.0692,  ...,  0.0409,  0.0903,  0.0191],
        [ 0.1778,  0.0085,  0.0825,  ..., -0.0004,  0.1787, -0.0754],
        [ 0.1773,  0.0108,  0.0763,  ..., -0.0079,  0.1652, -0.0746],
        ...,
        [-0.0044,  0.0362, -0.0232,  ..., -0.0184,  0.0560,  0.0841],
        [-0.0008, -0.0048,  0.0072,  ..., -0.0285, -0.0191, -0.0364],
        [-0.0714,  0.0449,  0.0948,  ...,  0.0093,  0.0269, -0.0437]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0704, -0.1876, -0.1829,  ...,  0.0143, -0.0135, -0.0008],
        [ 0.2159, -0.1159, -0.3481,  ..., -0.0210, -0.0456, -0.1018],
        [ 0.4745, -0.1876, -0.2782,  ..., -0.0155, -0.0133, -0.0655],
        ...,
        [-0.3818, -0.1238, -0.0305,  ..., -0.0035, -0.0098, -0.0056],
        [ 0.1293, -0.0857, -0.1385,  ...,  0.0653,  0.0458,  0.0170],
        [ 0.1885, -0.0593, -0.0863,  ...,  0.0180,  0.0201,  0.0016]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 3.4063e-01, -1.1494e-01,  2.2862e-01,  ...,  4.1449e-01,
          3.2848e-01, -3.8428e-01],
        [ 2.0184e-01, -5.9489e-02,  2.8755e-02,  ...,  1.0340e-01,
          2.0724e-01, -4.7478e-02],
        [ 2.7104e-01, -1.6232e-01,  2.2305e-01,  ...,  5.6455e-01,
         -1.3576e-01,  2.5881e-04],
        ...,
        [-6.2141e-02,  4.4708e-02, -1.1444e-01,  ...,  3.8984e-01,
          4.9098e-01, -2.3228e-01],
        [-3.5035e-03, -2.0986e-02,  8.5762e-02,  ..., -3.1994e-01,
         -1.3607e-01,  1.7369e-01],
        [-1.1736e-01,  8.3667e-02, -9.9498e-02,  ...,  2.2642e-03,
          4.1523e-03, -3.9452e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2294])
shifts shape: torch.Size([2294, 3])
sender shape: torch.Size([2294])
receiver shape: torch.Size([2294])
Edge attributes shape: torch.Size([2294, 9])
Edge attributes tensor([[ 1.0000,  1.1978,  0.9775,  ..., -0.0496, -0.9854, -0.5325],
        [ 1.0000, -0.2107,  1.7176,  ...,  2.1802, -0.1662, -0.0250],
        [ 1.0000,  1.4017, -0.7299,  ..., -0.5224,  0.6680, -0.9438],
        ...,
        [ 1.0000,  0.8186,  1.2782,  ...,  0.7085,  1.3768,  0.0168],
        [ 1.0000,  0.1626,  1.2786,  ...,  0.7098,  1.9099,  0.8470],
        [ 1.0000,  0.8402,  0.6156,  ..., -0.6944,  1.0997,  0.7804]])
Edge features shape: torch.Size([2294, 8])
Edge features tensor([[ 0.1681, -0.0644, -0.1434,  ..., -0.1567, -0.0377,  0.1712],
        [ 0.3438,  0.4317,  0.1982,  ..., -0.3543, -0.0171,  0.3328],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0410,  0.3173],
        ...,
        [ 0.0459, -0.0617,  0.0370,  ...,  0.0594, -0.0268, -0.0234],
        [ 0.2250,  0.0159, -0.2238,  ...,  0.0475, -0.2182, -0.0629],
        [ 0.1016, -0.0904, -0.0212,  ..., -0.0417,  0.1130, -0.0589]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2294, 96])
Tensor Product Weights tensor([[-0.0502,  0.0707,  0.0690,  ...,  0.0408,  0.0903,  0.0192],
        [ 0.1778,  0.0085,  0.0825,  ..., -0.0004,  0.1786, -0.0754],
        [ 0.1773,  0.0107,  0.0764,  ..., -0.0078,  0.1653, -0.0746],
        ...,
        [-0.0028, -0.0037,  0.0088,  ..., -0.0295, -0.0197, -0.0371],
        [-0.0034,  0.0340, -0.0249,  ..., -0.0209,  0.0547,  0.0856],
        [-0.0696,  0.0426,  0.0913,  ...,  0.0052,  0.0220, -0.0448]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 6.8439e-02, -1.8819e-01, -1.8251e-01,  ...,  1.4104e-02,
         -1.3562e-02, -7.2985e-04],
        [ 2.1341e-01, -1.1505e-01, -3.4819e-01,  ..., -1.9375e-02,
         -4.2267e-02, -1.0075e-01],
        [ 4.7227e-01, -1.8798e-01, -2.7869e-01,  ..., -1.6103e-02,
         -1.3380e-02, -6.5243e-02],
        ...,
        [-3.9270e-01, -1.2255e-01, -2.1133e-02,  ...,  1.7453e-03,
         -6.6737e-03, -3.4610e-04],
        [ 1.2656e-01, -8.0844e-02, -1.3829e-01,  ...,  5.2385e-02,
          2.8805e-02,  1.6456e-02],
        [ 1.7255e-01, -5.0850e-02, -8.6830e-02,  ...,  8.7779e-03,
          1.6394e-03, -1.9747e-03]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3402, -0.1152,  0.2281,  ...,  0.4171,  0.3260, -0.3852],
        [ 0.1985, -0.0613,  0.0281,  ...,  0.1117,  0.2007, -0.0491],
        [ 0.2703, -0.1628,  0.2218,  ...,  0.5588, -0.1334, -0.0051],
        ...,
        [-0.0612,  0.0474, -0.1231,  ..., -0.5923, -0.1392, -0.3322],
        [ 0.0025, -0.0263,  0.0813,  ..., -0.3418, -0.1348,  0.0975],
        [-0.0974,  0.0656, -0.0832,  ..., -0.0044,  0.0584,  0.0369]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2282])
shifts shape: torch.Size([2282, 3])
sender shape: torch.Size([2282])
receiver shape: torch.Size([2282])
Edge attributes shape: torch.Size([2282, 9])
Edge attributes tensor([[ 1.0000e+00,  1.2037e+00,  9.9919e-01,  ..., -1.8115e-03,
         -9.5912e-01, -5.7832e-01],
        [ 1.0000e+00, -2.1160e-01,  1.7189e+00,  ...,  2.1853e+00,
         -5.7556e-02, -2.8467e-02],
        [ 1.0000e+00,  1.4133e+00, -7.0801e-01,  ..., -5.5758e-01,
          6.4712e-01, -9.6583e-01],
        ...,
        [ 1.0000e+00,  1.3071e+00,  1.1333e+00,  ...,  3.1782e-01,
         -1.2542e-01, -1.0980e+00],
        [ 1.0000e+00,  5.3002e-01,  8.4747e-01,  ..., -3.1506e-01,
          1.5476e+00,  1.1102e+00],
        [ 1.0000e+00,  9.5553e-01,  1.1291e+00,  ...,  3.0743e-01,
          1.3136e+00, -6.5231e-02]])
Edge features shape: torch.Size([2282, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0365,  0.1710],
        [ 0.3439,  0.4320,  0.1988,  ..., -0.3551, -0.0184,  0.3320],
        [ 0.3448,  0.4370,  0.2090,  ..., -0.3692, -0.0409,  0.3174],
        ...,
        [ 0.0055, -0.0100,  0.0126,  ..., -0.0063,  0.0009,  0.0047],
        [ 0.2201,  0.0066, -0.2199,  ...,  0.0197, -0.2189, -0.0263],
        [ 0.0427, -0.0587,  0.0378,  ...,  0.0579, -0.0325, -0.0133]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2282, 96])
Tensor Product Weights tensor([[-0.0505,  0.0707,  0.0695,  ...,  0.0410,  0.0903,  0.0189],
        [ 0.1778,  0.0086,  0.0821,  ..., -0.0008,  0.1779, -0.0754],
        [ 0.1773,  0.0107,  0.0764,  ..., -0.0078,  0.1654, -0.0746],
        ...,
        [ 0.0044, -0.0036,  0.0054,  ...,  0.0101,  0.0040, -0.0065],
        [-0.0056,  0.0386, -0.0209,  ..., -0.0155,  0.0577,  0.0821],
        [ 0.0014, -0.0059,  0.0054,  ..., -0.0273, -0.0184, -0.0356]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0457, -0.1888, -0.1795,  ...,  0.0147, -0.0104, -0.0071],
        [ 0.1971, -0.1198, -0.3464,  ..., -0.0241, -0.0494, -0.1045],
        [ 0.4735, -0.1859, -0.2822,  ..., -0.0153, -0.0143, -0.0533],
        ...,
        [-0.3880, -0.1219, -0.0239,  ...,  0.0070, -0.0010, -0.0095],
        [ 0.0604, -0.0858, -0.1828,  ...,  0.0763,  0.0916,  0.0195],
        [ 0.0967, -0.0599, -0.1322,  ...,  0.0271,  0.0815,  0.0348]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3294, -0.1182,  0.2162,  ...,  0.4376,  0.3754, -0.3042],
        [ 0.1939, -0.0662,  0.0293,  ...,  0.0970,  0.1851, -0.0738],
        [ 0.2603, -0.1596,  0.2250,  ...,  0.5252, -0.1221, -0.0665],
        ...,
        [-0.0625,  0.0457, -0.1218,  ..., -0.6522, -0.1786, -0.0781],
        [-0.0308, -0.0202,  0.0799,  ..., -0.3348, -0.1865,  0.1488],
        [-0.1408,  0.0399, -0.0557,  ..., -0.0721,  0.1387,  0.1037]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2290])
shifts shape: torch.Size([2290, 3])
sender shape: torch.Size([2290])
receiver shape: torch.Size([2290])
Edge attributes shape: torch.Size([2290, 9])
Edge attributes tensor([[ 1.0000,  1.1955,  0.9972,  ..., -0.0063, -0.9774, -0.5505],
        [ 1.0000, -0.2343,  1.7148,  ...,  2.1697, -0.1484, -0.0325],
        [ 1.0000,  1.4228, -0.7070,  ..., -0.5592,  0.6295, -0.9998],
        ...,
        [ 1.0000,  1.0891,  1.3467,  ...,  0.9097, -0.0270, -0.7655],
        [ 1.0000,  0.9520,  1.0646,  ...,  0.1490,  1.3468,  0.0349],
        [ 1.0000,  0.6627,  0.6220,  ..., -0.6855,  1.1839,  1.1198]])
Edge features shape: torch.Size([2290, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0367,  0.1710],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3545, -0.0174,  0.3326],
        [ 0.3448,  0.4370,  0.2092,  ..., -0.3695, -0.0413,  0.3171],
        ...,
        [ 0.0056, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.0426, -0.0586,  0.0379,  ...,  0.0579, -0.0326, -0.0130],
        [ 0.2199,  0.0063, -0.2197,  ...,  0.0188, -0.2188, -0.0250]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        ...,
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711],
        [ 0.5888,  0.8646,  0.5421,  ..., -0.0403, -0.0909, -0.1274],
        [-0.2154, -0.4438, -0.5434,  ...,  0.3077,  0.0715, -0.6711]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2290, 96])
Tensor Product Weights tensor([[-0.0504,  0.0707,  0.0694,  ...,  0.0409,  0.0903,  0.0190],
        [ 0.1778,  0.0085,  0.0824,  ..., -0.0005,  0.1785, -0.0754],
        [ 0.1773,  0.0108,  0.0763,  ..., -0.0079,  0.1651, -0.0746],
        ...,
        [ 0.0045, -0.0037,  0.0054,  ...,  0.0101,  0.0040, -0.0066],
        [ 0.0015, -0.0060,  0.0054,  ..., -0.0273, -0.0184, -0.0356],
        [-0.0057,  0.0388, -0.0208,  ..., -0.0153,  0.0578,  0.0820]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1071, -0.1785, -0.1831,  ...,  0.0146, -0.0106, -0.0067],
        [ 0.1261, -0.1384, -0.3326,  ..., -0.0262, -0.0536, -0.1040],
        [ 0.2983, -0.2117, -0.2475,  ..., -0.0162, -0.0156, -0.0543],
        ...,
        [-0.3862, -0.1222, -0.0247,  ...,  0.0065,  0.0045, -0.0104],
        [ 0.0264, -0.0780, -0.1966,  ...,  0.0284,  0.0671,  0.0126],
        [ 0.0811, -0.0468, -0.0962,  ..., -0.0069, -0.0692, -0.0394]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3511, -0.1210,  0.2436,  ...,  0.4677,  0.3037, -0.2536],
        [ 0.1735, -0.0498, -0.0074,  ..., -0.0650,  0.2599, -0.1356],
        [ 0.2129, -0.1242,  0.1830,  ...,  0.4347,  0.0275, -0.3365],
        ...,
        [-0.0627,  0.0460, -0.1220,  ..., -0.6278, -0.2609, -0.0139],
        [-0.0073,  0.0068,  0.0547,  ..., -0.3030, -0.2799,  0.0779],
        [-0.1505,  0.0767, -0.0464,  ...,  0.0138,  0.0062,  0.0467]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
process_conformer_ensemble input shape: torch.Size([32, 96, 32])
Num conformers: 32, Total dim: 3072
Scalar dim: 768, Vector dim: 768
mean_pooling:
  Scalar shape: torch.Size([32, 768])
  Vector shape: torch.Size([32, 768, 3])
  Scalar: tensor([[-0.1537, -0.3853, -0.3840,  ...,  0.0345,  0.1856, -0.3726],
        [-0.1522, -0.3881, -0.3828,  ...,  0.0281,  0.1904, -0.3704],
        [-0.1477, -0.4336, -0.4571,  ...,  0.5356, -0.1921, -0.2800],
        ...,
        [-0.1683, -0.3863, -0.4207,  ...,  0.0502,  0.2037, -0.3633],
        [-0.1542, -0.3840, -0.3841,  ...,  0.0376,  0.1838, -0.3732],
        [-0.1478, -0.4332, -0.4566,  ...,  0.5361, -0.1932, -0.2782]],
       grad_fn=<DivBackward0>)
  Vector: tensor([[[-0.0148, -0.2546,  0.2035],
         [ 0.1027,  0.1917, -0.0780],
         [-0.0266,  0.0664, -0.0656],
         ...,
         [-0.0490,  0.0539, -0.0258],
         [ 0.0116,  0.0907, -0.1229],
         [-0.1480, -0.0175, -0.0930]],

        [[-0.0106, -0.2573,  0.2074],
         [ 0.1023,  0.1936, -0.0779],
         [-0.0312,  0.0664, -0.0649],
         ...,
         [ 0.0848, -0.0004, -0.0744],
         [ 0.0382,  0.0192, -0.1218],
         [-0.0807, -0.0570, -0.0543]],

        [[ 0.0311, -0.1849,  0.1165],
         [ 0.0940,  0.0383,  0.0115],
         [-0.0852,  0.0164, -0.0600],
         ...,
         [-0.0156,  0.0248, -0.0436],
         [ 0.0110,  0.0942, -0.1204],
         [-0.0889, -0.0633, -0.1225]],

        ...,

        [[-0.0205, -0.2515,  0.1976],
         [ 0.1041,  0.1882, -0.0773],
         [-0.0187,  0.0672, -0.0664],
         ...,
         [-0.0447,  0.0304,  0.0456],
         [-0.1176,  0.0045,  0.0610],
         [-0.1209, -0.0558, -0.0479]],

        [[-0.0166, -0.2534,  0.2020],
         [ 0.1029,  0.1910, -0.0782],
         [-0.0249,  0.0663, -0.0658],
         ...,
         [-0.0520,  0.0665,  0.0836],
         [-0.0750, -0.0515,  0.0890],
         [-0.1430, -0.0710, -0.0372]],

        [[ 0.0311, -0.1849,  0.1166],
         [ 0.0940,  0.0383,  0.0115],
         [-0.0853,  0.0164, -0.0603],
         ...,
         [-0.0186,  0.0225,  0.1030],
         [-0.0330, -0.0465,  0.1569],
         [-0.1075, -0.0913, -0.0217]]], grad_fn=<DivBackward0>)
--------------------------------------------------
deep_sets:
  Scalar shape: torch.Size([32, 768])
  Vector shape: torch.Size([32, 768, 3])
  Scalar: tensor([[ 0.0147, -0.0101, -0.0116,  ...,  0.0043,  0.0141, -0.0117],
        [ 0.0151, -0.0097, -0.0118,  ...,  0.0045,  0.0139, -0.0118],
        [ 0.0155, -0.0107, -0.0123,  ...,  0.0046,  0.0130, -0.0128],
        ...,
        [ 0.0148, -0.0099, -0.0117,  ...,  0.0043,  0.0143, -0.0118],
        [ 0.0150, -0.0099, -0.0117,  ...,  0.0043,  0.0140, -0.0117],
        [ 0.0156, -0.0107, -0.0123,  ...,  0.0046,  0.0130, -0.0128]],
       grad_fn=<SiluBackward0>)
  Vector: tensor([[[ 0.0003,  0.0074, -0.0035],
         [ 0.0072,  0.0015,  0.0044],
         [-0.0041, -0.0043, -0.0051],
         ...,
         [ 0.0039,  0.0058,  0.0058],
         [ 0.0042,  0.0051,  0.0042],
         [ 0.0038,  0.0141,  0.0025]],

        [[ 0.0016,  0.0086, -0.0038],
         [ 0.0066,  0.0025,  0.0034],
         [-0.0039, -0.0017, -0.0048],
         ...,
         [ 0.0037,  0.0070,  0.0059],
         [ 0.0043,  0.0058,  0.0046],
         [ 0.0046,  0.0142,  0.0033]],

        [[ 0.0017,  0.0076, -0.0030],
         [ 0.0098,  0.0021,  0.0032],
         [-0.0033, -0.0008, -0.0048],
         ...,
         [ 0.0043,  0.0050,  0.0079],
         [ 0.0048,  0.0044,  0.0037],
         [ 0.0058,  0.0131,  0.0034]],

        ...,

        [[-0.0009,  0.0078, -0.0029],
         [ 0.0080,  0.0021,  0.0035],
         [-0.0038,  0.0004, -0.0046],
         ...,
         [ 0.0055,  0.0056,  0.0079],
         [ 0.0033,  0.0069,  0.0048],
         [ 0.0042,  0.0098,  0.0025]],

        [[-0.0025,  0.0083, -0.0031],
         [ 0.0077,  0.0006,  0.0032],
         [-0.0036, -0.0020, -0.0043],
         ...,
         [ 0.0049,  0.0058,  0.0064],
         [ 0.0044,  0.0070,  0.0045],
         [ 0.0037,  0.0119,  0.0023]],

        [[-0.0008,  0.0077, -0.0045],
         [ 0.0074,  0.0033,  0.0025],
         [-0.0043, -0.0002, -0.0028],
         ...,
         [ 0.0060,  0.0081,  0.0076],
         [ 0.0028,  0.0058,  0.0050],
         [ 0.0038,  0.0098,  0.0013]]], grad_fn=<ViewBackward0>)
--------------------------------------------------
self_attention:
  Scalar shape: torch.Size([32, 768])
  Vector shape: torch.Size([32, 768, 3])
  Scalar: tensor([[ 0.0063,  0.0149, -0.0045,  ...,  0.0116,  0.0025,  0.0091],
        [ 0.0058,  0.0149, -0.0045,  ...,  0.0116,  0.0027,  0.0091],
        [ 0.0064,  0.0142, -0.0047,  ...,  0.0118,  0.0016,  0.0098],
        ...,
        [ 0.0061,  0.0147, -0.0042,  ...,  0.0117,  0.0030,  0.0092],
        [ 0.0061,  0.0151, -0.0045,  ...,  0.0117,  0.0026,  0.0091],
        [ 0.0064,  0.0142, -0.0047,  ...,  0.0118,  0.0016,  0.0098]],
       grad_fn=<SiluBackward0>)
  Vector: tensor([[[ 0.0057, -0.0055, -0.0021],
         [ 0.0103, -0.0119, -0.0075],
         [ 0.0130, -0.0097,  0.0080],
         ...,
         [ 0.0023,  0.0050, -0.0090],
         [-0.0039, -0.0090,  0.0040],
         [-0.0109, -0.0042, -0.0028]],

        [[ 0.0056, -0.0062, -0.0037],
         [ 0.0092, -0.0122, -0.0078],
         [ 0.0119, -0.0089,  0.0073],
         ...,
         [ 0.0034,  0.0054, -0.0095],
         [-0.0032, -0.0092,  0.0031],
         [-0.0090, -0.0051, -0.0030]],

        [[ 0.0064, -0.0077, -0.0037],
         [ 0.0102, -0.0122, -0.0069],
         [ 0.0117, -0.0113,  0.0075],
         ...,
         [ 0.0023,  0.0058, -0.0090],
         [-0.0016, -0.0064,  0.0040],
         [-0.0086, -0.0028, -0.0025]],

        ...,

        [[ 0.0050, -0.0065, -0.0031],
         [ 0.0088, -0.0121, -0.0049],
         [ 0.0125, -0.0117,  0.0057],
         ...,
         [ 0.0038,  0.0057, -0.0084],
         [-0.0032, -0.0037,  0.0049],
         [-0.0085, -0.0037, -0.0033]],

        [[ 0.0046, -0.0057, -0.0031],
         [ 0.0095, -0.0115, -0.0041],
         [ 0.0125, -0.0109,  0.0075],
         ...,
         [ 0.0030,  0.0055, -0.0086],
         [-0.0047, -0.0063,  0.0055],
         [-0.0099, -0.0038, -0.0021]],

        [[ 0.0044, -0.0068, -0.0037],
         [ 0.0088, -0.0127, -0.0063],
         [ 0.0108, -0.0117,  0.0076],
         ...,
         [ 0.0036,  0.0052, -0.0088],
         [-0.0034, -0.0048,  0.0041],
         [-0.0091, -0.0044, -0.0029]]], grad_fn=<ViewBackward0>)
--------------------------------------------------
==================================================

Batch 3 in Ensemble: 102_vi
Number of conformers in this batch: 32
Unique Atomic Numbers: [6, 1, 8, 15]
Average number of neighbors: 23.74
Processing batch of 32 conformers
Initialized CustomNonLinearReadout with input irreps: 32x0e+32x1o
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2294])
shifts shape: torch.Size([2294, 3])
sender shape: torch.Size([2294])
receiver shape: torch.Size([2294])
Edge attributes shape: torch.Size([2294, 9])
Edge attributes tensor([[ 1.0000,  1.2031,  0.9959,  ..., -0.0091, -0.9627, -0.5725],
        [ 1.0000, -0.2091,  1.7191,  ...,  2.1862, -0.0648, -0.0277],
        [ 1.0000,  1.4100, -0.7115,  ..., -0.5521,  0.6531, -0.9570],
        ...,
        [ 1.0000,  1.0722,  1.3601,  ...,  0.9501, -0.0452, -0.7416],
        [ 1.0000,  0.6742,  0.6242,  ..., -0.6825,  1.1831,  1.0982],
        [ 1.0000,  0.9467,  1.0763,  ...,  0.1772,  1.3510,  0.0317]])
Edge features shape: torch.Size([2294, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0365,  0.1710],
        [ 0.3439,  0.4320,  0.1988,  ..., -0.3551, -0.0183,  0.3321],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0411,  0.3173],
        ...,
        [ 0.0057, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.2204,  0.0072, -0.2201,  ...,  0.0214, -0.2190, -0.0286],
        [ 0.0429, -0.0588,  0.0378,  ...,  0.0580, -0.0322, -0.0138]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2294, 96])
Tensor Product Weights tensor([[-0.0563, -0.0883,  0.1502,  ...,  0.0592,  0.1378, -0.0351],
        [ 0.2731, -0.3344, -0.3081,  ...,  0.3154,  0.1305, -0.0125],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3222,  0.1360,  0.0039],
        ...,
        [-0.0018, -0.0038, -0.0098,  ...,  0.0053,  0.0044,  0.0047],
        [-0.0581, -0.0341, -0.0860,  ...,  0.0441,  0.1438,  0.1699],
        [ 0.0055, -0.0285,  0.0077,  ...,  0.0405,  0.0278,  0.0083]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0634,  0.8964,  0.0986,  ...,  0.0557, -0.1151,  0.0814],
        [ 0.0568,  0.9505,  0.2336,  ..., -0.3309,  0.1240,  0.4723],
        [-0.0348,  0.9500,  0.2003,  ..., -0.2866,  0.2769,  0.3970],
        ...,
        [-0.1095,  0.1944,  0.0347,  ..., -0.7736, -1.3697, -0.5204],
        [-0.0315,  0.6281,  0.0763,  ...,  0.2864, -0.1099, -0.3297],
        [ 0.0441,  0.2884,  0.1296,  ..., -0.7603,  1.5053, -0.0762]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2385, -0.1453, -0.1135,  ..., -0.1398,  0.1846,  0.0797],
        [ 0.0617, -0.1992, -0.0996,  ...,  0.5955,  0.4687, -0.2159],
        [-0.2382, -0.2094, -0.0730,  ..., -0.0943, -0.1221, -0.0435],
        ...,
        [ 0.0632, -0.4863, -0.1307,  ...,  0.0657,  0.4431, -0.0756],
        [-0.0125, -0.1060,  0.0256,  ..., -0.0971, -0.2811,  0.1775],
        [ 0.0968, -0.1634, -0.0615,  ..., -0.0496, -0.0271,  0.0239]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2280])
shifts shape: torch.Size([2280, 3])
sender shape: torch.Size([2280])
receiver shape: torch.Size([2280])
Edge attributes shape: torch.Size([2280, 9])
Edge attributes tensor([[ 1.0000,  1.1921,  0.9845,  ..., -0.0343, -0.9924, -0.5238],
        [ 1.0000, -0.2148,  1.7175,  ...,  2.1800, -0.1406, -0.0272],
        [ 1.0000,  1.3989, -0.7228,  ..., -0.5340,  0.6733, -0.9272],
        ...,
        [ 1.0000,  0.0904,  0.9573,  ..., -0.0935,  1.7804,  1.3344],
        [ 1.0000,  0.3586,  1.0172,  ...,  0.0388,  1.7797,  1.1026],
        [ 1.0000,  1.0949,  1.3182,  ...,  0.8247,  0.4289, -0.7328]])
Edge features shape: torch.Size([2280, 8])
Edge features tensor([[ 1.6802e-01, -6.4428e-02, -1.4331e-01,  ..., -1.5678e-01,
         -3.7418e-02,  1.7113e-01],
        [ 3.4383e-01,  4.3178e-01,  1.9840e-01,  ..., -3.5454e-01,
         -1.7476e-02,  3.3259e-01],
        [ 3.4478e-01,  4.3701e-01,  2.0914e-01,  ..., -3.6938e-01,
         -4.1137e-02,  3.1723e-01],
        ...,
        [ 7.6331e-02, -8.3019e-02,  1.3962e-02,  ...,  2.7593e-02,
          5.7729e-02, -9.0380e-02],
        [ 5.9710e-03, -1.0762e-02,  1.3424e-02,  ..., -6.0067e-03,
          3.9617e-05,  5.9353e-03],
        [ 1.1348e-01, -9.0627e-02, -4.1111e-02,  ..., -7.7555e-02,
          1.1941e-01, -1.7807e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2280, 96])
Tensor Product Weights tensor([[-0.0566, -0.0884,  0.1498,  ...,  0.0595,  0.1380, -0.0346],
        [ 0.2733, -0.3346, -0.3078,  ...,  0.3152,  0.1303, -0.0131],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3222,  0.1360,  0.0040],
        ...,
        [ 0.0340, -0.0118,  0.0677,  ..., -0.0472,  0.0476, -0.0258],
        [-0.0019, -0.0044, -0.0101,  ...,  0.0063,  0.0047,  0.0048],
        [ 0.0256, -0.0256,  0.1470,  ..., -0.0693,  0.0766, -0.0776]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0696,  0.8962,  0.0997,  ...,  0.0613, -0.1117,  0.3691],
        [ 0.0588,  0.9540,  0.2331,  ..., -0.3339,  0.1374,  0.4481],
        [-0.0426,  0.9446,  0.1976,  ..., -0.2703,  0.3757,  0.0171],
        ...,
        [-0.1252,  0.1817,  0.0858,  ..., -0.8182,  1.4620, -0.4901],
        [-0.0179,  0.5695,  0.0670,  ...,  0.1811, -0.2754,  0.5309],
        [ 0.0676,  0.2437,  0.1470,  ...,  0.6719, -1.2624, -1.1509]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2432, -0.1514, -0.1144,  ..., -0.1641,  0.2008,  0.0604],
        [ 0.0621, -0.1953, -0.0992,  ...,  0.5834,  0.4715, -0.2262],
        [-0.2515, -0.2330, -0.0823,  ..., -0.0963, -0.1290, -0.0462],
        ...,
        [-0.0253, -0.6402, -0.1302,  ..., -0.1360,  0.3353, -0.1957],
        [-0.0222, -0.1278, -0.0122,  ...,  0.1052, -0.1425, -0.2961],
        [ 0.0732, -0.2048, -0.1078,  ..., -0.0160, -0.0502, -0.0126]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2292])
shifts shape: torch.Size([2292, 3])
sender shape: torch.Size([2292])
receiver shape: torch.Size([2292])
Edge attributes shape: torch.Size([2292, 9])
Edge attributes tensor([[ 1.0000,  1.1986,  0.9980,  ..., -0.0046, -0.9706, -0.5610],
        [ 1.0000, -0.2151,  1.7183,  ...,  2.1830, -0.0759, -0.0291],
        [ 1.0000,  1.4117, -0.7088,  ..., -0.5563,  0.6500, -0.9607],
        ...,
        [ 1.0000,  1.0999,  1.3377,  ...,  0.8826, -0.0498, -0.7804],
        [ 1.0000,  0.9345,  1.0860,  ...,  0.2005,  1.3646,  0.0479],
        [ 1.0000,  0.6743,  0.6235,  ..., -0.6834,  1.1821,  1.0986]])
Edge features shape: torch.Size([2292, 8])
Edge features tensor([[ 1.6782e-01, -6.4606e-02, -1.4295e-01,  ..., -1.5694e-01,
         -3.6477e-02,  1.7098e-01],
        [ 3.4385e-01,  4.3189e-01,  1.9862e-01,  ..., -3.5484e-01,
         -1.7951e-02,  3.3229e-01],
        [ 3.4476e-01,  4.3692e-01,  2.0895e-01,  ..., -3.6912e-01,
         -4.0727e-02,  3.1751e-01],
        ...,
        [ 5.9032e-03, -1.0647e-02,  1.3299e-02,  ..., -6.0633e-03,
          1.7806e-04,  5.7421e-03],
        [ 4.4102e-02, -6.0008e-02,  3.7548e-02,  ...,  5.8683e-02,
         -3.0164e-02, -1.7639e-02],
        [ 2.2267e-01,  1.1509e-02, -2.2208e-01,  ...,  3.4403e-02,
         -2.1911e-01, -4.5728e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2292, 96])
Tensor Product Weights tensor([[-0.0563, -0.0883,  0.1502,  ...,  0.0591,  0.1378, -0.0351],
        [ 0.2732, -0.3345, -0.3080,  ...,  0.3153,  0.1304, -0.0128],
        [ 0.2669, -0.3304, -0.3147,  ...,  0.3221,  0.1359,  0.0037],
        ...,
        [-0.0019, -0.0043, -0.0101,  ...,  0.0061,  0.0046,  0.0047],
        [ 0.0065, -0.0279,  0.0092,  ...,  0.0381,  0.0285,  0.0078],
        [-0.0525, -0.0292, -0.1011,  ...,  0.0368,  0.1419,  0.1803]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0630,  0.8956,  0.0985,  ...,  0.0587, -0.1145,  0.0811],
        [ 0.0523,  0.9455,  0.2370,  ..., -0.3280,  0.1206,  0.4722],
        [-0.0354,  0.9499,  0.2003,  ..., -0.2858,  0.2841,  0.3939],
        ...,
        [-0.1121,  0.1925,  0.0360,  ...,  0.4745,  0.9017,  0.1414],
        [-0.0311,  0.6236,  0.0759,  ...,  0.2944, -0.1244, -0.3465],
        [ 0.0440,  0.2887,  0.1163,  ..., -0.6859,  1.4684, -0.0720]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2384, -0.1453, -0.1130,  ..., -0.1412,  0.1844,  0.0790],
        [ 0.0567, -0.2101, -0.1005,  ...,  0.6047,  0.4619, -0.2308],
        [-0.2393, -0.2120, -0.0743,  ..., -0.0954, -0.1213, -0.0441],
        ...,
        [ 0.0611, -0.4926, -0.1369,  ..., -0.4082, -0.1911, -0.0729],
        [-0.0123, -0.1073,  0.0245,  ..., -0.1034, -0.2742,  0.1810],
        [ 0.0905, -0.1815, -0.0682,  ..., -0.0530, -0.0326,  0.0159]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2290])
shifts shape: torch.Size([2290, 3])
sender shape: torch.Size([2290])
receiver shape: torch.Size([2290])
Edge attributes shape: torch.Size([2290, 9])
Edge attributes tensor([[ 1.0000,  1.1996,  0.9966,  ..., -0.0077, -0.9695, -0.5624],
        [ 1.0000, -0.2119,  1.7187,  ...,  2.1847, -0.0713, -0.0283],
        [ 1.0000,  1.4089, -0.7107,  ..., -0.5533,  0.6552, -0.9521],
        ...,
        [ 1.0000,  1.5048,  0.8278,  ..., -0.3519,  0.2399, -1.4291],
        [ 1.0000,  0.9718,  1.2150,  ...,  0.5325,  1.1939, -0.2357],
        [ 1.0000,  0.7787,  1.5404,  ...,  1.5349,  0.2866, -0.3780]])
Edge features shape: torch.Size([2290, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1429,  ..., -0.1570, -0.0364,  0.1710],
        [ 0.3438,  0.4318,  0.1985,  ..., -0.3547, -0.0178,  0.3324],
        [ 0.3448,  0.4370,  0.2090,  ..., -0.3692, -0.0409,  0.3174],
        ...,
        [ 0.1163, -0.0904, -0.0461,  ..., -0.0859,  0.1186, -0.0063],
        [ 0.0422, -0.0582,  0.0379,  ...,  0.0576, -0.0333, -0.0118],
        [ 0.2189,  0.0045, -0.2188,  ...,  0.0135, -0.2184, -0.0180]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2290, 96])
Tensor Product Weights tensor([[-0.0563, -0.0883,  0.1503,  ...,  0.0591,  0.1378, -0.0351],
        [ 0.2732, -0.3345, -0.3079,  ...,  0.3152,  0.1303, -0.0129],
        [ 0.2668, -0.3304, -0.3147,  ...,  0.3221,  0.1360,  0.0038],
        ...,
        [ 0.0226, -0.0284,  0.1518,  ..., -0.0654,  0.0795, -0.0797],
        [ 0.0049, -0.0289,  0.0068,  ...,  0.0417,  0.0274,  0.0085],
        [-0.0612, -0.0372, -0.0766,  ...,  0.0483,  0.1449,  0.1634]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0631,  0.8962,  0.0985,  ...,  0.0585, -0.1151,  0.0788],
        [ 0.0526,  0.9467,  0.2366,  ..., -0.3276,  0.1190,  0.4698],
        [-0.0352,  0.9501,  0.2000,  ..., -0.2848,  0.2807,  0.3939],
        ...,
        [-0.1096,  0.1943,  0.0380,  ...,  0.3522,  1.1026, -0.1912],
        [-0.0223,  0.6411,  0.1786,  ..., -0.3468,  0.1602,  0.0721],
        [ 0.0752,  0.2585,  0.1707,  ...,  0.8344,  0.7061, -1.5729]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2382, -0.1447, -0.1131,  ..., -0.1406,  0.1847,  0.0797],
        [ 0.0570, -0.2097, -0.1004,  ...,  0.6040,  0.4619, -0.2284],
        [-0.2387, -0.2108, -0.0736,  ..., -0.0950, -0.1216, -0.0433],
        ...,
        [ 0.0610, -0.4867, -0.1318,  ..., -0.4026, -0.0902, -0.1909],
        [-0.0015, -0.0903,  0.0215,  ..., -0.0586,  0.0696, -0.3240],
        [ 0.1307, -0.0995, -0.0751,  ..., -0.1135, -0.0019, -0.0333]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2302])
shifts shape: torch.Size([2302, 3])
sender shape: torch.Size([2302])
receiver shape: torch.Size([2302])
Edge attributes shape: torch.Size([2302, 9])
Edge attributes tensor([[ 1.0000,  1.1883,  0.9929,  ..., -0.0159, -0.9947, -0.5228],
        [ 1.0000, -0.2245,  1.7164,  ...,  2.1759, -0.1300, -0.0303],
        [ 1.0000,  1.4034, -0.7129,  ..., -0.5498,  0.6651, -0.9342],
        ...,
        [ 1.0000,  0.9509,  1.2077,  ...,  0.5127,  1.2446, -0.1723],
        [ 1.0000,  0.7777,  1.5376,  ...,  1.5251,  0.3503, -0.3703],
        [ 1.0000,  1.4965,  0.8326,  ..., -0.3430,  0.2788, -1.4022]])
Edge features shape: torch.Size([2302, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1431,  ..., -0.1569, -0.0368,  0.1710],
        [ 0.3438,  0.4318,  0.1985,  ..., -0.3547, -0.0177,  0.3324],
        [ 0.3448,  0.4369,  0.2090,  ..., -0.3692, -0.0408,  0.3174],
        ...,
        [ 0.0434, -0.0593,  0.0377,  ...,  0.0583, -0.0314, -0.0153],
        [ 0.2213,  0.0089, -0.2209,  ...,  0.0266, -0.2191, -0.0353],
        [ 0.1129, -0.0907, -0.0400,  ..., -0.0757,  0.1195, -0.0202]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2302, 96])
Tensor Product Weights tensor([[-0.0564, -0.0883,  0.1501,  ...,  0.0593,  0.1379, -0.0349],
        [ 0.2732, -0.3345, -0.3079,  ...,  0.3152,  0.1303, -0.0130],
        [ 0.2669, -0.3304, -0.3147,  ...,  0.3221,  0.1359,  0.0038],
        ...,
        [ 0.0059, -0.0283,  0.0083,  ...,  0.0395,  0.0281,  0.0081],
        [-0.0559, -0.0322, -0.0920,  ...,  0.0413,  0.1431,  0.1741],
        [ 0.0262, -0.0250,  0.1460,  ..., -0.0701,  0.0760, -0.0771]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0695,  0.8957,  0.0998,  ...,  0.0627, -0.1112,  0.3706],
        [ 0.0560,  0.9529,  0.2353,  ..., -0.3260,  0.1436,  0.4603],
        [-0.0441,  0.9440,  0.1980,  ..., -0.2789,  0.3793,  0.0063],
        ...,
        [-0.1248,  0.1848,  0.0862,  ...,  0.7286, -0.2852,  0.7419],
        [-0.0224,  0.6397,  0.1762,  ..., -0.3702,  0.1444,  0.0675],
        [ 0.0704,  0.2545,  0.1579,  ...,  0.7909,  0.7948, -1.5518]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-2.4325e-01, -1.5174e-01, -1.1452e-01,  ..., -1.6626e-01,
          1.9933e-01,  6.0201e-02],
        [ 5.8707e-02, -2.0218e-01, -9.7812e-02,  ...,  5.8695e-01,
          4.6996e-01, -2.2263e-01],
        [-2.5461e-01, -2.3811e-01, -8.4990e-02,  ..., -9.6820e-02,
         -1.2485e-01, -5.0854e-02],
        ...,
        [-2.5528e-02, -6.3599e-01, -1.2959e-01,  ...,  3.1179e-01,
         -2.3299e-01, -1.2684e-01],
        [-4.5791e-04, -8.8889e-02,  2.2665e-02,  ..., -5.5181e-02,
          8.4202e-02, -3.1630e-01],
        [ 1.3439e-01, -1.1201e-01, -8.0677e-02,  ..., -1.1686e-01,
         -7.7427e-03, -3.6777e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2276])
shifts shape: torch.Size([2276, 3])
sender shape: torch.Size([2276])
receiver shape: torch.Size([2276])
Edge attributes shape: torch.Size([2276, 9])
Edge attributes tensor([[ 1.0000,  1.1920,  0.9847,  ..., -0.0340, -0.9925, -0.5236],
        [ 1.0000, -0.2145,  1.7176,  ...,  2.1802, -0.1385, -0.0272],
        [ 1.0000,  1.3985, -0.7226,  ..., -0.5343,  0.6740, -0.9254],
        ...,
        [ 1.0000,  0.0950,  0.9553,  ..., -0.0976,  1.7780,  1.3357],
        [ 1.0000,  0.3567,  1.0140,  ...,  0.0315,  1.7779,  1.1085],
        [ 1.0000,  1.0994,  1.3163,  ...,  0.8190,  0.4120, -0.7423]])
Edge features shape: torch.Size([2276, 8])
Edge features tensor([[ 0.1680, -0.0644, -0.1433,  ..., -0.1568, -0.0374,  0.1711],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3546, -0.0175,  0.3326],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0410,  0.3173],
        ...,
        [ 0.0766, -0.0832,  0.0136,  ...,  0.0269,  0.0586, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.1154, -0.0905, -0.0444,  ..., -0.0831,  0.1190, -0.0102]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2276, 96])
Tensor Product Weights tensor([[-0.0566, -0.0884,  0.1498,  ...,  0.0595,  0.1380, -0.0346],
        [ 0.2733, -0.3346, -0.3079,  ...,  0.3152,  0.1303, -0.0131],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3222,  0.1360,  0.0039],
        ...,
        [ 0.0342, -0.0117,  0.0684,  ..., -0.0480,  0.0478, -0.0263],
        [-0.0018, -0.0039, -0.0099,  ...,  0.0055,  0.0044,  0.0047],
        [ 0.0236, -0.0275,  0.1502,  ..., -0.0668,  0.0785, -0.0791]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0696,  0.8963,  0.0997,  ...,  0.0611, -0.1120,  0.3682],
        [ 0.0589,  0.9541,  0.2330,  ..., -0.3343,  0.1368,  0.4476],
        [-0.0425,  0.9445,  0.1976,  ..., -0.2704,  0.3755,  0.0170],
        ...,
        [-0.1261,  0.1808,  0.0848,  ..., -0.7788,  1.4769, -0.5134],
        [-0.0176,  0.5698,  0.0675,  ...,  0.1808, -0.2756,  0.5301],
        [ 0.0691,  0.2447,  0.1495,  ...,  0.6765, -1.2622, -1.1531]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2431, -0.1514, -0.1144,  ..., -0.1640,  0.2008,  0.0606],
        [ 0.0622, -0.1950, -0.0992,  ...,  0.5830,  0.4717, -0.2259],
        [-0.2514, -0.2327, -0.0821,  ..., -0.0963, -0.1291, -0.0463],
        ...,
        [-0.0264, -0.6449, -0.1315,  ..., -0.1371,  0.3294, -0.2063],
        [-0.0219, -0.1278, -0.0128,  ...,  0.1024, -0.1432, -0.2978],
        [ 0.0724, -0.2012, -0.1056,  ..., -0.0136, -0.0489, -0.0113]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2270])
shifts shape: torch.Size([2270, 3])
sender shape: torch.Size([2270])
receiver shape: torch.Size([2270])
Edge attributes shape: torch.Size([2270, 9])
Edge attributes tensor([[ 1.0000,  1.1922,  0.9841,  ..., -0.0354, -0.9925, -0.5235],
        [ 1.0000, -0.2177,  1.7169,  ...,  2.1777, -0.1540, -0.0275],
        [ 1.0000,  1.4007, -0.7228,  ..., -0.5339,  0.6700, -0.9337],
        ...,
        [ 1.0000,  0.2504,  1.2107,  ...,  0.5206,  1.8960,  0.9094],
        [ 1.0000,  0.8746,  1.2355,  ...,  0.5885,  1.3428, -0.0362],
        [ 1.0000,  0.9682,  0.5390,  ..., -0.7932,  0.9263,  0.5387]])
Edge features shape: torch.Size([2270, 8])
Edge features tensor([[ 0.1680, -0.0645, -0.1432,  ..., -0.1568, -0.0371,  0.1711],
        [ 0.3438,  0.4317,  0.1983,  ..., -0.3543, -0.0172,  0.3328],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3694, -0.0411,  0.3172],
        ...,
        [ 0.2221,  0.0105, -0.2216,  ...,  0.0314, -0.2192, -0.0417],
        [ 0.0440, -0.0599,  0.0376,  ...,  0.0586, -0.0303, -0.0174],
        [ 0.1059, -0.0907, -0.0282,  ..., -0.0548,  0.1171, -0.0454]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2270, 96])
Tensor Product Weights tensor([[-0.0565, -0.0883,  0.1499,  ...,  0.0594,  0.1380, -0.0347],
        [ 0.2734, -0.3346, -0.3078,  ...,  0.3151,  0.1302, -0.0133],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3222,  0.1360,  0.0040],
        ...,
        [-0.0538, -0.0304, -0.0976,  ...,  0.0386,  0.1424,  0.1779],
        [ 0.0064, -0.0280,  0.0091,  ...,  0.0382,  0.0285,  0.0079],
        [ 0.0320, -0.0192,  0.1330,  ..., -0.0761,  0.0695, -0.0702]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0693,  0.8957,  0.0997,  ...,  0.0628, -0.1105,  0.3710],
        [ 0.0548,  0.9476,  0.2380,  ..., -0.3286,  0.1350,  0.4535],
        [-0.0431,  0.9444,  0.1972,  ..., -0.2687,  0.3769,  0.0136],
        ...,
        [-0.1257,  0.1829,  0.0840,  ...,  0.0404,  1.2986, -0.7810],
        [-0.0348,  0.5979,  0.1677,  ...,  0.1718, -0.7313, -0.3754],
        [ 0.0575,  0.2097,  0.2022,  ...,  0.9661,  0.1532,  1.2032]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2429, -0.1509, -0.1141,  ..., -0.1657,  0.2005,  0.0593],
        [ 0.0584, -0.2068, -0.1017,  ...,  0.5944,  0.4640, -0.2356],
        [-0.2525, -0.2348, -0.0833,  ..., -0.0964, -0.1277, -0.0468],
        ...,
        [-0.0250, -0.6394, -0.1306,  ...,  0.1936, -0.3108,  0.1873],
        [-0.0215, -0.1293,  0.0237,  ..., -0.3262, -0.0796,  0.1111],
        [ 0.1125, -0.1757, -0.0644,  ..., -0.0524,  0.0038,  0.0459]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2288])
shifts shape: torch.Size([2288, 3])
sender shape: torch.Size([2288])
receiver shape: torch.Size([2288])
Edge attributes shape: torch.Size([2288, 9])
Edge attributes tensor([[ 1.0000,  1.1988,  0.9977,  ..., -0.0051, -0.9703, -0.5614],
        [ 1.0000, -0.2147,  1.7184,  ...,  2.1832, -0.0758, -0.0290],
        [ 1.0000,  1.4117, -0.7091,  ..., -0.5558,  0.6501, -0.9610],
        ...,
        [ 1.0000,  1.0016,  1.3824,  ...,  1.0185, -0.5226, -0.5923],
        [ 1.0000,  1.0870,  1.3482,  ...,  0.9142, -0.0494, -0.7622],
        [ 1.0000,  0.6565,  0.6419,  ..., -0.6574,  1.2170,  1.1142]])
Edge features shape: torch.Size([2288, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1429,  ..., -0.1569, -0.0365,  0.1710],
        [ 0.3438,  0.4319,  0.1985,  ..., -0.3547, -0.0178,  0.3324],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0409,  0.3174],
        ...,
        [ 0.0765, -0.0831,  0.0137,  ...,  0.0271,  0.0584, -0.0905],
        [ 0.0056, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.2197,  0.0060, -0.2196,  ...,  0.0180, -0.2188, -0.0240]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2288, 96])
Tensor Product Weights tensor([[-0.0563, -0.0883,  0.1502,  ...,  0.0591,  0.1378, -0.0351],
        [ 0.2732, -0.3345, -0.3079,  ...,  0.3152,  0.1303, -0.0129],
        [ 0.2668, -0.3304, -0.3147,  ...,  0.3221,  0.1360,  0.0038],
        ...,
        [ 0.0341, -0.0118,  0.0682,  ..., -0.0477,  0.0477, -0.0262],
        [-0.0018, -0.0038, -0.0098,  ...,  0.0053,  0.0044,  0.0046],
        [-0.0595, -0.0354, -0.0819,  ...,  0.0459,  0.1443,  0.1671]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0630,  0.8957,  0.0985,  ...,  0.0591, -0.1150,  0.0818],
        [ 0.0523,  0.9456,  0.2368,  ..., -0.3277,  0.1205,  0.4716],
        [-0.0354,  0.9500,  0.2001,  ..., -0.2846,  0.2826,  0.3947],
        ...,
        [-0.1100,  0.1943,  0.0382,  ...,  0.5420,  0.8546,  0.1642],
        [-0.0305,  0.6258,  0.0772,  ...,  0.2915, -0.1207, -0.3448],
        [ 0.0462,  0.2909,  0.1254,  ..., -0.7102,  1.4764, -0.0764]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2384, -0.1453, -0.1131,  ..., -0.1412,  0.1843,  0.0792],
        [ 0.0568, -0.2099, -0.1004,  ...,  0.6049,  0.4618, -0.2308],
        [-0.2391, -0.2116, -0.0742,  ..., -0.0950, -0.1214, -0.0438],
        ...,
        [ 0.0608, -0.4867, -0.1324,  ..., -0.4131, -0.1776, -0.0693],
        [-0.0118, -0.1066,  0.0236,  ..., -0.1028, -0.2791,  0.1783],
        [ 0.0912, -0.1693, -0.0635,  ..., -0.0493, -0.0279,  0.0214]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2288])
shifts shape: torch.Size([2288, 3])
sender shape: torch.Size([2288])
receiver shape: torch.Size([2288])
Edge attributes shape: torch.Size([2288, 9])
Edge attributes tensor([[ 1.0000,  1.1999,  0.9975,  ..., -0.0056, -0.9681, -0.5646],
        [ 1.0000, -0.2129,  1.7186,  ...,  2.1842, -0.0703, -0.0286],
        [ 1.0000,  1.4105, -0.7096,  ..., -0.5551,  0.6523, -0.9570],
        ...,
        [ 1.0000,  1.0960,  1.3409,  ...,  0.8922, -0.0509, -0.7748],
        [ 1.0000,  0.9348,  1.0867,  ...,  0.2022,  1.3640,  0.0462],
        [ 1.0000,  0.6759,  0.6238,  ..., -0.6830,  1.1819,  1.0956]])
Edge features shape: torch.Size([2288, 8])
Edge features tensor([[ 1.6780e-01, -6.4627e-02, -1.4291e-01,  ..., -1.5696e-01,
         -3.6369e-02,  1.7096e-01],
        [ 3.4385e-01,  4.3190e-01,  1.9863e-01,  ..., -3.5486e-01,
         -1.7985e-02,  3.3227e-01],
        [ 3.4476e-01,  4.3692e-01,  2.0896e-01,  ..., -3.6913e-01,
         -4.0742e-02,  3.1750e-01],
        ...,
        [ 5.9030e-03, -1.0646e-02,  1.3298e-02,  ..., -6.0637e-03,
          1.7881e-04,  5.7412e-03],
        [ 4.4042e-02, -5.9950e-02,  3.7562e-02,  ...,  5.8653e-02,
         -3.0269e-02, -1.7450e-02],
        [ 2.2255e-01,  1.1266e-02, -2.2198e-01,  ...,  3.3684e-02,
         -2.1913e-01, -4.4777e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2288, 96])
Tensor Product Weights tensor([[-0.0563, -0.0883,  0.1503,  ...,  0.0591,  0.1378, -0.0351],
        [ 0.2732, -0.3345, -0.3080,  ...,  0.3153,  0.1304, -0.0128],
        [ 0.2669, -0.3304, -0.3147,  ...,  0.3221,  0.1359,  0.0037],
        ...,
        [-0.0019, -0.0043, -0.0101,  ...,  0.0061,  0.0046,  0.0047],
        [ 0.0064, -0.0279,  0.0091,  ...,  0.0382,  0.0285,  0.0079],
        [-0.0528, -0.0295, -0.1003,  ...,  0.0372,  0.1420,  0.1797]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0631,  0.8961,  0.0985,  ...,  0.0578, -0.1147,  0.0802],
        [ 0.0526,  0.9463,  0.2368,  ..., -0.3281,  0.1193,  0.4717],
        [-0.0353,  0.9500,  0.2003,  ..., -0.2861,  0.2813,  0.3944],
        ...,
        [-0.1120,  0.1925,  0.0361,  ...,  0.4706,  0.9067,  0.1349],
        [-0.0312,  0.6240,  0.0759,  ...,  0.2927, -0.1232, -0.3439],
        [ 0.0438,  0.2886,  0.1174,  ..., -0.6952,  1.4748, -0.0747]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2382, -0.1447, -0.1131,  ..., -0.1409,  0.1845,  0.0795],
        [ 0.0571, -0.2098, -0.1007,  ...,  0.6037,  0.4619, -0.2282],
        [-0.2390, -0.2114, -0.0740,  ..., -0.0952, -0.1215, -0.0438],
        ...,
        [ 0.0610, -0.4924, -0.1367,  ..., -0.4081, -0.1917, -0.0718],
        [-0.0123, -0.1072,  0.0246,  ..., -0.1022, -0.2749,  0.1811],
        [ 0.0914, -0.1798, -0.0675,  ..., -0.0527, -0.0321,  0.0168]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2288])
shifts shape: torch.Size([2288, 3])
sender shape: torch.Size([2288])
receiver shape: torch.Size([2288])
Edge attributes shape: torch.Size([2288, 9])
Edge attributes tensor([[ 1.0000,  1.1999,  0.9971,  ..., -0.0065, -0.9685, -0.5640],
        [ 1.0000, -0.2130,  1.7186,  ...,  2.1841, -0.0732, -0.0286],
        [ 1.0000,  1.4110, -0.7099,  ..., -0.5545,  0.6513, -0.9591],
        ...,
        [ 1.0000,  0.9969,  1.3860,  ...,  1.0297, -0.5221, -0.5866],
        [ 1.0000,  1.0840,  1.3506,  ...,  0.9215, -0.0488, -0.7580],
        [ 1.0000,  0.6656,  0.6332,  ..., -0.6698,  1.2003,  1.1057]])
Edge features shape: torch.Size([2288, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0365,  0.1710],
        [ 0.3439,  0.4319,  0.1986,  ..., -0.3548, -0.0179,  0.3323],
        [ 0.3448,  0.4369,  0.2090,  ..., -0.3692, -0.0409,  0.3174],
        ...,
        [ 0.0766, -0.0831,  0.0137,  ...,  0.0271,  0.0584, -0.0905],
        [ 0.0056, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.2201,  0.0066, -0.2199,  ...,  0.0198, -0.2189, -0.0264]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2288, 96])
Tensor Product Weights tensor([[-0.0563, -0.0883,  0.1502,  ...,  0.0591,  0.1378, -0.0351],
        [ 0.2732, -0.3345, -0.3080,  ...,  0.3153,  0.1304, -0.0128],
        [ 0.2669, -0.3304, -0.3147,  ...,  0.3221,  0.1359,  0.0038],
        ...,
        [ 0.0341, -0.0117,  0.0682,  ..., -0.0478,  0.0477, -0.0262],
        [-0.0018, -0.0038, -0.0098,  ...,  0.0053,  0.0044,  0.0046],
        [-0.0587, -0.0348, -0.0840,  ...,  0.0450,  0.1440,  0.1686]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0631,  0.8962,  0.0986,  ...,  0.0581, -0.1148,  0.0808],
        [ 0.0527,  0.9467,  0.2366,  ..., -0.3279,  0.1207,  0.4715],
        [-0.0350,  0.9501,  0.2001,  ..., -0.2854,  0.2813,  0.3954],
        ...,
        [-0.1102,  0.1941,  0.0379,  ...,  0.5219,  0.8733,  0.1495],
        [-0.0310,  0.6268,  0.0768,  ...,  0.2909, -0.1154, -0.3373],
        [ 0.0452,  0.2900,  0.1270,  ..., -0.7253,  1.4878, -0.0749]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2382, -0.1447, -0.1132,  ..., -0.1409,  0.1844,  0.0792],
        [ 0.0571, -0.2094, -0.1006,  ...,  0.6040,  0.4618, -0.2286],
        [-0.2386, -0.2104, -0.0736,  ..., -0.0945, -0.1220, -0.0434],
        ...,
        [ 0.0609, -0.4872, -0.1327,  ..., -0.4125, -0.1796, -0.0682],
        [-0.0122, -0.1063,  0.0245,  ..., -0.1012, -0.2795,  0.1782],
        [ 0.0935, -0.1669, -0.0627,  ..., -0.0495, -0.0275,  0.0224]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2290])
shifts shape: torch.Size([2290, 3])
sender shape: torch.Size([2290])
receiver shape: torch.Size([2290])
Edge attributes shape: torch.Size([2290, 9])
Edge attributes tensor([[ 1.0000,  1.1882,  0.9933,  ..., -0.0150, -0.9945, -0.5231],
        [ 1.0000, -0.2251,  1.7164,  ...,  2.1756, -0.1303, -0.0305],
        [ 1.0000,  1.4041, -0.7126,  ..., -0.5503,  0.6638, -0.9365],
        ...,
        [ 1.0000,  1.3111,  0.9356,  ..., -0.1393,  0.7694, -0.8477],
        [ 1.0000,  0.6556,  1.4760,  ...,  1.3176,  1.1925, -0.0247],
        [ 1.0000,  1.3215,  1.1179,  ...,  0.2792, -0.0902, -1.1248]])
Edge features shape: torch.Size([2290, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1431,  ..., -0.1569, -0.0367,  0.1710],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3546, -0.0175,  0.3326],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0410,  0.3173],
        ...,
        [ 0.0422, -0.0581,  0.0379,  ...,  0.0575, -0.0334, -0.0116],
        [ 0.1168, -0.0903, -0.0469,  ..., -0.0872,  0.1184, -0.0044],
        [ 0.2187,  0.0041, -0.2186,  ...,  0.0123, -0.2182, -0.0164]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2290, 96])
Tensor Product Weights tensor([[-0.0564, -0.0883,  0.1501,  ...,  0.0593,  0.1379, -0.0349],
        [ 0.2733, -0.3346, -0.3078,  ...,  0.3152,  0.1303, -0.0131],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3222,  0.1360,  0.0039],
        ...,
        [ 0.0048, -0.0289,  0.0067,  ...,  0.0419,  0.0274,  0.0085],
        [ 0.0221, -0.0289,  0.1525,  ..., -0.0647,  0.0799, -0.0800],
        [-0.0617, -0.0376, -0.0752,  ...,  0.0489,  0.1450,  0.1624]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0695,  0.8956,  0.0997,  ...,  0.0634, -0.1110,  0.3711],
        [ 0.0559,  0.9526,  0.2355,  ..., -0.3255,  0.1432,  0.4611],
        [-0.0442,  0.9441,  0.1980,  ..., -0.2784,  0.3798,  0.0065],
        ...,
        [-0.1095,  0.1951,  0.0389,  ...,  0.7864, -0.1755, -1.5748],
        [-0.0221,  0.6417,  0.1786,  ..., -0.4121,  0.1276,  0.0443],
        [ 0.0749,  0.2591,  0.1694,  ...,  0.6887,  0.7027, -1.6680]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2433, -0.1518, -0.1145,  ..., -0.1665,  0.1993,  0.0601],
        [ 0.0587, -0.2024, -0.0979,  ...,  0.5871,  0.4697, -0.2233],
        [-0.2547, -0.2384, -0.0851,  ..., -0.0969, -0.1247, -0.0510],
        ...,
        [ 0.0601, -0.4859, -0.1311,  ..., -0.1228, -0.3007, -0.3179],
        [-0.0013, -0.0903,  0.0212,  ..., -0.0800,  0.0941, -0.3124],
        [ 0.1325, -0.1028, -0.0750,  ..., -0.0761, -0.0297, -0.0517]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2268])
shifts shape: torch.Size([2268, 3])
sender shape: torch.Size([2268])
receiver shape: torch.Size([2268])
Edge attributes shape: torch.Size([2268, 9])
Edge attributes tensor([[ 1.0000,  1.1908,  0.9848,  ..., -0.0337, -0.9947, -0.5203],
        [ 1.0000, -0.2161,  1.7173,  ...,  2.1792, -0.1431, -0.0275],
        [ 1.0000,  1.3984, -0.7223,  ..., -0.5347,  0.6742, -0.9249],
        ...,
        [ 1.0000,  0.0933,  0.9580,  ..., -0.0918,  1.7810,  1.3328],
        [ 1.0000,  0.3614,  1.0179,  ...,  0.0404,  1.7793,  1.0991],
        [ 1.0000,  1.0963,  1.3178,  ...,  0.8234,  0.4222, -0.7361]])
Edge features shape: torch.Size([2268, 8])
Edge features tensor([[ 1.6801e-01, -6.4439e-02, -1.4329e-01,  ..., -1.5679e-01,
         -3.7358e-02,  1.7112e-01],
        [ 3.4383e-01,  4.3179e-01,  1.9842e-01,  ..., -3.5456e-01,
         -1.7512e-02,  3.3257e-01],
        [ 3.4477e-01,  4.3697e-01,  2.0905e-01,  ..., -3.6926e-01,
         -4.0942e-02,  3.1736e-01],
        ...,
        [ 7.6325e-02, -8.3016e-02,  1.3969e-02,  ...,  2.7607e-02,
          5.7711e-02, -9.0377e-02],
        [ 5.9716e-03, -1.0762e-02,  1.3425e-02,  ..., -6.0062e-03,
          3.8464e-05,  5.9369e-03],
        [ 1.1383e-01, -9.0603e-02, -4.1709e-02,  ..., -7.8564e-02,
          1.1937e-01, -1.6450e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2268, 96])
Tensor Product Weights tensor([[-0.0566, -0.0884,  0.1498,  ...,  0.0595,  0.1380, -0.0346],
        [ 0.2733, -0.3346, -0.3079,  ...,  0.3152,  0.1303, -0.0131],
        [ 0.2668, -0.3304, -0.3147,  ...,  0.3221,  0.1360,  0.0039],
        ...,
        [ 0.0340, -0.0118,  0.0677,  ..., -0.0472,  0.0476, -0.0258],
        [-0.0019, -0.0044, -0.0101,  ...,  0.0063,  0.0047,  0.0048],
        [ 0.0252, -0.0259,  0.1476,  ..., -0.0689,  0.0769, -0.0779]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0695,  0.8960,  0.0997,  ...,  0.0614, -0.1117,  0.3682],
        [ 0.0592,  0.9531,  0.2340,  ..., -0.3336,  0.1379,  0.4494],
        [-0.0427,  0.9445,  0.1974,  ..., -0.2700,  0.3754,  0.0148],
        ...,
        [-0.1107,  0.1930,  0.0320,  ...,  0.9591, -0.2346,  0.1785],
        [-0.0178,  0.5695,  0.0670,  ...,  0.1805, -0.2749,  0.5313],
        [ 0.0679,  0.2434,  0.1478,  ...,  0.6728, -1.2648, -1.1536]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2432, -0.1516, -0.1142,  ..., -0.1646,  0.2006,  0.0604],
        [ 0.0623, -0.1944, -0.0991,  ...,  0.5837,  0.4720, -0.2255],
        [-0.2517, -0.2333, -0.0824,  ..., -0.0964, -0.1287, -0.0463],
        ...,
        [ 0.0645, -0.4906, -0.1314,  ...,  0.0195,  0.0575,  0.4494],
        [-0.0222, -0.1278, -0.0123,  ...,  0.1045, -0.1427, -0.2963],
        [ 0.0732, -0.2042, -0.1076,  ..., -0.0158, -0.0499, -0.0124]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2288])
shifts shape: torch.Size([2288, 3])
sender shape: torch.Size([2288])
receiver shape: torch.Size([2288])
Edge attributes shape: torch.Size([2288, 9])
Edge attributes tensor([[ 1.0000,  1.1884,  0.9943,  ..., -0.0127, -0.9935, -0.5249],
        [ 1.0000, -0.2264,  1.7162,  ...,  2.1749, -0.1298, -0.0309],
        [ 1.0000,  1.4057, -0.7112,  ..., -0.5525,  0.6609, -0.9411],
        ...,
        [ 1.0000,  1.0919,  1.3445,  ...,  0.9030,  0.0082, -0.7696],
        [ 1.0000,  0.6638,  0.5953,  ..., -0.7218,  1.1412,  1.1389],
        [ 1.0000,  0.9205,  1.0723,  ...,  0.1676,  1.3863,  0.1003]])
Edge features shape: torch.Size([2288, 8])
Edge features tensor([[ 1.6788e-01, -6.4554e-02, -1.4306e-01,  ..., -1.5689e-01,
         -3.6755e-02,  1.7103e-01],
        [ 3.4384e-01,  4.3181e-01,  1.9846e-01,  ..., -3.5462e-01,
         -1.7611e-02,  3.3251e-01],
        [ 3.4477e-01,  4.3699e-01,  2.0909e-01,  ..., -3.6931e-01,
         -4.1033e-02,  3.1730e-01],
        ...,
        [ 5.9055e-03, -1.0651e-02,  1.3303e-02,  ..., -6.0615e-03,
          1.7347e-04,  5.7486e-03],
        [ 2.2290e-01,  1.1936e-02, -2.2226e-01,  ...,  3.5672e-02,
         -2.1907e-01, -4.7403e-02],
        [ 4.4256e-02, -6.0156e-02,  3.7510e-02,  ...,  5.8758e-02,
         -2.9892e-02, -1.8127e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2288, 96])
Tensor Product Weights tensor([[-0.0564, -0.0883,  0.1501,  ...,  0.0593,  0.1379, -0.0349],
        [ 0.2733, -0.3345, -0.3079,  ...,  0.3152,  0.1303, -0.0130],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3222,  0.1360,  0.0039],
        ...,
        [-0.0019, -0.0043, -0.0101,  ...,  0.0061,  0.0046,  0.0047],
        [-0.0519, -0.0287, -0.1026,  ...,  0.0361,  0.1417,  0.1813],
        [ 0.0066, -0.0278,  0.0094,  ...,  0.0378,  0.0286,  0.0078]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0695,  0.8956,  0.0998,  ...,  0.0636, -0.1108,  0.3722],
        [ 0.0559,  0.9522,  0.2357,  ..., -0.3261,  0.1438,  0.4629],
        [-0.0444,  0.9440,  0.1982,  ..., -0.2794,  0.3796,  0.0060],
        ...,
        [-0.1098,  0.1940,  0.0339,  ..., -0.7921, -1.4054, -0.5683],
        [-0.0314,  0.6245,  0.0754,  ...,  0.2948, -0.1124, -0.3584],
        [ 0.0432,  0.2889,  0.1162,  ..., -0.7474,  1.4467, -0.0424]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2433, -0.1519, -0.1145,  ..., -0.1669,  0.1991,  0.0598],
        [ 0.0586, -0.2028, -0.0982,  ...,  0.5869,  0.4696, -0.2234],
        [-0.2551, -0.2390, -0.0854,  ..., -0.0970, -0.1243, -0.0516],
        ...,
        [ 0.0635, -0.4881, -0.1300,  ...,  0.0586,  0.4431, -0.0682],
        [-0.0123, -0.1071,  0.0249,  ..., -0.1026, -0.2777,  0.1754],
        [ 0.0927, -0.1806, -0.0678,  ..., -0.0539, -0.0334,  0.0156]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2292])
shifts shape: torch.Size([2292, 3])
sender shape: torch.Size([2292])
receiver shape: torch.Size([2292])
Edge attributes shape: torch.Size([2292, 9])
Edge attributes tensor([[ 1.0000,  1.1878,  0.9928,  ..., -0.0160, -0.9957, -0.5211],
        [ 1.0000, -0.2247,  1.7164,  ...,  2.1758, -0.1305, -0.0303],
        [ 1.0000,  1.4029, -0.7131,  ..., -0.5496,  0.6661, -0.9324],
        ...,
        [ 1.0000,  1.4980,  0.8283,  ..., -0.3509,  0.2826, -1.4034],
        [ 1.0000,  0.9495,  1.2096,  ...,  0.5178,  1.2448, -0.1717],
        [ 1.0000,  0.7856,  1.5343,  ...,  1.5139,  0.3362, -0.3798]])
Edge features shape: torch.Size([2292, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0367,  0.1710],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3545, -0.0174,  0.3326],
        [ 0.3448,  0.4370,  0.2092,  ..., -0.3694, -0.0412,  0.3172],
        ...,
        [ 0.1120, -0.0907, -0.0385,  ..., -0.0730,  0.1195, -0.0237],
        [ 0.0436, -0.0595,  0.0377,  ...,  0.0584, -0.0310, -0.0161],
        [ 0.2217,  0.0097, -0.2213,  ...,  0.0290, -0.2192, -0.0386]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2292, 96])
Tensor Product Weights tensor([[-0.0564, -0.0883,  0.1501,  ...,  0.0592,  0.1379, -0.0350],
        [ 0.2733, -0.3346, -0.3078,  ...,  0.3151,  0.1303, -0.0132],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3222,  0.1360,  0.0040],
        ...,
        [ 0.0270, -0.0242,  0.1444,  ..., -0.0711,  0.0751, -0.0764],
        [ 0.0061, -0.0282,  0.0086,  ...,  0.0391,  0.0282,  0.0080],
        [-0.0549, -0.0312, -0.0949,  ...,  0.0399,  0.1427,  0.1760]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0694,  0.8954,  0.0997,  ...,  0.0641, -0.1108,  0.3708],
        [ 0.0562,  0.9516,  0.2363,  ..., -0.3254,  0.1436,  0.4625],
        [-0.0442,  0.9442,  0.1980,  ..., -0.2783,  0.3802,  0.0069],
        ...,
        [-0.1116,  0.1927,  0.0356,  ...,  0.3508,  1.1175, -0.2432],
        [-0.0227,  0.6398,  0.1762,  ..., -0.3650,  0.1439,  0.0696],
        [ 0.0704,  0.2546,  0.1583,  ...,  0.7972,  0.7875, -1.5596]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2433, -0.1518, -0.1143,  ..., -0.1661,  0.1995,  0.0605],
        [ 0.0588, -0.2018, -0.0980,  ...,  0.5882,  0.4702, -0.2221],
        [-0.2547, -0.2384, -0.0852,  ..., -0.0970, -0.1248, -0.0503],
        ...,
        [ 0.0614, -0.4922, -0.1359,  ..., -0.3966, -0.0956, -0.2042],
        [-0.0009, -0.0892,  0.0230,  ..., -0.0548,  0.0829, -0.3171],
        [ 0.1346, -0.1120, -0.0806,  ..., -0.1175, -0.0080, -0.0373]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2264])
shifts shape: torch.Size([2264, 3])
sender shape: torch.Size([2264])
receiver shape: torch.Size([2264])
Edge attributes shape: torch.Size([2264, 9])
Edge attributes tensor([[ 1.0000,  1.1915,  0.9841,  ..., -0.0354, -0.9938, -0.5214],
        [ 1.0000, -0.2152,  1.7174,  ...,  2.1796, -0.1441, -0.0272],
        [ 1.0000,  1.3981, -0.7231,  ..., -0.5335,  0.6747, -0.9247],
        ...,
        [ 1.0000,  0.0967,  0.9512,  ..., -0.1065,  1.7735,  1.3404],
        [ 1.0000,  0.3579,  1.0109,  ...,  0.0245,  1.7751,  1.1115],
        [ 1.0000,  1.0961,  1.3189,  ...,  0.8268,  0.4140, -0.7373]])
Edge features shape: torch.Size([2264, 8])
Edge features tensor([[ 0.1680, -0.0645, -0.1433,  ..., -0.1568, -0.0373,  0.1711],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3546, -0.0176,  0.3325],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0410,  0.3174],
        ...,
        [ 0.0766, -0.0832,  0.0136,  ...,  0.0269,  0.0586, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.1153, -0.0905, -0.0443,  ..., -0.0829,  0.1190, -0.0105]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2264, 96])
Tensor Product Weights tensor([[-0.0566, -0.0884,  0.1499,  ...,  0.0595,  0.1380, -0.0347],
        [ 0.2733, -0.3346, -0.3079,  ...,  0.3152,  0.1303, -0.0131],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3221,  0.1360,  0.0039],
        ...,
        [ 0.0342, -0.0117,  0.0684,  ..., -0.0479,  0.0478, -0.0263],
        [-0.0018, -0.0039, -0.0099,  ...,  0.0055,  0.0044,  0.0047],
        [ 0.0237, -0.0274,  0.1501,  ..., -0.0669,  0.0784, -0.0790]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0695,  0.8959,  0.0997,  ...,  0.0609, -0.1114,  0.3683],
        [ 0.0593,  0.9530,  0.2339,  ..., -0.3330,  0.1382,  0.4493],
        [-0.0427,  0.9443,  0.1975,  ..., -0.2704,  0.3765,  0.0154],
        ...,
        [-0.1094,  0.1942,  0.0347,  ...,  0.9511, -0.2657,  0.1893],
        [-0.0176,  0.5693,  0.0680,  ...,  0.1796, -0.2737,  0.5274],
        [ 0.0692,  0.2445,  0.1488,  ...,  0.6813, -1.2579, -1.1617]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2432, -0.1515, -0.1142,  ..., -0.1643,  0.2009,  0.0604],
        [ 0.0624, -0.1944, -0.0992,  ...,  0.5836,  0.4717, -0.2254],
        [-0.2517, -0.2333, -0.0825,  ..., -0.0965, -0.1287, -0.0461],
        ...,
        [ 0.0633, -0.4864, -0.1300,  ...,  0.0183,  0.0610,  0.4506],
        [-0.0221, -0.1282, -0.0128,  ...,  0.1015, -0.1421, -0.2986],
        [ 0.0717, -0.2014, -0.1048,  ..., -0.0134, -0.0497, -0.0116]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2268])
shifts shape: torch.Size([2268, 3])
sender shape: torch.Size([2268])
receiver shape: torch.Size([2268])
Edge attributes shape: torch.Size([2268, 9])
Edge attributes tensor([[ 1.0000,  1.1874,  0.9858,  ..., -0.0316, -1.0008, -0.5109],
        [ 1.0000, -0.2219,  1.7163,  ...,  2.1753, -0.1590, -0.0285],
        [ 1.0000,  1.4016, -0.7206,  ..., -0.5375,  0.6685, -0.9347],
        ...,
        [ 1.0000,  0.0913,  0.9517,  ..., -0.1053,  1.7745,  1.3411],
        [ 1.0000,  0.3596,  1.0117,  ...,  0.0263,  1.7751,  1.1089],
        [ 1.0000,  1.0977,  1.3159,  ...,  0.8179,  0.4284, -0.7367]])
Edge features shape: torch.Size([2268, 8])
Edge features tensor([[ 1.6798e-01, -6.4464e-02, -1.4324e-01,  ..., -1.5682e-01,
         -3.7225e-02,  1.7110e-01],
        [ 3.4380e-01,  4.3163e-01,  1.9809e-01,  ..., -3.5410e-01,
         -1.6793e-02,  3.3301e-01],
        [ 3.4478e-01,  4.3703e-01,  2.0919e-01,  ..., -3.6944e-01,
         -4.1243e-02,  3.1716e-01],
        ...,
        [ 7.6329e-02, -8.3019e-02,  1.3964e-02,  ...,  2.7598e-02,
          5.7723e-02, -9.0379e-02],
        [ 5.9716e-03, -1.0763e-02,  1.3426e-02,  ..., -6.0062e-03,
          3.8333e-05,  5.9371e-03],
        [ 1.1481e-01, -9.0525e-02, -4.3440e-02,  ..., -8.1458e-02,
          1.1917e-01, -1.2498e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2268, 96])
Tensor Product Weights tensor([[-0.0566, -0.0883,  0.1499,  ...,  0.0595,  0.1380, -0.0347],
        [ 0.2735, -0.3347, -0.3076,  ...,  0.3149,  0.1301, -0.0136],
        [ 0.2667, -0.3303, -0.3148,  ...,  0.3222,  0.1360,  0.0041],
        ...,
        [ 0.0340, -0.0118,  0.0677,  ..., -0.0472,  0.0476, -0.0258],
        [-0.0019, -0.0044, -0.0101,  ...,  0.0063,  0.0047,  0.0048],
        [ 0.0242, -0.0269,  0.1493,  ..., -0.0676,  0.0779, -0.0787]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0692,  0.8953,  0.0998,  ...,  0.0656, -0.1108,  0.3707],
        [ 0.0540,  0.9472,  0.2377,  ..., -0.3289,  0.1356,  0.4499],
        [-0.0430,  0.9448,  0.1970,  ..., -0.2667,  0.3785,  0.0118],
        ...,
        [-0.1252,  0.1816,  0.0859,  ..., -0.8014,  1.4688, -0.5002],
        [-0.0176,  0.5697,  0.0673,  ...,  0.1839, -0.2761,  0.5310],
        [ 0.0685,  0.2437,  0.1487,  ...,  0.6816, -1.2561, -1.1535]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2432, -0.1516, -0.1139,  ..., -0.1663,  0.2001,  0.0590],
        [ 0.0567, -0.2072, -0.1000,  ...,  0.5956,  0.4637, -0.2417],
        [-0.2523, -0.2348, -0.0832,  ..., -0.0965, -0.1280, -0.0463],
        ...,
        [-0.0255, -0.6406, -0.1303,  ..., -0.1369,  0.3325, -0.1999],
        [-0.0221, -0.1279, -0.0126,  ...,  0.1047, -0.1417, -0.2972],
        [ 0.0728, -0.2027, -0.1068,  ..., -0.0146, -0.0493, -0.0120]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2288])
shifts shape: torch.Size([2288, 3])
sender shape: torch.Size([2288])
receiver shape: torch.Size([2288])
Edge attributes shape: torch.Size([2288, 9])
Edge attributes tensor([[ 1.0000,  1.1848,  0.9935,  ..., -0.0144, -1.0011, -0.5129],
        [ 1.0000, -0.2295,  1.7155,  ...,  2.1724, -0.1441, -0.0313],
        [ 1.0000,  1.4053, -0.7117,  ..., -0.5518,  0.6616, -0.9400],
        ...,
        [ 1.0000,  0.9517,  1.2074,  ...,  0.5118,  1.2436, -0.1737],
        [ 1.0000,  0.7827,  1.5353,  ...,  1.5174,  0.3442, -0.3760],
        [ 1.0000,  1.4979,  0.8300,  ..., -0.3478,  0.2785, -1.4046]])
Edge features shape: torch.Size([2288, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0366,  0.1710],
        [ 0.3438,  0.4317,  0.1982,  ..., -0.3542, -0.0170,  0.3329],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0410,  0.3173],
        ...,
        [ 0.0436, -0.0595,  0.0377,  ...,  0.0584, -0.0311, -0.0160],
        [ 0.2217,  0.0096, -0.2213,  ...,  0.0288, -0.2192, -0.0384],
        [ 0.1122, -0.0907, -0.0389,  ..., -0.0738,  0.1195, -0.0228]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2288, 96])
Tensor Product Weights tensor([[-0.0564, -0.0883,  0.1502,  ...,  0.0592,  0.1379, -0.0350],
        [ 0.2734, -0.3347, -0.3077,  ...,  0.3150,  0.1301, -0.0135],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3222,  0.1360,  0.0039],
        ...,
        [ 0.0060, -0.0282,  0.0085,  ...,  0.0391,  0.0282,  0.0080],
        [-0.0549, -0.0313, -0.0946,  ...,  0.0400,  0.1427,  0.1759],
        [ 0.0268, -0.0244,  0.1448,  ..., -0.0708,  0.0754, -0.0766]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0691,  0.8950,  0.0998,  ...,  0.0666, -0.1103,  0.3717],
        [ 0.0518,  0.9470,  0.2394,  ..., -0.3209,  0.1414,  0.4612],
        [-0.0444,  0.9443,  0.1975,  ..., -0.2755,  0.3818,  0.0034],
        ...,
        [-0.1248,  0.1849,  0.0861,  ...,  0.7295, -0.2819,  0.7504],
        [-0.0225,  0.6397,  0.1761,  ..., -0.3688,  0.1450,  0.0693],
        [ 0.0698,  0.2543,  0.1569,  ...,  0.7896,  0.7990, -1.5481]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-2.4321e-01, -1.5177e-01, -1.1401e-01,  ..., -1.6786e-01,
          1.9898e-01,  5.9246e-02],
        [ 5.4059e-02, -2.1257e-01, -9.8667e-02,  ...,  5.9775e-01,
          4.6286e-01, -2.3708e-01],
        [-2.5506e-01, -2.3932e-01, -8.5659e-02,  ..., -9.6946e-02,
         -1.2428e-01, -5.0565e-02],
        ...,
        [-2.5342e-02, -6.3546e-01, -1.2946e-01,  ...,  3.1293e-01,
         -2.3264e-01, -1.2462e-01],
        [-5.6138e-04, -8.8775e-02,  2.2850e-02,  ..., -5.5427e-02,
          8.4663e-02, -3.1585e-01],
        [ 1.3464e-01, -1.1327e-01, -8.1288e-02,  ..., -1.1754e-01,
         -8.3923e-03, -3.7032e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2262])
shifts shape: torch.Size([2262, 3])
sender shape: torch.Size([2262])
receiver shape: torch.Size([2262])
Edge attributes shape: torch.Size([2262, 9])
Edge attributes tensor([[ 1.0000,  1.1881,  0.9857,  ..., -0.0317, -0.9994, -0.5131],
        [ 1.0000, -0.2207,  1.7165,  ...,  2.1762, -0.1548, -0.0283],
        [ 1.0000,  1.4007, -0.7207,  ..., -0.5373,  0.6701, -0.9316],
        ...,
        [ 1.0000,  0.1005,  0.9472,  ..., -0.1149,  1.7690,  1.3443],
        [ 1.0000,  0.3614,  1.0073,  ...,  0.0165,  1.7711,  1.1129],
        [ 1.0000,  1.0965,  1.3188,  ...,  0.8264,  0.4117, -0.7384]])
Edge features shape: torch.Size([2262, 8])
Edge features tensor([[ 0.1680, -0.0645, -0.1432,  ..., -0.1568, -0.0372,  0.1711],
        [ 0.3438,  0.4317,  0.1982,  ..., -0.3542, -0.0170,  0.3329],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3694, -0.0412,  0.3172],
        ...,
        [ 0.0766, -0.0832,  0.0136,  ...,  0.0269,  0.0586, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.1158, -0.0904, -0.0452,  ..., -0.0843,  0.1188, -0.0085]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2262, 96])
Tensor Product Weights tensor([[-0.0565, -0.0883,  0.1499,  ...,  0.0594,  0.1380, -0.0347],
        [ 0.2734, -0.3346, -0.3077,  ...,  0.3150,  0.1301, -0.0135],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3222,  0.1360,  0.0040],
        ...,
        [ 0.0342, -0.0117,  0.0684,  ..., -0.0479,  0.0478, -0.0263],
        [-0.0018, -0.0039, -0.0099,  ...,  0.0055,  0.0044,  0.0047],
        [ 0.0232, -0.0279,  0.1509,  ..., -0.0662,  0.0789, -0.0794]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0692,  0.8955,  0.0998,  ...,  0.0645, -0.1113,  0.3698],
        [ 0.0544,  0.9481,  0.2374,  ..., -0.3295,  0.1352,  0.4494],
        [-0.0429,  0.9447,  0.1971,  ..., -0.2679,  0.3775,  0.0121],
        ...,
        [-0.1261,  0.1809,  0.0848,  ..., -0.7853,  1.4762, -0.5118],
        [-0.0175,  0.5690,  0.0684,  ...,  0.1801, -0.2728,  0.5262],
        [ 0.0698,  0.2440,  0.1497,  ...,  0.6883, -1.2548, -1.1693]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2431, -0.1514, -0.1139,  ..., -0.1660,  0.2003,  0.0594],
        [ 0.0574, -0.2063, -0.1002,  ...,  0.5944,  0.4644, -0.2396],
        [-0.2522, -0.2345, -0.0831,  ..., -0.0964, -0.1280, -0.0464],
        ...,
        [-0.0264, -0.6449, -0.1315,  ..., -0.1401,  0.3287, -0.2052],
        [-0.0222, -0.1286, -0.0131,  ...,  0.1004, -0.1413, -0.2996],
        [ 0.0714, -0.2003, -0.1039,  ..., -0.0126, -0.0495, -0.0115]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2282])
shifts shape: torch.Size([2282, 3])
sender shape: torch.Size([2282])
receiver shape: torch.Size([2282])
Edge attributes shape: torch.Size([2282, 9])
Edge attributes tensor([[ 1.0000,  1.1880,  0.9924,  ..., -0.0170, -0.9955, -0.5214],
        [ 1.0000, -0.2246,  1.7164,  ...,  2.1757, -0.1327, -0.0302],
        [ 1.0000,  1.4029, -0.7134,  ..., -0.5491,  0.6659, -0.9330],
        ...,
        [ 1.0000,  0.9640,  1.2002,  ...,  0.4924,  1.2300, -0.1931],
        [ 1.0000,  0.7658,  1.5422,  ...,  1.5411,  0.3735, -0.3558],
        [ 1.0000,  1.4994,  0.8307,  ..., -0.3466,  0.2667, -1.4112]])
Edge features shape: torch.Size([2282, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0366,  0.1710],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3545, -0.0174,  0.3326],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0411,  0.3173],
        ...,
        [ 0.0420, -0.0579,  0.0380,  ...,  0.0574, -0.0336, -0.0110],
        [ 0.2183,  0.0035, -0.2183,  ...,  0.0104, -0.2180, -0.0138],
        [ 0.1175, -0.0902, -0.0482,  ..., -0.0892,  0.1181, -0.0015]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2282, 96])
Tensor Product Weights tensor([[-0.0564, -0.0883,  0.1502,  ...,  0.0592,  0.1379, -0.0350],
        [ 0.2733, -0.3346, -0.3078,  ...,  0.3151,  0.1302, -0.0132],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3222,  0.1360,  0.0040],
        ...,
        [ 0.0047, -0.0290,  0.0065,  ...,  0.0422,  0.0273,  0.0086],
        [-0.0624, -0.0384, -0.0729,  ...,  0.0499,  0.1453,  0.1607],
        [ 0.0213, -0.0297,  0.1536,  ..., -0.0636,  0.0807, -0.0805]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0695,  0.8955,  0.0997,  ...,  0.0636, -0.1110,  0.3705],
        [ 0.0564,  0.9517,  0.2362,  ..., -0.3254,  0.1438,  0.4618],
        [-0.0442,  0.9440,  0.1979,  ..., -0.2779,  0.3798,  0.0059],
        ...,
        [-0.1259,  0.1838,  0.0853,  ...,  0.7050, -0.3306,  0.6708],
        [-0.0218,  0.6412,  0.1782,  ..., -0.3598,  0.1413,  0.0697],
        [ 0.0747,  0.2585,  0.1680,  ...,  0.8025,  0.7680, -1.5747]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2433, -0.1519, -0.1144,  ..., -0.1664,  0.1993,  0.0602],
        [ 0.0591, -0.2014, -0.0979,  ...,  0.5876,  0.4701, -0.2223],
        [-0.2547, -0.2383, -0.0851,  ..., -0.0969, -0.1248, -0.0505],
        ...,
        [-0.0269, -0.6418, -0.1312,  ...,  0.2996, -0.2404, -0.1440],
        [-0.0007, -0.0892,  0.0212,  ..., -0.0548,  0.0772, -0.3218],
        [ 0.1315, -0.1006, -0.0760,  ..., -0.1131, -0.0017, -0.0345]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2262])
shifts shape: torch.Size([2262, 3])
sender shape: torch.Size([2262])
receiver shape: torch.Size([2262])
Edge attributes shape: torch.Size([2262, 9])
Edge attributes tensor([[ 1.0000,  1.1893,  0.9846,  ..., -0.0342, -0.9978, -0.5151],
        [ 1.0000, -0.2181,  1.7169,  ...,  2.1777, -0.1515, -0.0277],
        [ 1.0000,  1.3987, -0.7222,  ..., -0.5348,  0.6737, -0.9257],
        ...,
        [ 1.0000,  0.0921,  0.9532,  ..., -0.1022,  1.7760,  1.3391],
        [ 1.0000,  0.3599,  1.0139,  ...,  0.0313,  1.7767,  1.1057],
        [ 1.0000,  1.0928,  1.3198,  ...,  0.8295,  0.4306, -0.7296]])
Edge features shape: torch.Size([2262, 8])
Edge features tensor([[ 1.6796e-01, -6.4483e-02, -1.4320e-01,  ..., -1.5683e-01,
         -3.7125e-02,  1.7109e-01],
        [ 3.4382e-01,  4.3173e-01,  1.9828e-01,  ..., -3.5437e-01,
         -1.7221e-02,  3.3275e-01],
        [ 3.4477e-01,  4.3696e-01,  2.0904e-01,  ..., -3.6924e-01,
         -4.0917e-02,  3.1738e-01],
        ...,
        [ 7.6306e-02, -8.3007e-02,  1.3991e-02,  ...,  2.7649e-02,
          5.7654e-02, -9.0367e-02],
        [ 5.9655e-03, -1.0752e-02,  1.3414e-02,  ..., -6.0114e-03,
          5.0906e-05,  5.9196e-03],
        [ 1.1361e-01, -9.0619e-02, -4.1329e-02,  ..., -7.7922e-02,
          1.1940e-01, -1.7315e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2262, 96])
Tensor Product Weights tensor([[-0.0565, -0.0883,  0.1499,  ...,  0.0594,  0.1380, -0.0347],
        [ 0.2734, -0.3346, -0.3078,  ...,  0.3151,  0.1302, -0.0133],
        [ 0.2668, -0.3304, -0.3147,  ...,  0.3221,  0.1360,  0.0038],
        ...,
        [ 0.0340, -0.0118,  0.0677,  ..., -0.0472,  0.0476, -0.0258],
        [-0.0019, -0.0044, -0.0101,  ...,  0.0063,  0.0046,  0.0048],
        [ 0.0254, -0.0257,  0.1472,  ..., -0.0692,  0.0767, -0.0777]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0693,  0.8959,  0.0997,  ...,  0.0631, -0.1110,  0.3685],
        [ 0.0549,  0.9488,  0.2373,  ..., -0.3294,  0.1337,  0.4485],
        [-0.0428,  0.9446,  0.1972,  ..., -0.2687,  0.3772,  0.0130],
        ...,
        [-0.1252,  0.1817,  0.0858,  ..., -0.8238,  1.4611, -0.4882],
        [-0.0179,  0.5691,  0.0675,  ...,  0.1808, -0.2744,  0.5289],
        [ 0.0679,  0.2434,  0.1468,  ...,  0.6779, -1.2584, -1.1584]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2429, -0.1509, -0.1140,  ..., -0.1653,  0.2006,  0.0600],
        [ 0.0578, -0.2058, -0.1005,  ...,  0.5932,  0.4644, -0.2376],
        [-0.2519, -0.2340, -0.0827,  ..., -0.0964, -0.1284, -0.0459],
        ...,
        [-0.0254, -0.6402, -0.1302,  ..., -0.1373,  0.3352, -0.1949],
        [-0.0223, -0.1282, -0.0124,  ...,  0.1044, -0.1415, -0.2969],
        [ 0.0725, -0.2046, -0.1069,  ..., -0.0157, -0.0507, -0.0128]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2286])
shifts shape: torch.Size([2286, 3])
sender shape: torch.Size([2286])
receiver shape: torch.Size([2286])
Edge attributes shape: torch.Size([2286, 9])
Edge attributes tensor([[ 1.0000,  1.1853,  0.9931,  ..., -0.0154, -1.0003, -0.5140],
        [ 1.0000, -0.2272,  1.7160,  ...,  2.1740, -0.1378, -0.0308],
        [ 1.0000,  1.4028, -0.7125,  ..., -0.5505,  0.6661, -0.9317],
        ...,
        [ 1.0000,  0.9501,  1.2078,  ...,  0.5129,  1.2459, -0.1706],
        [ 1.0000,  0.7778,  1.5374,  ...,  1.5246,  0.3514, -0.3703],
        [ 1.0000,  1.4965,  0.8321,  ..., -0.3440,  0.2807, -1.4014]])
Edge features shape: torch.Size([2286, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0365,  0.1710],
        [ 0.3438,  0.4317,  0.1983,  ..., -0.3543, -0.0171,  0.3328],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3694, -0.0411,  0.3173],
        ...,
        [ 0.0433, -0.0593,  0.0377,  ...,  0.0583, -0.0315, -0.0152],
        [ 0.2212,  0.0088, -0.2209,  ...,  0.0263, -0.2191, -0.0350],
        [ 0.1130, -0.0907, -0.0402,  ..., -0.0761,  0.1195, -0.0198]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2286, 96])
Tensor Product Weights tensor([[-0.0563, -0.0883,  0.1502,  ...,  0.0592,  0.1378, -0.0351],
        [ 0.2734, -0.3346, -0.3077,  ...,  0.3151,  0.1302, -0.0134],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3222,  0.1360,  0.0040],
        ...,
        [ 0.0058, -0.0283,  0.0082,  ...,  0.0396,  0.0281,  0.0081],
        [-0.0560, -0.0323, -0.0917,  ...,  0.0414,  0.1431,  0.1739],
        [ 0.0260, -0.0251,  0.1462,  ..., -0.0699,  0.0761, -0.0772]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0692,  0.8953,  0.0999,  ...,  0.0655, -0.1107,  0.3701],
        [ 0.0522,  0.9477,  0.2393,  ..., -0.3216,  0.1391,  0.4601],
        [-0.0442,  0.9443,  0.1977,  ..., -0.2768,  0.3810,  0.0040],
        ...,
        [-0.1249,  0.1848,  0.0862,  ...,  0.7272, -0.2861,  0.7450],
        [-0.0224,  0.6397,  0.1764,  ..., -0.3688,  0.1433,  0.0674],
        [ 0.0707,  0.2548,  0.1587,  ...,  0.7928,  0.7920, -1.5562]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-2.4299e-01, -1.5113e-01, -1.1411e-01,  ..., -1.6732e-01,
          1.9914e-01,  6.0222e-02],
        [ 5.4514e-02, -2.1217e-01, -9.9051e-02,  ...,  5.9672e-01,
          4.6322e-01, -2.3451e-01],
        [-2.5483e-01, -2.3876e-01, -8.5475e-02,  ..., -9.6897e-02,
         -1.2463e-01, -5.0046e-02],
        ...,
        [-2.5578e-02, -6.3616e-01, -1.2962e-01,  ...,  3.1165e-01,
         -2.3337e-01, -1.2651e-01],
        [-6.0462e-04, -8.8987e-02,  2.2622e-02,  ..., -5.4640e-02,
          8.3593e-02, -3.1701e-01],
        [ 1.3423e-01, -1.1124e-01, -8.0333e-02,  ..., -1.1678e-01,
         -7.3513e-03, -3.6695e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2262])
shifts shape: torch.Size([2262, 3])
sender shape: torch.Size([2262])
receiver shape: torch.Size([2262])
Edge attributes shape: torch.Size([2262, 9])
Edge attributes tensor([[ 1.0000,  1.1886,  0.9853,  ..., -0.0326, -0.9987, -0.5141],
        [ 1.0000, -0.2193,  1.7168,  ...,  2.1771, -0.1512, -0.0280],
        [ 1.0000,  1.3992, -0.7214,  ..., -0.5361,  0.6728, -0.9269],
        ...,
        [ 1.0000,  0.0972,  0.9521,  ..., -0.1046,  1.7744,  1.3392],
        [ 1.0000,  0.3587,  1.0112,  ...,  0.0252,  1.7751,  1.1103],
        [ 1.0000,  1.0968,  1.3174,  ...,  0.8224,  0.4218, -0.7368]])
Edge features shape: torch.Size([2262, 8])
Edge features tensor([[ 0.1680, -0.0645, -0.1432,  ..., -0.1568, -0.0373,  0.1711],
        [ 0.3438,  0.4317,  0.1982,  ..., -0.3543, -0.0171,  0.3328],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0411,  0.3173],
        ...,
        [ 0.0766, -0.0832,  0.0136,  ...,  0.0269,  0.0587, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0052],
        [ 0.1140, -0.0906, -0.0421,  ..., -0.0792,  0.1193, -0.0156]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2262, 96])
Tensor Product Weights tensor([[-0.0566, -0.0884,  0.1499,  ...,  0.0595,  0.1380, -0.0347],
        [ 0.2734, -0.3346, -0.3077,  ...,  0.3150,  0.1302, -0.0134],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3222,  0.1360,  0.0040],
        ...,
        [ 0.0342, -0.0117,  0.0684,  ..., -0.0480,  0.0478, -0.0263],
        [-0.0018, -0.0039, -0.0099,  ...,  0.0055,  0.0044,  0.0047],
        [ 0.0250, -0.0261,  0.1480,  ..., -0.0686,  0.0771, -0.0781]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0693,  0.8958,  0.0998,  ...,  0.0638, -0.1109,  0.3688],
        [ 0.0548,  0.9489,  0.2373,  ..., -0.3301,  0.1339,  0.4490],
        [-0.0429,  0.9446,  0.1973,  ..., -0.2683,  0.3772,  0.0122],
        ...,
        [-0.1260,  0.1809,  0.0848,  ..., -0.8124,  1.4654, -0.4947],
        [-0.0178,  0.5692,  0.0673,  ...,  0.1797, -0.2756,  0.5279],
        [ 0.0685,  0.2434,  0.1484,  ...,  0.6822, -1.2591, -1.1627]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2429, -0.1509, -0.1140,  ..., -0.1656,  0.2004,  0.0599],
        [ 0.0576, -0.2057, -0.1003,  ...,  0.5929,  0.4647, -0.2377],
        [-0.2522, -0.2344, -0.0829,  ..., -0.0964, -0.1280, -0.0463],
        ...,
        [-0.0263, -0.6447, -0.1315,  ..., -0.1366,  0.3336, -0.1998],
        [-0.0222, -0.1282, -0.0125,  ...,  0.1018, -0.1421, -0.2978],
        [ 0.0725, -0.2031, -0.1061,  ..., -0.0149, -0.0502, -0.0123]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2276])
shifts shape: torch.Size([2276, 3])
sender shape: torch.Size([2276])
receiver shape: torch.Size([2276])
Edge attributes shape: torch.Size([2276, 9])
Edge attributes tensor([[ 1.0000,  1.1869,  0.9943,  ..., -0.0127, -0.9964, -0.5205],
        [ 1.0000, -0.2271,  1.7161,  ...,  2.1744, -0.1322, -0.0310],
        [ 1.0000,  1.4040, -0.7112,  ..., -0.5525,  0.6639, -0.9350],
        ...,
        [ 1.0000,  1.1007,  1.3374,  ...,  0.8816,  0.0077, -0.7820],
        [ 1.0000,  0.6504,  0.6076,  ..., -0.7053,  1.1655,  1.1521],
        [ 1.0000,  0.9223,  1.0723,  ...,  0.1676,  1.3840,  0.0960]])
Edge features shape: torch.Size([2276, 8])
Edge features tensor([[ 1.6784e-01, -6.4588e-02, -1.4299e-01,  ..., -1.5692e-01,
         -3.6575e-02,  1.7100e-01],
        [ 3.4384e-01,  4.3181e-01,  1.9846e-01,  ..., -3.5462e-01,
         -1.7612e-02,  3.3250e-01],
        [ 3.4476e-01,  4.3695e-01,  2.0901e-01,  ..., -3.6920e-01,
         -4.0851e-02,  3.1743e-01],
        ...,
        [ 5.9024e-03, -1.0645e-02,  1.3297e-02,  ..., -6.0638e-03,
          1.7960e-04,  5.7399e-03],
        [ 2.2239e-01,  1.0962e-02, -2.2185e-01,  ...,  3.2780e-02,
         -2.1915e-01, -4.3582e-02],
        [ 4.3929e-02, -5.9842e-02,  3.7589e-02,  ...,  5.8596e-02,
         -3.0466e-02, -1.7094e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2276, 96])
Tensor Product Weights tensor([[-0.0564, -0.0883,  0.1502,  ...,  0.0592,  0.1379, -0.0350],
        [ 0.2733, -0.3345, -0.3079,  ...,  0.3152,  0.1303, -0.0130],
        [ 0.2669, -0.3304, -0.3147,  ...,  0.3221,  0.1359,  0.0038],
        ...,
        [-0.0019, -0.0043, -0.0101,  ...,  0.0061,  0.0046,  0.0047],
        [-0.0532, -0.0298, -0.0993,  ...,  0.0378,  0.1421,  0.1790],
        [ 0.0063, -0.0280,  0.0090,  ...,  0.0384,  0.0284,  0.0079]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0694,  0.8953,  0.0998,  ...,  0.0637, -0.1104,  0.3710],
        [ 0.0563,  0.9509,  0.2367,  ..., -0.3258,  0.1430,  0.4641],
        [-0.0445,  0.9440,  0.1981,  ..., -0.2795,  0.3808,  0.0038],
        ...,
        [-0.1101,  0.1937,  0.0332,  ..., -0.7994, -1.3952, -0.5556],
        [-0.0307,  0.6231,  0.0761,  ...,  0.2982, -0.1191, -0.3682],
        [ 0.0447,  0.2901,  0.1145,  ..., -0.7158,  1.4283, -0.0407]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2434, -0.1521, -0.1144,  ..., -0.1669,  0.1990,  0.0601],
        [ 0.0589, -0.2020, -0.0983,  ...,  0.5872,  0.4701, -0.2225],
        [-0.2553, -0.2394, -0.0857,  ..., -0.0972, -0.1240, -0.0513],
        ...,
        [ 0.0639, -0.4889, -0.1307,  ...,  0.0655,  0.4417, -0.0720],
        [-0.0119, -0.1073,  0.0236,  ..., -0.1061, -0.2766,  0.1756],
        [ 0.0891, -0.1838, -0.0691,  ..., -0.0533, -0.0337,  0.0140]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2276])
shifts shape: torch.Size([2276, 3])
sender shape: torch.Size([2276])
receiver shape: torch.Size([2276])
Edge attributes shape: torch.Size([2276, 9])
Edge attributes tensor([[ 1.0000,  1.1858,  0.9930,  ..., -0.0155, -0.9995, -0.5152],
        [ 1.0000, -0.2289,  1.7156,  ...,  2.1727, -0.1449, -0.0310],
        [ 1.0000,  1.4059, -0.7120,  ..., -0.5513,  0.6607, -0.9423],
        ...,
        [ 1.0000,  0.9666,  1.1974,  ...,  0.4850,  1.2288, -0.1953],
        [ 1.0000,  0.7668,  1.5413,  ...,  1.5381,  0.3787, -0.3562],
        [ 1.0000,  1.5007,  0.8283,  ..., -0.3509,  0.2661, -1.4137]])
Edge features shape: torch.Size([2276, 8])
Edge features tensor([[ 1.6781e-01, -6.4615e-02, -1.4293e-01,  ..., -1.5695e-01,
         -3.6435e-02,  1.7098e-01],
        [ 3.4382e-01,  4.3170e-01,  1.9823e-01,  ..., -3.5429e-01,
         -1.7099e-02,  3.3282e-01],
        [ 3.4477e-01,  4.3699e-01,  2.0910e-01,  ..., -3.6931e-01,
         -4.1038e-02,  3.1730e-01],
        ...,
        [ 4.1901e-02, -5.7859e-02,  3.7994e-02,  ...,  5.7356e-02,
         -3.3756e-02, -1.0744e-02],
        [ 2.1814e-01,  3.0821e-03, -2.1809e-01,  ...,  9.2440e-03,
         -2.1787e-01, -1.2322e-02],
        [ 1.1786e-01, -9.0194e-02, -4.8838e-02,  ..., -9.0235e-02,
          1.1784e-01,  5.6850e-05]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2276, 96])
Tensor Product Weights tensor([[-0.0563, -0.0883,  0.1502,  ...,  0.0591,  0.1378, -0.0351],
        [ 0.2734, -0.3346, -0.3077,  ...,  0.3150,  0.1302, -0.0134],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3222,  0.1360,  0.0039],
        ...,
        [ 0.0046, -0.0290,  0.0064,  ...,  0.0423,  0.0273,  0.0086],
        [-0.0629, -0.0388, -0.0716,  ...,  0.0505,  0.1454,  0.1598],
        [ 0.0209, -0.0300,  0.1541,  ..., -0.0630,  0.0810, -0.0807]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0692,  0.8949,  0.0999,  ...,  0.0663, -0.1101,  0.3724],
        [ 0.0516,  0.9466,  0.2395,  ..., -0.3211,  0.1415,  0.4619],
        [-0.0444,  0.9444,  0.1975,  ..., -0.2761,  0.3812,  0.0042],
        ...,
        [-0.1259,  0.1838,  0.0853,  ...,  0.7026, -0.3351,  0.6638],
        [-0.0217,  0.6414,  0.1785,  ..., -0.3579,  0.1406,  0.0711],
        [ 0.0750,  0.2589,  0.1688,  ...,  0.8018,  0.7704, -1.5750]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2433, -0.1518, -0.1141,  ..., -0.1678,  0.1990,  0.0592],
        [ 0.0540, -0.2132, -0.0990,  ...,  0.5987,  0.4624, -0.2369],
        [-0.2551, -0.2393, -0.0857,  ..., -0.0969, -0.1244, -0.0504],
        ...,
        [-0.0269, -0.6417, -0.1312,  ...,  0.2983, -0.2413, -0.1453],
        [-0.0007, -0.0891,  0.0211,  ..., -0.0548,  0.0772, -0.3222],
        [ 0.1313, -0.0997, -0.0757,  ..., -0.1128, -0.0012, -0.0343]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2280])
shifts shape: torch.Size([2280, 3])
sender shape: torch.Size([2280])
receiver shape: torch.Size([2280])
Edge attributes shape: torch.Size([2280, 9])
Edge attributes tensor([[ 1.0000,  1.1837,  0.9956,  ..., -0.0098, -1.0019, -0.5122],
        [ 1.0000, -0.2334,  1.7150,  ...,  2.1702, -0.1475, -0.0323],
        [ 1.0000,  1.4078, -0.7090,  ..., -0.5560,  0.6571, -0.9468],
        ...,
        [ 1.0000,  1.0942,  1.3426,  ...,  0.8974,  0.0154, -0.7728],
        [ 1.0000,  0.6621,  0.5930,  ..., -0.7249,  1.1380,  1.1436],
        [ 1.0000,  0.9243,  1.0670,  ...,  0.1548,  1.3824,  0.0986]])
Edge features shape: torch.Size([2280, 8])
Edge features tensor([[ 1.6785e-01, -6.4580e-02, -1.4301e-01,  ..., -1.5692e-01,
         -3.6618e-02,  1.7100e-01],
        [ 3.4381e-01,  4.3166e-01,  1.9814e-01,  ..., -3.5417e-01,
         -1.6913e-02,  3.3294e-01],
        [ 3.4477e-01,  4.3700e-01,  2.0911e-01,  ..., -3.6934e-01,
         -4.1078e-02,  3.1727e-01],
        ...,
        [ 5.9080e-03, -1.0655e-02,  1.3308e-02,  ..., -6.0593e-03,
          1.6828e-04,  5.7558e-03],
        [ 2.2263e-01,  1.1431e-02, -2.2205e-01,  ...,  3.4172e-02,
         -2.1912e-01, -4.5423e-02],
        [ 4.4083e-02, -5.9990e-02,  3.7553e-02,  ...,  5.8673e-02,
         -3.0198e-02, -1.7579e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2280, 96])
Tensor Product Weights tensor([[-0.0564, -0.0883,  0.1502,  ...,  0.0592,  0.1379, -0.0350],
        [ 0.2735, -0.3347, -0.3077,  ...,  0.3150,  0.1301, -0.0135],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3222,  0.1360,  0.0040],
        ...,
        [-0.0019, -0.0043, -0.0101,  ...,  0.0061,  0.0046,  0.0047],
        [-0.0526, -0.0293, -0.1009,  ...,  0.0370,  0.1419,  0.1801],
        [ 0.0065, -0.0279,  0.0092,  ...,  0.0381,  0.0285,  0.0078]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-6.9180e-02,  8.9476e-01,  9.9949e-02,  ...,  6.7974e-02,
         -1.0946e-01,  3.7376e-01],
        [ 5.1583e-02,  9.4617e-01,  2.3997e-01,  ..., -3.2156e-01,
          1.4207e-01,  4.6423e-01],
        [-4.4752e-02,  9.4433e-01,  1.9753e-01,  ..., -2.7613e-01,
          3.8207e-01,  8.2856e-04],
        ...,
        [-1.1002e-01,  1.9379e-01,  3.3469e-02,  ..., -7.8059e-01,
         -1.4041e+00, -5.6734e-01],
        [-3.1406e-02,  6.2490e-01,  7.5578e-02,  ...,  2.9663e-01,
         -1.0823e-01, -3.5898e-01],
        [ 4.3321e-02,  2.8913e-01,  1.1737e-01,  ..., -7.4886e-01,
          1.4430e+00, -3.6042e-02]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2434, -0.1521, -0.1142,  ..., -0.1690,  0.1984,  0.0587],
        [ 0.0537, -0.2133, -0.0988,  ...,  0.5975,  0.4627, -0.2378],
        [-0.2558, -0.2407, -0.0863,  ..., -0.0969, -0.1234, -0.0513],
        ...,
        [ 0.0637, -0.4886, -0.1304,  ...,  0.0614,  0.4430, -0.0675],
        [-0.0123, -0.1069,  0.0249,  ..., -0.1032, -0.2782,  0.1748],
        [ 0.0928, -0.1791, -0.0673,  ..., -0.0535, -0.0327,  0.0160]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2274])
shifts shape: torch.Size([2274, 3])
sender shape: torch.Size([2274])
receiver shape: torch.Size([2274])
Edge attributes shape: torch.Size([2274, 9])
Edge attributes tensor([[ 1.0000,  1.1879,  0.9941,  ..., -0.0131, -0.9947, -0.5230],
        [ 1.0000, -0.2263,  1.7162,  ...,  2.1750, -0.1304, -0.0308],
        [ 1.0000,  1.4049, -0.7114,  ..., -0.5523,  0.6624, -0.9382],
        ...,
        [ 1.0000,  1.0884,  1.3473,  ...,  0.9115,  0.0029, -0.7647],
        [ 1.0000,  0.6388,  0.6257,  ..., -0.6803,  1.1983,  1.1570],
        [ 1.0000,  0.9440,  1.0604,  ...,  0.1391,  1.3582,  0.0602]])
Edge features shape: torch.Size([2274, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0366,  0.1710],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3545, -0.0174,  0.3327],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0411,  0.3173],
        ...,
        [ 0.0056, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.2191,  0.0048, -0.2190,  ...,  0.0144, -0.2185, -0.0192],
        [ 0.0422, -0.0582,  0.0379,  ...,  0.0576, -0.0332, -0.0118]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2274, 96])
Tensor Product Weights tensor([[-0.0564, -0.0883,  0.1501,  ...,  0.0592,  0.1379, -0.0350],
        [ 0.2733, -0.3346, -0.3078,  ...,  0.3151,  0.1302, -0.0132],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3222,  0.1360,  0.0040],
        ...,
        [-0.0018, -0.0038, -0.0098,  ...,  0.0053,  0.0044,  0.0046],
        [-0.0609, -0.0368, -0.0777,  ...,  0.0478,  0.1447,  0.1642],
        [ 0.0049, -0.0289,  0.0068,  ...,  0.0417,  0.0275,  0.0085]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0695,  0.8955,  0.0999,  ...,  0.0645, -0.1109,  0.3717],
        [ 0.0563,  0.9513,  0.2364,  ..., -0.3256,  0.1440,  0.4640],
        [-0.0444,  0.9441,  0.1980,  ..., -0.2788,  0.3796,  0.0054],
        ...,
        [-0.1101,  0.1938,  0.0334,  ..., -0.7432, -1.3651, -0.5222],
        [-0.0303,  0.6262,  0.0773,  ...,  0.2962, -0.1107, -0.3600],
        [ 0.0469,  0.2922,  0.1254,  ..., -0.7432,  1.4445, -0.0471]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2434, -0.1520, -0.1146,  ..., -0.1669,  0.1990,  0.0600],
        [ 0.0589, -0.2020, -0.0982,  ...,  0.5876,  0.4700, -0.2223],
        [-0.2551, -0.2390, -0.0854,  ..., -0.0971, -0.1241, -0.0514],
        ...,
        [ 0.0640, -0.4879, -0.1320,  ...,  0.0798,  0.4411, -0.0753],
        [-0.0115, -0.1064,  0.0231,  ..., -0.1051, -0.2815,  0.1734],
        [ 0.0909, -0.1686, -0.0631,  ..., -0.0488, -0.0282,  0.0213]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2274])
shifts shape: torch.Size([2274, 3])
sender shape: torch.Size([2274])
receiver shape: torch.Size([2274])
Edge attributes shape: torch.Size([2274, 9])
Edge attributes tensor([[ 1.0000,  1.1859,  0.9929,  ..., -0.0159, -0.9993, -0.5154],
        [ 1.0000, -0.2272,  1.7159,  ...,  2.1739, -0.1395, -0.0308],
        [ 1.0000,  1.4035, -0.7125,  ..., -0.5504,  0.6649, -0.9342],
        ...,
        [ 1.0000,  0.9618,  1.2026,  ...,  0.4989,  1.2310, -0.1913],
        [ 1.0000,  0.7755,  1.5383,  ...,  1.5277,  0.3559, -0.3675],
        [ 1.0000,  1.5011,  0.8255,  ..., -0.3561,  0.2718, -1.4126]])
Edge features shape: torch.Size([2274, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1429,  ..., -0.1569, -0.0364,  0.1710],
        [ 0.3438,  0.4317,  0.1983,  ..., -0.3544, -0.0173,  0.3327],
        [ 0.3448,  0.4370,  0.2090,  ..., -0.3692, -0.0409,  0.3174],
        ...,
        [ 0.0423, -0.0582,  0.0379,  ...,  0.0576, -0.0332, -0.0119],
        [ 0.2190,  0.0046, -0.2189,  ...,  0.0139, -0.2184, -0.0185],
        [ 0.1161, -0.0904, -0.0457,  ..., -0.0852,  0.1187, -0.0072]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2274, 96])
Tensor Product Weights tensor([[-0.0563, -0.0883,  0.1502,  ...,  0.0591,  0.1378, -0.0351],
        [ 0.2733, -0.3346, -0.3078,  ...,  0.3151,  0.1302, -0.0132],
        [ 0.2668, -0.3304, -0.3147,  ...,  0.3221,  0.1360,  0.0038],
        ...,
        [ 0.0049, -0.0288,  0.0069,  ...,  0.0416,  0.0275,  0.0085],
        [-0.0611, -0.0370, -0.0771,  ...,  0.0481,  0.1448,  0.1637],
        [ 0.0228, -0.0282,  0.1514,  ..., -0.0657,  0.0792, -0.0796]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0692,  0.8954,  0.0999,  ...,  0.0649, -0.1105,  0.3706],
        [ 0.0522,  0.9477,  0.2393,  ..., -0.3216,  0.1396,  0.4606],
        [-0.0443,  0.9442,  0.1977,  ..., -0.2772,  0.3810,  0.0039],
        ...,
        [-0.1259,  0.1838,  0.0853,  ...,  0.7027, -0.3248,  0.7046],
        [-0.0222,  0.6412,  0.1781,  ..., -0.3537,  0.1403,  0.0721],
        [ 0.0743,  0.2585,  0.1679,  ...,  0.8092,  0.7609, -1.5821]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2429, -0.1511, -0.1141,  ..., -0.1673,  0.1992,  0.0598],
        [ 0.0546, -0.2122, -0.0992,  ...,  0.5965,  0.4631, -0.2345],
        [-0.2549, -0.2390, -0.0855,  ..., -0.0969, -0.1244, -0.0503],
        ...,
        [-0.0269, -0.6419, -0.1312,  ...,  0.3028, -0.2404, -0.1370],
        [-0.0011, -0.0895,  0.0216,  ..., -0.0541,  0.0761, -0.3223],
        [ 0.1319, -0.1014, -0.0762,  ..., -0.1142, -0.0023, -0.0352]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2278])
shifts shape: torch.Size([2278, 3])
sender shape: torch.Size([2278])
receiver shape: torch.Size([2278])
Edge attributes shape: torch.Size([2278, 9])
Edge attributes tensor([[ 1.0000,  1.1840,  0.9952,  ..., -0.0106, -1.0016, -0.5127],
        [ 1.0000, -0.2317,  1.7153,  ...,  2.1713, -0.1438, -0.0319],
        [ 1.0000,  1.4070, -0.7095,  ..., -0.5553,  0.6586, -0.9441],
        ...,
        [ 1.0000,  1.0856,  1.3496,  ...,  0.9183,  0.0061, -0.7608],
        [ 1.0000,  0.9457,  1.0572,  ...,  0.1317,  1.3566,  0.0604],
        [ 1.0000,  0.6472,  0.6161,  ..., -0.6936,  1.1801,  1.1507]])
Edge features shape: torch.Size([2278, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0365,  0.1710],
        [ 0.3438,  0.4317,  0.1982,  ..., -0.3542, -0.0170,  0.3329],
        [ 0.3448,  0.4370,  0.2090,  ..., -0.3692, -0.0409,  0.3174],
        ...,
        [ 0.0056, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.0424, -0.0583,  0.0379,  ...,  0.0577, -0.0330, -0.0123],
        [ 0.2194,  0.0053, -0.2192,  ...,  0.0160, -0.2186, -0.0213]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2278, 96])
Tensor Product Weights tensor([[-0.0563, -0.0883,  0.1502,  ...,  0.0592,  0.1378, -0.0351],
        [ 0.2734, -0.3347, -0.3077,  ...,  0.3150,  0.1301, -0.0135],
        [ 0.2668, -0.3304, -0.3147,  ...,  0.3221,  0.1360,  0.0038],
        ...,
        [-0.0018, -0.0038, -0.0098,  ...,  0.0053,  0.0044,  0.0046],
        [ 0.0050, -0.0288,  0.0070,  ...,  0.0414,  0.0275,  0.0084],
        [-0.0603, -0.0362, -0.0795,  ...,  0.0470,  0.1445,  0.1654]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0692,  0.8949,  0.0999,  ...,  0.0674, -0.1098,  0.3726],
        [ 0.0517,  0.9463,  0.2399,  ..., -0.3220,  0.1408,  0.4632],
        [-0.0446,  0.9444,  0.1976,  ..., -0.2763,  0.3818,  0.0024],
        ...,
        [-0.1098,  0.1944,  0.0385,  ...,  0.5229,  0.8584,  0.1943],
        [-0.0307,  0.6271,  0.0771,  ...,  0.2954, -0.1042, -0.3534],
        [ 0.0461,  0.2912,  0.1269,  ..., -0.7608,  1.4534, -0.0435]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2433, -0.1520, -0.1141,  ..., -0.1684,  0.1986,  0.0591],
        [ 0.0539, -0.2130, -0.0988,  ...,  0.5975,  0.4629, -0.2379],
        [-0.2555, -0.2402, -0.0861,  ..., -0.0970, -0.1238, -0.0511],
        ...,
        [ 0.0605, -0.4863, -0.1319,  ..., -0.4135, -0.1744, -0.0737],
        [-0.0118, -0.1062,  0.0239,  ..., -0.1035, -0.2823,  0.1729],
        [ 0.0931, -0.1665, -0.0624,  ..., -0.0490, -0.0278,  0.0222]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2276])
shifts shape: torch.Size([2276, 3])
sender shape: torch.Size([2276])
receiver shape: torch.Size([2276])
Edge attributes shape: torch.Size([2276, 9])
Edge attributes tensor([[ 1.0000,  1.1847,  0.9955,  ..., -0.0100, -1.0000, -0.5152],
        [ 1.0000, -0.2308,  1.7155,  ...,  2.1722, -0.1386, -0.0318],
        [ 1.0000,  1.4060, -0.7095,  ..., -0.5552,  0.6603, -0.9407],
        ...,
        [ 1.0000,  1.0996,  1.3382,  ...,  0.8843,  0.0058, -0.7805],
        [ 1.0000,  0.9245,  1.0706,  ...,  0.1635,  1.3816,  0.0932],
        [ 1.0000,  0.6590,  0.6008,  ..., -0.7145,  1.1517,  1.1429]])
Edge features shape: torch.Size([2276, 8])
Edge features tensor([[ 1.6783e-01, -6.4598e-02, -1.4297e-01,  ..., -1.5693e-01,
         -3.6521e-02,  1.7099e-01],
        [ 3.4381e-01,  4.3168e-01,  1.9819e-01,  ..., -3.5423e-01,
         -1.7002e-02,  3.3288e-01],
        [ 3.4477e-01,  4.3697e-01,  2.0907e-01,  ..., -3.6928e-01,
         -4.0982e-02,  3.1734e-01],
        ...,
        [ 5.9038e-03, -1.0648e-02,  1.3300e-02,  ..., -6.0628e-03,
          1.7682e-04,  5.7439e-03],
        [ 4.4092e-02, -5.9998e-02,  3.7550e-02,  ...,  5.8677e-02,
         -3.0183e-02, -1.7606e-02],
        [ 2.2265e-01,  1.1461e-02, -2.2206e-01,  ...,  3.4263e-02,
         -2.1912e-01, -4.5543e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2276, 96])
Tensor Product Weights tensor([[-0.0563, -0.0883,  0.1502,  ...,  0.0592,  0.1378, -0.0351],
        [ 0.2734, -0.3346, -0.3077,  ...,  0.3150,  0.1301, -0.0135],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3222,  0.1360,  0.0039],
        ...,
        [-0.0019, -0.0043, -0.0101,  ...,  0.0061,  0.0046,  0.0047],
        [ 0.0065, -0.0279,  0.0092,  ...,  0.0381,  0.0285,  0.0078],
        [-0.0525, -0.0293, -0.1010,  ...,  0.0369,  0.1419,  0.1802]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0692,  0.8952,  0.0999,  ...,  0.0669, -0.1098,  0.3721],
        [ 0.0519,  0.9467,  0.2400,  ..., -0.3224,  0.1395,  0.4639],
        [-0.0447,  0.9444,  0.1978,  ..., -0.2774,  0.3813,  0.0025],
        ...,
        [-0.1121,  0.1925,  0.0360,  ...,  0.4508,  0.9016,  0.1792],
        [-0.0311,  0.6238,  0.0758,  ...,  0.2979, -0.1149, -0.3619],
        [ 0.0440,  0.2894,  0.1152,  ..., -0.7250,  1.4368, -0.0400]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2430, -0.1514, -0.1141,  ..., -0.1682,  0.1987,  0.0596],
        [ 0.0541, -0.2130, -0.0992,  ...,  0.5963,  0.4628, -0.2356],
        [-0.2556, -0.2403, -0.0861,  ..., -0.0971, -0.1236, -0.0512],
        ...,
        [ 0.0611, -0.4926, -0.1368,  ..., -0.4075, -0.1899, -0.0799],
        [-0.0121, -0.1071,  0.0243,  ..., -0.1050, -0.2767,  0.1757],
        [ 0.0907, -0.1824, -0.0685,  ..., -0.0536, -0.0335,  0.0147]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2274])
shifts shape: torch.Size([2274, 3])
sender shape: torch.Size([2274])
receiver shape: torch.Size([2274])
Edge attributes shape: torch.Size([2274, 9])
Edge attributes tensor([[ 1.0000,  1.1856,  0.9945,  ..., -0.0122, -0.9989, -0.5166],
        [ 1.0000, -0.2290,  1.7157,  ...,  2.1731, -0.1379, -0.0313],
        [ 1.0000,  1.4056, -0.7106,  ..., -0.5534,  0.6611, -0.9400],
        ...,
        [ 1.0000,  1.0832,  1.3515,  ...,  0.9241,  0.0083, -0.7574],
        [ 1.0000,  0.9383,  1.0616,  ...,  0.1420,  1.3654,  0.0724],
        [ 1.0000,  0.6439,  0.6163,  ..., -0.6934,  1.1816,  1.1560]])
Edge features shape: torch.Size([2274, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1429,  ..., -0.1569, -0.0365,  0.1710],
        [ 0.3438,  0.4317,  0.1982,  ..., -0.3542, -0.0170,  0.3329],
        [ 0.3448,  0.4370,  0.2091,  ..., -0.3693, -0.0410,  0.3173],
        ...,
        [ 0.0056, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.0426, -0.0585,  0.0379,  ...,  0.0578, -0.0328, -0.0128],
        [ 0.2197,  0.0060, -0.2195,  ...,  0.0179, -0.2187, -0.0238]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2274, 96])
Tensor Product Weights tensor([[-0.0563, -0.0883,  0.1502,  ...,  0.0591,  0.1378, -0.0351],
        [ 0.2734, -0.3346, -0.3077,  ...,  0.3150,  0.1301, -0.0135],
        [ 0.2668, -0.3304, -0.3148,  ...,  0.3222,  0.1360,  0.0039],
        ...,
        [-0.0018, -0.0038, -0.0098,  ...,  0.0053,  0.0044,  0.0046],
        [ 0.0052, -0.0287,  0.0072,  ...,  0.0411,  0.0276,  0.0084],
        [-0.0595, -0.0355, -0.0818,  ...,  0.0460,  0.1443,  0.1670]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0692,  0.8953,  0.1000,  ...,  0.0667, -0.1102,  0.3717],
        [ 0.0519,  0.9469,  0.2397,  ..., -0.3219,  0.1394,  0.4628],
        [-0.0445,  0.9444,  0.1978,  ..., -0.2769,  0.3810,  0.0042],
        ...,
        [-0.1100,  0.1942,  0.0382,  ...,  0.5106,  0.8645,  0.1953],
        [-0.0307,  0.6266,  0.0769,  ...,  0.2938, -0.1083, -0.3575],
        [ 0.0458,  0.2913,  0.1254,  ..., -0.7616,  1.4502, -0.0453]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2430, -0.1512, -0.1141,  ..., -0.1678,  0.1989,  0.0597],
        [ 0.0542, -0.2129, -0.0992,  ...,  0.5969,  0.4627, -0.2354],
        [-0.2552, -0.2396, -0.0858,  ..., -0.0971, -0.1240, -0.0509],
        ...,
        [ 0.0608, -0.4867, -0.1323,  ..., -0.4122, -0.1773, -0.0755],
        [-0.0118, -0.1064,  0.0238,  ..., -0.1031, -0.2822,  0.1727],
        [ 0.0926, -0.1684, -0.0632,  ..., -0.0500, -0.0286,  0.0211]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2288])
shifts shape: torch.Size([2288, 3])
sender shape: torch.Size([2288])
receiver shape: torch.Size([2288])
Edge attributes shape: torch.Size([2288, 9])
Edge attributes tensor([[ 1.0000,  1.2159,  0.9738,  ..., -0.0577, -0.9520, -0.5842],
        [ 1.0000, -0.1749,  1.7231,  ...,  2.2013, -0.0499, -0.0194],
        [ 1.0000,  1.3727, -0.7389,  ..., -0.5076,  0.7201, -0.8484],
        ...,
        [ 1.0000,  0.8204,  1.2964,  ...,  0.7610,  1.3455, -0.0173],
        [ 1.0000,  0.1843,  1.2652,  ...,  0.6716,  1.9085,  0.8594],
        [ 1.0000,  0.8890,  0.6291,  ..., -0.6756,  1.0939,  0.6608]])
Edge features shape: torch.Size([2288, 8])
Edge features tensor([[ 0.1679, -0.0645, -0.1431,  ..., -0.1569, -0.0368,  0.1710],
        [ 0.3439,  0.4322,  0.1992,  ..., -0.3557, -0.0193,  0.3315],
        [ 0.3448,  0.4371,  0.2094,  ..., -0.3697, -0.0417,  0.3169],
        ...,
        [ 0.0468, -0.0625,  0.0368,  ...,  0.0597, -0.0250, -0.0262],
        [ 0.2260,  0.0179, -0.2246,  ...,  0.0533, -0.2175, -0.0705],
        [ 0.0990, -0.0901, -0.0171,  ..., -0.0339,  0.1097, -0.0659]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2288, 96])
Tensor Product Weights tensor([[-0.0564, -0.0883,  0.1501,  ...,  0.0593,  0.1379, -0.0349],
        [ 0.2728, -0.3343, -0.3084,  ...,  0.3157,  0.1307, -0.0118],
        [ 0.2666, -0.3303, -0.3150,  ...,  0.3224,  0.1361,  0.0044],
        ...,
        [ 0.0089, -0.0264,  0.0129,  ...,  0.0322,  0.0300,  0.0066],
        [-0.0434, -0.0223, -0.1230,  ...,  0.0255,  0.1389,  0.1945],
        [ 0.0358, -0.0149,  0.1187,  ..., -0.0773,  0.0637, -0.0613]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0645,  0.8979,  0.0991,  ...,  0.0458, -0.1217,  0.0588],
        [ 0.0489,  0.9323,  0.2024,  ..., -0.3690,  0.0801,  0.4110],
        [-0.0324,  0.9504,  0.1980,  ..., -0.2807,  0.2563,  0.3938],
        ...,
        [-0.1144,  0.1905,  0.0327,  ...,  0.9737, -0.1366,  1.4637],
        [-0.0336,  0.6055,  0.1733,  ...,  0.0604, -0.7993, -0.3169],
        [ 0.0599,  0.2229,  0.1986,  ...,  0.9943,  0.0358,  1.4251]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2391, -0.1459, -0.1143,  ..., -0.1333,  0.1899,  0.0855],
        [ 0.0665, -0.2176, -0.1123,  ...,  0.5856,  0.4768, -0.1884],
        [-0.2334, -0.1987, -0.0673,  ..., -0.0897, -0.1282, -0.0331],
        ...,
        [ 0.0626, -0.4984, -0.1410,  ..., -0.3653, -0.1414, -0.2352],
        [-0.0180, -0.1229,  0.0260,  ..., -0.3301, -0.0549,  0.1000],
        [ 0.1056, -0.1597, -0.0687,  ..., -0.0636, -0.0027, -0.0013]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2268])
shifts shape: torch.Size([2268, 3])
sender shape: torch.Size([2268])
receiver shape: torch.Size([2268])
Edge attributes shape: torch.Size([2268, 9])
Edge attributes tensor([[ 1.0000,  1.2143,  0.9684,  ..., -0.0695, -0.9584, -0.5725],
        [ 1.0000, -0.1854,  1.7212,  ...,  2.1943, -0.1207, -0.0203],
        [ 1.0000,  1.3826, -0.7422,  ..., -0.5022,  0.7025, -0.8868],
        ...,
        [ 1.0000,  0.1201,  0.9520,  ..., -0.1047,  1.7722,  1.3329],
        [ 1.0000,  0.3801,  1.0114,  ...,  0.0257,  1.7676,  1.0896],
        [ 1.0000,  1.1041,  1.3156,  ...,  0.8170,  0.3801, -0.7546]])
Edge features shape: torch.Size([2268, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1425,  ..., -0.1571, -0.0353,  0.1708],
        [ 0.3439,  0.4323,  0.1995,  ..., -0.3561, -0.0199,  0.3311],
        [ 0.3448,  0.4371,  0.2094,  ..., -0.3697, -0.0417,  0.3169],
        ...,
        [ 0.0767, -0.0832,  0.0136,  ...,  0.0269,  0.0587, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0052],
        [ 0.1162, -0.0904, -0.0459,  ..., -0.0855,  0.1187, -0.0069]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        ...,
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141],
        [ 0.6367,  0.3536, -0.0616,  ...,  0.5135, -1.3517,  0.4681],
        [-0.8322, -0.6517,  0.4788,  ..., -0.3382,  0.2177, -1.0141]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2268, 96])
Tensor Product Weights tensor([[-0.0560, -0.0881,  0.1507,  ...,  0.0586,  0.1376, -0.0357],
        [ 0.2726, -0.3342, -0.3085,  ...,  0.3159,  0.1309, -0.0114],
        [ 0.2666, -0.3303, -0.3150,  ...,  0.3223,  0.1361,  0.0044],
        ...,
        [ 0.0342, -0.0117,  0.0684,  ..., -0.0480,  0.0478, -0.0263],
        [-0.0018, -0.0039, -0.0099,  ...,  0.0055,  0.0044,  0.0047],
        [ 0.0227, -0.0283,  0.1515,  ..., -0.0656,  0.0793, -0.0797]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[-0.0775,  0.8902,  0.1117,  ...,  0.0461, -0.0901,  0.3699],
        [ 0.0541,  0.9447,  0.1848,  ..., -0.3693,  0.0932,  0.3968],
        [-0.0107,  0.9563,  0.1510,  ..., -0.3105,  0.2620,  0.0791],
        ...,
        [-0.1261,  0.1811,  0.0849,  ..., -0.7709,  1.4815, -0.5216],
        [-0.0171,  0.5712,  0.0650,  ...,  0.1766, -0.2672,  0.5309],
        [ 0.0697,  0.2450,  0.1498,  ...,  0.6887, -1.2709, -1.1876]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[-0.2531, -0.1674, -0.1087,  ..., -0.1682,  0.2301,  0.0440],
        [ 0.0839, -0.1858, -0.1101,  ...,  0.6190,  0.4576, -0.1651],
        [-0.1943, -0.1031, -0.0502,  ..., -0.0306, -0.2057,  0.1066],
        ...,
        [-0.0264, -0.6445, -0.1314,  ..., -0.1417,  0.3275, -0.2055],
        [-0.0216, -0.1270, -0.0131,  ...,  0.0993, -0.1434, -0.2989],
        [ 0.0714, -0.2011, -0.1050,  ..., -0.0140, -0.0487, -0.0114]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
process_conformer_ensemble input shape: torch.Size([32, 96, 32])
Num conformers: 32, Total dim: 3072
Scalar dim: 768, Vector dim: 768
mean_pooling:
  Scalar shape: torch.Size([32, 768])
  Vector shape: torch.Size([32, 768, 3])
  Scalar: tensor([[-0.2503,  0.0598, -0.2986,  ..., -0.2500,  0.0680, -0.0287],
        [-0.2516,  0.0601, -0.2997,  ..., -0.2462,  0.0629, -0.0397],
        [-0.2498,  0.0598, -0.2984,  ..., -0.2499,  0.0687, -0.0288],
        ...,
        [-0.2507,  0.0599, -0.2998,  ..., -0.2422,  0.0684, -0.0440],
        [-0.2514,  0.0595, -0.2994,  ..., -0.2525,  0.0625, -0.0262],
        [-0.2491,  0.0508, -0.3034,  ..., -0.0830,  0.0607, -0.0474]],
       grad_fn=<DivBackward0>)
  Vector: tensor([[[-9.1071e-02,  1.7283e-02,  3.6177e-02],
         [ 2.1478e-01,  9.8438e-02, -3.0040e-02],
         [-8.3382e-02,  4.7907e-03, -5.6571e-02],
         ...,
         [-8.4751e-02, -1.7233e-01,  1.4958e-01],
         [-6.1458e-02, -1.2982e-01,  2.2101e-02],
         [-4.7482e-02, -7.6559e-02,  9.5862e-03]],

        [[-9.4472e-02,  2.1123e-02,  3.2340e-02],
         [ 2.0720e-01,  8.6242e-02, -2.7848e-02],
         [-8.5186e-02,  1.9322e-03, -3.3312e-02],
         ...,
         [-4.1799e-02, -2.6208e-01, -1.6014e-01],
         [ 2.7367e-02,  3.1394e-02, -1.2269e-01],
         [ 1.0994e-01,  1.1070e-01, -1.0338e-01]],

        [[-9.0800e-02,  1.7298e-02,  3.6092e-02],
         [ 2.1493e-01,  9.8572e-02, -3.0013e-02],
         [-8.3671e-02,  5.0142e-03, -5.7272e-02],
         ...,
         [-9.9349e-02, -1.7590e-01,  1.3535e-01],
         [-6.1162e-02, -1.2672e-01,  2.7276e-02],
         [-3.8755e-02, -6.8422e-02,  2.5587e-02]],

        ...,

        [[-9.7467e-02,  2.3330e-02,  3.0619e-02],
         [ 2.0344e-01,  7.9976e-02, -2.7271e-02],
         [-8.4977e-02, -8.9851e-04, -3.4832e-02],
         ...,
         [-8.9231e-02, -1.7286e-01,  1.4526e-01],
         [-6.2880e-02, -1.3020e-01,  1.9601e-02],
         [-4.8380e-02, -7.6894e-02,  7.8841e-03]],

        [[-9.1705e-02,  1.6318e-02,  3.7773e-02],
         [ 2.1640e-01,  1.0172e-01, -3.1437e-02],
         [-8.1455e-02,  4.1888e-03, -6.1343e-02],
         ...,
         [-2.4242e-01, -4.8431e-02, -3.0285e-03],
         [-1.2942e-01, -2.8927e-02,  4.1031e-02],
         [-6.5159e-02, -7.6412e-05,  1.0147e-01]],

        [[-2.0027e-01,  4.0907e-02, -3.2280e-02],
         [-6.2210e-03, -4.9193e-02, -7.7764e-02],
         [-1.0454e-01, -2.6424e-02, -1.6309e-01],
         ...,
         [-3.7012e-02, -2.5693e-01, -1.5661e-01],
         [ 2.1435e-02,  2.9689e-02, -1.2593e-01],
         [ 9.7935e-02,  1.0592e-01, -1.0863e-01]]], grad_fn=<DivBackward0>)
--------------------------------------------------
deep_sets:
  Scalar shape: torch.Size([32, 768])
  Vector shape: torch.Size([32, 768, 3])
  Scalar: tensor([[-0.0111,  0.0063, -0.0008,  ..., -0.0052, -0.0124, -0.0081],
        [-0.0113,  0.0061, -0.0009,  ..., -0.0055, -0.0120, -0.0077],
        [-0.0112,  0.0064, -0.0008,  ..., -0.0052, -0.0124, -0.0080],
        ...,
        [-0.0110,  0.0064, -0.0009,  ..., -0.0054, -0.0123, -0.0078],
        [-0.0114,  0.0062, -0.0009,  ..., -0.0053, -0.0121, -0.0080],
        [-0.0113,  0.0061, -0.0013,  ..., -0.0041, -0.0115, -0.0085]],
       grad_fn=<SiluBackward0>)
  Vector: tensor([[[-0.0028, -0.0063,  0.0007],
         [ 0.0040, -0.0084,  0.0085],
         [-0.0154, -0.0070,  0.0009],
         ...,
         [-0.0053,  0.0051,  0.0029],
         [-0.0048, -0.0065,  0.0061],
         [ 0.0124,  0.0037,  0.0140]],

        [[-0.0039, -0.0079,  0.0030],
         [ 0.0042, -0.0081,  0.0123],
         [-0.0132, -0.0084,  0.0023],
         ...,
         [-0.0038,  0.0018,  0.0025],
         [-0.0068, -0.0055,  0.0050],
         [ 0.0110,  0.0043,  0.0140]],

        [[-0.0030, -0.0049,  0.0020],
         [ 0.0033, -0.0057,  0.0071],
         [-0.0111, -0.0091,  0.0019],
         ...,
         [-0.0035,  0.0032,  0.0032],
         [-0.0045, -0.0057,  0.0051],
         [ 0.0110,  0.0061,  0.0089]],

        ...,

        [[-0.0022, -0.0065,  0.0002],
         [ 0.0061, -0.0066,  0.0085],
         [-0.0097, -0.0078,  0.0019],
         ...,
         [-0.0058,  0.0029,  0.0034],
         [-0.0068, -0.0064,  0.0055],
         [ 0.0100,  0.0062,  0.0103]],

        [[-0.0037, -0.0057,  0.0018],
         [ 0.0030, -0.0066,  0.0090],
         [-0.0120, -0.0082,  0.0009],
         ...,
         [-0.0067,  0.0035,  0.0041],
         [-0.0052, -0.0075,  0.0053],
         [ 0.0130,  0.0074,  0.0109]],

        [[-0.0037, -0.0085,  0.0038],
         [ 0.0035, -0.0083,  0.0117],
         [-0.0138, -0.0091,  0.0019],
         ...,
         [-0.0031,  0.0031,  0.0025],
         [-0.0065, -0.0066,  0.0048],
         [ 0.0108,  0.0029,  0.0147]]], grad_fn=<ViewBackward0>)
--------------------------------------------------
self_attention:
  Scalar shape: torch.Size([32, 768])
  Vector shape: torch.Size([32, 768, 3])
  Scalar: tensor([[ 0.0072, -0.0219, -0.0052,  ...,  0.0120, -0.0081,  0.0199],
        [ 0.0073, -0.0216, -0.0049,  ...,  0.0117, -0.0079,  0.0202],
        [ 0.0072, -0.0219, -0.0052,  ...,  0.0120, -0.0080,  0.0199],
        ...,
        [ 0.0073, -0.0217, -0.0051,  ...,  0.0117, -0.0078,  0.0204],
        [ 0.0071, -0.0219, -0.0051,  ...,  0.0121, -0.0084,  0.0198],
        [ 0.0069, -0.0207, -0.0038,  ...,  0.0113, -0.0080,  0.0195]],
       grad_fn=<SiluBackward0>)
  Vector: tensor([[[ 6.8424e-03, -1.3192e-03, -1.2963e-03],
         [-9.9647e-03, -3.9370e-03, -5.5847e-03],
         [-6.9591e-03, -5.0424e-05,  4.4628e-03],
         ...,
         [ 8.1917e-03,  7.2054e-03,  2.0870e-03],
         [ 1.7201e-03, -1.3393e-03, -7.4498e-03],
         [-2.0905e-03,  3.5234e-03,  3.1343e-03]],

        [[ 7.0714e-03, -1.7356e-03, -4.4591e-03],
         [-9.7894e-03, -2.7593e-03, -7.1651e-03],
         [-6.6676e-03, -3.7206e-04,  5.6053e-03],
         ...,
         [ 5.5717e-03,  4.9252e-03,  3.3722e-03],
         [ 2.3847e-03, -9.5783e-04, -7.6080e-03],
         [-1.7359e-03,  3.4196e-03,  2.9765e-03]],

        [[ 9.3277e-03, -1.6202e-03, -1.3273e-03],
         [-7.4698e-03, -3.6846e-03, -6.1117e-03],
         [-9.7029e-03, -2.9873e-03,  4.4128e-03],
         ...,
         [ 6.0972e-03,  8.3054e-03,  3.3461e-03],
         [ 2.2857e-03, -2.1747e-03, -6.1799e-03],
         [-3.6963e-03,  5.8850e-03,  4.1961e-03]],

        ...,

        [[ 8.1275e-03, -7.4873e-04, -4.7044e-03],
         [-8.2829e-03, -1.8177e-03, -4.0708e-03],
         [-7.9215e-03, -1.8089e-03,  4.0982e-03],
         ...,
         [ 7.0409e-03,  8.4203e-03,  2.4371e-03],
         [ 2.6119e-03, -2.4514e-03, -7.6687e-03],
         [-4.2319e-03,  4.6983e-03,  2.8995e-03]],

        [[ 8.5479e-03, -1.9286e-03, -2.8228e-03],
         [-1.1483e-02, -2.1200e-03, -5.5277e-03],
         [-5.0011e-03, -2.9579e-05,  5.6193e-03],
         ...,
         [ 8.0402e-03,  7.5829e-03,  6.0519e-04],
         [ 2.3289e-03, -2.0549e-03, -7.4638e-03],
         [-1.0633e-03,  4.1151e-03,  7.4025e-04]],

        [[ 5.3760e-03, -1.5031e-03, -3.9383e-03],
         [-8.5016e-03, -3.4897e-03, -5.7472e-03],
         [-7.0800e-03, -1.9973e-04,  4.9590e-03],
         ...,
         [ 4.7118e-03,  4.4974e-03,  3.0143e-03],
         [ 2.1848e-03, -4.9534e-04, -6.9724e-03],
         [-1.8592e-03,  3.9062e-03,  2.5337e-03]]], grad_fn=<ViewBackward0>)
--------------------------------------------------
==================================================

Batch 4 in Ensemble: 102_vi
Number of conformers in this batch: 32
Unique Atomic Numbers: [6, 1, 8, 15]
Average number of neighbors: 23.76
Processing batch of 32 conformers
Initialized CustomNonLinearReadout with input irreps: 32x0e+32x1o
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2284])
shifts shape: torch.Size([2284, 3])
sender shape: torch.Size([2284])
receiver shape: torch.Size([2284])
Edge attributes shape: torch.Size([2284, 9])
Edge attributes tensor([[ 1.0000,  1.2210,  0.9612,  ..., -0.0851, -0.9493, -0.5846],
        [ 1.0000, -0.1813,  1.7212,  ...,  2.1943, -0.1484, -0.0183],
        [ 1.0000,  1.3855, -0.7497,  ..., -0.4897,  0.6969, -0.9044],
        ...,
        [ 1.0000,  0.8217,  1.2779,  ...,  0.7078,  1.3722,  0.0107],
        [ 1.0000,  0.1782,  1.2547,  ...,  0.6420,  1.9125,  0.8793],
        [ 1.0000,  0.8741,  0.6047,  ..., -0.7093,  1.0676,  0.7141]])
Edge features shape: torch.Size([2284, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1425,  ..., -0.1571, -0.0354,  0.1708],
        [ 0.3439,  0.4322,  0.1993,  ..., -0.3558, -0.0195,  0.3313],
        [ 0.3448,  0.4371,  0.2094,  ..., -0.3697, -0.0417,  0.3169],
        ...,
        [ 0.0464, -0.0621,  0.0369,  ...,  0.0596, -0.0259, -0.0248],
        [ 0.2255,  0.0169, -0.2242,  ...,  0.0504, -0.2179, -0.0668],
        [ 0.1003, -0.0902, -0.0191,  ..., -0.0377,  0.1114, -0.0625]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2284, 96])
Tensor Product Weights tensor([[ 0.0168,  0.1336, -0.0037,  ..., -0.0121,  0.2060, -0.0085],
        [ 0.3344,  0.2550, -0.2236,  ..., -0.1926, -0.0380, -0.0212],
        [ 0.3387,  0.2583, -0.2307,  ..., -0.2063, -0.0443, -0.0193],
        ...,
        [-0.0123, -0.0026, -0.0343,  ..., -0.0163, -0.0260,  0.0304],
        [-0.1154,  0.0106,  0.0265,  ...,  0.0563,  0.2169, -0.0044],
        [ 0.0354,  0.0457, -0.0960,  ..., -0.0253, -0.0548,  0.0163]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.2003, -0.1908, -0.1384,  ...,  0.0380, -0.0301,  0.0051],
        [ 0.2725, -0.0068,  0.1081,  ...,  0.0017,  0.0161,  0.0452],
        [ 0.2400, -0.0449, -0.1023,  ..., -0.0329,  0.0736, -0.0489],
        ...,
        [ 0.0380, -0.0384, -0.0923,  ..., -0.0310, -0.0060, -0.0687],
        [ 0.3349,  0.3635, -0.2625,  ..., -0.0155, -0.0174, -0.0200],
        [-0.0593,  0.0507, -0.0216,  ..., -0.0218, -0.0132, -0.0200]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.4070, -0.0323, -0.1355,  ..., -0.1120,  0.1121,  0.0622],
        [ 0.4028, -0.0850, -0.0217,  ...,  0.1458,  0.0606,  0.0212],
        [ 0.2907,  0.1300, -0.0353,  ..., -0.0565, -0.1927,  0.0923],
        ...,
        [-0.0974, -0.0292,  0.0129,  ...,  0.0215, -0.0033, -0.0053],
        [ 0.0226,  0.3290,  0.0018,  ...,  0.5446,  0.1784, -0.0941],
        [-0.1184,  0.3673,  0.1284,  ...,  0.0103, -0.0571, -0.0450]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2274])
shifts shape: torch.Size([2274, 3])
sender shape: torch.Size([2274])
receiver shape: torch.Size([2274])
Edge attributes shape: torch.Size([2274, 9])
Edge attributes tensor([[ 1.0000,  1.2092,  0.9751,  ..., -0.0549, -0.9645, -0.5649],
        [ 1.0000, -0.1994,  1.7195,  ...,  2.1878, -0.1297, -0.0234],
        [ 1.0000,  1.3850, -0.7356,  ..., -0.5131,  0.6982, -0.8894],
        ...,
        [ 1.0000,  0.8206,  1.2796,  ...,  0.7127,  1.3715,  0.0103],
        [ 1.0000,  0.2017,  1.2126,  ...,  0.5258,  1.9102,  0.9349],
        [ 1.0000,  0.9269,  0.5902,  ..., -0.7286,  1.0201,  0.6025]])
Edge features shape: torch.Size([2274, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0367,  0.1710],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3554, -0.0187,  0.3318],
        [ 0.3448,  0.4373,  0.2097,  ..., -0.3701, -0.0424,  0.3164],
        ...,
        [ 0.0470, -0.0627,  0.0367,  ...,  0.0597, -0.0246, -0.0269],
        [ 0.2262,  0.0183, -0.2247,  ...,  0.0544, -0.2174, -0.0719],
        [ 0.0982, -0.0899, -0.0158,  ..., -0.0313,  0.1085, -0.0681]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2274, 96])
Tensor Product Weights tensor([[ 0.0163,  0.1336, -0.0032,  ..., -0.0119,  0.2070, -0.0086],
        [ 0.3343,  0.2549, -0.2234,  ..., -0.1922, -0.0378, -0.0212],
        [ 0.3388,  0.2584, -0.2309,  ..., -0.2067, -0.0445, -0.0192],
        ...,
        [-0.0120, -0.0027, -0.0355,  ..., -0.0165, -0.0274,  0.0304],
        [-0.1167,  0.0077,  0.0259,  ...,  0.0574,  0.2144, -0.0047],
        [ 0.0336,  0.0422, -0.0961,  ..., -0.0251, -0.0587,  0.0172]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1944, -0.1892, -0.1338,  ...,  0.0413, -0.0138, -0.0061],
        [ 0.2688, -0.0075,  0.1103,  ...,  0.0036,  0.0154,  0.0461],
        [ 0.2386, -0.0478, -0.1024,  ..., -0.0345,  0.0894, -0.0340],
        ...,
        [ 0.0365, -0.0399, -0.0923,  ..., -0.0307, -0.0043, -0.0724],
        [ 0.3341,  0.3546, -0.2634,  ..., -0.0121, -0.0177, -0.0204],
        [-0.0570,  0.0346, -0.0300,  ..., -0.0175, -0.0139, -0.0241]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3940, -0.0253, -0.1336,  ..., -0.1100,  0.1067,  0.0594],
        [ 0.3993, -0.0843, -0.0235,  ...,  0.1461,  0.0597,  0.0207],
        [ 0.2908,  0.1344, -0.0392,  ..., -0.0561, -0.1961,  0.0879],
        ...,
        [-0.0958, -0.0291,  0.0139,  ...,  0.0224, -0.0020, -0.0066],
        [ 0.0394,  0.3156, -0.0071,  ...,  0.5424,  0.1983, -0.1080],
        [-0.1108,  0.3254,  0.1314,  ...,  0.0111, -0.0568, -0.0212]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2262])
shifts shape: torch.Size([2262, 3])
sender shape: torch.Size([2262])
receiver shape: torch.Size([2262])
Edge attributes shape: torch.Size([2262, 9])
Edge attributes tensor([[ 1.0000,  1.2033,  0.9811,  ..., -0.0419, -0.9725, -0.5541],
        [ 1.0000, -0.2038,  1.7193,  ...,  2.1868, -0.1119, -0.0252],
        [ 1.0000,  1.3837, -0.7291,  ..., -0.5237,  0.7004, -0.8785],
        ...,
        [ 1.0000,  0.8939,  1.2380,  ...,  0.5955,  1.3066, -0.0843],
        [ 1.0000,  0.2886,  1.1954,  ...,  0.4795,  1.8823,  0.9066],
        [ 1.0000,  1.0150,  0.5368,  ..., -0.7958,  0.8987,  0.4204]])
Edge features shape: torch.Size([2262, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1429,  ..., -0.1570, -0.0364,  0.1710],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3553, -0.0187,  0.3318],
        [ 0.3448,  0.4373,  0.2097,  ..., -0.3702, -0.0424,  0.3164],
        ...,
        [ 0.0446, -0.0605,  0.0374,  ...,  0.0589, -0.0293, -0.0192],
        [ 0.2230,  0.0121, -0.2223,  ...,  0.0361, -0.2191, -0.0480],
        [ 0.1039, -0.0906, -0.0249,  ..., -0.0487,  0.1154, -0.0519]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2262, 96])
Tensor Product Weights tensor([[ 0.0165,  0.1336, -0.0033,  ..., -0.0120,  0.2067, -0.0085],
        [ 0.3343,  0.2549, -0.2234,  ..., -0.1921, -0.0378, -0.0213],
        [ 0.3388,  0.2584, -0.2309,  ..., -0.2067, -0.0445, -0.0192],
        ...,
        [-0.0132, -0.0022, -0.0310,  ..., -0.0156, -0.0221,  0.0303],
        [-0.1104,  0.0213,  0.0283,  ...,  0.0524,  0.2256, -0.0035],
        [ 0.0382,  0.0518, -0.0952,  ..., -0.0256, -0.0470,  0.0147]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1944, -0.1890, -0.1338,  ...,  0.0420, -0.0138, -0.0053],
        [ 0.2677, -0.0084,  0.1094,  ...,  0.0040,  0.0152,  0.0467],
        [ 0.2379, -0.0483, -0.1025,  ..., -0.0353,  0.0898, -0.0329],
        ...,
        [ 0.0424, -0.0328, -0.0913,  ..., -0.0306, -0.0036, -0.0769],
        [ 0.3329,  0.3468, -0.2592,  ..., -0.0076, -0.0170, -0.0180],
        [-0.0563,  0.0306, -0.0328,  ..., -0.0119, -0.0128, -0.0271]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3940, -0.0252, -0.1337,  ..., -0.1101,  0.1062,  0.0605],
        [ 0.3998, -0.0844, -0.0249,  ...,  0.1442,  0.0594,  0.0204],
        [ 0.2908,  0.1345, -0.0397,  ..., -0.0547, -0.1963,  0.0875],
        ...,
        [-0.1035, -0.0263,  0.0092,  ...,  0.0197, -0.0036, -0.0087],
        [ 0.0492,  0.3059, -0.0102,  ...,  0.5390,  0.2052, -0.1367],
        [-0.1130,  0.3030,  0.1388,  ...,  0.0079, -0.0526, -0.0183]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2270])
shifts shape: torch.Size([2270, 3])
sender shape: torch.Size([2270])
receiver shape: torch.Size([2270])
Edge attributes shape: torch.Size([2270, 9])
Edge attributes tensor([[ 1.0000,  1.2085,  0.9749,  ..., -0.0555, -0.9660, -0.5625],
        [ 1.0000, -0.1997,  1.7195,  ...,  2.1875, -0.1318, -0.0235],
        [ 1.0000,  1.3845, -0.7359,  ..., -0.5126,  0.6992, -0.8877],
        ...,
        [ 1.0000,  0.8207,  1.2798,  ...,  0.7131,  1.3710,  0.0097],
        [ 1.0000,  0.1930,  1.2274,  ...,  0.5664,  1.9122,  0.9159],
        [ 1.0000,  0.9087,  0.5959,  ..., -0.7211,  1.0375,  0.6413]])
Edge features shape: torch.Size([2270, 8])
Edge features tensor([[ 0.1679, -0.0645, -0.1431,  ..., -0.1569, -0.0368,  0.1710],
        [ 0.3439,  0.4320,  0.1989,  ..., -0.3553, -0.0186,  0.3319],
        [ 0.3448,  0.4373,  0.2097,  ..., -0.3701, -0.0424,  0.3164],
        ...,
        [ 0.0468, -0.0626,  0.0368,  ...,  0.0597, -0.0250, -0.0263],
        [ 0.2260,  0.0180, -0.2246,  ...,  0.0535, -0.2175, -0.0708],
        [ 0.0988, -0.0900, -0.0167,  ..., -0.0331,  0.1094, -0.0666]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2270, 96])
Tensor Product Weights tensor([[ 0.0163,  0.1336, -0.0032,  ..., -0.0119,  0.2070, -0.0086],
        [ 0.3343,  0.2549, -0.2233,  ..., -0.1921, -0.0377, -0.0213],
        [ 0.3388,  0.2584, -0.2309,  ..., -0.2067, -0.0445, -0.0192],
        ...,
        [-0.0121, -0.0027, -0.0352,  ..., -0.0165, -0.0270,  0.0304],
        [-0.1164,  0.0083,  0.0260,  ...,  0.0572,  0.2149, -0.0046],
        [ 0.0341,  0.0431, -0.0961,  ..., -0.0252, -0.0576,  0.0169]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1941, -0.1893, -0.1338,  ...,  0.0415, -0.0140, -0.0057],
        [ 0.2693, -0.0074,  0.1091,  ...,  0.0034,  0.0159,  0.0461],
        [ 0.2387, -0.0478, -0.1024,  ..., -0.0344,  0.0895, -0.0341],
        ...,
        [ 0.0368, -0.0396, -0.0923,  ..., -0.0308, -0.0048, -0.0712],
        [ 0.3345,  0.3573, -0.2635,  ..., -0.0132, -0.0176, -0.0204],
        [-0.0569,  0.0395, -0.0277,  ..., -0.0189, -0.0138, -0.0230]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3942, -0.0253, -0.1340,  ..., -0.1097,  0.1067,  0.0595],
        [ 0.4008, -0.0849, -0.0239,  ...,  0.1464,  0.0600,  0.0214],
        [ 0.2911,  0.1342, -0.0392,  ..., -0.0559, -0.1960,  0.0882],
        ...,
        [-0.0961, -0.0291,  0.0137,  ...,  0.0222, -0.0024, -0.0061],
        [ 0.0347,  0.3194, -0.0047,  ...,  0.5438,  0.1914, -0.1029],
        [-0.1133,  0.3370,  0.1295,  ...,  0.0108, -0.0572, -0.0265]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2264])
shifts shape: torch.Size([2264, 3])
sender shape: torch.Size([2264])
receiver shape: torch.Size([2264])
Edge attributes shape: torch.Size([2264, 9])
Edge attributes tensor([[ 1.0000,  1.2086,  0.9803,  ..., -0.0436, -0.9624, -0.5696],
        [ 1.0000, -0.1816,  1.7224,  ...,  2.1988, -0.0387, -0.0211],
        [ 1.0000,  1.3721, -0.7316,  ..., -0.5197,  0.7206, -0.8395],
        ...,
        [ 1.0000,  0.9376,  1.0501,  ...,  0.1149,  1.3680,  0.0898],
        [ 1.0000,  0.5800,  1.4319,  ...,  1.1742,  1.4476,  0.1787],
        [ 1.0000,  1.1051,  0.8114,  ..., -0.3820,  1.1087, -0.0651]])
Edge features shape: torch.Size([2264, 8])
Edge features tensor([[ 0.1677, -0.0647, -0.1428,  ..., -0.1570, -0.0361,  0.1709],
        [ 0.3439,  0.4322,  0.1992,  ..., -0.3557, -0.0192,  0.3315],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3698, -0.0419,  0.3167],
        ...,
        [ 0.1790, -0.0534, -0.1631,  ..., -0.1416, -0.0903,  0.1686],
        [ 0.1033, -0.0905, -0.0240,  ..., -0.0469,  0.1149, -0.0537],
        [ 0.0448, -0.0607,  0.0374,  ...,  0.0590, -0.0290, -0.0198]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2264, 96])
Tensor Product Weights tensor([[ 0.0166,  0.1336, -0.0034,  ..., -0.0120,  0.2065, -0.0085],
        [ 0.3344,  0.2550, -0.2235,  ..., -0.1925, -0.0379, -0.0212],
        [ 0.3387,  0.2584, -0.2308,  ..., -0.2064, -0.0444, -0.0193],
        ...,
        [-0.0047,  0.1317,  0.0133,  ..., -0.0035,  0.2417, -0.0083],
        [ 0.0378,  0.0508, -0.0954,  ..., -0.0256, -0.0483,  0.0150],
        [-0.0131, -0.0022, -0.0313,  ..., -0.0157, -0.0225,  0.0303]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1805, -0.1794, -0.1175,  ...,  0.0392, -0.0044, -0.0099],
        [ 0.2903,  0.0055,  0.0998,  ..., -0.0008,  0.0093,  0.0389],
        [ 0.3074, -0.0248, -0.1412,  ..., -0.0362,  0.0853, -0.0214],
        ...,
        [ 0.0419, -0.0334, -0.0914,  ...,  0.0225, -0.0409, -0.0239],
        [ 0.3330,  0.3477, -0.2604,  ..., -0.0058, -0.0171, -0.0175],
        [-0.0556,  0.0318, -0.0328,  ..., -0.0137, -0.0141, -0.0254]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3630, -0.0104, -0.1309,  ..., -0.1039,  0.1014,  0.0702],
        [ 0.3928, -0.0760, -0.0046,  ...,  0.1344,  0.0603,  0.0107],
        [ 0.3772,  0.0853, -0.0465,  ..., -0.0754, -0.1745,  0.0491],
        ...,
        [-0.1029, -0.0264,  0.0096,  ...,  0.0147,  0.0069, -0.0148],
        [ 0.0491,  0.3059, -0.0085,  ...,  0.5341,  0.2125, -0.1429],
        [-0.1117,  0.3057,  0.1384,  ...,  0.0249, -0.0873,  0.0014]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2262])
shifts shape: torch.Size([2262, 3])
sender shape: torch.Size([2262])
receiver shape: torch.Size([2262])
Edge attributes shape: torch.Size([2262, 9])
Edge attributes tensor([[ 1.0000,  1.2133,  0.9682,  ..., -0.0700, -0.9606, -0.5690],
        [ 1.0000, -0.1855,  1.7212,  ...,  2.1942, -0.1217, -0.0203],
        [ 1.0000,  1.3808, -0.7425,  ..., -0.5017,  0.7058, -0.8807],
        ...,
        [ 1.0000,  0.1159,  0.9516,  ..., -0.1057,  1.7722,  1.3347],
        [ 1.0000,  0.3824,  1.0125,  ...,  0.0282,  1.7676,  1.0859],
        [ 1.0000,  1.0966,  1.3188,  ...,  0.8266,  0.4104, -0.7387]])
Edge features shape: torch.Size([2262, 8])
Edge features tensor([[ 1.6755e-01, -6.4849e-02, -1.4246e-01,  ..., -1.5715e-01,
         -3.5196e-02,  1.7077e-01],
        [ 3.4392e-01,  4.3227e-01,  1.9939e-01,  ..., -3.5593e-01,
         -1.9645e-02,  3.3123e-01],
        [ 3.4480e-01,  4.3713e-01,  2.0938e-01,  ..., -3.6970e-01,
         -4.1670e-02,  3.1687e-01],
        ...,
        [ 7.6300e-02, -8.3004e-02,  1.3998e-02,  ...,  2.7663e-02,
          5.7636e-02, -9.0364e-02],
        [ 5.9662e-03, -1.0753e-02,  1.3416e-02,  ..., -6.0109e-03,
          4.9650e-05,  5.9214e-03],
        [ 1.1252e-01, -9.0684e-02, -3.9434e-02,  ..., -7.4701e-02,
          1.1947e-01, -2.1585e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2262, 96])
Tensor Product Weights tensor([[ 0.0169,  0.1336, -0.0037,  ..., -0.0121,  0.2058, -0.0085],
        [ 0.3345,  0.2551, -0.2236,  ..., -0.1927, -0.0380, -0.0212],
        [ 0.3387,  0.2583, -0.2307,  ..., -0.2063, -0.0443, -0.0193],
        ...,
        [ 0.0124,  0.0106, -0.0833,  ..., -0.0228, -0.0724,  0.0252],
        [-0.0071,  0.0024,  0.0014,  ...,  0.0042,  0.0056,  0.0073],
        [ 0.0438,  0.0665, -0.0905,  ..., -0.0261, -0.0236,  0.0108]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.2010, -0.1909, -0.1388,  ...,  0.0383, -0.0302,  0.0050],
        [ 0.2666, -0.0040,  0.1122,  ...,  0.0023,  0.0150,  0.0461],
        [ 0.2392, -0.0454, -0.1023,  ..., -0.0335,  0.0745, -0.0477],
        ...,
        [ 0.2180,  0.0290, -0.1328,  ...,  0.0560, -0.0845,  0.0296],
        [ 0.3225,  0.3123, -0.1648,  ...,  0.0359,  0.0186,  0.0440],
        [-0.0794,  0.0070,  0.0574,  ...,  0.0190,  0.0141,  0.0423]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.4075, -0.0328, -0.1353,  ..., -0.1117,  0.1116,  0.0638],
        [ 0.3826, -0.0711, -0.0161,  ...,  0.1439,  0.0609,  0.0220],
        [ 0.2903,  0.1303, -0.0355,  ..., -0.0547, -0.1931,  0.0925],
        ...,
        [-0.2312, -0.2559, -0.0897,  ...,  0.0966,  0.0919, -0.0916],
        [ 0.0751,  0.2663,  0.0041,  ..., -0.0226,  0.1929,  0.4869],
        [-0.1280,  0.3840,  0.1765,  ..., -0.1290, -0.0592,  0.0401]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2256])
shifts shape: torch.Size([2256, 3])
sender shape: torch.Size([2256])
receiver shape: torch.Size([2256])
Edge attributes shape: torch.Size([2256, 9])
Edge attributes tensor([[ 1.0000,  1.1986,  0.9822,  ..., -0.0394, -0.9810, -0.5410],
        [ 1.0000, -0.2047,  1.7192,  ...,  2.1867, -0.1059, -0.0256],
        [ 1.0000,  1.3787, -0.7281,  ..., -0.5253,  0.7090, -0.8598],
        ...,
        [ 1.0000,  0.1287,  0.9545,  ..., -0.0993,  1.7740,  1.3269],
        [ 1.0000,  0.3942,  1.0157,  ...,  0.0353,  1.7655,  1.0700],
        [ 1.0000,  1.1001,  1.3195,  ...,  0.8284,  0.3762, -0.7497]])
Edge features shape: torch.Size([2256, 8])
Edge features tensor([[ 1.6785e-01, -6.4583e-02, -1.4300e-01,  ..., -1.5692e-01,
         -3.6599e-02,  1.7100e-01],
        [ 3.4388e-01,  4.3204e-01,  1.9893e-01,  ..., -3.5528e-01,
         -1.8630e-02,  3.3187e-01],
        [ 3.4483e-01,  4.3732e-01,  2.0978e-01,  ..., -3.7023e-01,
         -4.2541e-02,  3.1628e-01],
        ...,
        [ 7.6314e-02, -8.3011e-02,  1.3982e-02,  ...,  2.7631e-02,
          5.7678e-02, -9.0371e-02],
        [ 5.9688e-03, -1.0758e-02,  1.3420e-02,  ..., -6.0086e-03,
          4.4176e-05,  5.9289e-03],
        [ 1.1453e-01, -9.0549e-02, -4.2937e-02,  ..., -8.0622e-02,
          1.1924e-01, -1.3650e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2256, 96])
Tensor Product Weights tensor([[ 0.0164,  0.1336, -0.0033,  ..., -0.0119,  0.2069, -0.0086],
        [ 0.3343,  0.2549, -0.2233,  ..., -0.1921, -0.0377, -0.0213],
        [ 0.3388,  0.2585, -0.2310,  ..., -0.2068, -0.0445, -0.0192],
        ...,
        [ 0.0124,  0.0106, -0.0833,  ..., -0.0228, -0.0724,  0.0252],
        [-0.0071,  0.0024,  0.0014,  ...,  0.0042,  0.0056,  0.0073],
        [ 0.0448,  0.0699, -0.0889,  ..., -0.0262, -0.0172,  0.0099]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1947, -0.1890, -0.1341,  ...,  0.0419, -0.0142, -0.0054],
        [ 0.2680, -0.0078,  0.1088,  ...,  0.0043,  0.0144,  0.0468],
        [ 0.2375, -0.0489, -0.1024,  ..., -0.0353,  0.0900, -0.0324],
        ...,
        [ 0.0469, -0.0330, -0.0577,  ...,  0.0658,  0.0590,  0.0123],
        [ 0.3239,  0.3135, -0.1646,  ...,  0.0359,  0.0182,  0.0439],
        [-0.0796,  0.0113,  0.0588,  ...,  0.0200,  0.0139,  0.0434]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3942, -0.0253, -0.1334,  ..., -0.1100,  0.1064,  0.0608],
        [ 0.3974, -0.0834, -0.0238,  ...,  0.1441,  0.0604,  0.0216],
        [ 0.2909,  0.1345, -0.0399,  ..., -0.0538, -0.1962,  0.0877],
        ...,
        [-0.0837, -0.0441,  0.0073,  ..., -0.0079,  0.0115,  0.0078],
        [ 0.0737,  0.2672,  0.0066,  ..., -0.0173,  0.1935,  0.4876],
        [-0.1308,  0.3836,  0.1805,  ..., -0.1272, -0.0572,  0.0402]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2254])
shifts shape: torch.Size([2254, 3])
sender shape: torch.Size([2254])
receiver shape: torch.Size([2254])
Edge attributes shape: torch.Size([2254, 9])
Edge attributes tensor([[ 1.0000e+00,  1.1991e+00,  9.8227e-01,  ..., -3.9293e-02,
         -9.7996e-01, -5.4272e-01],
        [ 1.0000e+00, -2.0540e-01,  1.7191e+00,  ...,  2.1862e+00,
         -1.0848e-01, -2.5691e-02],
        [ 1.0000e+00,  1.3805e+00, -7.2791e-01,  ..., -5.2563e-01,
          7.0604e-01, -8.6573e-01],
        ...,
        [ 1.0000e+00,  1.4049e-01,  9.3908e-01,  ..., -1.3207e-01,
          1.7562e+00,  1.3418e+00],
        [ 1.0000e+00,  3.9854e-01,  1.0007e+00,  ...,  1.5420e-03,
          1.7523e+00,  1.0851e+00],
        [ 1.0000e+00,  1.1027e+00,  1.3193e+00,  ...,  8.2792e-01,
          3.5578e-01, -7.5666e-01]])
Edge features shape: torch.Size([2254, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0365,  0.1710],
        [ 0.3439,  0.4320,  0.1989,  ..., -0.3553, -0.0186,  0.3319],
        [ 0.3448,  0.4373,  0.2098,  ..., -0.3702, -0.0425,  0.3163],
        ...,
        [ 0.0766, -0.0832,  0.0136,  ...,  0.0270,  0.0585, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.1182, -0.0901, -0.0495,  ..., -0.0913,  0.1176,  0.0016]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2254, 96])
Tensor Product Weights tensor([[ 0.0164,  0.1336, -0.0033,  ..., -0.0120,  0.2068, -0.0085],
        [ 0.3343,  0.2549, -0.2233,  ..., -0.1921, -0.0377, -0.0213],
        [ 0.3388,  0.2585, -0.2310,  ..., -0.2068, -0.0445, -0.0192],
        ...,
        [ 0.0127,  0.0110, -0.0837,  ..., -0.0228, -0.0726,  0.0251],
        [-0.0068,  0.0022,  0.0012,  ...,  0.0042,  0.0052,  0.0069],
        [ 0.0464,  0.0761, -0.0854,  ..., -0.0262, -0.0045,  0.0081]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1945, -0.1891, -0.1339,  ...,  0.0419, -0.0141, -0.0054],
        [ 0.2679, -0.0083,  0.1087,  ...,  0.0044,  0.0145,  0.0468],
        [ 0.2378, -0.0487, -0.1025,  ..., -0.0353,  0.0900, -0.0325],
        ...,
        [ 0.2177,  0.0261, -0.1338,  ...,  0.0522, -0.0862,  0.0292],
        [ 0.3252,  0.3159, -0.1642,  ...,  0.0355,  0.0175,  0.0437],
        [-0.0770,  0.0195,  0.0606,  ...,  0.0212,  0.0137,  0.0445]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3939, -0.0252, -0.1334,  ..., -0.1099,  0.1063,  0.0610],
        [ 0.3985, -0.0843, -0.0244,  ...,  0.1437,  0.0603,  0.0214],
        [ 0.2912,  0.1344, -0.0399,  ..., -0.0538, -0.1962,  0.0879],
        ...,
        [-0.2282, -0.2622, -0.0897,  ...,  0.0938,  0.0907, -0.0974],
        [ 0.0701,  0.2698,  0.0095,  ..., -0.0122,  0.1880,  0.4904],
        [-0.1355,  0.3902,  0.1787,  ..., -0.1219, -0.0588,  0.0399]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2250])
shifts shape: torch.Size([2250, 3])
sender shape: torch.Size([2250])
receiver shape: torch.Size([2250])
Edge attributes shape: torch.Size([2250, 9])
Edge attributes tensor([[ 1.0000,  1.1996,  0.9818,  ..., -0.0404, -0.9794, -0.5434],
        [ 1.0000, -0.2046,  1.7192,  ...,  2.1866, -0.1090, -0.0255],
        [ 1.0000,  1.3803, -0.7285,  ..., -0.5246,  0.7064, -0.8657],
        ...,
        [ 1.0000,  0.1299,  0.9469,  ..., -0.1156,  1.7658,  1.3359],
        [ 1.0000,  0.3953,  1.0086,  ...,  0.0193,  1.7597,  1.0782],
        [ 1.0000,  1.1000,  1.3185,  ...,  0.8257,  0.3863, -0.7478]])
Edge features shape: torch.Size([2250, 8])
Edge features tensor([[ 1.6783e-01, -6.4599e-02, -1.4297e-01,  ..., -1.5693e-01,
         -3.6519e-02,  1.7099e-01],
        [ 3.4388e-01,  4.3204e-01,  1.9893e-01,  ..., -3.5529e-01,
         -1.8647e-02,  3.3186e-01],
        [ 3.4483e-01,  4.3728e-01,  2.0971e-01,  ..., -3.7014e-01,
         -4.2394e-02,  3.1638e-01],
        ...,
        [ 7.6288e-02, -8.2999e-02,  1.4012e-02,  ...,  2.7689e-02,
          5.7602e-02, -9.0358e-02],
        [ 5.9612e-03, -1.0745e-02,  1.3406e-02,  ..., -6.0151e-03,
          5.9878e-05,  5.9071e-03],
        [ 1.1443e-01, -9.0557e-02, -4.2772e-02,  ..., -8.0347e-02,
          1.1926e-01, -1.4026e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2250, 96])
Tensor Product Weights tensor([[ 0.0164,  0.1336, -0.0033,  ..., -0.0119,  0.2068, -0.0085],
        [ 0.3343,  0.2549, -0.2233,  ..., -0.1921, -0.0377, -0.0213],
        [ 0.3388,  0.2584, -0.2309,  ..., -0.2067, -0.0445, -0.0192],
        ...,
        [ 0.0124,  0.0106, -0.0833,  ..., -0.0228, -0.0724,  0.0252],
        [-0.0071,  0.0024,  0.0014,  ...,  0.0042,  0.0056,  0.0073],
        [ 0.0448,  0.0697, -0.0890,  ..., -0.0261, -0.0175,  0.0099]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1944, -0.1890, -0.1340,  ...,  0.0420, -0.0141, -0.0051],
        [ 0.2681, -0.0085,  0.1081,  ...,  0.0042,  0.0148,  0.0468],
        [ 0.2376, -0.0488, -0.1024,  ..., -0.0352,  0.0900, -0.0325],
        ...,
        [ 0.2183,  0.0289, -0.1330,  ...,  0.0548, -0.0850,  0.0295],
        [ 0.3239,  0.3134, -0.1647,  ...,  0.0358,  0.0181,  0.0439],
        [-0.0798,  0.0110,  0.0588,  ...,  0.0201,  0.0137,  0.0436]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3942, -0.0253, -0.1336,  ..., -0.1099,  0.1064,  0.0609],
        [ 0.3999, -0.0849, -0.0249,  ...,  0.1436,  0.0602,  0.0215],
        [ 0.2909,  0.1345, -0.0399,  ..., -0.0539, -0.1963,  0.0879],
        ...,
        [-0.2313, -0.2567, -0.0897,  ...,  0.0956,  0.0917, -0.0941],
        [ 0.0739,  0.2671,  0.0066,  ..., -0.0168,  0.1909,  0.4890],
        [-0.1302,  0.3828,  0.1807,  ..., -0.1266, -0.0578,  0.0397]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2248])
shifts shape: torch.Size([2248, 3])
sender shape: torch.Size([2248])
receiver shape: torch.Size([2248])
Edge attributes shape: torch.Size([2248, 9])
Edge attributes tensor([[ 1.0000,  1.1995,  0.9820,  ..., -0.0398, -0.9794, -0.5436],
        [ 1.0000, -0.2051,  1.7192,  ...,  2.1863, -0.1098, -0.0256],
        [ 1.0000,  1.3811, -0.7281,  ..., -0.5253,  0.7050, -0.8682],
        ...,
        [ 1.0000,  0.1333,  0.9462,  ..., -0.1172,  1.7646,  1.3357],
        [ 1.0000,  0.3921,  1.0067,  ...,  0.0151,  1.7595,  1.0838],
        [ 1.0000,  1.1032,  1.3177,  ...,  0.8234,  0.3667, -0.7556]])
Edge features shape: torch.Size([2248, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0365,  0.1710],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3553, -0.0187,  0.3318],
        [ 0.3448,  0.4373,  0.2097,  ..., -0.3701, -0.0423,  0.3164],
        ...,
        [ 0.0766, -0.0832,  0.0136,  ...,  0.0269,  0.0586, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.1167, -0.0903, -0.0467,  ..., -0.0868,  0.1185, -0.0049]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2248, 96])
Tensor Product Weights tensor([[ 0.0164,  0.1336, -0.0033,  ..., -0.0119,  0.2068, -0.0086],
        [ 0.3343,  0.2549, -0.2234,  ..., -0.1921, -0.0378, -0.0213],
        [ 0.3388,  0.2584, -0.2309,  ..., -0.2067, -0.0445, -0.0192],
        ...,
        [ 0.0127,  0.0110, -0.0837,  ..., -0.0228, -0.0726,  0.0251],
        [-0.0068,  0.0022,  0.0012,  ...,  0.0042,  0.0052,  0.0069],
        [ 0.0458,  0.0735, -0.0869,  ..., -0.0262, -0.0100,  0.0089]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1944, -0.1889, -0.1340,  ...,  0.0420, -0.0142, -0.0051],
        [ 0.2684, -0.0085,  0.1077,  ...,  0.0042,  0.0149,  0.0468],
        [ 0.2376, -0.0488, -0.1024,  ..., -0.0353,  0.0899, -0.0325],
        ...,
        [ 0.2178,  0.0262, -0.1338,  ...,  0.0530, -0.0860,  0.0295],
        [ 0.3248,  0.3149, -0.1643,  ...,  0.0356,  0.0179,  0.0437],
        [-0.0778,  0.0166,  0.0599,  ...,  0.0206,  0.0140,  0.0440]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3940, -0.0251, -0.1336,  ..., -0.1099,  0.1064,  0.0609],
        [ 0.4004, -0.0853, -0.0251,  ...,  0.1436,  0.0603,  0.0216],
        [ 0.2909,  0.1345, -0.0399,  ..., -0.0538, -0.1963,  0.0879],
        ...,
        [-0.2284, -0.2623, -0.0898,  ...,  0.0952,  0.0908, -0.0963],
        [ 0.0715,  0.2687,  0.0084,  ..., -0.0153,  0.1904,  0.4889],
        [-0.1343,  0.3882,  0.1791,  ..., -0.1248, -0.0571,  0.0403]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2280])
shifts shape: torch.Size([2280, 3])
sender shape: torch.Size([2280])
receiver shape: torch.Size([2280])
Edge attributes shape: torch.Size([2280, 9])
Edge attributes tensor([[ 1.0000,  1.2302,  0.9715,  ..., -0.0628, -0.9241, -0.6265],
        [ 1.0000, -0.1357,  1.7264,  ...,  2.2142,  0.0764, -0.0111],
        [ 1.0000,  1.3272, -0.7440,  ..., -0.4992,  0.7949, -0.6949],
        ...,
        [ 1.0000,  0.9462,  1.0676,  ...,  0.1563,  1.3539,  0.0450],
        [ 1.0000,  0.5772,  1.4454,  ...,  1.2179,  1.4182,  0.1578],
        [ 1.0000,  1.1159,  0.8350,  ..., -0.3384,  1.1086, -0.1212]])
Edge features shape: torch.Size([2280, 8])
Edge features tensor([[ 0.1672, -0.0652, -0.1418,  ..., -0.1574, -0.0335,  0.1705],
        [ 0.3439,  0.4321,  0.1991,  ..., -0.3556, -0.0191,  0.3316],
        [ 0.3448,  0.4374,  0.2098,  ..., -0.3703, -0.0427,  0.3162],
        ...,
        [ 0.1791, -0.0533, -0.1632,  ..., -0.1415, -0.0907,  0.1685],
        [ 0.1046, -0.0906, -0.0261,  ..., -0.0509,  0.1161, -0.0497],
        [ 0.0444, -0.0603,  0.0375,  ...,  0.0588, -0.0297, -0.0185]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2280, 96])
Tensor Product Weights tensor([[ 0.0174,  0.1335, -0.0043,  ..., -0.0124,  0.2045, -0.0085],
        [ 0.3344,  0.2550, -0.2235,  ..., -0.1924, -0.0379, -0.0212],
        [ 0.3388,  0.2585, -0.2310,  ..., -0.2069, -0.0446, -0.0192],
        ...,
        [-0.0048,  0.1316,  0.0134,  ..., -0.0034,  0.2418, -0.0083],
        [ 0.0388,  0.0530, -0.0950,  ..., -0.0257, -0.0453,  0.0144],
        [-0.0133, -0.0021, -0.0305,  ..., -0.0155, -0.0216,  0.0303]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1825, -0.1817, -0.1203,  ...,  0.0345,  0.0004, -0.0249],
        [ 0.2964, -0.0236,  0.0906,  ...,  0.0029, -0.0318,  0.0307],
        [ 0.3098, -0.0172, -0.1397,  ..., -0.0361,  0.0829, -0.0165],
        ...,
        [ 0.0430, -0.0323, -0.0914,  ...,  0.0237, -0.0436, -0.0211],
        [ 0.3327,  0.3472, -0.2597,  ..., -0.0057, -0.0172, -0.0163],
        [-0.0556,  0.0324, -0.0326,  ..., -0.0132, -0.0142, -0.0249]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3684, -0.0119, -0.1322,  ..., -0.1094,  0.1069,  0.0668],
        [ 0.4570, -0.1203, -0.0255,  ...,  0.1182,  0.0752,  0.0528],
        [ 0.3629,  0.0970, -0.0379,  ..., -0.0819, -0.1743,  0.0399],
        ...,
        [-0.1042, -0.0265,  0.0088,  ...,  0.0136,  0.0065, -0.0150],
        [ 0.0491,  0.3055, -0.0084,  ...,  0.5308,  0.2148, -0.1534],
        [-0.1129,  0.3051,  0.1394,  ...,  0.0252, -0.0874,  0.0016]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2286])
shifts shape: torch.Size([2286, 3])
sender shape: torch.Size([2286])
receiver shape: torch.Size([2286])
Edge attributes shape: torch.Size([2286, 9])
Edge attributes tensor([[ 1.0000,  1.2342,  0.9661,  ..., -0.0745, -0.9193, -0.6326],
        [ 1.0000, -0.1343,  1.7267,  ...,  2.2153,  0.0524, -0.0113],
        [ 1.0000,  1.3305, -0.7503,  ..., -0.4886,  0.7910, -0.7122],
        ...,
        [ 1.0000,  0.2009,  1.2406,  ...,  0.6026,  1.9089,  0.8910],
        [ 1.0000,  0.8088,  1.3202,  ...,  0.8305,  1.3235, -0.0330],
        [ 1.0000,  0.9312,  0.6478,  ..., -0.6488,  1.0947,  0.5462]])
Edge features shape: torch.Size([2286, 8])
Edge features tensor([[ 0.1673, -0.0650, -0.1421,  ..., -0.1573, -0.0342,  0.1706],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3554, -0.0189,  0.3317],
        [ 0.3448,  0.4373,  0.2098,  ..., -0.3703, -0.0427,  0.3162],
        ...,
        [ 0.2278,  0.0214, -0.2257,  ...,  0.0636, -0.2157, -0.0839],
        [ 0.0486, -0.0642,  0.0361,  ...,  0.0599, -0.0212, -0.0320],
        [ 0.0941, -0.0892, -0.0096,  ..., -0.0191,  0.1016, -0.0772]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2286, 96])
Tensor Product Weights tensor([[ 0.0172,  0.1335, -0.0041,  ..., -0.0123,  0.2050, -0.0085],
        [ 0.3343,  0.2549, -0.2234,  ..., -0.1922, -0.0378, -0.0212],
        [ 0.3388,  0.2585, -0.2310,  ..., -0.2069, -0.0446, -0.0192],
        ...,
        [-0.1196,  0.0007,  0.0246,  ...,  0.0599,  0.2084, -0.0055],
        [-0.0111, -0.0030, -0.0385,  ..., -0.0171, -0.0309,  0.0304],
        [ 0.0300,  0.0355, -0.0957,  ..., -0.0248, -0.0650,  0.0189]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 1.8237e-01, -1.8186e-01, -1.2026e-01,  ...,  3.4289e-02,
         -1.1627e-04, -2.4919e-02],
        [ 2.9664e-01, -2.4108e-02,  8.9711e-02,  ...,  2.7345e-03,
         -3.1225e-02,  3.0804e-02],
        [ 3.0880e-01, -1.8700e-02, -1.3963e-01,  ..., -3.5118e-02,
          8.3165e-02, -1.8383e-02],
        ...,
        [ 7.3699e-02, -1.1392e-02, -9.3588e-02,  ...,  7.3901e-02,
         -3.1877e-02, -1.5983e-02],
        [ 3.3376e-01,  3.5518e-01, -2.6467e-01,  ..., -1.4187e-02,
         -1.7995e-02, -1.9704e-02],
        [-6.0103e-02,  3.1663e-02, -2.8449e-02,  ..., -1.9744e-02,
         -1.3756e-02, -2.1628e-02]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3682, -0.0120, -0.1321,  ..., -0.1092,  0.1075,  0.0663],
        [ 0.4600, -0.1231, -0.0269,  ...,  0.1184,  0.0772,  0.0536],
        [ 0.3642,  0.0960, -0.0392,  ..., -0.0818, -0.1747,  0.0418],
        ...,
        [-0.1350, -0.0427, -0.0140,  ...,  0.0054, -0.0011,  0.0014],
        [ 0.0394,  0.3163, -0.0077,  ...,  0.5420,  0.1911, -0.1155],
        [-0.1055,  0.3303,  0.1315,  ...,  0.0117, -0.0591, -0.0251]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2254])
shifts shape: torch.Size([2254, 3])
sender shape: torch.Size([2254])
receiver shape: torch.Size([2254])
Edge attributes shape: torch.Size([2254, 9])
Edge attributes tensor([[ 1.0000,  1.1986,  0.9741,  ..., -0.0573, -0.9858, -0.5306],
        [ 1.0000, -0.1880,  1.7213,  ...,  2.1946, -0.0916, -0.0217],
        [ 1.0000,  1.3640, -0.7374,  ..., -0.5101,  0.7348, -0.8164],
        ...,
        [ 1.0000,  0.2634,  1.2062,  ...,  0.5085,  1.8917,  0.9078],
        [ 1.0000,  0.8796,  1.2405,  ...,  0.6023,  1.3278, -0.0557],
        [ 1.0000,  0.9845,  0.5433,  ..., -0.7880,  0.9240,  0.4945]])
Edge features shape: torch.Size([2254, 8])
Edge features tensor([[ 0.1677, -0.0647, -0.1428,  ..., -0.1570, -0.0361,  0.1709],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3554, -0.0188,  0.3317],
        [ 0.3448,  0.4371,  0.2094,  ..., -0.3697, -0.0416,  0.3169],
        ...,
        [ 0.2228,  0.0118, -0.2222,  ...,  0.0352, -0.2191, -0.0467],
        [ 0.0445, -0.0604,  0.0374,  ...,  0.0589, -0.0295, -0.0189],
        [ 0.1043, -0.0906, -0.0256,  ..., -0.0500,  0.1158, -0.0506]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2254, 96])
Tensor Product Weights tensor([[ 0.0166,  0.1336, -0.0034,  ..., -0.0120,  0.2065, -0.0085],
        [ 0.3343,  0.2549, -0.2234,  ..., -0.1922, -0.0378, -0.0212],
        [ 0.3386,  0.2583, -0.2307,  ..., -0.2062, -0.0443, -0.0193],
        ...,
        [-0.1100,  0.0220,  0.0284,  ...,  0.0521,  0.2262, -0.0035],
        [-0.0133, -0.0021, -0.0308,  ..., -0.0156, -0.0219,  0.0303],
        [ 0.0385,  0.0525, -0.0951,  ..., -0.0256, -0.0460,  0.0145]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1887, -0.1821, -0.1224,  ...,  0.0390, -0.0291,  0.0039],
        [ 0.2929,  0.0087,  0.0981,  ..., -0.0024,  0.0095,  0.0375],
        [ 0.3007, -0.0450, -0.1483,  ..., -0.0321,  0.0781, -0.0460],
        ...,
        [ 0.0590, -0.0175, -0.0918,  ...,  0.0705, -0.0178, -0.0219],
        [ 0.3331,  0.3487, -0.2610,  ..., -0.0085, -0.0172, -0.0190],
        [-0.0550,  0.0343, -0.0325,  ..., -0.0133, -0.0132, -0.0272]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 3.7490e-01, -1.9508e-02, -1.2826e-01,  ..., -1.0072e-01,
          1.0521e-01,  8.3839e-02],
        [ 3.9139e-01, -7.3582e-02, -1.8745e-03,  ...,  1.3658e-01,
          6.0452e-02,  1.1529e-02],
        [ 4.2235e-01,  5.4287e-02, -7.9626e-02,  ..., -6.5218e-02,
         -1.7448e-01,  7.2067e-02],
        ...,
        [-1.2348e-01, -2.9450e-02, -4.7770e-03,  ...,  4.4800e-05,
         -9.4342e-03, -3.2866e-03],
        [ 4.6587e-02,  3.0807e-01, -9.4883e-03,  ...,  5.4098e-01,
          2.0388e-01, -1.2598e-01],
        [-1.1495e-01,  3.1018e-01,  1.3471e-01,  ...,  9.7938e-03,
         -5.1432e-02, -1.7028e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2264])
shifts shape: torch.Size([2264, 3])
sender shape: torch.Size([2264])
receiver shape: torch.Size([2264])
Edge attributes shape: torch.Size([2264, 9])
Edge attributes tensor([[ 1.0000,  1.2056,  0.9669,  ..., -0.0727, -0.9762, -0.5434],
        [ 1.0000, -0.1804,  1.7220,  ...,  2.1972, -0.1042, -0.0196],
        [ 1.0000,  1.3646, -0.7452,  ..., -0.4972,  0.7343, -0.8260],
        ...,
        [ 1.0000,  0.1754,  1.2496,  ...,  0.6278,  1.9141,  0.8888],
        [ 1.0000,  0.8161,  1.2816,  ...,  0.7185,  1.3758,  0.0164],
        [ 1.0000,  0.8762,  0.6068,  ..., -0.7064,  1.0695,  0.7076]])
Edge features shape: torch.Size([2264, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1429,  ..., -0.1570, -0.0363,  0.1710],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3554, -0.0189,  0.3317],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0415,  0.3170],
        ...,
        [ 0.2258,  0.0175, -0.2244,  ...,  0.0521, -0.2177, -0.0689],
        [ 0.0466, -0.0624,  0.0368,  ...,  0.0596, -0.0254, -0.0256],
        [ 0.0995, -0.0901, -0.0179,  ..., -0.0354,  0.1104, -0.0646]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2264, 96])
Tensor Product Weights tensor([[ 0.0165,  0.1336, -0.0033,  ..., -0.0120,  0.2067, -0.0085],
        [ 0.3343,  0.2549, -0.2234,  ..., -0.1922, -0.0378, -0.0212],
        [ 0.3386,  0.2583, -0.2306,  ..., -0.2062, -0.0442, -0.0193],
        ...,
        [-0.1159,  0.0094,  0.0262,  ...,  0.0568,  0.2159, -0.0045],
        [-0.0122, -0.0026, -0.0347,  ..., -0.0164, -0.0265,  0.0304],
        [ 0.0348,  0.0444, -0.0961,  ..., -0.0253, -0.0562,  0.0166]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1881, -0.1824, -0.1226,  ...,  0.0383, -0.0286,  0.0039],
        [ 0.2948,  0.0107,  0.0975,  ..., -0.0030,  0.0104,  0.0373],
        [ 0.3000, -0.0448, -0.1473,  ..., -0.0309,  0.0778, -0.0468],
        ...,
        [ 0.0646, -0.0181, -0.0929,  ...,  0.0693, -0.0248, -0.0206],
        [ 0.3347,  0.3605, -0.2638,  ..., -0.0148, -0.0176, -0.0207],
        [-0.0577,  0.0456, -0.0244,  ..., -0.0210, -0.0133, -0.0216]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 3.7572e-01, -1.9789e-02, -1.2922e-01,  ..., -1.0077e-01,
          1.0584e-01,  8.2392e-02],
        [ 3.9228e-01, -7.4078e-02, -3.3027e-04,  ...,  1.3860e-01,
          6.1377e-02,  1.2767e-02],
        [ 4.1988e-01,  5.5980e-02, -7.8672e-02,  ..., -6.6800e-02,
         -1.7467e-01,  7.2068e-02],
        ...,
        [-1.2634e-01, -3.7375e-02, -7.4672e-03,  ...,  1.7827e-03,
         -5.8036e-03, -3.9566e-04],
        [ 2.8729e-02,  3.2408e-01, -1.6403e-03,  ...,  5.4590e-01,
          1.8169e-01, -9.2946e-02],
        [-1.1530e-01,  3.5353e-01,  1.2702e-01,  ...,  1.1376e-02,
         -5.6367e-02, -3.5414e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2250])
shifts shape: torch.Size([2250, 3])
sender shape: torch.Size([2250])
receiver shape: torch.Size([2250])
Edge attributes shape: torch.Size([2250, 9])
Edge attributes tensor([[ 1.0000,  1.1996,  0.9732,  ..., -0.0591, -0.9845, -0.5325],
        [ 1.0000, -0.1857,  1.7216,  ...,  2.1957, -0.0883, -0.0212],
        [ 1.0000,  1.3624, -0.7384,  ..., -0.5084,  0.7376, -0.8116],
        ...,
        [ 1.0000,  0.9173,  1.0418,  ...,  0.0954,  1.3933,  0.1495],
        [ 1.0000,  0.5631,  1.4260,  ...,  1.1556,  1.4836,  0.2145],
        [ 1.0000,  1.0835,  0.8042,  ..., -0.3950,  1.1275,  0.0035]])
Edge features shape: torch.Size([2250, 8])
Edge features tensor([[ 0.1677, -0.0647, -0.1427,  ..., -0.1570, -0.0359,  0.1709],
        [ 0.3439,  0.4321,  0.1990,  ..., -0.3554, -0.0189,  0.3317],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0415,  0.3170],
        ...,
        [ 0.1791, -0.0533, -0.1632,  ..., -0.1415, -0.0906,  0.1685],
        [ 0.1039, -0.0906, -0.0249,  ..., -0.0485,  0.1154, -0.0521],
        [ 0.0446, -0.0605,  0.0374,  ...,  0.0589, -0.0292, -0.0193]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2250, 96])
Tensor Product Weights tensor([[ 0.0166,  0.1336, -0.0035,  ..., -0.0120,  0.2064, -0.0085],
        [ 0.3343,  0.2549, -0.2234,  ..., -0.1923, -0.0378, -0.0212],
        [ 0.3386,  0.2583, -0.2306,  ..., -0.2062, -0.0442, -0.0193],
        ...,
        [-0.0048,  0.1316,  0.0134,  ..., -0.0034,  0.2418, -0.0083],
        [ 0.0382,  0.0517, -0.0952,  ..., -0.0256, -0.0471,  0.0147],
        [-0.0132, -0.0022, -0.0310,  ..., -0.0156, -0.0222,  0.0303]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1884, -0.1822, -0.1225,  ...,  0.0389, -0.0287,  0.0040],
        [ 0.2929,  0.0088,  0.0981,  ..., -0.0027,  0.0096,  0.0376],
        [ 0.3009, -0.0446, -0.1482,  ..., -0.0318,  0.0781, -0.0458],
        ...,
        [ 0.0594, -0.0177, -0.0919,  ..., -0.0422, -0.0208, -0.0395],
        [ 0.3332,  0.3490, -0.2613,  ..., -0.0060, -0.0171, -0.0189],
        [-0.0548,  0.0345, -0.0325,  ..., -0.0143, -0.0142, -0.0260]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 3.7528e-01, -1.9625e-02, -1.2872e-01,  ..., -1.0065e-01,
          1.0520e-01,  8.3582e-02],
        [ 3.9177e-01, -7.3443e-02, -1.6767e-03,  ...,  1.3632e-01,
          6.0154e-02,  1.1288e-02],
        [ 4.2175e-01,  5.4744e-02, -7.9217e-02,  ..., -6.5672e-02,
         -1.7463e-01,  7.1785e-02],
        ...,
        [-1.2377e-01, -3.0160e-02, -5.0604e-03,  ..., -4.7961e-03,
          3.7187e-04, -8.2496e-03],
        [ 4.6952e-02,  3.0757e-01, -7.5691e-03,  ...,  5.3610e-01,
          2.1393e-01, -1.3066e-01],
        [-1.1350e-01,  3.1070e-01,  1.3622e-01,  ...,  2.5762e-02,
         -8.6075e-02,  1.8034e-03]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2266])
shifts shape: torch.Size([2266, 3])
sender shape: torch.Size([2266])
receiver shape: torch.Size([2266])
Edge attributes shape: torch.Size([2266, 9])
Edge attributes tensor([[ 1.0000,  1.2298,  0.9732,  ..., -0.0592, -0.9237, -0.6273],
        [ 1.0000, -0.1437,  1.7259,  ...,  2.2123,  0.0532, -0.0130],
        [ 1.0000,  1.3404, -0.7428,  ..., -0.5012,  0.7740, -0.7392],
        ...,
        [ 1.0000,  0.9447,  1.0601,  ...,  0.1385,  1.3575,  0.0590],
        [ 1.0000,  0.5804,  1.4390,  ...,  1.1972,  1.4298,  0.1649],
        [ 1.0000,  1.1142,  0.8239,  ..., -0.3591,  1.1053, -0.1044]])
Edge features shape: torch.Size([2266, 8])
Edge features tensor([[ 0.1673, -0.0651, -0.1419,  ..., -0.1574, -0.0339,  0.1705],
        [ 0.3439,  0.4320,  0.1989,  ..., -0.3553, -0.0186,  0.3319],
        [ 0.3448,  0.4373,  0.2097,  ..., -0.3701, -0.0423,  0.3164],
        ...,
        [ 0.1790, -0.0534, -0.1631,  ..., -0.1417, -0.0903,  0.1686],
        [ 0.1037, -0.0906, -0.0246,  ..., -0.0480,  0.1152, -0.0527],
        [ 0.0447, -0.0605,  0.0374,  ...,  0.0589, -0.0292, -0.0194]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2266, 96])
Tensor Product Weights tensor([[ 0.0173,  0.1335, -0.0042,  ..., -0.0123,  0.2048, -0.0085],
        [ 0.3343,  0.2549, -0.2233,  ..., -0.1921, -0.0377, -0.0213],
        [ 0.3388,  0.2584, -0.2309,  ..., -0.2067, -0.0445, -0.0192],
        ...,
        [-0.0047,  0.1317,  0.0133,  ..., -0.0035,  0.2417, -0.0083],
        [ 0.0381,  0.0514, -0.0953,  ..., -0.0256, -0.0476,  0.0148],
        [-0.0132, -0.0022, -0.0310,  ..., -0.0156, -0.0222,  0.0303]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 1.8343e-01, -1.8161e-01, -1.1987e-01,  ...,  3.4597e-02,
          2.7134e-04, -2.3517e-02],
        [ 2.9423e-01, -2.9457e-02,  8.6459e-02,  ...,  4.7410e-03,
         -2.9660e-02,  3.1218e-02],
        [ 3.0887e-01, -1.8946e-02, -1.4018e-01,  ..., -3.6122e-02,
          8.3192e-02, -1.7724e-02],
        ...,
        [ 2.1507e-01,  2.5219e-02, -1.3262e-01,  ...,  7.2162e-02,
         -4.2828e-02, -1.0980e-02],
        [ 3.3262e-01,  3.4652e-01, -2.5988e-01,  ..., -5.5430e-03,
         -1.7223e-02, -1.6767e-02],
        [-5.6315e-02,  3.0443e-02, -3.2898e-02,  ..., -1.3126e-02,
         -1.4202e-02, -2.5266e-02]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3666, -0.0114, -0.1307,  ..., -0.1097,  0.1069,  0.0683],
        [ 0.4659, -0.1274, -0.0324,  ...,  0.1115,  0.0782,  0.0531],
        [ 0.3656,  0.0950, -0.0400,  ..., -0.0807, -0.1747,  0.0417],
        ...,
        [-0.2261, -0.2587, -0.0901,  ..., -0.0589,  0.1213,  0.0794],
        [ 0.0505,  0.3046, -0.0092,  ...,  0.5319,  0.2150, -0.1504],
        [-0.1112,  0.3030,  0.1400,  ...,  0.0249, -0.0871,  0.0010]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2308])
shifts shape: torch.Size([2308, 3])
sender shape: torch.Size([2308])
receiver shape: torch.Size([2308])
Edge attributes shape: torch.Size([2308, 9])
Edge attributes tensor([[ 1.0000,  1.2161,  0.9841,  ..., -0.0352, -0.9444, -0.5981],
        [ 1.0000, -0.2202,  1.7159,  ...,  2.1739, -0.1871, -0.0267],
        [ 1.0000,  1.4341, -0.7202,  ..., -0.5382,  0.6059, -1.0534],
        ...,
        [ 1.0000,  0.2848,  1.2079,  ...,  0.5132,  1.8841,  0.8899],
        [ 1.0000,  0.8985,  1.2330,  ...,  0.5816,  1.3054, -0.0869],
        [ 1.0000,  1.0056,  0.5354,  ..., -0.7976,  0.9017,  0.4461]])
Edge features shape: torch.Size([2308, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0366,  0.1710],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3549, -0.0180,  0.3322],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0416,  0.3169],
        ...,
        [ 0.2221,  0.0104, -0.2216,  ...,  0.0311, -0.2192, -0.0413],
        [ 0.0440, -0.0599,  0.0376,  ...,  0.0586, -0.0304, -0.0172],
        [ 0.1061, -0.0907, -0.0285,  ..., -0.0553,  0.1172, -0.0450]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2308, 96])
Tensor Product Weights tensor([[ 0.0164,  0.1336, -0.0032,  ..., -0.0119,  0.2069, -0.0086],
        [ 0.3342,  0.2548, -0.2232,  ..., -0.1917, -0.0376, -0.0213],
        [ 0.3386,  0.2583, -0.2307,  ..., -0.2062, -0.0443, -0.0193],
        ...,
        [-0.1085,  0.0250,  0.0288,  ...,  0.0510,  0.2285, -0.0033],
        [-0.0135, -0.0020, -0.0298,  ..., -0.0154, -0.0207,  0.0303],
        [ 0.0398,  0.0555, -0.0944,  ..., -0.0258, -0.0418,  0.0137]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1987, -0.1899, -0.1357,  ...,  0.0406, -0.0305,  0.0046],
        [ 0.2896,  0.0592,  0.1106,  ..., -0.0057,  0.0197,  0.0414],
        [ 0.2432, -0.0420, -0.1038,  ..., -0.0383,  0.0684, -0.0452],
        ...,
        [ 0.0567, -0.0193, -0.0916,  ...,  0.0693, -0.0171, -0.0226],
        [ 0.3340,  0.3505, -0.2592,  ..., -0.0084, -0.0169, -0.0174],
        [-0.0532,  0.0383, -0.0317,  ..., -0.0129, -0.0129, -0.0259]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 4.0304e-01, -2.9701e-02, -1.3502e-01,  ..., -1.1338e-01,
          1.0897e-01,  6.3877e-02],
        [ 2.9092e-01,  1.6494e-04,  5.7662e-02,  ...,  1.7499e-01,
          5.6510e-02,  1.6030e-02],
        [ 2.9069e-01,  1.2841e-01, -3.6048e-02,  ..., -5.7094e-02,
         -1.9021e-01,  8.8436e-02],
        ...,
        [-1.2125e-01, -2.8320e-02, -3.1642e-03,  ..., -8.7428e-04,
         -1.0169e-02, -3.8002e-03],
        [ 4.3558e-02,  3.1029e-01, -7.0577e-03,  ...,  5.3788e-01,
          2.0338e-01, -1.3608e-01],
        [-1.1929e-01,  3.1314e-01,  1.3475e-01,  ...,  8.9177e-03,
         -5.2766e-02, -1.7703e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2334])
shifts shape: torch.Size([2334, 3])
sender shape: torch.Size([2334])
receiver shape: torch.Size([2334])
Edge attributes shape: torch.Size([2334, 9])
Edge attributes tensor([[ 1.0000,  1.2184,  0.9834,  ..., -0.0367, -0.9402, -0.6042],
        [ 1.0000, -0.2110,  1.7179,  ...,  2.1814, -0.1467, -0.0259],
        [ 1.0000,  1.4233, -0.7359,  ..., -0.5126,  0.6249, -1.0283],
        ...,
        [ 1.0000,  0.1810,  1.2851,  ...,  0.7285,  1.9030,  0.8281],
        [ 1.0000,  0.8295,  1.2868,  ...,  0.7333,  1.3455, -0.0207],
        [ 1.0000,  0.8684,  0.6266,  ..., -0.6790,  1.1013,  0.7096]])
Edge features shape: torch.Size([2334, 8])
Edge features tensor([[ 0.1694, -0.0632, -0.1459,  ..., -0.1556, -0.0441,  0.1720],
        [ 0.3444,  0.4352,  0.2053,  ..., -0.3642, -0.0327,  0.3228],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3708, -0.0435,  0.3157],
        ...,
        [ 0.2250,  0.0159, -0.2238,  ...,  0.0474, -0.2182, -0.0628],
        [ 0.0459, -0.0617,  0.0371,  ...,  0.0594, -0.0269, -0.0233],
        [ 0.1019, -0.0904, -0.0216,  ..., -0.0425,  0.1133, -0.0581]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2334, 96])
Tensor Product Weights tensor([[ 0.0137,  0.1339, -0.0007,  ..., -0.0109,  0.2124, -0.0086],
        [ 0.3370,  0.2570, -0.2277,  ..., -0.2008, -0.0416, -0.0200],
        [ 0.3390,  0.2586, -0.2313,  ..., -0.2074, -0.0448, -0.0191],
        ...,
        [-0.1144,  0.0129,  0.0269,  ...,  0.0555,  0.2188, -0.0042],
        [-0.0126, -0.0025, -0.0334,  ..., -0.0161, -0.0249,  0.0304],
        [ 0.0367,  0.0483, -0.0957,  ..., -0.0255, -0.0515,  0.0156]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1030, -0.1831, -0.0803,  ...,  0.0315, -0.0106,  0.0269],
        [ 0.2996,  0.0681,  0.1045,  ..., -0.0073,  0.0201,  0.0365],
        [ 0.3127, -0.0137, -0.1463,  ..., -0.0442,  0.0611, -0.0015],
        ...,
        [ 0.0613, -0.0208, -0.0927,  ...,  0.0657, -0.0261, -0.0217],
        [ 0.3347,  0.3656, -0.2622,  ..., -0.0165, -0.0170, -0.0194],
        [-0.0591,  0.0539, -0.0205,  ..., -0.0223, -0.0126, -0.0196]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 2.7948e-01,  4.6744e-02, -1.4653e-01,  ..., -8.6243e-02,
          8.0784e-02,  1.7146e-02],
        [ 2.8885e-01,  5.8997e-03,  6.3645e-02,  ...,  1.7027e-01,
          5.7076e-02,  1.1226e-02],
        [ 3.8519e-01,  8.9990e-02, -5.4096e-02,  ..., -1.1147e-01,
         -1.8382e-01,  2.2912e-02],
        ...,
        [-1.2303e-01, -3.5767e-02, -5.1023e-03,  ...,  3.9250e-04,
         -7.1472e-03, -9.4752e-04],
        [ 1.8265e-02,  3.3221e-01,  3.3120e-03,  ...,  5.4483e-01,
          1.7231e-01, -9.6707e-02],
        [-1.1950e-01,  3.7319e-01,  1.2721e-01,  ...,  8.7777e-03,
         -5.8859e-02, -4.7108e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2268])
shifts shape: torch.Size([2268, 3])
sender shape: torch.Size([2268])
receiver shape: torch.Size([2268])
Edge attributes shape: torch.Size([2268, 9])
Edge attributes tensor([[ 1.0000,  1.2226,  0.9637,  ..., -0.0797, -0.9447, -0.5927],
        [ 1.0000, -0.1363,  1.7266,  ...,  2.2151,  0.0293, -0.0119],
        [ 1.0000,  1.3182, -0.7526,  ..., -0.4848,  0.8105, -0.6725],
        ...,
        [ 1.0000,  0.9303,  1.0560,  ...,  0.1287,  1.3765,  0.0995],
        [ 1.0000,  0.5727,  1.4352,  ...,  1.1850,  1.4496,  0.1834],
        [ 1.0000,  1.0990,  0.8167,  ..., -0.3724,  1.1184, -0.0533]])
Edge features shape: torch.Size([2268, 8])
Edge features tensor([[ 0.1672, -0.0652, -0.1418,  ..., -0.1574, -0.0335,  0.1705],
        [ 0.3439,  0.4321,  0.1992,  ..., -0.3556, -0.0191,  0.3316],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3699, -0.0419,  0.3167],
        ...,
        [ 0.1790, -0.0534, -0.1631,  ..., -0.1417, -0.0903,  0.1686],
        [ 0.1029, -0.0905, -0.0233,  ..., -0.0456,  0.1145, -0.0551],
        [ 0.0449, -0.0608,  0.0373,  ...,  0.0591, -0.0287, -0.0202]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2268, 96])
Tensor Product Weights tensor([[ 0.0175,  0.1335, -0.0043,  ..., -0.0124,  0.2045, -0.0085],
        [ 0.3344,  0.2550, -0.2235,  ..., -0.1924, -0.0379, -0.0212],
        [ 0.3387,  0.2584, -0.2308,  ..., -0.2064, -0.0444, -0.0193],
        ...,
        [-0.0047,  0.1317,  0.0133,  ..., -0.0035,  0.2416, -0.0083],
        [ 0.0375,  0.0501, -0.0955,  ..., -0.0255, -0.0493,  0.0151],
        [-0.0131, -0.0022, -0.0315,  ..., -0.0157, -0.0228,  0.0303]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1895, -0.1840, -0.1237,  ...,  0.0350, -0.0232, -0.0113],
        [ 0.2980, -0.0222,  0.0885,  ...,  0.0015, -0.0316,  0.0297],
        [ 0.3033, -0.0368, -0.1467,  ..., -0.0298,  0.0776, -0.0401],
        ...,
        [ 0.0609, -0.0166, -0.0920,  ..., -0.0427, -0.0206, -0.0414],
        [ 0.3327,  0.3470, -0.2609,  ..., -0.0058, -0.0174, -0.0178],
        [-0.0563,  0.0306, -0.0331,  ..., -0.0139, -0.0144, -0.0255]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3777, -0.0192, -0.1311,  ..., -0.1047,  0.1098,  0.0812],
        [ 0.4581, -0.1201, -0.0243,  ...,  0.1176,  0.0768,  0.0535],
        [ 0.4079,  0.0653, -0.0712,  ..., -0.0723, -0.1756,  0.0637],
        ...,
        [-0.1252, -0.0309, -0.0061,  ..., -0.0044,  0.0007, -0.0078],
        [ 0.0501,  0.3051, -0.0092,  ...,  0.5335,  0.2156, -0.1420],
        [-0.1108,  0.3050,  0.1387,  ...,  0.0259, -0.0856,  0.0014]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2314])
shifts shape: torch.Size([2314, 3])
sender shape: torch.Size([2314])
receiver shape: torch.Size([2314])
Edge attributes shape: torch.Size([2314, 9])
Edge attributes tensor([[ 1.0000,  1.2132,  0.9909,  ..., -0.0202, -0.9454, -0.5976],
        [ 1.0000, -0.2169,  1.7175,  ...,  2.1799, -0.1258, -0.0283],
        [ 1.0000,  1.4243, -0.7277,  ..., -0.5260,  0.6245, -1.0242],
        ...,
        [ 1.0000,  0.2921,  1.2115,  ...,  0.5230,  1.8814,  0.8789],
        [ 1.0000,  0.8990,  1.2436,  ...,  0.6111,  1.2897, -0.1051],
        [ 1.0000,  1.0176,  0.5482,  ..., -0.7821,  0.9129,  0.4058]])
Edge features shape: torch.Size([2314, 8])
Edge features tensor([[ 0.1693, -0.0633, -0.1456,  ..., -0.1557, -0.0435,  0.1719],
        [ 0.3444,  0.4352,  0.2054,  ..., -0.3642, -0.0328,  0.3228],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3709, -0.0436,  0.3156],
        ...,
        [ 0.2225,  0.0113, -0.2220,  ...,  0.0337, -0.2191, -0.0448],
        [ 0.0443, -0.0602,  0.0375,  ...,  0.0588, -0.0298, -0.0182],
        [ 0.1050, -0.0907, -0.0267,  ..., -0.0520,  0.1164, -0.0485]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2314, 96])
Tensor Product Weights tensor([[ 0.0140,  0.1339, -0.0009,  ..., -0.0110,  0.2120, -0.0086],
        [ 0.3371,  0.2570, -0.2278,  ..., -0.2009, -0.0417, -0.0200],
        [ 0.3390,  0.2586, -0.2313,  ..., -0.2074, -0.0449, -0.0191],
        ...,
        [-0.1095,  0.0231,  0.0285,  ...,  0.0517,  0.2270, -0.0034],
        [-0.0134, -0.0021, -0.0304,  ..., -0.0155, -0.0214,  0.0303],
        [ 0.0390,  0.0536, -0.0948,  ..., -0.0257, -0.0445,  0.0142]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 1.0305e-01, -1.8288e-01, -8.0082e-02,  ...,  3.2018e-02,
         -1.0859e-02,  2.7414e-02],
        [ 2.9941e-01,  6.6477e-02,  1.0292e-01,  ..., -7.0151e-03,
          1.9805e-02,  3.6690e-02],
        [ 3.1401e-01, -1.2664e-02, -1.4685e-01,  ..., -4.5197e-02,
          6.0781e-02,  4.2050e-05],
        ...,
        [ 5.8187e-02, -1.8143e-02, -9.1680e-02,  ...,  7.0285e-02,
         -1.9005e-02, -2.1672e-02],
        [ 3.3320e-01,  3.4860e-01, -2.5953e-01,  ..., -8.2182e-03,
         -1.6979e-02, -1.7296e-02],
        [-5.5294e-02,  3.3343e-02, -3.2442e-02,  ..., -1.2264e-02,
         -1.2858e-02, -2.6445e-02]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 2.7883e-01,  4.7162e-02, -1.4621e-01,  ..., -8.6254e-02,
          8.0069e-02,  1.8055e-02],
        [ 2.9127e-01,  5.2658e-03,  6.1788e-02,  ...,  1.7004e-01,
          5.5887e-02,  1.1381e-02],
        [ 3.8511e-01,  9.0042e-02, -5.3473e-02,  ..., -1.1136e-01,
         -1.8364e-01,  2.2284e-02],
        ...,
        [-1.2269e-01, -2.9015e-02, -4.2193e-03,  ..., -2.3517e-04,
         -9.5224e-03, -3.4218e-03],
        [ 4.6326e-02,  3.0800e-01, -9.0421e-03,  ...,  5.3776e-01,
          2.0404e-01, -1.4107e-01],
        [-1.1485e-01,  3.0658e-01,  1.3723e-01,  ...,  7.6319e-03,
         -5.2896e-02, -1.7872e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2264])
shifts shape: torch.Size([2264, 3])
sender shape: torch.Size([2264])
receiver shape: torch.Size([2264])
Edge attributes shape: torch.Size([2264, 9])
Edge attributes tensor([[ 1.0000,  1.2330,  0.9688,  ..., -0.0686, -0.9199, -0.6322],
        [ 1.0000, -0.1462,  1.7258,  ...,  2.2121,  0.0191, -0.0137],
        [ 1.0000,  1.3500, -0.7477,  ..., -0.4929,  0.7591, -0.7773],
        ...,
        [ 1.0000,  0.8170,  1.3034,  ...,  0.7812,  1.3396, -0.0217],
        [ 1.0000,  0.1947,  1.2492,  ...,  0.6266,  1.9093,  0.8803],
        [ 1.0000,  0.9159,  0.6301,  ..., -0.6741,  1.0804,  0.5972]])
Edge features shape: torch.Size([2264, 8])
Edge features tensor([[ 0.1674, -0.0650, -0.1422,  ..., -0.1572, -0.0346,  0.1707],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3550, -0.0182,  0.3321],
        [ 0.3448,  0.4372,  0.2096,  ..., -0.3700, -0.0422,  0.3165],
        ...,
        [ 0.0472, -0.0629,  0.0366,  ...,  0.0598, -0.0242, -0.0275],
        [ 0.2264,  0.0188, -0.2249,  ...,  0.0558, -0.2171, -0.0737],
        [ 0.0977, -0.0899, -0.0151,  ..., -0.0300,  0.1078, -0.0691]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2264, 96])
Tensor Product Weights tensor([[ 0.0171,  0.1335, -0.0040,  ..., -0.0122,  0.2053, -0.0085],
        [ 0.3342,  0.2548, -0.2232,  ..., -0.1918, -0.0376, -0.0213],
        [ 0.3387,  0.2584, -0.2309,  ..., -0.2066, -0.0444, -0.0192],
        ...,
        [-0.0119, -0.0027, -0.0359,  ..., -0.0166, -0.0278,  0.0304],
        [-0.1171,  0.0066,  0.0257,  ...,  0.0578,  0.2135, -0.0048],
        [ 0.0332,  0.0414, -0.0961,  ..., -0.0251, -0.0594,  0.0174]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1840, -0.1816, -0.1196,  ...,  0.0346, -0.0006, -0.0232],
        [ 0.2914, -0.0379,  0.0828,  ...,  0.0055, -0.0271,  0.0326],
        [ 0.3074, -0.0211, -0.1402,  ..., -0.0353,  0.0834, -0.0199],
        ...,
        [ 0.0360, -0.0403, -0.0923,  ..., -0.0309, -0.0050, -0.0715],
        [ 0.3343,  0.3569, -0.2641,  ..., -0.0140, -0.0178, -0.0198],
        [-0.0576,  0.0379, -0.0277,  ..., -0.0195, -0.0137, -0.0221]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3659, -0.0113, -0.1299,  ..., -0.1101,  0.1073,  0.0680],
        [ 0.4806, -0.1389, -0.0422,  ...,  0.1064,  0.0821,  0.0513],
        [ 0.3679,  0.0931, -0.0421,  ..., -0.0802, -0.1750,  0.0436],
        ...,
        [-0.0952, -0.0292,  0.0142,  ...,  0.0229, -0.0021, -0.0063],
        [ 0.0358,  0.3187, -0.0055,  ...,  0.5422,  0.1914, -0.1104],
        [-0.1111,  0.3363,  0.1293,  ...,  0.0112, -0.0580, -0.0261]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2250])
shifts shape: torch.Size([2250, 3])
sender shape: torch.Size([2250])
receiver shape: torch.Size([2250])
Edge attributes shape: torch.Size([2250, 9])
Edge attributes tensor([[ 1.0000,  1.2234,  0.9639,  ..., -0.0792, -0.9430, -0.5954],
        [ 1.0000, -0.1412,  1.7263,  ...,  2.2137,  0.0108, -0.0129],
        [ 1.0000,  1.3274, -0.7526,  ..., -0.4849,  0.7962, -0.7039],
        ...,
        [ 1.0000,  0.2625,  1.2184,  ...,  0.5416,  1.8919,  0.8894],
        [ 1.0000,  0.8767,  1.2523,  ...,  0.6353,  1.3166, -0.0680],
        [ 1.0000,  0.9881,  0.5599,  ..., -0.7675,  0.9453,  0.4736]])
Edge features shape: torch.Size([2250, 8])
Edge features tensor([[ 0.1672, -0.0652, -0.1418,  ..., -0.1574, -0.0335,  0.1705],
        [ 0.3439,  0.4320,  0.1989,  ..., -0.3553, -0.0187,  0.3318],
        [ 0.3448,  0.4371,  0.2094,  ..., -0.3698, -0.0418,  0.3168],
        ...,
        [ 0.2227,  0.0116, -0.2221,  ...,  0.0346, -0.2191, -0.0461],
        [ 0.0444, -0.0603,  0.0375,  ...,  0.0588, -0.0296, -0.0187],
        [ 0.1045, -0.0906, -0.0259,  ..., -0.0505,  0.1160, -0.0501]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2250, 96])
Tensor Product Weights tensor([[ 0.0175,  0.1335, -0.0043,  ..., -0.0124,  0.2045, -0.0085],
        [ 0.3343,  0.2549, -0.2234,  ..., -0.1921, -0.0377, -0.0213],
        [ 0.3387,  0.2583, -0.2307,  ..., -0.2063, -0.0443, -0.0193],
        ...,
        [-0.1098,  0.0224,  0.0284,  ...,  0.0520,  0.2265, -0.0034],
        [-0.0133, -0.0021, -0.0306,  ..., -0.0155, -0.0217,  0.0303],
        [ 0.0387,  0.0528, -0.0950,  ..., -0.0257, -0.0456,  0.0144]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1904, -0.1840, -0.1237,  ...,  0.0350, -0.0235, -0.0104],
        [ 0.2973, -0.0248,  0.0862,  ...,  0.0024, -0.0302,  0.0298],
        [ 0.3026, -0.0382, -0.1471,  ..., -0.0299,  0.0775, -0.0412],
        ...,
        [ 0.0587, -0.0177, -0.0918,  ...,  0.0706, -0.0192, -0.0215],
        [ 0.3330,  0.3483, -0.2609,  ..., -0.0087, -0.0174, -0.0186],
        [-0.0551,  0.0342, -0.0326,  ..., -0.0134, -0.0134, -0.0268]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 3.7702e-01, -1.9195e-02, -1.2980e-01,  ..., -1.0528e-01,
          1.0988e-01,  8.1824e-02],
        [ 4.6212e-01, -1.2326e-01, -2.7100e-02,  ...,  1.1412e-01,
          7.8102e-02,  5.3621e-02],
        [ 4.1008e-01,  6.3801e-02, -7.2803e-02,  ..., -7.1877e-02,
         -1.7571e-01,  6.4715e-02],
        ...,
        [-1.2316e-01, -2.9335e-02, -4.5816e-03,  ..., -1.2261e-04,
         -9.6633e-03, -3.3105e-03],
        [ 4.7051e-02,  3.0763e-01, -9.7153e-03,  ...,  5.3907e-01,
          2.0663e-01, -1.3058e-01],
        [-1.1496e-01,  3.0973e-01,  1.3493e-01,  ...,  9.9680e-03,
         -5.1289e-02, -1.6718e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2300])
shifts shape: torch.Size([2300, 3])
sender shape: torch.Size([2300])
receiver shape: torch.Size([2300])
Edge attributes shape: torch.Size([2300, 9])
Edge attributes tensor([[ 1.0000,  1.2158,  0.9841,  ..., -0.0352, -0.9452, -0.5968],
        [ 1.0000, -0.2207,  1.7158,  ...,  2.1735, -0.1892, -0.0267],
        [ 1.0000,  1.4342, -0.7200,  ..., -0.5384,  0.6056, -1.0538],
        ...,
        [ 1.0000,  0.2864,  1.2011,  ...,  0.4948,  1.8834,  0.8994],
        [ 1.0000,  0.8958,  1.2356,  ...,  0.5888,  1.3066, -0.0848],
        [ 1.0000,  1.0098,  0.5360,  ..., -0.7968,  0.9004,  0.4346]])
Edge features shape: torch.Size([2300, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1429,  ..., -0.1569, -0.0364,  0.1710],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3549, -0.0180,  0.3322],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0416,  0.3169],
        ...,
        [ 0.2226,  0.0115, -0.2221,  ...,  0.0342, -0.2191, -0.0455],
        [ 0.0443, -0.0602,  0.0375,  ...,  0.0588, -0.0298, -0.0184],
        [ 0.1049, -0.0907, -0.0265,  ..., -0.0516,  0.1163, -0.0489]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2300, 96])
Tensor Product Weights tensor([[ 0.0164,  0.1336, -0.0033,  ..., -0.0120,  0.2067, -0.0085],
        [ 0.3342,  0.2548, -0.2232,  ..., -0.1917, -0.0376, -0.0213],
        [ 0.3386,  0.2583, -0.2307,  ..., -0.2062, -0.0443, -0.0193],
        ...,
        [-0.1097,  0.0227,  0.0285,  ...,  0.0519,  0.2267, -0.0034],
        [-0.0134, -0.0021, -0.0305,  ..., -0.0155, -0.0215,  0.0303],
        [ 0.0389,  0.0534, -0.0949,  ..., -0.0257, -0.0447,  0.0143]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1987, -0.1898, -0.1356,  ...,  0.0407, -0.0305,  0.0045],
        [ 0.2904,  0.0591,  0.1103,  ..., -0.0058,  0.0199,  0.0416],
        [ 0.2432, -0.0420, -0.1038,  ..., -0.0383,  0.0683, -0.0452],
        ...,
        [ 0.0585, -0.0178, -0.0917,  ...,  0.0704, -0.0176, -0.0219],
        [ 0.3337,  0.3497, -0.2594,  ..., -0.0083, -0.0169, -0.0175],
        [-0.0543,  0.0355, -0.0321,  ..., -0.0127, -0.0130, -0.0259]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 4.0250e-01, -2.9328e-02, -1.3477e-01,  ..., -1.1365e-01,
          1.0910e-01,  6.3849e-02],
        [ 2.9003e-01,  1.3032e-03,  5.8245e-02,  ...,  1.7202e-01,
          5.7265e-02,  1.7574e-02],
        [ 2.9085e-01,  1.2837e-01, -3.6171e-02,  ..., -5.7054e-02,
         -1.9028e-01,  8.8461e-02],
        ...,
        [-1.2306e-01, -2.9121e-02, -4.4708e-03,  ..., -1.1083e-04,
         -9.4136e-03, -3.4574e-03],
        [ 4.5108e-02,  3.0919e-01, -8.0241e-03,  ...,  5.3814e-01,
          2.0360e-01, -1.3660e-01],
        [-1.1687e-01,  3.1016e-01,  1.3585e-01,  ...,  8.8207e-03,
         -5.3034e-02, -1.7748e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2318])
shifts shape: torch.Size([2318, 3])
sender shape: torch.Size([2318])
receiver shape: torch.Size([2318])
Edge attributes shape: torch.Size([2318, 9])
Edge attributes tensor([[ 1.0000,  1.2183,  0.9837,  ..., -0.0362, -0.9402, -0.6042],
        [ 1.0000, -0.2120,  1.7177,  ...,  2.1808, -0.1494, -0.0261],
        [ 1.0000,  1.4245, -0.7352,  ..., -0.5137,  0.6226, -1.0320],
        ...,
        [ 1.0000,  0.1889,  1.2555,  ...,  0.6443,  1.9096,  0.8729],
        [ 1.0000,  0.8233,  1.2901,  ...,  0.7427,  1.3510, -0.0128],
        [ 1.0000,  0.8956,  0.6181,  ..., -0.6909,  1.0753,  0.6543]])
Edge features shape: torch.Size([2318, 8])
Edge features tensor([[ 0.1694, -0.0632, -0.1458,  ..., -0.1556, -0.0438,  0.1720],
        [ 0.3444,  0.4352,  0.2054,  ..., -0.3643, -0.0329,  0.3227],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3708, -0.0435,  0.3156],
        ...,
        [ 0.2259,  0.0178, -0.2245,  ...,  0.0529, -0.2176, -0.0700],
        [ 0.0467, -0.0625,  0.0368,  ...,  0.0596, -0.0252, -0.0259],
        [ 0.0993, -0.0901, -0.0175,  ..., -0.0346,  0.1101, -0.0653]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2318, 96])
Tensor Product Weights tensor([[ 0.0138,  0.1339, -0.0008,  ..., -0.0109,  0.2123, -0.0086],
        [ 0.3371,  0.2570, -0.2278,  ..., -0.2009, -0.0417, -0.0200],
        [ 0.3390,  0.2586, -0.2313,  ..., -0.2074, -0.0448, -0.0191],
        ...,
        [-0.1162,  0.0088,  0.0261,  ...,  0.0570,  0.2153, -0.0046],
        [-0.0122, -0.0026, -0.0349,  ..., -0.0164, -0.0267,  0.0304],
        [ 0.0345,  0.0440, -0.0961,  ..., -0.0252, -0.0567,  0.0167]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1030, -0.1829, -0.0801,  ...,  0.0316, -0.0108,  0.0268],
        [ 0.3004,  0.0676,  0.1041,  ..., -0.0073,  0.0205,  0.0367],
        [ 0.3126, -0.0139, -0.1465,  ..., -0.0443,  0.0612, -0.0016],
        ...,
        [ 0.0652, -0.0177, -0.0930,  ...,  0.0696, -0.0265, -0.0198],
        [ 0.3345,  0.3614, -0.2632,  ..., -0.0151, -0.0174, -0.0197],
        [-0.0582,  0.0450, -0.0245,  ..., -0.0207, -0.0133, -0.0210]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 2.7861e-01,  4.7104e-02, -1.4599e-01,  ..., -8.6409e-02,
          8.0871e-02,  1.7242e-02],
        [ 2.8888e-01,  6.4535e-03,  6.3728e-02,  ...,  1.6758e-01,
          5.7639e-02,  1.2795e-02],
        [ 3.8584e-01,  8.9541e-02, -5.4595e-02,  ..., -1.1144e-01,
         -1.8407e-01,  2.3166e-02],
        ...,
        [-1.2689e-01, -3.7674e-02, -7.8712e-03,  ...,  2.0912e-03,
         -5.3189e-03, -2.3519e-04],
        [ 2.6885e-02,  3.2562e-01, -1.1618e-03,  ...,  5.4393e-01,
          1.8219e-01, -1.0296e-01],
        [-1.1495e-01,  3.5304e-01,  1.2807e-01,  ...,  9.7169e-03,
         -5.8373e-02, -3.5797e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2304])
shifts shape: torch.Size([2304, 3])
sender shape: torch.Size([2304])
receiver shape: torch.Size([2304])
Edge attributes shape: torch.Size([2304, 9])
Edge attributes tensor([[ 1.0000,  1.2126,  0.9900,  ..., -0.0223, -0.9475, -0.5944],
        [ 1.0000, -0.2174,  1.7173,  ...,  2.1792, -0.1324, -0.0282],
        [ 1.0000,  1.4236, -0.7286,  ..., -0.5246,  0.6257, -1.0226],
        ...,
        [ 1.0000,  0.2807,  1.2233,  ...,  0.5552,  1.8851,  0.8687],
        [ 1.0000,  0.8966,  1.2416,  ...,  0.6054,  1.2969, -0.0963],
        [ 1.0000,  1.0006,  0.5500,  ..., -0.7799,  0.9247,  0.4487]])
Edge features shape: torch.Size([2304, 8])
Edge features tensor([[ 0.1693, -0.0633, -0.1456,  ..., -0.1557, -0.0434,  0.1719],
        [ 0.3444,  0.4352,  0.2053,  ..., -0.3642, -0.0328,  0.3228],
        [ 0.3449,  0.4376,  0.2103,  ..., -0.3709, -0.0437,  0.3155],
        ...,
        [ 0.2219,  0.0101, -0.2215,  ...,  0.0302, -0.2192, -0.0402],
        [ 0.0439, -0.0598,  0.0376,  ...,  0.0586, -0.0306, -0.0169],
        [ 0.1065, -0.0907, -0.0291,  ..., -0.0565,  0.1175, -0.0436]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2304, 96])
Tensor Product Weights tensor([[ 0.0140,  0.1339, -0.0010,  ..., -0.0110,  0.2119, -0.0086],
        [ 0.3370,  0.2570, -0.2278,  ..., -0.2008, -0.0417, -0.0200],
        [ 0.3390,  0.2586, -0.2314,  ..., -0.2075, -0.0449, -0.0191],
        ...,
        [-0.1082,  0.0256,  0.0289,  ...,  0.0507,  0.2290, -0.0032],
        [-0.0136, -0.0020, -0.0296,  ..., -0.0153, -0.0205,  0.0303],
        [ 0.0401,  0.0562, -0.0942,  ..., -0.0258, -0.0408,  0.0136]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 1.0334e-01, -1.8280e-01, -8.0013e-02,  ...,  3.2107e-02,
         -1.1122e-02,  2.7391e-02],
        [ 3.0050e-01,  6.6313e-02,  1.0240e-01,  ..., -7.0285e-03,
          2.0001e-02,  3.6920e-02],
        [ 3.1376e-01, -1.3171e-02, -1.4700e-01,  ..., -4.5068e-02,
          6.1002e-02, -1.3798e-04],
        ...,
        [ 5.6156e-02, -1.9721e-02, -9.1578e-02,  ...,  6.8700e-02,
         -1.8415e-02, -2.2614e-02],
        [ 3.3383e-01,  3.5072e-01, -2.5980e-01,  ..., -8.8049e-03,
         -1.6905e-02, -1.7466e-02],
        [-5.3195e-02,  3.8378e-02, -3.1722e-02,  ..., -1.3033e-02,
         -1.2907e-02, -2.6181e-02]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.2784,  0.0472, -0.1457,  ..., -0.0866,  0.0803,  0.0181],
        [ 0.2910,  0.0057,  0.0622,  ...,  0.1667,  0.0567,  0.0129],
        [ 0.3861,  0.0893, -0.0541,  ..., -0.1112, -0.1838,  0.0228],
        ...,
        [-0.1207, -0.0281, -0.0028,  ..., -0.0011, -0.0104, -0.0038],
        [ 0.0429,  0.3107, -0.0072,  ...,  0.5381,  0.2028, -0.1365],
        [-0.1188,  0.3133,  0.1342,  ...,  0.0083, -0.0529, -0.0172]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2322])
shifts shape: torch.Size([2322, 3])
sender shape: torch.Size([2322])
receiver shape: torch.Size([2322])
Edge attributes shape: torch.Size([2322, 9])
Edge attributes tensor([[ 1.0000,  1.2070,  0.9953,  ..., -0.0105, -0.9552, -0.5836],
        [ 1.0000, -0.2327,  1.7148,  ...,  2.1697, -0.1605, -0.0315],
        [ 1.0000,  1.4322, -0.7094,  ..., -0.5554,  0.6113, -1.0364],
        ...,
        [ 1.0000,  0.3001,  1.2069,  ...,  0.5105,  1.8784,  0.8800],
        [ 1.0000,  0.9086,  1.2322,  ...,  0.5795,  1.2885, -0.1094],
        [ 1.0000,  1.0232,  0.5340,  ..., -0.7992,  0.8904,  0.4008]])
Edge features shape: torch.Size([2322, 8])
Edge features tensor([[ 0.1681, -0.0643, -0.1435,  ..., -0.1567, -0.0378,  0.1712],
        [ 0.3438,  0.4317,  0.1983,  ..., -0.3543, -0.0172,  0.3328],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3698, -0.0419,  0.3167],
        ...,
        [ 0.2219,  0.0100, -0.2214,  ...,  0.0299, -0.2192, -0.0398],
        [ 0.0438, -0.0598,  0.0376,  ...,  0.0586, -0.0306, -0.0168],
        [ 0.1064, -0.0907, -0.0290,  ..., -0.0562,  0.1174, -0.0440]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2322, 96])
Tensor Product Weights tensor([[ 0.0160,  0.1337, -0.0028,  ..., -0.0118,  0.2078, -0.0086],
        [ 0.3340,  0.2547, -0.2229,  ..., -0.1912, -0.0373, -0.0214],
        [ 0.3387,  0.2584, -0.2308,  ..., -0.2064, -0.0443, -0.0193],
        ...,
        [-0.1080,  0.0259,  0.0290,  ...,  0.0507,  0.2292, -0.0032],
        [-0.0136, -0.0019, -0.0295,  ..., -0.0153, -0.0204,  0.0303],
        [ 0.0400,  0.0560, -0.0943,  ..., -0.0258, -0.0410,  0.0136]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1929, -0.1889, -0.1324,  ...,  0.0445, -0.0133, -0.0065],
        [ 0.2886,  0.0594,  0.1105,  ..., -0.0049,  0.0194,  0.0411],
        [ 0.2393, -0.0419, -0.1012,  ..., -0.0391,  0.0852, -0.0268],
        ...,
        [ 0.2162,  0.0258, -0.1330,  ...,  0.0173, -0.0825,  0.0230],
        [ 0.3332,  0.3479, -0.2583,  ..., -0.0076, -0.0167, -0.0170],
        [-0.0551,  0.0344, -0.0321,  ..., -0.0115, -0.0125, -0.0268]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.3922, -0.0233, -0.1339,  ..., -0.1101,  0.1042,  0.0601],
        [ 0.2888,  0.0010,  0.0573,  ...,  0.1753,  0.0560,  0.0166],
        [ 0.2829,  0.1362, -0.0356,  ..., -0.0562, -0.1944,  0.0851],
        ...,
        [-0.2269, -0.2596, -0.0904,  ...,  0.0066, -0.0142,  0.1577],
        [ 0.0467,  0.3074, -0.0087,  ...,  0.5376,  0.2045, -0.1420],
        [-0.1166,  0.3063,  0.1382,  ...,  0.0070, -0.0521, -0.0189]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2338])
shifts shape: torch.Size([2338, 3])
sender shape: torch.Size([2338])
receiver shape: torch.Size([2338])
Edge attributes shape: torch.Size([2338, 9])
Edge attributes tensor([[ 1.0000,  1.2124,  0.9889,  ..., -0.0246, -0.9487, -0.5924],
        [ 1.0000, -0.2289,  1.7148,  ...,  2.1698, -0.1841, -0.0294],
        [ 1.0000,  1.4337, -0.7160,  ..., -0.5449,  0.6075, -1.0479],
        ...,
        [ 1.0000,  0.2035,  1.2256,  ...,  0.5614,  1.9095,  0.9134],
        [ 1.0000,  0.8258,  1.2817,  ...,  0.7187,  1.3598, -0.0042],
        [ 1.0000,  0.9242,  0.5970,  ..., -0.7196,  1.0309,  0.6038]])
Edge features shape: torch.Size([2338, 8])
Edge features tensor([[ 0.1682, -0.0643, -0.1436,  ..., -0.1566, -0.0382,  0.1713],
        [ 0.3438,  0.4317,  0.1982,  ..., -0.3542, -0.0170,  0.3329],
        [ 0.3448,  0.4372,  0.2094,  ..., -0.3698, -0.0418,  0.3168],
        ...,
        [ 0.2260,  0.0179, -0.2246,  ...,  0.0532, -0.2175, -0.0705],
        [ 0.0468, -0.0625,  0.0368,  ...,  0.0597, -0.0251, -0.0262],
        [ 0.0989, -0.0900, -0.0169,  ..., -0.0333,  0.1095, -0.0664]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2338, 96])
Tensor Product Weights tensor([[ 0.0158,  0.1337, -0.0027,  ..., -0.0117,  0.2081, -0.0086],
        [ 0.3339,  0.2546, -0.2228,  ..., -0.1911, -0.0373, -0.0214],
        [ 0.3387,  0.2584, -0.2307,  ..., -0.2064, -0.0443, -0.0193],
        ...,
        [-0.1163,  0.0085,  0.0261,  ...,  0.0571,  0.2151, -0.0046],
        [-0.0121, -0.0027, -0.0351,  ..., -0.0164, -0.0269,  0.0304],
        [ 0.0342,  0.0433, -0.0961,  ..., -0.0252, -0.0575,  0.0169]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1926, -0.1892, -0.1323,  ...,  0.0440, -0.0135, -0.0071],
        [ 0.2892,  0.0599,  0.1114,  ..., -0.0052,  0.0199,  0.0406],
        [ 0.2405, -0.0415, -0.1014,  ..., -0.0381,  0.0848, -0.0282],
        ...,
        [ 0.2114,  0.0284, -0.1293,  ...,  0.0033, -0.0850,  0.0315],
        [ 0.3343,  0.3569, -0.2632,  ..., -0.0129, -0.0175, -0.0198],
        [-0.0569,  0.0380, -0.0286,  ..., -0.0183, -0.0138, -0.0232]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 3.9227e-01, -2.3434e-02, -1.3411e-01,  ..., -1.1007e-01,
          1.0466e-01,  5.8967e-02],
        [ 2.8940e-01,  3.0745e-04,  5.7798e-02,  ...,  1.7588e-01,
          5.6521e-02,  1.6441e-02],
        [ 2.8411e-01,  1.3534e-01, -3.5439e-02,  ..., -5.7484e-02,
         -1.9385e-01,  8.5332e-02],
        ...,
        [-2.2790e-01, -2.4219e-01, -8.9618e-02,  ..., -6.6892e-04,
         -1.9446e-03,  1.4703e-01],
        [ 3.5479e-02,  3.1878e-01, -5.3153e-03,  ...,  5.4229e-01,
          1.9378e-01, -1.0959e-01],
        [-1.1281e-01,  3.3300e-01,  1.3023e-01,  ...,  1.0304e-02,
         -5.7499e-02, -2.4571e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2316])
shifts shape: torch.Size([2316, 3])
sender shape: torch.Size([2316])
receiver shape: torch.Size([2316])
Edge attributes shape: torch.Size([2316, 9])
Edge attributes tensor([[ 1.0000,  1.2145,  0.9846,  ..., -0.0341, -0.9475, -0.5934],
        [ 1.0000, -0.2164,  1.7169,  ...,  2.1778, -0.1610, -0.0268],
        [ 1.0000,  1.4257, -0.7339,  ..., -0.5159,  0.6205, -1.0351],
        ...,
        [ 1.0000,  0.8293,  1.2871,  ...,  0.7341,  1.3454, -0.0208],
        [ 1.0000,  0.1823,  1.2820,  ...,  0.7195,  1.9039,  0.8327],
        [ 1.0000,  0.8712,  0.6257,  ..., -0.6803,  1.0986,  0.7038]])
Edge features shape: torch.Size([2316, 8])
Edge features tensor([[ 0.1694, -0.0632, -0.1458,  ..., -0.1556, -0.0439,  0.1720],
        [ 0.3444,  0.4350,  0.2051,  ..., -0.3639, -0.0322,  0.3232],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3708, -0.0435,  0.3157],
        ...,
        [ 0.0460, -0.0618,  0.0370,  ...,  0.0595, -0.0266, -0.0237],
        [ 0.2251,  0.0162, -0.2239,  ...,  0.0483, -0.2181, -0.0639],
        [ 0.1015, -0.0904, -0.0210,  ..., -0.0413,  0.1129, -0.0593]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2316, 96])
Tensor Product Weights tensor([[ 0.0138,  0.1339, -0.0008,  ..., -0.0109,  0.2123, -0.0086],
        [ 0.3369,  0.2569, -0.2276,  ..., -0.2005, -0.0415, -0.0201],
        [ 0.3390,  0.2586, -0.2313,  ..., -0.2074, -0.0448, -0.0191],
        ...,
        [-0.0125, -0.0025, -0.0336,  ..., -0.0162, -0.0252,  0.0304],
        [-0.1146,  0.0122,  0.0268,  ...,  0.0557,  0.2183, -0.0043],
        [ 0.0363,  0.0477, -0.0958,  ..., -0.0254, -0.0524,  0.0158]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1032, -0.1826, -0.0799,  ...,  0.0320, -0.0115,  0.0274],
        [ 0.3044,  0.0610,  0.0976,  ..., -0.0057,  0.0200,  0.0367],
        [ 0.3119, -0.0145, -0.1465,  ..., -0.0444,  0.0614, -0.0018],
        ...,
        [ 0.0387, -0.0377, -0.0923,  ..., -0.0312, -0.0067, -0.0681],
        [ 0.3347,  0.3654, -0.2623,  ..., -0.0164, -0.0171, -0.0194],
        [-0.0592,  0.0531, -0.0207,  ..., -0.0222, -0.0126, -0.0197]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.2775,  0.0477, -0.1451,  ..., -0.0872,  0.0810,  0.0177],
        [ 0.3109, -0.0108,  0.0548,  ...,  0.1644,  0.0585,  0.0128],
        [ 0.3865,  0.0890, -0.0553,  ..., -0.1104, -0.1843,  0.0243],
        ...,
        [-0.0983, -0.0291,  0.0124,  ...,  0.0209, -0.0038, -0.0050],
        [ 0.0188,  0.3319,  0.0030,  ...,  0.5449,  0.1728, -0.0974],
        [-0.1189,  0.3719,  0.1274,  ...,  0.0087, -0.0589, -0.0466]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2306])
shifts shape: torch.Size([2306, 3])
sender shape: torch.Size([2306])
receiver shape: torch.Size([2306])
Edge attributes shape: torch.Size([2306, 9])
Edge attributes tensor([[ 1.0000,  1.2138,  0.9844,  ..., -0.0347, -0.9490, -0.5911],
        [ 1.0000, -0.2203,  1.7159,  ...,  2.1740, -0.1852, -0.0268],
        [ 1.0000,  1.4321, -0.7200,  ..., -0.5385,  0.6101, -1.0457],
        ...,
        [ 1.0000,  0.1265,  0.9551,  ..., -0.0981,  1.7748,  1.3270],
        [ 1.0000,  0.3925,  1.0152,  ...,  0.0343,  1.7659,  1.0723],
        [ 1.0000,  1.1025,  1.3177,  ...,  0.8233,  0.3731, -0.7536]])
Edge features shape: torch.Size([2306, 8])
Edge features tensor([[ 1.6782e-01, -6.4608e-02, -1.4295e-01,  ..., -1.5694e-01,
         -3.6467e-02,  1.7098e-01],
        [ 3.4385e-01,  4.3191e-01,  1.9865e-01,  ..., -3.5489e-01,
         -1.8025e-02,  3.3225e-01],
        [ 3.4480e-01,  4.3713e-01,  2.0940e-01,  ..., -3.6972e-01,
         -4.1704e-02,  3.1685e-01],
        ...,
        [ 7.6308e-02, -8.3008e-02,  1.3989e-02,  ...,  2.7646e-02,
          5.7659e-02, -9.0368e-02],
        [ 5.9681e-03, -1.0757e-02,  1.3419e-02,  ..., -6.0091e-03,
          4.5433e-05,  5.9272e-03],
        [ 1.1531e-01, -9.0481e-02, -4.4309e-02,  ..., -8.2898e-02,
          1.1902e-01, -1.0496e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2306, 96])
Tensor Product Weights tensor([[ 0.0164,  0.1336, -0.0033,  ..., -0.0120,  0.2068, -0.0085],
        [ 0.3341,  0.2548, -0.2232,  ..., -0.1917, -0.0376, -0.0213],
        [ 0.3387,  0.2583, -0.2307,  ..., -0.2063, -0.0443, -0.0193],
        ...,
        [ 0.0124,  0.0106, -0.0833,  ..., -0.0228, -0.0724,  0.0252],
        [-0.0071,  0.0024,  0.0014,  ...,  0.0042,  0.0056,  0.0073],
        [ 0.0452,  0.0712, -0.0882,  ..., -0.0262, -0.0146,  0.0095]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1989, -0.1899, -0.1359,  ...,  0.0406, -0.0306,  0.0047],
        [ 0.2894,  0.0592,  0.1099,  ..., -0.0056,  0.0194,  0.0415],
        [ 0.2429, -0.0421, -0.1038,  ..., -0.0381,  0.0685, -0.0448],
        ...,
        [ 0.0484, -0.0324, -0.0923,  ..., -0.0367,  0.0085,  0.0366],
        [ 0.3230,  0.3141, -0.1642,  ...,  0.0362,  0.0185,  0.0440],
        [-0.0774,  0.0130,  0.0591,  ...,  0.0197,  0.0140,  0.0428]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.4031, -0.0297, -0.1349,  ..., -0.1134,  0.1092,  0.0639],
        [ 0.2897,  0.0006,  0.0580,  ...,  0.1728,  0.0570,  0.0162],
        [ 0.2906,  0.1285, -0.0361,  ..., -0.0568, -0.1901,  0.0886],
        ...,
        [-0.1094, -0.0320,  0.0041,  ..., -0.0108, -0.0026, -0.0081],
        [ 0.0720,  0.2683,  0.0058,  ..., -0.0183,  0.1943,  0.4869],
        [-0.1323,  0.3883,  0.1764,  ..., -0.1269, -0.0596,  0.0410]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2302])
shifts shape: torch.Size([2302, 3])
sender shape: torch.Size([2302])
receiver shape: torch.Size([2302])
Edge attributes shape: torch.Size([2302, 9])
Edge attributes tensor([[ 1.0000,  1.2130,  0.9848,  ..., -0.0337, -0.9505, -0.5889],
        [ 1.0000, -0.2208,  1.7159,  ...,  2.1739, -0.1838, -0.0270],
        [ 1.0000,  1.4314, -0.7196,  ..., -0.5391,  0.6114, -1.0430],
        ...,
        [ 1.0000,  0.1287,  0.9561,  ..., -0.0960,  1.7756,  1.3251],
        [ 1.0000,  0.3885,  1.0144,  ...,  0.0325,  1.7668,  1.0774],
        [ 1.0000,  1.1089,  1.3139,  ...,  0.8122,  0.3556, -0.7653]])
Edge features shape: torch.Size([2302, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0366,  0.1710],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3549, -0.0181,  0.3322],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0415,  0.3170],
        ...,
        [ 0.0767, -0.0832,  0.0136,  ...,  0.0269,  0.0587, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0052],
        [ 0.1173, -0.0903, -0.0479,  ..., -0.0888,  0.1181, -0.0021]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2302, 96])
Tensor Product Weights tensor([[ 0.0164,  0.1336, -0.0033,  ..., -0.0119,  0.2069, -0.0086],
        [ 0.3342,  0.2548, -0.2232,  ..., -0.1917, -0.0376, -0.0213],
        [ 0.3386,  0.2583, -0.2306,  ..., -0.2062, -0.0442, -0.0193],
        ...,
        [ 0.0127,  0.0110, -0.0837,  ..., -0.0228, -0.0726,  0.0251],
        [-0.0068,  0.0022,  0.0012,  ...,  0.0042,  0.0052,  0.0069],
        [ 0.0461,  0.0746, -0.0863,  ..., -0.0262, -0.0076,  0.0085]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.1988, -0.1898, -0.1360,  ...,  0.0407, -0.0306,  0.0048],
        [ 0.2887,  0.0596,  0.1102,  ..., -0.0056,  0.0194,  0.0415],
        [ 0.2428, -0.0422, -0.1037,  ..., -0.0382,  0.0686, -0.0448],
        ...,
        [ 0.0478, -0.0279, -0.0916,  ..., -0.0350,  0.0108,  0.0365],
        [ 0.3239,  0.3153, -0.1636,  ...,  0.0362,  0.0184,  0.0437],
        [-0.0753,  0.0184,  0.0600,  ...,  0.0200,  0.0145,  0.0429]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.4031, -0.0297, -0.1349,  ..., -0.1133,  0.1092,  0.0641],
        [ 0.2879,  0.0021,  0.0585,  ...,  0.1727,  0.0571,  0.0162],
        [ 0.2905,  0.1286, -0.0360,  ..., -0.0565, -0.1901,  0.0886],
        ...,
        [-0.1116, -0.0262,  0.0036,  ..., -0.0121, -0.0027, -0.0080],
        [ 0.0699,  0.2697,  0.0075,  ..., -0.0174,  0.1942,  0.4861],
        [-0.1366,  0.3939,  0.1745,  ..., -0.1262, -0.0580,  0.0419]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2300])
shifts shape: torch.Size([2300, 3])
sender shape: torch.Size([2300])
receiver shape: torch.Size([2300])
Edge attributes shape: torch.Size([2300, 9])
Edge attributes tensor([[ 1.0000,  1.2093,  0.9909,  ..., -0.0203, -0.9537, -0.5851],
        [ 1.0000, -0.2212,  1.7167,  ...,  2.1767, -0.1427, -0.0289],
        [ 1.0000,  1.4247, -0.7271,  ..., -0.5270,  0.6238, -1.0251],
        ...,
        [ 1.0000,  0.8919,  1.2469,  ...,  0.6203,  1.2975, -0.0941],
        [ 1.0000,  0.2829,  1.2136,  ...,  0.5286,  1.8848,  0.8825],
        [ 1.0000,  1.0078,  0.5526,  ..., -0.7766,  0.9245,  0.4283]])
Edge features shape: torch.Size([2300, 8])
Edge features tensor([[ 0.1692, -0.0633, -0.1455,  ..., -0.1557, -0.0432,  0.1719],
        [ 0.3444,  0.4351,  0.2052,  ..., -0.3641, -0.0325,  0.3230],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3708, -0.0434,  0.3157],
        ...,
        [ 0.0445, -0.0603,  0.0375,  ...,  0.0589, -0.0295, -0.0187],
        [ 0.2228,  0.0117, -0.2222,  ...,  0.0351, -0.2191, -0.0466],
        [ 0.1045, -0.0906, -0.0259,  ..., -0.0504,  0.1160, -0.0502]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2300, 96])
Tensor Product Weights tensor([[ 0.0141,  0.1339, -0.0010,  ..., -0.0110,  0.2118, -0.0086],
        [ 0.3370,  0.2570, -0.2277,  ..., -0.2007, -0.0416, -0.0200],
        [ 0.3390,  0.2586, -0.2313,  ..., -0.2073, -0.0448, -0.0191],
        ...,
        [-0.0133, -0.0021, -0.0307,  ..., -0.0156, -0.0218,  0.0303],
        [-0.1100,  0.0220,  0.0284,  ...,  0.0521,  0.2262, -0.0035],
        [ 0.0387,  0.0528, -0.0950,  ..., -0.0257, -0.0457,  0.0144]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 1.0346e-01, -1.8248e-01, -7.9815e-02,  ...,  3.2489e-02,
         -1.1895e-02,  2.7942e-02],
        [ 3.0461e-01,  5.9541e-02,  9.6103e-02,  ..., -5.5817e-03,
          1.9513e-02,  3.6800e-02],
        [ 3.1299e-01, -1.3907e-02, -1.4706e-01,  ..., -4.5171e-02,
          6.1310e-02, -3.0513e-04],
        ...,
        [ 4.2608e-02, -3.2636e-02, -9.1332e-02,  ..., -3.0701e-02,
         -4.0046e-03, -7.6556e-02],
        [ 3.3349e-01,  3.4948e-01, -2.6013e-01,  ..., -8.6551e-03,
         -1.7031e-02, -1.7593e-02],
        [-5.4831e-02,  3.4155e-02, -3.2368e-02,  ..., -1.2828e-02,
         -1.3006e-02, -2.6221e-02]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.2773,  0.0477, -0.1448,  ..., -0.0872,  0.0804,  0.0186],
        [ 0.3135, -0.0115,  0.0534,  ...,  0.1641,  0.0572,  0.0131],
        [ 0.3872,  0.0885, -0.0551,  ..., -0.1101, -0.1841,  0.0240],
        ...,
        [-0.1037, -0.0264,  0.0090,  ...,  0.0192, -0.0038, -0.0085],
        [ 0.0454,  0.3090, -0.0087,  ...,  0.5382,  0.2035, -0.1379],
        [-0.1151,  0.3086,  0.1359,  ...,  0.0083, -0.0534, -0.0172]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2236])
shifts shape: torch.Size([2236, 3])
sender shape: torch.Size([2236])
receiver shape: torch.Size([2236])
Edge attributes shape: torch.Size([2236, 9])
Edge attributes tensor([[ 1.0000,  1.2245,  0.9657,  ..., -0.0754, -0.9396, -0.6012],
        [ 1.0000, -0.1647,  1.7239,  ...,  2.2046, -0.0705, -0.0169],
        [ 1.0000,  1.3629, -0.7494,  ..., -0.4901,  0.7373, -0.8242],
        ...,
        [ 1.0000,  0.1267,  0.9520,  ..., -0.1048,  1.7715,  1.3308],
        [ 1.0000,  0.3853,  1.0137,  ...,  0.0307,  1.7674,  1.0816],
        [ 1.0000,  1.0962,  1.3241,  ...,  0.8420,  0.3639, -0.7464]])
Edge features shape: torch.Size([2236, 8])
Edge features tensor([[ 0.1672, -0.0652, -0.1418,  ..., -0.1574, -0.0336,  0.1705],
        [ 0.3439,  0.4320,  0.1987,  ..., -0.3550, -0.0182,  0.3321],
        [ 0.3448,  0.4371,  0.2094,  ..., -0.3697, -0.0417,  0.3169],
        ...,
        [ 0.0766, -0.0832,  0.0136,  ...,  0.0270,  0.0585, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.1166, -0.0904, -0.0465,  ..., -0.0865,  0.1185, -0.0054]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        ...,
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780],
        [-0.1451,  0.5920, -0.1627,  ...,  0.0293,  0.3223,  0.7524],
        [ 0.7363, -0.2055,  0.3274,  ..., -0.7128,  0.1607,  0.6780]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2236, 96])
Tensor Product Weights tensor([[ 0.0174,  0.1335, -0.0043,  ..., -0.0123,  0.2045, -0.0085],
        [ 0.3342,  0.2548, -0.2232,  ..., -0.1918, -0.0376, -0.0213],
        [ 0.3387,  0.2583, -0.2307,  ..., -0.2063, -0.0443, -0.0193],
        ...,
        [ 0.0127,  0.0110, -0.0837,  ..., -0.0228, -0.0726,  0.0251],
        [-0.0068,  0.0022,  0.0012,  ...,  0.0042,  0.0052,  0.0069],
        [ 0.0458,  0.0733, -0.0870,  ..., -0.0262, -0.0103,  0.0089]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.2072, -0.1912, -0.1409,  ...,  0.0359, -0.0295, -0.0056],
        [ 0.2684, -0.0588,  0.0879,  ...,  0.0106, -0.0191,  0.0411],
        [ 0.2356, -0.0480, -0.1027,  ..., -0.0325,  0.0750, -0.0463],
        ...,
        [ 0.2180,  0.0264, -0.1338,  ...,  0.0524, -0.0861,  0.0297],
        [ 0.3238,  0.3148, -0.1641,  ...,  0.0355,  0.0180,  0.0438],
        [-0.0771,  0.0164,  0.0596,  ...,  0.0200,  0.0142,  0.0432]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.4066, -0.0323, -0.1297,  ..., -0.1186,  0.1171,  0.0634],
        [ 0.4944, -0.1547, -0.0655,  ...,  0.1071,  0.0852,  0.0585],
        [ 0.2902,  0.1301, -0.0376,  ..., -0.0563, -0.1938,  0.0899],
        ...,
        [-0.2285, -0.2622, -0.0899,  ...,  0.0949,  0.0908, -0.0963],
        [ 0.0711,  0.2690,  0.0073,  ..., -0.0175,  0.1921,  0.4871],
        [-0.1337,  0.3925,  0.1753,  ..., -0.1249, -0.0576,  0.0411]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
process_conformer_ensemble input shape: torch.Size([32, 96, 32])
Num conformers: 32, Total dim: 3072
Scalar dim: 768, Vector dim: 768
mean_pooling:
  Scalar shape: torch.Size([32, 768])
  Vector shape: torch.Size([32, 768, 3])
  Scalar: tensor([[-0.5104,  0.4027,  0.3335,  ...,  0.3211, -0.1692,  0.0487],
        [-0.5119,  0.4128,  0.3309,  ...,  0.3140, -0.1726,  0.0623],
        [-0.5119,  0.4129,  0.3311,  ...,  0.3144, -0.1733,  0.0604],
        ...,
        [-0.5111,  0.4053,  0.3331,  ...,  0.0497,  0.0241, -0.2303],
        [-0.5464,  0.5186,  0.3428,  ...,  0.1245,  0.0613, -0.1843],
        [-0.5066,  0.3982,  0.3248,  ...,  0.3227, -0.1687,  0.0452]],
       grad_fn=<DivBackward0>)
  Vector: tensor([[[ 0.0885,  0.1434, -0.2145],
         [ 0.3677, -0.3186, -0.0605],
         [ 0.0347,  0.0220,  0.1013],
         ...,
         [-0.0631,  0.0165, -0.0030],
         [ 0.1313,  0.0027, -0.0840],
         [ 0.1143,  0.0006, -0.0873]],

        [[ 0.0885,  0.1434, -0.2143],
         [ 0.3700, -0.3206, -0.0607],
         [ 0.0347,  0.0219,  0.1003],
         ...,
         [-0.0604, -0.0017, -0.0180],
         [ 0.1308,  0.0059, -0.0726],
         [ 0.1128, -0.0024, -0.1028]],

        [[ 0.0885,  0.1434, -0.2143],
         [ 0.3700, -0.3206, -0.0607],
         [ 0.0347,  0.0218,  0.1005],
         ...,
         [-0.0618, -0.0114, -0.0258],
         [ 0.1292,  0.0131, -0.0679],
         [ 0.1078, -0.0083, -0.1240]],

        ...,

        [[-0.0119,  0.1316, -0.0841],
         [ 0.1361, -0.1192, -0.0333],
         [-0.0280,  0.0508, -0.1293],
         ...,
         [ 0.0577, -0.0970, -0.0549],
         [-0.0682,  0.0665,  0.1369],
         [-0.0471, -0.1268,  0.1048]],

        [[ 0.0720,  0.1483, -0.2532],
         [ 0.2750, -0.2447, -0.0031],
         [ 0.0012,  0.0717, -0.0111],
         ...,
         [-0.0611, -0.0092, -0.0234],
         [ 0.1296,  0.0123, -0.0679],
         [ 0.1078, -0.0074, -0.1211]],

        [[ 0.0885,  0.1433, -0.2144],
         [ 0.3676, -0.3186, -0.0605],
         [ 0.0347,  0.0220,  0.1020],
         ...,
         [ 0.0576, -0.0972, -0.0548],
         [-0.0686,  0.0641,  0.1375],
         [-0.0465, -0.1253,  0.1048]]], grad_fn=<DivBackward0>)
--------------------------------------------------
deep_sets:
  Scalar shape: torch.Size([32, 768])
  Vector shape: torch.Size([32, 768, 3])
  Scalar: tensor([[ 0.0025, -0.0153,  0.0140,  ...,  0.0116,  0.0140, -0.0068],
        [ 0.0024, -0.0151,  0.0139,  ...,  0.0114,  0.0141, -0.0067],
        [ 0.0024, -0.0150,  0.0139,  ...,  0.0114,  0.0141, -0.0067],
        ...,
        [ 0.0042, -0.0159,  0.0128,  ...,  0.0113,  0.0154, -0.0068],
        [ 0.0042, -0.0169,  0.0135,  ...,  0.0091,  0.0158, -0.0082],
        [ 0.0023, -0.0152,  0.0138,  ...,  0.0117,  0.0136, -0.0067]],
       grad_fn=<SiluBackward0>)
  Vector: tensor([[[ 4.2677e-03,  1.3691e-03,  4.9108e-03],
         [-7.3499e-03, -4.0582e-03, -6.5290e-03],
         [ 8.7728e-03,  6.1339e-03,  1.2663e-02],
         ...,
         [-1.1430e-02,  6.7823e-03, -5.7810e-03],
         [-3.4603e-03, -1.0773e-03,  7.2766e-03],
         [-6.6646e-03,  2.3641e-03, -3.4365e-03]],

        [[ 6.7276e-03,  1.6126e-03,  4.7704e-03],
         [-5.6826e-03, -7.4782e-03, -6.9357e-03],
         [ 9.8282e-03,  6.9187e-03,  8.1818e-03],
         ...,
         [-1.1503e-02,  5.9106e-03, -7.2382e-03],
         [-9.3095e-04,  2.0692e-03,  6.9641e-03],
         [-5.5497e-03,  4.2136e-03, -5.0177e-03]],

        [[ 6.1234e-03,  1.5477e-03,  4.8558e-03],
         [-6.3185e-03, -5.7115e-03, -6.3333e-03],
         [ 9.6499e-03,  6.8476e-03,  1.0199e-02],
         ...,
         [-1.0449e-02,  7.0045e-03, -6.1424e-03],
         [-1.5824e-03,  5.4725e-05,  6.3435e-03],
         [-5.9690e-03,  3.9206e-03, -4.9762e-03]],

        ...,

        [[ 3.2137e-03,  4.7650e-04,  4.0941e-03],
         [-8.2810e-03, -6.4282e-03, -6.9087e-03],
         [ 6.9490e-03,  5.6125e-03,  1.0897e-02],
         ...,
         [-1.0075e-02,  6.1302e-03, -1.2457e-03],
         [-2.8721e-03, -3.7010e-04,  7.8154e-03],
         [-4.6354e-03,  2.0061e-03, -5.0998e-03]],

        [[ 5.9625e-03,  1.3350e-04,  5.6101e-03],
         [-7.9575e-03, -7.0877e-03, -6.7059e-03],
         [ 1.0143e-02,  6.0828e-03,  9.8453e-03],
         ...,
         [-1.1577e-02,  5.7720e-03, -5.0156e-03],
         [-3.0165e-03,  8.7351e-04,  6.1222e-03],
         [-6.8227e-03,  1.1418e-03, -4.1187e-03]],

        [[ 3.5323e-03,  1.2674e-04,  4.8712e-03],
         [-6.8738e-03, -4.6355e-03, -7.5182e-03],
         [ 6.6383e-03,  5.7518e-03,  1.0683e-02],
         ...,
         [-9.5720e-03,  5.5277e-03, -5.4749e-03],
         [-2.8811e-03,  8.6550e-04,  8.8752e-03],
         [-6.8561e-03,  1.9883e-03, -6.2532e-03]]], grad_fn=<ViewBackward0>)
--------------------------------------------------
self_attention:
  Scalar shape: torch.Size([32, 768])
  Vector shape: torch.Size([32, 768, 3])
  Scalar: tensor([[ 0.0015, -0.0186, -0.0053,  ...,  0.0226, -0.0125,  0.0051],
        [ 0.0014, -0.0188, -0.0053,  ...,  0.0225, -0.0125,  0.0051],
        [ 0.0014, -0.0188, -0.0053,  ...,  0.0225, -0.0125,  0.0051],
        ...,
        [ 0.0035, -0.0193, -0.0044,  ...,  0.0216, -0.0131,  0.0067],
        [ 0.0016, -0.0194, -0.0041,  ...,  0.0212, -0.0143,  0.0049],
        [ 0.0012, -0.0187, -0.0053,  ...,  0.0224, -0.0128,  0.0048]],
       grad_fn=<SiluBackward0>)
  Vector: tensor([[[-8.6604e-04, -2.7555e-03,  2.0084e-03],
         [ 1.0511e-02, -3.0420e-03,  2.4115e-03],
         [-1.0806e-02,  2.7869e-03, -3.4563e-03],
         ...,
         [-1.3248e-03, -3.3886e-04,  9.1457e-03],
         [ 3.5236e-03, -4.1179e-03, -9.7770e-04],
         [ 5.4061e-03, -3.2915e-03,  3.2610e-03]],

        [[-3.1295e-04, -1.9756e-04,  3.2043e-03],
         [ 1.2276e-02, -3.2611e-03,  6.2587e-03],
         [-9.9395e-03,  9.6946e-04, -5.8356e-03],
         ...,
         [ 3.9945e-04, -2.5785e-03,  5.6425e-03],
         [ 1.9585e-03, -3.7058e-03, -8.8918e-04],
         [ 6.8959e-03, -2.1056e-03,  3.2896e-03]],

        [[ 7.0436e-06, -1.7595e-03,  2.9591e-03],
         [ 1.0557e-02, -3.5171e-03,  4.1852e-03],
         [-9.3895e-03,  1.0772e-03, -4.6815e-03],
         ...,
         [-3.9570e-04, -2.1663e-03,  7.2624e-03],
         [ 2.5083e-03, -4.8688e-03, -1.3500e-03],
         [ 5.9122e-03, -2.1333e-03,  3.0028e-03]],

        ...,

        [[-1.6061e-03, -1.2839e-03,  4.7346e-03],
         [ 1.2132e-02, -2.4798e-03,  3.8006e-03],
         [-1.1920e-02,  2.3472e-03, -6.9390e-03],
         ...,
         [-3.0963e-03,  5.0730e-04,  6.6502e-03],
         [ 2.3497e-03, -3.8556e-03, -5.3734e-04],
         [ 3.4727e-03, -9.0523e-04,  2.5998e-03]],

        [[-1.2936e-03, -7.6192e-04,  1.9408e-03],
         [ 1.1390e-02, -3.1330e-03,  4.6404e-03],
         [-1.2646e-02,  1.6914e-03, -4.7577e-03],
         ...,
         [-1.3325e-03, -8.9793e-05,  6.1741e-03],
         [ 3.9080e-03, -4.5130e-03, -1.0958e-03],
         [ 6.7682e-03, -2.2517e-03,  3.5583e-03]],

        [[-2.4359e-04, -9.6536e-04,  5.0401e-03],
         [ 1.2062e-02, -4.3596e-04,  4.6970e-03],
         [-1.1351e-02,  4.1507e-03, -6.9414e-03],
         ...,
         [-2.7852e-03, -4.8210e-05,  8.0798e-03],
         [ 4.6583e-03, -3.2954e-03, -3.8853e-04],
         [ 5.0916e-03, -2.2565e-03,  3.2014e-03]]], grad_fn=<ViewBackward0>)
--------------------------------------------------
==================================================

Batch 5 in Ensemble: 102_vi
Number of conformers in this batch: 32
Unique Atomic Numbers: [6, 1, 8, 15]
Average number of neighbors: 24.02
Processing batch of 32 conformers
Initialized CustomNonLinearReadout with input irreps: 32x0e+32x1o
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2310])
shifts shape: torch.Size([2310, 3])
sender shape: torch.Size([2310])
receiver shape: torch.Size([2310])
Edge attributes shape: torch.Size([2310, 9])
Edge attributes tensor([[ 1.0000,  1.2104,  0.9909,  ..., -0.0203, -0.9513, -0.5887],
        [ 1.0000, -0.2165,  1.7176,  ...,  2.1802, -0.1227, -0.0283],
        [ 1.0000,  1.4209, -0.7280,  ..., -0.5255,  0.6311, -1.0122],
        ...,
        [ 1.0000,  0.1288,  0.9728,  ..., -0.0599,  1.7925,  1.3042],
        [ 1.0000,  0.3884,  1.0305,  ...,  0.0693,  1.7785,  1.0563],
        [ 1.0000,  1.1078,  1.3176,  ...,  0.8229,  0.3264, -0.7684]])
Edge features shape: torch.Size([2310, 8])
Edge features tensor([[ 1.6930e-01, -6.3248e-02, -1.4567e-01,  ..., -1.5567e-01,
         -4.3560e-02,  1.7194e-01],
        [ 3.4445e-01,  4.3519e-01,  2.0540e-01,  ..., -3.6427e-01,
         -3.2870e-02,  3.2274e-01],
        [ 3.4487e-01,  4.3752e-01,  2.1019e-01,  ..., -3.7079e-01,
         -4.3452e-02,  3.1566e-01],
        ...,
        [ 7.6653e-02, -8.3171e-02,  1.3591e-02,  ...,  2.6879e-02,
          5.8669e-02, -9.0538e-02],
        [ 5.6953e-03, -1.0294e-02,  1.2910e-02,  ..., -6.2267e-03,
          5.9430e-04,  5.1525e-03],
        [ 1.1781e-01, -9.0202e-02, -4.8739e-02,  ..., -9.0077e-02,
          1.1787e-01, -1.7630e-04]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2310, 96])
Tensor Product Weights tensor([[ 8.7639e-02, -2.8355e-03, -6.6213e-02,  ...,  3.3919e-02,
          1.2334e-01,  1.4092e-01],
        [-1.7869e-01,  1.4007e-01, -5.6972e-02,  ...,  7.6571e-02,
          2.3702e-01,  3.6626e-02],
        [-1.8200e-01,  1.4081e-01, -5.7301e-02,  ...,  7.9022e-02,
          2.3518e-01,  3.0049e-02],
        ...,
        [ 2.1999e-02, -1.4128e-02,  2.6989e-02,  ..., -3.4882e-02,
         -3.3383e-02, -6.4309e-03],
        [ 2.1946e-03,  3.0041e-03, -7.4365e-03,  ..., -2.0093e-04,
          2.4642e-03, -3.5427e-03],
        [ 4.7993e-02, -2.4133e-02, -1.5847e-02,  ..., -2.7446e-02,
          2.4441e-02,  8.1198e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0527, -0.2473, -0.2542,  ...,  0.1184, -0.0883,  0.0845],
        [ 0.0422, -0.1417,  0.0667,  ...,  0.0743,  0.1561,  0.0100],
        [ 0.0885, -0.1803, -0.1769,  ...,  0.0268,  0.1994,  0.1169],
        ...,
        [ 0.0150, -0.2163,  0.0824,  ...,  0.0591,  0.2150,  0.0138],
        [ 0.0479, -0.2302, -0.0149,  ...,  0.0072,  0.2286,  0.2463],
        [ 0.0917, -0.1750,  0.1936,  ..., -0.0878,  0.2260,  0.2990]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5379, -0.3410,  0.9996,  ...,  0.0551,  0.0445, -0.0308],
        [ 0.7643, -0.2018,  0.3049,  ...,  0.1772,  0.1294, -0.1313],
        [ 0.7075, -0.2181,  0.7854,  ...,  0.0635,  0.0071, -0.0668],
        ...,
        [ 0.1065, -0.1234,  0.0213,  ..., -0.0380,  0.0394,  0.0382],
        [ 0.1192, -0.3690,  0.4319,  ...,  0.0414, -0.0848, -0.1627],
        [-0.0375, -0.0058,  0.0626,  ..., -0.0539,  0.0120,  0.0446]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2316])
shifts shape: torch.Size([2316, 3])
sender shape: torch.Size([2316])
receiver shape: torch.Size([2316])
Edge attributes shape: torch.Size([2316, 9])
Edge attributes tensor([[ 1.0000,  1.2157,  0.9841,  ..., -0.0353, -0.9452, -0.5967],
        [ 1.0000, -0.2141,  1.7173,  ...,  2.1793, -0.1558, -0.0264],
        [ 1.0000,  1.4248, -0.7347,  ..., -0.5146,  0.6221, -1.0326],
        ...,
        [ 1.0000,  0.8300,  1.2856,  ...,  0.7298,  1.3466, -0.0198],
        [ 1.0000,  0.1825,  1.2815,  ...,  0.7181,  1.9040,  0.8334],
        [ 1.0000,  0.8710,  0.6239,  ..., -0.6828,  1.0961,  0.7057]])
Edge features shape: torch.Size([2316, 8])
Edge features tensor([[ 0.1694, -0.0632, -0.1458,  ..., -0.1556, -0.0439,  0.1720],
        [ 0.3444,  0.4351,  0.2052,  ..., -0.3639, -0.0324,  0.3231],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3708, -0.0434,  0.3157],
        ...,
        [ 0.0459, -0.0617,  0.0370,  ...,  0.0594, -0.0268, -0.0234],
        [ 0.2250,  0.0160, -0.2239,  ...,  0.0476, -0.2182, -0.0631],
        [ 0.1017, -0.0904, -0.0213,  ..., -0.0418,  0.1131, -0.0587]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2316, 96])
Tensor Product Weights tensor([[ 0.0877, -0.0028, -0.0662,  ...,  0.0340,  0.1234,  0.1408],
        [-0.1785,  0.1400, -0.0570,  ...,  0.0764,  0.2371,  0.0369],
        [-0.1820,  0.1408, -0.0573,  ...,  0.0790,  0.2352,  0.0301],
        ...,
        [ 0.0120, -0.0015,  0.0049,  ..., -0.0069, -0.0220, -0.0040],
        [ 0.0891,  0.0442,  0.0637,  ...,  0.0049,  0.0741, -0.0715],
        [ 0.0358, -0.0228,  0.0095,  ..., -0.0384, -0.0067,  0.0386]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0527, -0.2473, -0.2536,  ...,  0.1163, -0.0891,  0.0843],
        [ 0.0403, -0.1391,  0.0677,  ...,  0.0768,  0.1551,  0.0087],
        [ 0.0883, -0.1806, -0.1778,  ...,  0.0281,  0.1970,  0.1161],
        ...,
        [ 0.0086, -0.2202,  0.0834,  ..., -0.1605,  0.0486, -0.2507],
        [ 0.0360, -0.2303, -0.0036,  ..., -0.0827, -0.0807, -0.3053],
        [ 0.0582, -0.1730,  0.1672,  ..., -0.1434, -0.0451, -0.4255]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5377, -0.3410,  0.9992,  ...,  0.0556,  0.0437, -0.0306],
        [ 0.7385, -0.1957,  0.3067,  ...,  0.1848,  0.1249, -0.1331],
        [ 0.7030, -0.2186,  0.7883,  ...,  0.0644,  0.0073, -0.0668],
        ...,
        [ 0.0912, -0.1018,  0.0181,  ...,  0.0783, -0.0071, -0.0021],
        [ 0.2221, -0.3508,  0.4048,  ..., -0.1616, -0.0343,  0.0531],
        [-0.0436, -0.0285,  0.0978,  ...,  0.0220,  0.0013, -0.0096]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2298])
shifts shape: torch.Size([2298, 3])
sender shape: torch.Size([2298])
receiver shape: torch.Size([2298])
Edge attributes shape: torch.Size([2298, 9])
Edge attributes tensor([[ 1.0000,  1.2100,  0.9912,  ..., -0.0196, -0.9520, -0.5878],
        [ 1.0000, -0.2204,  1.7169,  ...,  2.1775, -0.1373, -0.0289],
        [ 1.0000,  1.4244, -0.7270,  ..., -0.5271,  0.6243, -1.0242],
        ...,
        [ 1.0000,  0.2843,  1.2227,  ...,  0.5535,  1.8838,  0.8671],
        [ 1.0000,  0.8986,  1.2418,  ...,  0.6060,  1.2929, -0.1014],
        [ 1.0000,  1.0050,  0.5500,  ..., -0.7799,  0.9223,  0.4373]])
Edge features shape: torch.Size([2298, 8])
Edge features tensor([[ 0.1692, -0.0633, -0.1456,  ..., -0.1557, -0.0433,  0.1719],
        [ 0.3444,  0.4351,  0.2052,  ..., -0.3641, -0.0325,  0.3230],
        [ 0.3449,  0.4376,  0.2103,  ..., -0.3709, -0.0436,  0.3155],
        ...,
        [ 0.2219,  0.0100, -0.2214,  ...,  0.0301, -0.2192, -0.0400],
        [ 0.0439, -0.0598,  0.0376,  ...,  0.0586, -0.0306, -0.0169],
        [ 0.1064, -0.0907, -0.0290,  ..., -0.0563,  0.1174, -0.0439]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2298, 96])
Tensor Product Weights tensor([[ 0.0876, -0.0029, -0.0662,  ...,  0.0339,  0.1233,  0.1410],
        [-0.1786,  0.1400, -0.0570,  ...,  0.0765,  0.2371,  0.0368],
        [-0.1821,  0.1408, -0.0573,  ...,  0.0791,  0.2351,  0.0299],
        ...,
        [ 0.0905,  0.0412,  0.0517,  ...,  0.0115,  0.0814, -0.0534],
        [ 0.0115, -0.0008,  0.0026,  ..., -0.0050, -0.0199, -0.0024],
        [ 0.0392, -0.0236,  0.0028,  ..., -0.0362,  0.0016,  0.0507]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0527, -0.2473, -0.2533,  ...,  0.1174, -0.0887,  0.0846],
        [ 0.0407, -0.1391,  0.0651,  ...,  0.0745,  0.1543,  0.0072],
        [ 0.0883, -0.1803, -0.1769,  ...,  0.0264,  0.1977,  0.1163],
        ...,
        [ 0.0092, -0.2162,  0.0941,  ...,  0.2374,  0.1547,  0.0145],
        [ 0.0340, -0.2284, -0.0058,  ..., -0.0881, -0.0977, -0.2491],
        [ 0.0538, -0.1674,  0.1816,  ..., -0.1527, -0.0624, -0.3008]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5377, -0.3411,  0.9989,  ...,  0.0555,  0.0439, -0.0307],
        [ 0.7427, -0.1975,  0.3076,  ...,  0.1844,  0.1232, -0.1334],
        [ 0.7042, -0.2174,  0.7861,  ...,  0.0632,  0.0085, -0.0672],
        ...,
        [ 0.0969, -0.1089,  0.0110,  ..., -0.0346, -0.0712, -0.0124],
        [ 0.1595, -0.3488,  0.4248,  ..., -0.1590, -0.0556,  0.0586],
        [-0.0523, -0.0324,  0.1183,  ...,  0.0220,  0.0065, -0.0353]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2326])
shifts shape: torch.Size([2326, 3])
sender shape: torch.Size([2326])
receiver shape: torch.Size([2326])
Edge attributes shape: torch.Size([2326, 9])
Edge attributes tensor([[ 1.0000,  1.2104,  0.9879,  ..., -0.0268, -0.9534, -0.5850],
        [ 1.0000, -0.2289,  1.7148,  ...,  2.1694, -0.1882, -0.0292],
        [ 1.0000,  1.4309, -0.7172,  ..., -0.5430,  0.6129, -1.0388],
        ...,
        [ 1.0000,  0.1886,  1.2614,  ...,  0.6610,  1.9084,  0.8634],
        [ 1.0000,  0.8306,  1.2778,  ...,  0.7075,  1.3576, -0.0081],
        [ 1.0000,  0.8868,  0.6062,  ..., -0.7072,  1.0633,  0.6841]])
Edge features shape: torch.Size([2326, 8])
Edge features tensor([[ 0.1682, -0.0643, -0.1436,  ..., -0.1566, -0.0382,  0.1713],
        [ 0.3438,  0.4317,  0.1982,  ..., -0.3542, -0.0170,  0.3329],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3698, -0.0418,  0.3168],
        ...,
        [ 0.2249,  0.0158, -0.2238,  ...,  0.0472, -0.2183, -0.0625],
        [ 0.0459, -0.0617,  0.0371,  ...,  0.0594, -0.0269, -0.0232],
        [ 0.1018, -0.0904, -0.0216,  ..., -0.0423,  0.1133, -0.0583]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2326, 96])
Tensor Product Weights tensor([[ 0.0871, -0.0036, -0.0666,  ...,  0.0329,  0.1222,  0.1420],
        [-0.1736,  0.1391, -0.0564,  ...,  0.0728,  0.2396,  0.0462],
        [-0.1815,  0.1407, -0.0573,  ...,  0.0787,  0.2355,  0.0311],
        ...,
        [ 0.0891,  0.0442,  0.0634,  ...,  0.0050,  0.0743, -0.0711],
        [ 0.0120, -0.0014,  0.0049,  ..., -0.0069, -0.0219, -0.0040],
        [ 0.0359, -0.0228,  0.0093,  ..., -0.0383, -0.0064,  0.0390]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0536, -0.2236, -0.3217,  ...,  0.1550, -0.0684, -0.0060],
        [ 0.0404, -0.1440,  0.0760,  ...,  0.0813,  0.1551,  0.0091],
        [ 0.0867, -0.1966, -0.1818,  ...,  0.0401,  0.1794,  0.0619],
        ...,
        [ 0.0080, -0.1800,  0.0948,  ..., -0.0243, -0.1768,  0.1982],
        [ 0.0356, -0.2298, -0.0037,  ..., -0.0814, -0.0801, -0.2983],
        [ 0.0574, -0.1716,  0.1698,  ..., -0.1422, -0.0425, -0.4099]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5469, -0.3290,  0.9567,  ...,  0.0459,  0.0520, -0.0334],
        [ 0.7537, -0.2038,  0.3106,  ...,  0.1829,  0.1237, -0.1272],
        [ 0.6733, -0.2396,  0.8527,  ...,  0.0759, -0.0054, -0.0533],
        ...,
        [ 0.0776, -0.1100,  0.0143,  ..., -0.0116,  0.0209, -0.1084],
        [ 0.2109, -0.3502,  0.4084,  ..., -0.1613, -0.0390,  0.0528],
        [-0.0459, -0.0285,  0.1015,  ...,  0.0224,  0.0024, -0.0139]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2298])
shifts shape: torch.Size([2298, 3])
sender shape: torch.Size([2298])
receiver shape: torch.Size([2298])
Edge attributes shape: torch.Size([2298, 9])
Edge attributes tensor([[ 1.0000,  1.2127,  0.9840,  ..., -0.0355, -0.9515, -0.5872],
        [ 1.0000, -0.2212,  1.7157,  ...,  2.1732, -0.1896, -0.0269],
        [ 1.0000,  1.4314, -0.7204,  ..., -0.5378,  0.6115, -1.0435],
        ...,
        [ 1.0000,  0.1228,  0.9543,  ..., -0.0999,  1.7743,  1.3292],
        [ 1.0000,  0.3892,  1.0140,  ...,  0.0315,  1.7662,  1.0773],
        [ 1.0000,  1.1051,  1.3154,  ...,  0.8166,  0.3734, -0.7571]])
Edge features shape: torch.Size([2298, 8])
Edge features tensor([[ 1.6781e-01, -6.4618e-02, -1.4293e-01,  ..., -1.5695e-01,
         -3.6419e-02,  1.7097e-01],
        [ 3.4385e-01,  4.3186e-01,  1.9856e-01,  ..., -3.5476e-01,
         -1.7819e-02,  3.3238e-01],
        [ 3.4480e-01,  4.3715e-01,  2.0942e-01,  ..., -3.6976e-01,
         -4.1763e-02,  3.1681e-01],
        ...,
        [ 7.6330e-02, -8.3019e-02,  1.3963e-02,  ...,  2.7595e-02,
          5.7726e-02, -9.0380e-02],
        [ 5.9682e-03, -1.0757e-02,  1.3419e-02,  ..., -6.0089e-03,
          4.5276e-05,  5.9273e-03],
        [ 1.1639e-01, -9.0372e-02, -4.6218e-02,  ..., -8.6024e-02,
          1.1861e-01, -6.0741e-03]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2298, 96])
Tensor Product Weights tensor([[ 8.6876e-02, -3.8108e-03, -6.6718e-02,  ...,  3.2603e-02,
          1.2182e-01,  1.4239e-01],
        [-1.7384e-01,  1.3910e-01, -5.6406e-02,  ...,  7.2991e-02,
          2.3944e-01,  4.5702e-02],
        [-1.8148e-01,  1.4069e-01, -5.7253e-02,  ...,  7.8635e-02,
          2.3548e-01,  3.1110e-02],
        ...,
        [ 2.1859e-02, -1.3989e-02,  2.6980e-02,  ..., -3.4683e-02,
         -3.3512e-02, -6.7270e-03],
        [ 2.2999e-03,  3.0940e-03, -7.8216e-03,  ..., -1.9378e-05,
          2.6078e-03, -3.3149e-03],
        [ 4.6840e-02, -2.4189e-02, -1.3431e-02,  ..., -2.8766e-02,
          2.1423e-02,  7.7426e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0536, -0.2222, -0.3257,  ...,  0.1602, -0.0801,  0.0971],
        [ 0.0408, -0.1438,  0.0737,  ...,  0.0776,  0.1538,  0.0079],
        [ 0.0865, -0.1965, -0.1829,  ...,  0.0511,  0.1816, -0.0645],
        ...,
        [ 0.0089, -0.2182,  0.0838,  ..., -0.1687,  0.0606, -0.0892],
        [ 0.0477, -0.2304, -0.0157,  ...,  0.0008,  0.2226,  0.2461],
        [ 0.0914, -0.1755,  0.1902,  ..., -0.0936,  0.2211,  0.2963]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5501, -0.3276,  0.9531,  ...,  0.0381,  0.0514, -0.0465],
        [ 0.7591, -0.2049,  0.3113,  ...,  0.1827,  0.1216, -0.1270],
        [ 0.6671, -0.2405,  0.8521,  ...,  0.0834, -0.0048, -0.0447],
        ...,
        [ 0.0913, -0.1057,  0.0176,  ..., -0.0561, -0.0152, -0.0550],
        [ 0.1178, -0.3697,  0.4337,  ...,  0.0418, -0.0832, -0.1636],
        [-0.0393, -0.0049,  0.0650,  ..., -0.0529,  0.0116,  0.0457]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2294])
shifts shape: torch.Size([2294, 3])
sender shape: torch.Size([2294])
receiver shape: torch.Size([2294])
Edge attributes shape: torch.Size([2294, 9])
Edge attributes tensor([[ 1.0000,  1.2128,  0.9842,  ..., -0.0351, -0.9512, -0.5877],
        [ 1.0000, -0.2205,  1.7159,  ...,  2.1738, -0.1862, -0.0268],
        [ 1.0000,  1.4307, -0.7202,  ..., -0.5380,  0.6128, -1.0410],
        ...,
        [ 1.0000,  0.1268,  0.9557,  ..., -0.0969,  1.7753,  1.3262],
        [ 1.0000,  0.3864,  1.0144,  ...,  0.0325,  1.7676,  1.0794],
        [ 1.0000,  1.1100,  1.3146,  ...,  0.8141,  0.3384, -0.7696]])
Edge features shape: torch.Size([2294, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1429,  ..., -0.1569, -0.0364,  0.1710],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3549, -0.0180,  0.3322],
        [ 0.3448,  0.4371,  0.2094,  ..., -0.3697, -0.0417,  0.3168],
        ...,
        [ 0.0766, -0.0832,  0.0136,  ...,  0.0269,  0.0586, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.1204, -0.0898, -0.0534,  ..., -0.0974,  0.1159,  0.0110]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2294, 96])
Tensor Product Weights tensor([[ 8.6877e-02, -3.8093e-03, -6.6717e-02,  ...,  3.2605e-02,
          1.2182e-01,  1.4239e-01],
        [-1.7392e-01,  1.3911e-01, -5.6415e-02,  ...,  7.3046e-02,
          2.3941e-01,  4.5565e-02],
        [-1.8146e-01,  1.4068e-01, -5.7251e-02,  ...,  7.8624e-02,
          2.3549e-01,  3.1139e-02],
        ...,
        [ 2.1995e-02, -1.4125e-02,  2.6989e-02,  ..., -3.4876e-02,
         -3.3386e-02, -6.4390e-03],
        [ 2.1924e-03,  3.0022e-03, -7.4284e-03,  ..., -2.0465e-04,
          2.4611e-03, -3.5473e-03],
        [ 5.0157e-02, -2.3938e-02, -2.0331e-02,  ..., -2.4851e-02,
          3.0115e-02,  8.8075e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0536, -0.2221, -0.3258,  ...,  0.1606, -0.0802,  0.0968],
        [ 0.0409, -0.1439,  0.0734,  ...,  0.0778,  0.1542,  0.0085],
        [ 0.0865, -0.1965, -0.1830,  ...,  0.0510,  0.1818, -0.0645],
        ...,
        [ 0.0075, -0.1785,  0.0922,  ...,  0.0977, -0.2757,  0.0842],
        [ 0.0479, -0.2304, -0.0126,  ...,  0.0032,  0.2261,  0.2502],
        [ 0.0918, -0.1748,  0.1987,  ..., -0.0917,  0.2216,  0.3056]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5502, -0.3275,  0.9531,  ...,  0.0380,  0.0515, -0.0465],
        [ 0.7607, -0.2052,  0.3113,  ...,  0.1822,  0.1220, -0.1268],
        [ 0.6670, -0.2407,  0.8524,  ...,  0.0834, -0.0050, -0.0447],
        ...,
        [ 0.0735, -0.1104,  0.0192,  ..., -0.0439, -0.0743,  0.0742],
        [ 0.1219, -0.3680,  0.4298,  ...,  0.0418, -0.0832, -0.1637],
        [-0.0341, -0.0064,  0.0585,  ..., -0.0552,  0.0098,  0.0439]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2306])
shifts shape: torch.Size([2306, 3])
sender shape: torch.Size([2306])
receiver shape: torch.Size([2306])
Edge attributes shape: torch.Size([2306, 9])
Edge attributes tensor([[ 1.0000,  1.2022,  0.9959,  ..., -0.0091, -0.9647, -0.5695],
        [ 1.0000, -0.2387,  1.7136,  ...,  2.1650, -0.1798, -0.0325],
        [ 1.0000,  1.4336, -0.7078,  ..., -0.5579,  0.6088, -1.0401],
        ...,
        [ 1.0000,  0.9049,  1.2312,  ...,  0.5766,  1.2966, -0.0990],
        [ 1.0000,  0.2950,  1.2045,  ...,  0.5040,  1.8803,  0.8876],
        [ 1.0000,  1.0181,  0.5320,  ..., -0.8016,  0.8903,  0.4156]])
Edge features shape: torch.Size([2306, 8])
Edge features tensor([[ 0.1680, -0.0644, -0.1433,  ..., -0.1568, -0.0375,  0.1711],
        [ 0.3438,  0.4316,  0.1980,  ..., -0.3539, -0.0165,  0.3332],
        [ 0.3448,  0.4371,  0.2094,  ..., -0.3698, -0.0418,  0.3168],
        ...,
        [ 0.0439, -0.0598,  0.0376,  ...,  0.0586, -0.0306, -0.0169],
        [ 0.2219,  0.0101, -0.2215,  ...,  0.0302, -0.2192, -0.0402],
        [ 0.1063, -0.0907, -0.0289,  ..., -0.0560,  0.1174, -0.0442]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2306, 96])
Tensor Product Weights tensor([[ 0.0870, -0.0037, -0.0667,  ...,  0.0328,  0.1221,  0.1422],
        [-0.1734,  0.1390, -0.0564,  ...,  0.0727,  0.2396,  0.0465],
        [-0.1815,  0.1407, -0.0573,  ...,  0.0786,  0.2355,  0.0311],
        ...,
        [ 0.0115, -0.0008,  0.0026,  ..., -0.0050, -0.0199, -0.0024],
        [ 0.0905,  0.0413,  0.0518,  ...,  0.0114,  0.0813, -0.0536],
        [ 0.0391, -0.0236,  0.0029,  ..., -0.0362,  0.0014,  0.0505]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0536, -0.2236, -0.3204,  ...,  0.1552, -0.0675, -0.0065],
        [ 0.0396, -0.1418,  0.0741,  ...,  0.0759,  0.1555,  0.0051],
        [ 0.0866, -0.1968, -0.1821,  ...,  0.0368,  0.1793,  0.0631],
        ...,
        [ 0.0088, -0.2188,  0.0878,  ..., -0.1706,  0.0429, -0.2202],
        [ 0.0338, -0.2283, -0.0069,  ..., -0.0892, -0.0993, -0.2444],
        [ 0.0534, -0.1673,  0.1819,  ..., -0.1535, -0.0629, -0.2881]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5480, -0.3288,  0.9560,  ...,  0.0458,  0.0520, -0.0333],
        [ 0.7386, -0.2013,  0.3133,  ...,  0.1875,  0.1166, -0.1302],
        [ 0.6725, -0.2395,  0.8536,  ...,  0.0754, -0.0041, -0.0536],
        ...,
        [ 0.0938, -0.1035,  0.0148,  ...,  0.0777, -0.0049, -0.0111],
        [ 0.1512, -0.3494,  0.4281,  ..., -0.1588, -0.0583,  0.0582],
        [-0.0529, -0.0334,  0.1212,  ...,  0.0224,  0.0077, -0.0371]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2320])
shifts shape: torch.Size([2320, 3])
sender shape: torch.Size([2320])
receiver shape: torch.Size([2320])
Edge attributes shape: torch.Size([2320, 9])
Edge attributes tensor([[ 1.0000,  1.2079,  0.9886,  ..., -0.0254, -0.9582, -0.5780],
        [ 1.0000, -0.2326,  1.7140,  ...,  2.1666, -0.1985, -0.0297],
        [ 1.0000,  1.4327, -0.7160,  ..., -0.5449,  0.6095, -1.0443],
        ...,
        [ 1.0000,  0.1869,  1.2620,  ...,  0.6626,  1.9087,  0.8634],
        [ 1.0000,  0.8297,  1.2775,  ...,  0.7067,  1.3596, -0.0057],
        [ 1.0000,  0.8841,  0.6062,  ..., -0.7072,  1.0647,  0.6902]])
Edge features shape: torch.Size([2320, 8])
Edge features tensor([[ 0.1682, -0.0643, -0.1436,  ..., -0.1567, -0.0382,  0.1712],
        [ 0.3438,  0.4316,  0.1980,  ..., -0.3540, -0.0166,  0.3331],
        [ 0.3448,  0.4372,  0.2094,  ..., -0.3698, -0.0418,  0.3168],
        ...,
        [ 0.2248,  0.0157, -0.2237,  ...,  0.0467, -0.2183, -0.0620],
        [ 0.0458, -0.0616,  0.0371,  ...,  0.0594, -0.0270, -0.0231],
        [ 0.1018, -0.0904, -0.0216,  ..., -0.0424,  0.1133, -0.0582]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2320, 96])
Tensor Product Weights tensor([[ 0.0871, -0.0036, -0.0666,  ...,  0.0329,  0.1222,  0.1421],
        [-0.1735,  0.1390, -0.0564,  ...,  0.0727,  0.2396,  0.0464],
        [-0.1815,  0.1407, -0.0573,  ...,  0.0786,  0.2355,  0.0311],
        ...,
        [ 0.0892,  0.0441,  0.0631,  ...,  0.0052,  0.0745, -0.0706],
        [ 0.0119, -0.0014,  0.0048,  ..., -0.0068, -0.0219, -0.0039],
        [ 0.0359, -0.0228,  0.0093,  ..., -0.0383, -0.0064,  0.0390]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0536, -0.2237, -0.3208,  ...,  0.1542, -0.0687, -0.0063],
        [ 0.0393, -0.1419,  0.0752,  ...,  0.0785,  0.1560,  0.0066],
        [ 0.0867, -0.1966, -0.1817,  ...,  0.0398,  0.1797,  0.0611],
        ...,
        [ 0.0079, -0.1800,  0.0948,  ..., -0.0243, -0.1770,  0.1988],
        [ 0.0357, -0.2298, -0.0038,  ..., -0.0812, -0.0800, -0.2992],
        [ 0.0575, -0.1717,  0.1698,  ..., -0.1421, -0.0425, -0.4116]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5471, -0.3290,  0.9567,  ...,  0.0460,  0.0518, -0.0335],
        [ 0.7356, -0.2005,  0.3121,  ...,  0.1871,  0.1192, -0.1296],
        [ 0.6731, -0.2392,  0.8523,  ...,  0.0758, -0.0049, -0.0535],
        ...,
        [ 0.0776, -0.1100,  0.0143,  ..., -0.0113,  0.0209, -0.1085],
        [ 0.2117, -0.3503,  0.4081,  ..., -0.1614, -0.0388,  0.0527],
        [-0.0456, -0.0286,  0.1011,  ...,  0.0223,  0.0023, -0.0137]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2244])
shifts shape: torch.Size([2244, 3])
sender shape: torch.Size([2244])
receiver shape: torch.Size([2244])
Edge attributes shape: torch.Size([2244, 9])
Edge attributes tensor([[ 1.0000,  1.2245,  0.9614,  ..., -0.0846, -0.9422, -0.5959],
        [ 1.0000, -0.1473,  1.7257,  ...,  2.2117, -0.0268, -0.0139],
        [ 1.0000,  1.3404, -0.7553,  ..., -0.4803,  0.7758, -0.7511],
        ...,
        [ 1.0000,  0.1814,  1.2496,  ...,  0.6278,  1.9126,  0.8860],
        [ 1.0000,  0.8158,  1.2889,  ...,  0.7392,  1.3653,  0.0050],
        [ 1.0000,  0.8923,  0.6138,  ..., -0.6969,  1.0710,  0.6654]])
Edge features shape: torch.Size([2244, 8])
Edge features tensor([[ 0.1674, -0.0650, -0.1421,  ..., -0.1573, -0.0343,  0.1706],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3549, -0.0181,  0.3322],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0415,  0.3170],
        ...,
        [ 0.2257,  0.0173, -0.2243,  ...,  0.0514, -0.2178, -0.0681],
        [ 0.0465, -0.0623,  0.0369,  ...,  0.0596, -0.0256, -0.0253],
        [ 0.0996, -0.0901, -0.0181,  ..., -0.0357,  0.1106, -0.0643]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2244, 96])
Tensor Product Weights tensor([[ 0.0866, -0.0041, -0.0668,  ...,  0.0322,  0.1213,  0.1428],
        [-0.1739,  0.1391, -0.0564,  ...,  0.0731,  0.2394,  0.0455],
        [-0.1814,  0.1407, -0.0572,  ...,  0.0786,  0.2355,  0.0313],
        ...,
        [ 0.0887,  0.0449,  0.0663,  ...,  0.0034,  0.0726, -0.0754],
        [ 0.0121, -0.0017,  0.0056,  ..., -0.0075, -0.0225, -0.0044],
        [ 0.0345, -0.0223,  0.0121,  ..., -0.0390, -0.0100,  0.0336]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0530, -0.2253, -0.3082,  ...,  0.1562, -0.0731,  0.0714],
        [ 0.0239, -0.1334,  0.0182,  ...,  0.0582,  0.2155,  0.0214],
        [ 0.0861, -0.1795, -0.2032,  ...,  0.0589,  0.2034, -0.0546],
        ...,
        [ 0.0093, -0.2145,  0.0907,  ...,  0.2667,  0.1345,  0.0174],
        [ 0.0350, -0.2293, -0.0058,  ..., -0.0830, -0.0812, -0.2922],
        [ 0.0564, -0.1710,  0.1673,  ..., -0.1434, -0.0419, -0.3976]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5526, -0.3265,  0.9448,  ...,  0.0402,  0.0456, -0.0428],
        [ 0.4656, -0.1978,  0.4177,  ...,  0.2071,  0.1097, -0.1338],
        [ 0.6459, -0.2221,  0.8131,  ...,  0.0680,  0.0102, -0.0800],
        ...,
        [ 0.0944, -0.1089,  0.0123,  ..., -0.0309, -0.0743, -0.0121],
        [ 0.1988, -0.3505,  0.4136,  ..., -0.1617, -0.0416,  0.0513],
        [-0.0506, -0.0267,  0.1074,  ...,  0.0238,  0.0039, -0.0165]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2322])
shifts shape: torch.Size([2322, 3])
sender shape: torch.Size([2322])
receiver shape: torch.Size([2322])
Edge attributes shape: torch.Size([2322, 9])
Edge attributes tensor([[ 1.0000,  1.2102,  0.9972,  ..., -0.0063, -0.9470, -0.5961],
        [ 1.0000, -0.2221,  1.7170,  ...,  2.1781, -0.1101, -0.0303],
        [ 1.0000,  1.4260, -0.7206,  ..., -0.5375,  0.6222, -1.0238],
        ...,
        [ 1.0000,  0.9952,  1.3854,  ...,  1.0279, -0.5374, -0.5810],
        [ 1.0000,  1.0837,  1.3508,  ...,  0.9220, -0.0519, -0.7575],
        [ 1.0000,  0.6329,  1.0719,  ...,  0.1666,  1.6666,  0.6776]])
Edge features shape: torch.Size([2322, 8])
Edge features tensor([[ 1.6910e-01, -6.3438e-02, -1.4530e-01,  ..., -1.5586e-01,
         -4.2579e-02,  1.7183e-01],
        [ 3.4447e-01,  4.3530e-01,  2.0562e-01,  ..., -3.6457e-01,
         -3.3359e-02,  3.2242e-01],
        [ 3.4487e-01,  4.3751e-01,  2.1017e-01,  ..., -3.7077e-01,
         -4.3415e-02,  3.1569e-01],
        ...,
        [ 7.6224e-02, -8.2969e-02,  1.4085e-02,  ...,  2.7829e-02,
          5.7415e-02, -9.0324e-02],
        [ 5.9133e-03, -1.0664e-02,  1.3317e-02,  ..., -6.0551e-03,
          1.5767e-04,  5.7707e-03],
        [ 1.0777e-01, -9.0767e-02, -3.1325e-02,  ..., -6.0434e-02,
          1.1824e-01, -3.9150e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2322, 96])
Tensor Product Weights tensor([[ 8.7536e-02, -2.9700e-03, -6.6291e-02,  ...,  3.3743e-02,
          1.2314e-01,  1.4113e-01],
        [-1.7885e-01,  1.4010e-01, -5.6988e-02,  ...,  7.6685e-02,
          2.3694e-01,  3.6326e-02],
        [-1.8199e-01,  1.4081e-01, -5.7300e-02,  ...,  7.9014e-02,
          2.3518e-01,  3.0072e-02],
        ...,
        [ 2.1813e-02, -1.3943e-02,  2.6976e-02,  ..., -3.4617e-02,
         -3.3553e-02, -6.8225e-03],
        [ 2.2787e-03,  3.0762e-03, -7.7446e-03,  ..., -5.6340e-05,
          2.5792e-03, -3.3618e-03],
        [ 4.0162e-02, -2.3795e-02,  6.7388e-04,  ..., -3.5354e-02,
          4.1252e-03,  5.4331e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0526, -0.2472, -0.2540,  ...,  0.1197, -0.0877,  0.0847],
        [ 0.0417, -0.1404,  0.0609,  ...,  0.0786,  0.1541,  0.0145],
        [ 0.0880, -0.1800, -0.1754,  ...,  0.0257,  0.1967,  0.1149],
        ...,
        [ 0.0077, -0.1789,  0.0939,  ..., -0.0415,  0.1914,  0.0525],
        [ 0.0483, -0.2359, -0.0208,  ...,  0.2858, -0.1071, -0.0026],
        [ 0.0801, -0.1811,  0.1339,  ...,  0.2196, -0.2033,  0.0680]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5375, -0.3411,  0.9980,  ...,  0.0551,  0.0448, -0.0302],
        [ 0.7561, -0.2020,  0.3060,  ...,  0.1805,  0.1273, -0.1315],
        [ 0.7029, -0.2160,  0.7833,  ...,  0.0632,  0.0104, -0.0675],
        ...,
        [ 0.0754, -0.1103,  0.0169,  ...,  0.0339, -0.0401, -0.0999],
        [ 0.2563, -0.3910,  0.4312,  ..., -0.0649, -0.0842,  0.1177],
        [-0.0166,  0.0037,  0.0544,  ..., -0.0057,  0.0276,  0.0127]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2242])
shifts shape: torch.Size([2242, 3])
sender shape: torch.Size([2242])
receiver shape: torch.Size([2242])
Edge attributes shape: torch.Size([2242, 9])
Edge attributes tensor([[ 1.0000e+00,  1.2231e+00,  9.6248e-01,  ..., -8.2332e-02,
         -9.4449e-01, -5.9262e-01],
        [ 1.0000e+00, -1.4897e-01,  1.7256e+00,  ...,  2.2111e+00,
         -2.7648e-02, -1.4225e-02],
        [ 1.0000e+00,  1.3413e+00, -7.5416e-01,  ..., -4.8215e-01,
          7.7405e-01, -7.5337e-01],
        ...,
        [ 1.0000e+00,  1.8233e-01,  1.2579e+00,  ...,  6.5110e-01,
          1.9108e+00,  8.7216e-01],
        [ 1.0000e+00,  8.1997e-01,  1.2873e+00,  ...,  7.3462e-01,
          1.3609e+00, -1.1370e-03],
        [ 1.0000e+00,  8.8922e-01,  6.1487e-01,  ..., -6.9534e-01,
          1.0742e+00,  6.7165e-01]])
Edge features shape: torch.Size([2242, 8])
Edge features tensor([[ 0.1674, -0.0650, -0.1422,  ..., -0.1573, -0.0344,  0.1706],
        [ 0.3438,  0.4319,  0.1986,  ..., -0.3548, -0.0179,  0.3324],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0415,  0.3170],
        ...,
        [ 0.2252,  0.0165, -0.2240,  ...,  0.0490, -0.2181, -0.0650],
        [ 0.0462, -0.0620,  0.0370,  ...,  0.0595, -0.0263, -0.0242],
        [ 0.1007, -0.0903, -0.0197,  ..., -0.0389,  0.1119, -0.0615]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2242, 96])
Tensor Product Weights tensor([[ 0.0867, -0.0041, -0.0668,  ...,  0.0322,  0.1214,  0.1428],
        [-0.1739,  0.1391, -0.0564,  ...,  0.0730,  0.2394,  0.0457],
        [-0.1814,  0.1407, -0.0572,  ...,  0.0786,  0.2355,  0.0313],
        ...,
        [ 0.0889,  0.0445,  0.0647,  ...,  0.0043,  0.0735, -0.0730],
        [ 0.0120, -0.0015,  0.0052,  ..., -0.0072, -0.0222, -0.0042],
        [ 0.0352, -0.0226,  0.0108,  ..., -0.0387, -0.0083,  0.0362]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0531, -0.2253, -0.3082,  ...,  0.1561, -0.0733,  0.0707],
        [ 0.0240, -0.1330,  0.0173,  ...,  0.0569,  0.2162,  0.0194],
        [ 0.0861, -0.1796, -0.2033,  ...,  0.0583,  0.2036, -0.0551],
        ...,
        [ 0.0092, -0.2148,  0.0901,  ...,  0.2635,  0.1360,  0.0155],
        [ 0.0351, -0.2294, -0.0050,  ..., -0.0830, -0.0817, -0.2933],
        [ 0.0566, -0.1710,  0.1688,  ..., -0.1433, -0.0440, -0.4005]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5526, -0.3265,  0.9447,  ...,  0.0400,  0.0455, -0.0428],
        [ 0.4637, -0.1979,  0.4182,  ...,  0.2067,  0.1090, -0.1345],
        [ 0.6458, -0.2223,  0.8134,  ...,  0.0679,  0.0103, -0.0801],
        ...,
        [ 0.0941, -0.1086,  0.0128,  ..., -0.0313, -0.0740, -0.0121],
        [ 0.2015, -0.3502,  0.4122,  ..., -0.1617, -0.0410,  0.0516],
        [-0.0492, -0.0270,  0.1055,  ...,  0.0233,  0.0033, -0.0162]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2290])
shifts shape: torch.Size([2290, 3])
sender shape: torch.Size([2290])
receiver shape: torch.Size([2290])
Edge attributes shape: torch.Size([2290, 9])
Edge attributes tensor([[ 1.0000,  1.2100,  0.9854,  ..., -0.0324, -0.9561, -0.5804],
        [ 1.0000, -0.2254,  1.7150,  ...,  2.1702, -0.1989, -0.0276],
        [ 1.0000,  1.4338, -0.7181,  ..., -0.5416,  0.6068, -1.0504],
        ...,
        [ 1.0000,  0.1253,  0.9532,  ..., -0.1022,  1.7729,  1.3298],
        [ 1.0000,  0.3914,  1.0131,  ...,  0.0295,  1.7647,  1.0762],
        [ 1.0000,  1.1039,  1.3160,  ...,  0.8181,  0.3785, -0.7546]])
Edge features shape: torch.Size([2290, 8])
Edge features tensor([[ 1.6779e-01, -6.4638e-02, -1.4289e-01,  ..., -1.5697e-01,
         -3.6311e-02,  1.7095e-01],
        [ 3.4383e-01,  4.3178e-01,  1.9839e-01,  ..., -3.5452e-01,
         -1.7458e-02,  3.3260e-01],
        [ 3.4479e-01,  4.3711e-01,  2.0936e-01,  ..., -3.6967e-01,
         -4.1620e-02,  3.1691e-01],
        ...,
        [ 7.6315e-02, -8.3012e-02,  1.3981e-02,  ...,  2.7629e-02,
          5.7681e-02, -9.0372e-02],
        [ 5.9645e-03, -1.0750e-02,  1.3412e-02,  ..., -6.0121e-03,
          5.2920e-05,  5.9167e-03],
        [ 1.1534e-01, -9.0478e-02, -4.4366e-02,  ..., -8.2993e-02,
          1.1901e-01, -1.0365e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2290, 96])
Tensor Product Weights tensor([[ 8.6864e-02, -3.8255e-03, -6.6724e-02,  ...,  3.2583e-02,
          1.2179e-01,  1.4241e-01],
        [-1.7373e-01,  1.3908e-01, -5.6391e-02,  ...,  7.2903e-02,
          2.3950e-01,  4.5915e-02],
        [-1.8143e-01,  1.4068e-01, -5.7249e-02,  ...,  7.8602e-02,
          2.3551e-01,  3.1199e-02],
        ...,
        [ 2.1852e-02, -1.3982e-02,  2.6979e-02,  ..., -3.4673e-02,
         -3.3518e-02, -6.7408e-03],
        [ 2.2984e-03,  3.0928e-03, -7.8164e-03,  ..., -2.1888e-05,
          2.6058e-03, -3.3181e-03],
        [ 4.5997e-02, -2.4208e-02, -1.1655e-02,  ..., -2.9702e-02,
          1.9218e-02,  7.4622e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0536, -0.2222, -0.3248,  ...,  0.1594, -0.0802,  0.0969],
        [ 0.0397, -0.1417,  0.0725,  ...,  0.0746,  0.1549,  0.0056],
        [ 0.0865, -0.1965, -0.1830,  ...,  0.0505,  0.1819, -0.0653],
        ...,
        [ 0.0148, -0.2171,  0.0799,  ...,  0.0445,  0.2206,  0.0184],
        [ 0.0477, -0.2304, -0.0164,  ..., -0.0004,  0.2231,  0.2461],
        [ 0.0911, -0.1755,  0.1884,  ..., -0.0950,  0.2226,  0.2953]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5503, -0.3276,  0.9532,  ...,  0.0381,  0.0510, -0.0465],
        [ 0.7407, -0.2018,  0.3130,  ...,  0.1870,  0.1167, -0.1295],
        [ 0.6673, -0.2401,  0.8516,  ...,  0.0832, -0.0043, -0.0448],
        ...,
        [ 0.1048, -0.1227,  0.0238,  ..., -0.0381,  0.0384,  0.0402],
        [ 0.1163, -0.3699,  0.4345,  ...,  0.0413, -0.0832, -0.1634],
        [-0.0407, -0.0046,  0.0670,  ..., -0.0524,  0.0118,  0.0463]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2318])
shifts shape: torch.Size([2318, 3])
sender shape: torch.Size([2318])
receiver shape: torch.Size([2318])
Edge attributes shape: torch.Size([2318, 9])
Edge attributes tensor([[ 1.0000,  1.2041,  0.9952,  ..., -0.0108, -0.9612, -0.5746],
        [ 1.0000, -0.2325,  1.7149,  ...,  2.1700, -0.1577, -0.0316],
        [ 1.0000,  1.4287, -0.7099,  ..., -0.5547,  0.6181, -1.0239],
        ...,
        [ 1.0000,  0.1346,  0.9578,  ..., -0.0924,  1.7767,  1.3210],
        [ 1.0000,  0.3998,  1.0180,  ...,  0.0406,  1.7651,  1.0612],
        [ 1.0000,  1.1067,  1.3175,  ...,  0.8227,  0.3374, -0.7652]])
Edge features shape: torch.Size([2318, 8])
Edge features tensor([[ 1.6811e-01, -6.4347e-02, -1.4348e-01,  ..., -1.5671e-01,
         -3.7843e-02,  1.7120e-01],
        [ 3.4382e-01,  4.3173e-01,  1.9828e-01,  ..., -3.5437e-01,
         -1.7219e-02,  3.3275e-01],
        [ 3.4481e-01,  4.3721e-01,  2.0955e-01,  ..., -3.6993e-01,
         -4.2043e-02,  3.1662e-01],
        ...,
        [ 7.6313e-02, -8.3011e-02,  1.3983e-02,  ...,  2.7634e-02,
          5.7675e-02, -9.0371e-02],
        [ 5.9621e-03, -1.0746e-02,  1.3408e-02,  ..., -6.0142e-03,
          5.7812e-05,  5.9099e-03],
        [ 1.1863e-01, -9.0090e-02, -5.0208e-02,  ..., -9.2399e-02,
          1.1734e-01,  3.2862e-03]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2318, 96])
Tensor Product Weights tensor([[ 8.7032e-02, -3.6169e-03, -6.6629e-02,  ...,  3.2872e-02,
          1.2213e-01,  1.4212e-01],
        [-1.7365e-01,  1.3906e-01, -5.6381e-02,  ...,  7.2846e-02,
          2.3953e-01,  4.6057e-02],
        [-1.8156e-01,  1.4071e-01, -5.7261e-02,  ...,  7.8699e-02,
          2.3543e-01,  3.0933e-02],
        ...,
        [ 2.1851e-02, -1.3981e-02,  2.6979e-02,  ..., -3.4672e-02,
         -3.3518e-02, -6.7426e-03],
        [ 2.2975e-03,  3.0920e-03, -7.8131e-03,  ..., -2.3496e-05,
          2.6046e-03, -3.3202e-03],
        [ 4.8668e-02, -2.4085e-02, -1.7252e-02,  ..., -2.6653e-02,
          2.6209e-02,  8.3370e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0537, -0.2235, -0.3219,  ...,  0.1565, -0.0671, -0.0075],
        [ 0.0413, -0.1446,  0.0742,  ...,  0.0771,  0.1567,  0.0083],
        [ 0.0867, -0.1969, -0.1830,  ...,  0.0366,  0.1795,  0.0652],
        ...,
        [ 0.0150, -0.2161,  0.0814,  ...,  0.0553,  0.2162,  0.0164],
        [ 0.0478, -0.2302, -0.0140,  ..., -0.0005,  0.2277,  0.2484],
        [ 0.0908, -0.1750,  0.1957,  ..., -0.0983,  0.2292,  0.3019]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5476, -0.3287,  0.9562,  ...,  0.0456,  0.0526, -0.0333],
        [ 0.7638, -0.2066,  0.3100,  ...,  0.1797,  0.1239, -0.1274],
        [ 0.6732, -0.2409,  0.8556,  ...,  0.0755, -0.0056, -0.0533],
        ...,
        [ 0.1053, -0.1235,  0.0227,  ..., -0.0382,  0.0396,  0.0393],
        [ 0.1171, -0.3684,  0.4322,  ...,  0.0389, -0.0846, -0.1632],
        [-0.0377, -0.0066,  0.0650,  ..., -0.0549,  0.0100,  0.0461]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2288])
shifts shape: torch.Size([2288, 3])
sender shape: torch.Size([2288])
receiver shape: torch.Size([2288])
Edge attributes shape: torch.Size([2288, 9])
Edge attributes tensor([[ 1.0000,  1.2099,  0.9851,  ..., -0.0330, -0.9566, -0.5797],
        [ 1.0000, -0.2247,  1.7151,  ...,  2.1708, -0.1971, -0.0275],
        [ 1.0000,  1.4325, -0.7185,  ..., -0.5408,  0.6094, -1.0461],
        ...,
        [ 1.0000,  0.1280,  0.9540,  ..., -0.1005,  1.7735,  1.3279],
        [ 1.0000,  0.3876,  1.0127,  ...,  0.0287,  1.7658,  1.0805],
        [ 1.0000,  1.1103,  1.3139,  ...,  0.8122,  0.3427, -0.7694]])
Edge features shape: torch.Size([2288, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1429,  ..., -0.1570, -0.0363,  0.1709],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3546, -0.0175,  0.3326],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0415,  0.3170],
        ...,
        [ 0.0766, -0.0832,  0.0136,  ...,  0.0269,  0.0586, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.1200, -0.0899, -0.0526,  ..., -0.0961,  0.1163,  0.0090]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2288, 96])
Tensor Product Weights tensor([[ 8.6860e-02, -3.8306e-03, -6.6727e-02,  ...,  3.2575e-02,
          1.2178e-01,  1.4242e-01],
        [-1.7374e-01,  1.3908e-01, -5.6393e-02,  ...,  7.2916e-02,
          2.3949e-01,  4.5884e-02],
        [-1.8139e-01,  1.4067e-01, -5.7244e-02,  ...,  7.8569e-02,
          2.3553e-01,  3.1287e-02],
        ...,
        [ 2.1988e-02, -1.4118e-02,  2.6989e-02,  ..., -3.4867e-02,
         -3.3392e-02, -6.4527e-03],
        [ 2.1917e-03,  3.0015e-03, -7.4257e-03,  ..., -2.0585e-04,
          2.4601e-03, -3.5488e-03],
        [ 4.9771e-02, -2.3981e-02, -1.9536e-02,  ..., -2.5325e-02,
          2.9102e-02,  8.6868e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0536, -0.2222, -0.3249,  ...,  0.1595, -0.0802,  0.0969],
        [ 0.0398, -0.1419,  0.0726,  ...,  0.0749,  0.1549,  0.0055],
        [ 0.0865, -0.1965, -0.1829,  ...,  0.0507,  0.1819, -0.0654],
        ...,
        [ 0.0150, -0.2157,  0.0835,  ...,  0.0606,  0.2120,  0.0143],
        [ 0.0479, -0.2303, -0.0130,  ...,  0.0030,  0.2263,  0.2504],
        [ 0.0917, -0.1749,  0.1978,  ..., -0.0930,  0.2217,  0.3054]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5503, -0.3275,  0.9532,  ...,  0.0380,  0.0511, -0.0465],
        [ 0.7430, -0.2020,  0.3126,  ...,  0.1863,  0.1175, -0.1292],
        [ 0.6673, -0.2402,  0.8517,  ...,  0.0832, -0.0044, -0.0448],
        ...,
        [ 0.1070, -0.1241,  0.0206,  ..., -0.0382,  0.0398,  0.0380],
        [ 0.1217, -0.3682,  0.4301,  ...,  0.0415, -0.0829, -0.1637],
        [-0.0347, -0.0063,  0.0595,  ..., -0.0549,  0.0099,  0.0440]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2318])
shifts shape: torch.Size([2318, 3])
sender shape: torch.Size([2318])
receiver shape: torch.Size([2318])
Edge attributes shape: torch.Size([2318, 9])
Edge attributes tensor([[ 1.0000,  1.2122,  0.9910,  ..., -0.0199, -0.9475, -0.5946],
        [ 1.0000, -0.2255,  1.7157,  ...,  2.1729, -0.1667, -0.0292],
        [ 1.0000,  1.4352, -0.7125,  ..., -0.5505,  0.6050, -1.0503],
        ...,
        [ 1.0000,  0.9917,  1.3912,  ...,  1.0460, -0.5110, -0.5826],
        [ 1.0000,  1.0812,  1.3530,  ...,  0.9287, -0.0381, -0.7542],
        [ 1.0000,  0.6776,  0.6171,  ..., -0.6923,  1.1708,  1.0980]])
Edge features shape: torch.Size([2318, 8])
Edge features tensor([[ 0.1677, -0.0647, -0.1427,  ..., -0.1571, -0.0357,  0.1709],
        [ 0.3439,  0.4319,  0.1987,  ..., -0.3550, -0.0181,  0.3322],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3695, -0.0414,  0.3170],
        ...,
        [ 0.0766, -0.0831,  0.0137,  ...,  0.0270,  0.0585, -0.0905],
        [ 0.0056, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.2201,  0.0067, -0.2199,  ...,  0.0201, -0.2189, -0.0268]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2318, 96])
Tensor Product Weights tensor([[ 8.6800e-02, -3.9046e-03, -6.6759e-02,  ...,  3.2472e-02,
          1.2166e-01,  1.4252e-01],
        [-1.7394e-01,  1.3912e-01, -5.6418e-02,  ...,  7.3064e-02,
          2.3940e-01,  4.5521e-02],
        [-1.8137e-01,  1.4066e-01, -5.7243e-02,  ...,  7.8556e-02,
          2.3554e-01,  3.1325e-02],
        ...,
        [ 2.1968e-02, -1.4098e-02,  2.6988e-02,  ..., -3.4838e-02,
         -3.3412e-02, -6.4969e-03],
        [ 2.1758e-03,  2.9877e-03, -7.3673e-03,  ..., -2.3271e-04,
          2.4382e-03, -3.5820e-03],
        [ 9.1272e-02,  3.9508e-02,  4.4884e-02,  ...,  1.4997e-02,
          8.5465e-02, -4.3097e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0535, -0.2222, -0.3255,  ...,  0.1618, -0.0782,  0.0979],
        [ 0.0407, -0.1435,  0.0683,  ...,  0.0822,  0.1537,  0.0155],
        [ 0.0862, -0.1964, -0.1818,  ...,  0.0496,  0.1807, -0.0620],
        ...,
        [ 0.0091, -0.2179,  0.0905,  ...,  0.0929,  0.2508,  0.1071],
        [ 0.0490, -0.2360, -0.0164,  ...,  0.3119, -0.0791,  0.0156],
        [ 0.0810, -0.1809,  0.1432,  ...,  0.2525, -0.1874,  0.0937]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5501, -0.3275,  0.9532,  ...,  0.0380,  0.0519, -0.0456],
        [ 0.7559, -0.2070,  0.3120,  ...,  0.1835,  0.1217, -0.1265],
        [ 0.6647, -0.2394,  0.8506,  ...,  0.0838, -0.0023, -0.0452],
        ...,
        [ 0.0952, -0.1073,  0.0137,  ..., -0.0226, -0.0654, -0.0393],
        [ 0.2658, -0.3894,  0.4265,  ..., -0.0587, -0.0888,  0.1156],
        [-0.0070,  0.0034,  0.0481,  ..., -0.0037,  0.0236,  0.0112]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2318])
shifts shape: torch.Size([2318, 3])
sender shape: torch.Size([2318])
receiver shape: torch.Size([2318])
Edge attributes shape: torch.Size([2318, 9])
Edge attributes tensor([[ 1.0000,  1.2086,  0.9883,  ..., -0.0261, -0.9570, -0.5797],
        [ 1.0000, -0.2313,  1.7142,  ...,  2.1675, -0.1961, -0.0295],
        [ 1.0000,  1.4320, -0.7165,  ..., -0.5441,  0.6107, -1.0424],
        ...,
        [ 1.0000,  0.8289,  1.2792,  ...,  0.7115,  1.3584, -0.0068],
        [ 1.0000,  0.1854,  1.2642,  ...,  0.6689,  1.9085,  0.8604],
        [ 1.0000,  0.8808,  0.6092,  ..., -0.7031,  1.0706,  0.6953]])
Edge features shape: torch.Size([2318, 8])
Edge features tensor([[ 0.1682, -0.0643, -0.1436,  ..., -0.1567, -0.0381,  0.1712],
        [ 0.3438,  0.4316,  0.1980,  ..., -0.3539, -0.0165,  0.3332],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3698, -0.0418,  0.3168],
        ...,
        [ 0.0460, -0.0618,  0.0370,  ...,  0.0594, -0.0267, -0.0236],
        [ 0.2250,  0.0161, -0.2239,  ...,  0.0479, -0.2182, -0.0635],
        [ 0.1015, -0.0904, -0.0210,  ..., -0.0413,  0.1129, -0.0593]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2318, 96])
Tensor Product Weights tensor([[ 0.0871, -0.0036, -0.0666,  ...,  0.0329,  0.1222,  0.1421],
        [-0.1734,  0.1390, -0.0564,  ...,  0.0727,  0.2396,  0.0465],
        [-0.1815,  0.1407, -0.0573,  ...,  0.0787,  0.2355,  0.0311],
        ...,
        [ 0.0120, -0.0015,  0.0050,  ..., -0.0070, -0.0220, -0.0040],
        [ 0.0890,  0.0443,  0.0639,  ...,  0.0047,  0.0740, -0.0718],
        [ 0.0357, -0.0227,  0.0098,  ..., -0.0384, -0.0070,  0.0381]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0537, -0.2236, -0.3209,  ...,  0.1546, -0.0686, -0.0053],
        [ 0.0394, -0.1420,  0.0742,  ...,  0.0791,  0.1552,  0.0062],
        [ 0.0867, -0.1966, -0.1818,  ...,  0.0397,  0.1793,  0.0617],
        ...,
        [ 0.0086, -0.2202,  0.0834,  ..., -0.1629,  0.0485, -0.2485],
        [ 0.0358, -0.2299, -0.0039,  ..., -0.0816, -0.0795, -0.3011],
        [ 0.0577, -0.1721,  0.1687,  ..., -0.1423, -0.0419, -0.4157]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5478, -0.3288,  0.9568,  ...,  0.0462,  0.0517, -0.0334],
        [ 0.7374, -0.2011,  0.3123,  ...,  0.1867,  0.1196, -0.1290],
        [ 0.6729, -0.2394,  0.8527,  ...,  0.0759, -0.0049, -0.0534],
        ...,
        [ 0.0912, -0.1017,  0.0181,  ...,  0.0783, -0.0065, -0.0030],
        [ 0.2140, -0.3506,  0.4075,  ..., -0.1615, -0.0377,  0.0526],
        [-0.0453, -0.0285,  0.1005,  ...,  0.0224,  0.0022, -0.0124]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2298])
shifts shape: torch.Size([2298, 3])
sender shape: torch.Size([2298])
receiver shape: torch.Size([2298])
Edge attributes shape: torch.Size([2298, 9])
Edge attributes tensor([[ 1.0000,  1.2074,  0.9916,  ..., -0.0187, -0.9571, -0.5802],
        [ 1.0000, -0.2214,  1.7167,  ...,  2.1769, -0.1382, -0.0291],
        [ 1.0000,  1.4239, -0.7263,  ..., -0.5283,  0.6256, -1.0214],
        ...,
        [ 1.0000,  0.1324,  0.9643,  ..., -0.0784,  1.7835,  1.3136],
        [ 1.0000,  0.3979,  1.0241,  ...,  0.0545,  1.7703,  1.0552],
        [ 1.0000,  1.1021,  1.3200,  ...,  0.8302,  0.3530, -0.7563]])
Edge features shape: torch.Size([2298, 8])
Edge features tensor([[ 1.6923e-01, -6.3316e-02, -1.4554e-01,  ..., -1.5574e-01,
         -4.3208e-02,  1.7190e-01],
        [ 3.4442e-01,  4.3504e-01,  2.0508e-01,  ..., -3.6384e-01,
         -3.2182e-02,  3.2319e-01],
        [ 3.4487e-01,  4.3753e-01,  2.1021e-01,  ..., -3.7082e-01,
         -4.3503e-02,  3.1563e-01],
        ...,
        [ 7.6311e-02, -8.3010e-02,  1.3986e-02,  ...,  2.7639e-02,
          5.7669e-02, -9.0369e-02],
        [ 5.9647e-03, -1.0751e-02,  1.3413e-02,  ..., -6.0120e-03,
          5.2554e-05,  5.9173e-03],
        [ 1.1496e-01, -9.0512e-02, -4.3704e-02,  ..., -8.1897e-02,
          1.1912e-01, -1.1890e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2298, 96])
Tensor Product Weights tensor([[ 8.7602e-02, -2.8838e-03, -6.6241e-02,  ...,  3.3856e-02,
          1.2327e-01,  1.4099e-01],
        [-1.7847e-01,  1.4002e-01, -5.6948e-02,  ...,  7.6409e-02,
          2.3714e-01,  3.7048e-02],
        [-1.8201e-01,  1.4081e-01, -5.7303e-02,  ...,  7.9034e-02,
          2.3517e-01,  3.0016e-02],
        ...,
        [ 2.1850e-02, -1.3980e-02,  2.6979e-02,  ..., -3.4671e-02,
         -3.3519e-02, -6.7447e-03],
        [ 2.2985e-03,  3.0929e-03, -7.8168e-03,  ..., -2.1769e-05,
          2.6060e-03, -3.3180e-03],
        [ 4.5696e-02, -2.4210e-02, -1.1020e-02,  ..., -3.0030e-02,
          1.8432e-02,  7.3613e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 5.2656e-02, -2.4728e-01, -2.5336e-01,  ...,  1.1706e-01,
         -8.9051e-02,  8.4447e-02],
        [ 4.0864e-02, -1.3916e-01,  6.7073e-02,  ...,  7.1183e-02,
          1.5578e-01,  5.3713e-03],
        [ 8.8358e-02, -1.8035e-01, -1.7713e-01,  ...,  2.6241e-02,
          1.9861e-01,  1.1684e-01],
        ...,
        [ 1.4862e-02, -2.1714e-01,  7.9635e-02,  ...,  4.5803e-02,
          2.2176e-01,  1.8864e-02],
        [ 4.7620e-02, -2.3010e-01, -1.7142e-02,  ..., -2.0812e-04,
          2.2611e-01,  2.4477e-01],
        [ 9.0902e-02, -1.7535e-01,  1.8813e-01,  ..., -9.1888e-02,
          2.2955e-01,  2.9430e-01]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5376, -0.3411,  0.9986,  ...,  0.0552,  0.0439, -0.0310],
        [ 0.7441, -0.1969,  0.3074,  ...,  0.1836,  0.1227, -0.1346],
        [ 0.7054, -0.2177,  0.7863,  ...,  0.0631,  0.0082, -0.0672],
        ...,
        [ 0.1047, -0.1225,  0.0239,  ..., -0.0379,  0.0383,  0.0403],
        [ 0.1138, -0.3699,  0.4352,  ...,  0.0396, -0.0851, -0.1629],
        [-0.0416, -0.0046,  0.0683,  ..., -0.0529,  0.0121,  0.0469]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2320])
shifts shape: torch.Size([2320, 3])
sender shape: torch.Size([2320])
receiver shape: torch.Size([2320])
Edge attributes shape: torch.Size([2320, 9])
Edge attributes tensor([[ 1.0000,  1.2097,  0.9976,  ..., -0.0053, -0.9476, -0.5952],
        [ 1.0000, -0.2222,  1.7171,  ...,  2.1782, -0.1070, -0.0304],
        [ 1.0000,  1.4258, -0.7201,  ..., -0.5383,  0.6226, -1.0227],
        ...,
        [ 1.0000,  1.0056,  1.3769,  ...,  1.0016, -0.5421, -0.5927],
        [ 1.0000,  1.0928,  1.3432,  ...,  0.8991, -0.0711, -0.7697],
        [ 1.0000,  0.6662,  0.6495,  ..., -0.6465,  1.2249,  1.0913]])
Edge features shape: torch.Size([2320, 8])
Edge features tensor([[ 0.1691, -0.0634, -0.1453,  ..., -0.1558, -0.0426,  0.1718],
        [ 0.3445,  0.4353,  0.2056,  ..., -0.3645, -0.0333,  0.3225],
        [ 0.3449,  0.4375,  0.2101,  ..., -0.3707, -0.0433,  0.3158],
        ...,
        [ 0.0766, -0.0831,  0.0137,  ...,  0.0271,  0.0584, -0.0905],
        [ 0.0056, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.2191,  0.0049, -0.2190,  ...,  0.0148, -0.2185, -0.0197]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2320, 96])
Tensor Product Weights tensor([[ 8.7543e-02, -2.9607e-03, -6.6286e-02,  ...,  3.3755e-02,
          1.2316e-01,  1.4112e-01],
        [-1.7882e-01,  1.4009e-01, -5.6985e-02,  ...,  7.6666e-02,
          2.3695e-01,  3.6376e-02],
        [-1.8194e-01,  1.4079e-01, -5.7296e-02,  ...,  7.8981e-02,
          2.3521e-01,  3.0163e-02],
        ...,
        [ 2.1963e-02, -1.4093e-02,  2.6988e-02,  ..., -3.4831e-02,
         -3.3416e-02, -6.5078e-03],
        [ 2.1745e-03,  2.9866e-03, -7.3626e-03,  ..., -2.3492e-04,
          2.4364e-03, -3.5847e-03],
        [ 9.1638e-02,  3.8564e-02,  4.1240e-02,  ...,  1.6813e-02,
          8.7624e-02, -3.7551e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0526, -0.2472, -0.2541,  ...,  0.1198, -0.0878,  0.0845],
        [ 0.0418, -0.1407,  0.0612,  ...,  0.0785,  0.1545,  0.0148],
        [ 0.0881, -0.1799, -0.1754,  ...,  0.0254,  0.1970,  0.1152],
        ...,
        [ 0.0090, -0.2183,  0.0897,  ...,  0.0974,  0.2453,  0.1020],
        [ 0.0485, -0.2359, -0.0152,  ...,  0.3009, -0.0886,  0.0126],
        [ 0.0807, -0.1800,  0.1485,  ...,  0.2448, -0.1790,  0.1008]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5376, -0.3410,  0.9983,  ...,  0.0550,  0.0448, -0.0302],
        [ 0.7583, -0.2024,  0.3060,  ...,  0.1801,  0.1274, -0.1316],
        [ 0.7036, -0.2160,  0.7832,  ...,  0.0631,  0.0103, -0.0674],
        ...,
        [ 0.0948, -0.1068,  0.0143,  ..., -0.0236, -0.0656, -0.0380],
        [ 0.2618, -0.3881,  0.4252,  ..., -0.0612, -0.0883,  0.1160],
        [-0.0044,  0.0017,  0.0433,  ..., -0.0044,  0.0200,  0.0078]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2316])
shifts shape: torch.Size([2316, 3])
sender shape: torch.Size([2316])
receiver shape: torch.Size([2316])
Edge attributes shape: torch.Size([2316, 9])
Edge attributes tensor([[ 1.0000,  1.2056,  0.9980,  ..., -0.0044, -0.9559, -0.5829],
        [ 1.0000, -0.2259,  1.7164,  ...,  2.1758, -0.1186, -0.0311],
        [ 1.0000,  1.4255, -0.7192,  ..., -0.5397,  0.6234, -1.0206],
        ...,
        [ 1.0000,  1.5080,  0.8216,  ..., -0.3633,  0.2393, -1.4350],
        [ 1.0000,  0.9681,  1.2220,  ...,  0.5515,  1.1906, -0.2373],
        [ 1.0000,  0.8039,  1.5296,  ...,  1.4979,  0.2336, -0.4081]])
Edge features shape: torch.Size([2316, 8])
Edge features tensor([[ 0.1691, -0.0635, -0.1452,  ..., -0.1559, -0.0424,  0.1718],
        [ 0.3444,  0.4351,  0.2053,  ..., -0.3641, -0.0327,  0.3229],
        [ 0.3449,  0.4375,  0.2101,  ..., -0.3707, -0.0433,  0.3157],
        ...,
        [ 0.1109, -0.0907, -0.0367,  ..., -0.0699,  0.1193, -0.0278],
        [ 0.0439, -0.0598,  0.0376,  ...,  0.0586, -0.0306, -0.0169],
        [ 0.2222,  0.0106, -0.2217,  ...,  0.0316, -0.2192, -0.0420]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2316, 96])
Tensor Product Weights tensor([[ 0.0875, -0.0030, -0.0663,  ...,  0.0337,  0.1231,  0.1412],
        [-0.1786,  0.1401, -0.0570,  ...,  0.0765,  0.2371,  0.0368],
        [-0.1820,  0.1408, -0.0573,  ...,  0.0790,  0.2352,  0.0301],
        ...,
        [ 0.0425, -0.0241, -0.0043,  ..., -0.0333,  0.0102,  0.0627],
        [ 0.0115, -0.0008,  0.0026,  ..., -0.0050, -0.0199, -0.0024],
        [ 0.0904,  0.0415,  0.0527,  ...,  0.0109,  0.0808, -0.0550]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0526, -0.2471, -0.2535,  ...,  0.1185, -0.0883,  0.0848],
        [ 0.0408, -0.1384,  0.0617,  ...,  0.0750,  0.1543,  0.0093],
        [ 0.0881, -0.1800, -0.1758,  ...,  0.0251,  0.1969,  0.1154],
        ...,
        [ 0.0089, -0.2189,  0.0867,  ..., -0.0462, -0.2171,  0.0785],
        [ 0.0411, -0.2367, -0.0086,  ..., -0.1138, -0.0856,  0.3441],
        [ 0.0643, -0.1921,  0.1094,  ..., -0.2067, -0.1375,  0.3866]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5373, -0.3411,  0.9977,  ...,  0.0550,  0.0444, -0.0306],
        [ 0.7420, -0.1980,  0.3080,  ...,  0.1851,  0.1219, -0.1344],
        [ 0.7019, -0.2159,  0.7843,  ...,  0.0629,  0.0110, -0.0677],
        ...,
        [ 0.0925, -0.1042,  0.0166,  ...,  0.0480, -0.0283,  0.0564],
        [ 0.3014, -0.3621,  0.3920,  ..., -0.0251,  0.0435, -0.1633],
        [-0.0460, -0.0412,  0.1104,  ...,  0.0157, -0.0045,  0.0131]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2294])
shifts shape: torch.Size([2294, 3])
sender shape: torch.Size([2294])
receiver shape: torch.Size([2294])
Edge attributes shape: torch.Size([2294, 9])
Edge attributes tensor([[ 1.0000,  1.2072,  0.9916,  ..., -0.0187, -0.9574, -0.5797],
        [ 1.0000, -0.2212,  1.7168,  ...,  2.1771, -0.1372, -0.0291],
        [ 1.0000,  1.4232, -0.7264,  ..., -0.5280,  0.6269, -1.0191],
        ...,
        [ 1.0000,  0.1324,  0.9652,  ..., -0.0764,  1.7845,  1.3125],
        [ 1.0000,  0.3916,  1.0237,  ...,  0.0537,  1.7725,  1.0620],
        [ 1.0000,  1.1067,  1.3179,  ...,  0.8238,  0.3333, -0.7659]])
Edge features shape: torch.Size([2294, 8])
Edge features tensor([[ 0.1692, -0.0633, -0.1455,  ..., -0.1557, -0.0432,  0.1719],
        [ 0.3444,  0.4351,  0.2051,  ..., -0.3639, -0.0323,  0.3231],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3708, -0.0435,  0.3157],
        ...,
        [ 0.0766, -0.0832,  0.0136,  ...,  0.0269,  0.0586, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.1176, -0.0902, -0.0484,  ..., -0.0895,  0.1180, -0.0010]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2294, 96])
Tensor Product Weights tensor([[ 8.7602e-02, -2.8834e-03, -6.6241e-02,  ...,  3.3856e-02,
          1.2327e-01,  1.4099e-01],
        [-1.7852e-01,  1.4003e-01, -5.6953e-02,  ...,  7.6442e-02,
          2.3711e-01,  3.6963e-02],
        [-1.8200e-01,  1.4081e-01, -5.7302e-02,  ...,  7.9024e-02,
          2.3518e-01,  3.0045e-02],
        ...,
        [ 2.1993e-02, -1.4123e-02,  2.6989e-02,  ..., -3.4874e-02,
         -3.3388e-02, -6.4419e-03],
        [ 2.1933e-03,  3.0030e-03, -7.4317e-03,  ..., -2.0311e-04,
          2.4624e-03, -3.5454e-03],
        [ 4.7836e-02, -2.4142e-02, -1.5518e-02,  ..., -2.7629e-02,
          2.4028e-02,  8.0686e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0527, -0.2473, -0.2534,  ...,  0.1171, -0.0889,  0.0845],
        [ 0.0408, -0.1391,  0.0671,  ...,  0.0711,  0.1556,  0.0049],
        [ 0.0884, -0.1803, -0.1771,  ...,  0.0263,  0.1987,  0.1166],
        ...,
        [ 0.0150, -0.2164,  0.0824,  ...,  0.0562,  0.2162,  0.0160],
        [ 0.0478, -0.2301, -0.0151,  ...,  0.0033,  0.2286,  0.2477],
        [ 0.0914, -0.1750,  0.1938,  ..., -0.0910,  0.2278,  0.3004]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5376, -0.3411,  0.9986,  ...,  0.0552,  0.0440, -0.0310],
        [ 0.7434, -0.1967,  0.3073,  ...,  0.1836,  0.1228, -0.1346],
        [ 0.7055, -0.2177,  0.7862,  ...,  0.0631,  0.0081, -0.0671],
        ...,
        [ 0.1065, -0.1234,  0.0214,  ..., -0.0379,  0.0391,  0.0388],
        [ 0.1175, -0.3688,  0.4322,  ...,  0.0404, -0.0845, -0.1630],
        [-0.0381, -0.0057,  0.0638,  ..., -0.0543,  0.0112,  0.0453]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2288])
shifts shape: torch.Size([2288, 3])
sender shape: torch.Size([2288])
receiver shape: torch.Size([2288])
Edge attributes shape: torch.Size([2288, 9])
Edge attributes tensor([[ 1.0000,  1.2109,  0.9848,  ..., -0.0337, -0.9547, -0.5825],
        [ 1.0000, -0.2236,  1.7153,  ...,  2.1716, -0.1944, -0.0273],
        [ 1.0000,  1.4324, -0.7190,  ..., -0.5400,  0.6095, -1.0462],
        ...,
        [ 1.0000,  0.1285,  0.9513,  ..., -0.1063,  1.7706,  1.3311],
        [ 1.0000,  0.3944,  1.0117,  ...,  0.0262,  1.7624,  1.0751],
        [ 1.0000,  1.1016,  1.3177,  ...,  0.8233,  0.3807, -0.7510]])
Edge features shape: torch.Size([2288, 8])
Edge features tensor([[ 1.6778e-01, -6.4644e-02, -1.4287e-01,  ..., -1.5697e-01,
         -3.6280e-02,  1.7095e-01],
        [ 3.4384e-01,  4.3181e-01,  1.9845e-01,  ..., -3.5461e-01,
         -1.7585e-02,  3.3252e-01],
        [ 3.4479e-01,  4.3711e-01,  2.0935e-01,  ..., -3.6966e-01,
         -4.1606e-02,  3.1692e-01],
        ...,
        [ 7.6305e-02, -8.3007e-02,  1.3992e-02,  ...,  2.7650e-02,
          5.7653e-02, -9.0367e-02],
        [ 5.9652e-03, -1.0752e-02,  1.3414e-02,  ..., -6.0117e-03,
          5.1691e-05,  5.9185e-03],
        [ 1.1455e-01, -9.0548e-02, -4.2976e-02,  ..., -8.0686e-02,
          1.1923e-01, -1.3561e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2288, 96])
Tensor Product Weights tensor([[ 8.6861e-02, -3.8297e-03, -6.6726e-02,  ...,  3.2577e-02,
          1.2179e-01,  1.4242e-01],
        [-1.7377e-01,  1.3909e-01, -5.6396e-02,  ...,  7.2934e-02,
          2.3948e-01,  4.5840e-02],
        [-1.8143e-01,  1.4067e-01, -5.7248e-02,  ...,  7.8598e-02,
          2.3551e-01,  3.1208e-02],
        ...,
        [ 2.1848e-02, -1.3978e-02,  2.6979e-02,  ..., -3.4667e-02,
         -3.3521e-02, -6.7495e-03],
        [ 2.2987e-03,  3.0930e-03, -7.8174e-03,  ..., -2.1486e-05,
          2.6062e-03, -3.3176e-03],
        [ 4.5365e-02, -2.4210e-02, -1.0322e-02,  ..., -3.0385e-02,
          1.7570e-02,  7.2500e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0537, -0.2222, -0.3249,  ...,  0.1598, -0.0802,  0.0969],
        [ 0.0399, -0.1418,  0.0715,  ...,  0.0756,  0.1542,  0.0059],
        [ 0.0865, -0.1965, -0.1829,  ...,  0.0508,  0.1818, -0.0649],
        ...,
        [ 0.0090, -0.2177,  0.0846,  ..., -0.1694,  0.0545, -0.0912],
        [ 0.0476, -0.2303, -0.0169,  ..., -0.0024,  0.2228,  0.2462],
        [ 0.0909, -0.1755,  0.1875,  ..., -0.0943,  0.2249,  0.2948]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5505, -0.3275,  0.9536,  ...,  0.0383,  0.0510, -0.0465],
        [ 0.7434, -0.2024,  0.3132,  ...,  0.1866,  0.1173, -0.1288],
        [ 0.6672, -0.2403,  0.8519,  ...,  0.0832, -0.0045, -0.0448],
        ...,
        [ 0.0916, -0.1061,  0.0170,  ..., -0.0565, -0.0145, -0.0551],
        [ 0.1145, -0.3700,  0.4353,  ...,  0.0406, -0.0834, -0.1635],
        [-0.0414, -0.0042,  0.0679,  ..., -0.0523,  0.0118,  0.0470]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2316])
shifts shape: torch.Size([2316, 3])
sender shape: torch.Size([2316])
receiver shape: torch.Size([2316])
Edge attributes shape: torch.Size([2316, 9])
Edge attributes tensor([[ 1.0000,  1.2094,  0.9907,  ..., -0.0207, -0.9535, -0.5854],
        [ 1.0000, -0.2280,  1.7151,  ...,  2.1708, -0.1777, -0.0294],
        [ 1.0000,  1.4350, -0.7124,  ..., -0.5507,  0.6053, -1.0496],
        ...,
        [ 1.0000,  0.6733,  1.4622,  ...,  1.2724,  1.2067, -0.0288],
        [ 1.0000,  1.2840,  1.1583,  ...,  0.3819, -0.1466, -1.0581],
        [ 1.0000,  1.3397,  0.9278,  ..., -0.1555,  0.7029, -0.9363]])
Edge features shape: torch.Size([2316, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1426,  ..., -0.1571, -0.0355,  0.1708],
        [ 0.3438,  0.4319,  0.1986,  ..., -0.3548, -0.0179,  0.3323],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0415,  0.3170],
        ...,
        [ 0.1108, -0.0908, -0.0365,  ..., -0.0696,  0.1193, -0.0282],
        [ 0.2224,  0.0109, -0.2218,  ...,  0.0326, -0.2192, -0.0433],
        [ 0.0440, -0.0599,  0.0376,  ...,  0.0586, -0.0304, -0.0172]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2316, 96])
Tensor Product Weights tensor([[ 0.0868, -0.0039, -0.0668,  ...,  0.0324,  0.1216,  0.1426],
        [-0.1739,  0.1391, -0.0564,  ...,  0.0730,  0.2394,  0.0456],
        [-0.1814,  0.1407, -0.0572,  ...,  0.0786,  0.2355,  0.0313],
        ...,
        [ 0.0424, -0.0241, -0.0041,  ..., -0.0333,  0.0100,  0.0624],
        [ 0.0903,  0.0417,  0.0534,  ...,  0.0106,  0.0804, -0.0560],
        [ 0.0115, -0.0008,  0.0027,  ..., -0.0051, -0.0200, -0.0025]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0536, -0.2222, -0.3246,  ...,  0.1608, -0.0786,  0.0977],
        [ 0.0397, -0.1411,  0.0676,  ...,  0.0792,  0.1526,  0.0103],
        [ 0.0863, -0.1964, -0.1818,  ...,  0.0497,  0.1812, -0.0631],
        ...,
        [ 0.0089, -0.2182,  0.0842,  ..., -0.1030,  0.0070, -0.2356],
        [ 0.0410, -0.2368, -0.0095,  ..., -0.1389, -0.1088,  0.3202],
        [ 0.0642, -0.1923,  0.1071,  ..., -0.2434, -0.1706,  0.3487]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5503, -0.3275,  0.9536,  ...,  0.0382,  0.0515, -0.0458],
        [ 0.7393, -0.2029,  0.3147,  ...,  0.1890,  0.1158, -0.1289],
        [ 0.6650, -0.2391,  0.8502,  ...,  0.0837, -0.0020, -0.0453],
        ...,
        [ 0.0916, -0.1060,  0.0173,  ..., -0.0750, -0.0191, -0.0219],
        [ 0.3018, -0.3631,  0.3923,  ..., -0.0313,  0.0513, -0.1591],
        [-0.0455, -0.0393,  0.1102,  ...,  0.0113, -0.0012,  0.0157]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2330])
shifts shape: torch.Size([2330, 3])
sender shape: torch.Size([2330])
receiver shape: torch.Size([2330])
Edge attributes shape: torch.Size([2330, 9])
Edge attributes tensor([[ 1.0000e+00,  1.2033e+00,  1.0008e+00,  ...,  1.7612e-03,
         -9.5855e-01, -5.7938e-01],
        [ 1.0000e+00, -2.3715e-01,  1.7145e+00,  ...,  2.1684e+00,
         -1.4506e-01, -3.3531e-02],
        [ 1.0000e+00,  1.4327e+00, -7.0304e-01,  ..., -5.6543e-01,
          6.1094e-01, -1.0325e+00],
        ...,
        [ 1.0000e+00,  9.9197e-01,  1.2057e+00,  ...,  5.0739e-01,
          1.1671e+00, -2.7230e-01],
        [ 1.0000e+00,  7.9442e-01,  1.5332e+00,  ...,  1.5100e+00,
          2.6782e-01, -3.9555e-01],
        [ 1.0000e+00,  1.5156e+00,  8.1151e-01,  ..., -3.8176e-01,
          2.2053e-01, -1.4542e+00]])
Edge features shape: torch.Size([2330, 8])
Edge features tensor([[ 0.1679, -0.0645, -0.1431,  ..., -0.1569, -0.0369,  0.1711],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3545, -0.0174,  0.3326],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3698, -0.0419,  0.3167],
        ...,
        [ 0.0420, -0.0580,  0.0380,  ...,  0.0574, -0.0336, -0.0111],
        [ 0.2184,  0.0036, -0.2184,  ...,  0.0108, -0.2181, -0.0144],
        [ 0.1172, -0.0903, -0.0477,  ..., -0.0884,  0.1182, -0.0027]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2330, 96])
Tensor Product Weights tensor([[ 8.6934e-02, -3.7388e-03, -6.6686e-02,  ...,  3.2703e-02,
          1.2194e-01,  1.4229e-01],
        [-1.7371e-01,  1.3908e-01, -5.6389e-02,  ...,  7.2891e-02,
          2.3951e-01,  4.5947e-02],
        [-1.8152e-01,  1.4069e-01, -5.7256e-02,  ...,  7.8664e-02,
          2.3546e-01,  3.1031e-02],
        ...,
        [ 1.1082e-02, -1.6322e-04,  5.2595e-04,  ..., -3.2901e-03,
         -1.7956e-02, -1.0187e-03],
        [ 9.1895e-02,  3.7862e-02,  3.8560e-02,  ...,  1.8119e-02,
          8.9206e-02, -3.3459e-02],
        [ 4.7500e-02, -2.4161e-02, -1.4815e-02,  ..., -2.8017e-02,
          2.3148e-02,  7.9592e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0536, -0.2235, -0.3215,  ...,  0.1575, -0.0651, -0.0054],
        [ 0.0410, -0.1438,  0.0704,  ...,  0.0810,  0.1550,  0.0130],
        [ 0.0865, -0.1969, -0.1820,  ...,  0.0355,  0.1772,  0.0665],
        ...,
        [ 0.0077, -0.1786,  0.0910,  ..., -0.0925,  0.0446, -0.1135],
        [ 0.0413, -0.2363, -0.0029,  ..., -0.1132, -0.0738,  0.3519],
        [ 0.0652, -0.1896,  0.1301,  ..., -0.2052, -0.1319,  0.4155]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5479, -0.3286,  0.9558,  ...,  0.0456,  0.0529, -0.0325],
        [ 0.7585, -0.2067,  0.3114,  ...,  0.1826,  0.1218, -0.1276],
        [ 0.6702, -0.2401,  0.8548,  ...,  0.0763, -0.0032, -0.0535],
        ...,
        [ 0.0742, -0.1100,  0.0180,  ..., -0.0902, -0.0135,  0.0669],
        [ 0.3057, -0.3581,  0.3847,  ..., -0.0233,  0.0405, -0.1659],
        [-0.0330, -0.0458,  0.0960,  ...,  0.0133, -0.0063,  0.0097]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2314])
shifts shape: torch.Size([2314, 3])
sender shape: torch.Size([2314])
receiver shape: torch.Size([2314])
Edge attributes shape: torch.Size([2314, 9])
Edge attributes tensor([[ 1.0000,  1.2070,  0.9971,  ..., -0.0065, -0.9538, -0.5859],
        [ 1.0000, -0.2252,  1.7165,  ...,  2.1760, -0.1215, -0.0308],
        [ 1.0000,  1.4264, -0.7202,  ..., -0.5382,  0.6215, -1.0248],
        ...,
        [ 1.0000,  0.9676,  1.2193,  ...,  0.5440,  1.1958, -0.2319],
        [ 1.0000,  0.7891,  1.5362,  ...,  1.5204,  0.2621, -0.3907],
        [ 1.0000,  1.5036,  0.8317,  ..., -0.3447,  0.2342, -1.4285]])
Edge features shape: torch.Size([2314, 8])
Edge features tensor([[ 0.1691, -0.0635, -0.1452,  ..., -0.1559, -0.0424,  0.1718],
        [ 0.3444,  0.4352,  0.2053,  ..., -0.3642, -0.0327,  0.3228],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3708, -0.0434,  0.3157],
        ...,
        [ 0.0437, -0.0596,  0.0376,  ...,  0.0585, -0.0309, -0.0163],
        [ 0.2218,  0.0099, -0.2214,  ...,  0.0297, -0.2192, -0.0395],
        [ 0.1118, -0.0907, -0.0383,  ..., -0.0727,  0.1194, -0.0242]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2314, 96])
Tensor Product Weights tensor([[ 0.0875, -0.0030, -0.0663,  ...,  0.0337,  0.1231,  0.1412],
        [-0.1786,  0.1401, -0.0570,  ...,  0.0765,  0.2370,  0.0367],
        [-0.1820,  0.1408, -0.0573,  ...,  0.0790,  0.2352,  0.0301],
        ...,
        [ 0.0115, -0.0007,  0.0024,  ..., -0.0048, -0.0197, -0.0023],
        [ 0.0906,  0.0412,  0.0515,  ...,  0.0116,  0.0815, -0.0531],
        [ 0.0432, -0.0241, -0.0058,  ..., -0.0326,  0.0120,  0.0652]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0526, -0.2472, -0.2533,  ...,  0.1185, -0.0883,  0.0847],
        [ 0.0408, -0.1382,  0.0608,  ...,  0.0753,  0.1535,  0.0093],
        [ 0.0881, -0.1800, -0.1760,  ...,  0.0252,  0.1967,  0.1152],
        ...,
        [ 0.0081, -0.1789,  0.0939,  ..., -0.0938,  0.0416, -0.1442],
        [ 0.0411, -0.2371, -0.0093,  ..., -0.1161, -0.0904,  0.3398],
        [ 0.0643, -0.1931,  0.1058,  ..., -0.2101, -0.1437,  0.3751]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5375, -0.3410,  0.9983,  ...,  0.0553,  0.0443, -0.0305],
        [ 0.7411, -0.1981,  0.3089,  ...,  0.1856,  0.1213, -0.1342],
        [ 0.7019, -0.2160,  0.7844,  ...,  0.0630,  0.0109, -0.0676],
        ...,
        [ 0.0768, -0.1099,  0.0148,  ..., -0.0909, -0.0181,  0.0625],
        [ 0.3043, -0.3632,  0.3922,  ..., -0.0258,  0.0462, -0.1620],
        [-0.0479, -0.0398,  0.1122,  ...,  0.0145, -0.0053,  0.0132]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2314])
shifts shape: torch.Size([2314, 3])
sender shape: torch.Size([2314])
receiver shape: torch.Size([2314])
Edge attributes shape: torch.Size([2314, 9])
Edge attributes tensor([[ 1.0000,  1.2116,  0.9915,  ..., -0.0189, -0.9484, -0.5932],
        [ 1.0000, -0.2265,  1.7155,  ...,  2.1723, -0.1684, -0.0294],
        [ 1.0000,  1.4352, -0.7118,  ..., -0.5516,  0.6051, -1.0496],
        ...,
        [ 1.0000,  1.0989,  1.3385,  ...,  0.8851, -0.0467, -0.7790],
        [ 1.0000,  0.6857,  0.6133,  ..., -0.6975,  1.1619,  1.0866],
        [ 1.0000,  0.9445,  1.0772,  ...,  0.1793,  1.3537,  0.0357]])
Edge features shape: torch.Size([2314, 8])
Edge features tensor([[ 1.6761e-01, -6.4796e-02, -1.4256e-01,  ..., -1.5710e-01,
         -3.5475e-02,  1.7082e-01],
        [ 3.4386e-01,  4.3193e-01,  1.9870e-01,  ..., -3.5496e-01,
         -1.8142e-02,  3.3217e-01],
        [ 3.4478e-01,  4.3701e-01,  2.0915e-01,  ..., -3.6939e-01,
         -4.1166e-02,  3.1721e-01],
        ...,
        [ 5.9011e-03, -1.0643e-02,  1.3295e-02,  ..., -6.0652e-03,
          1.8254e-04,  5.7359e-03],
        [ 2.2245e-01,  1.1077e-02, -2.2189e-01,  ...,  3.3120e-02,
         -2.1914e-01, -4.4032e-02],
        [ 4.3964e-02, -5.9876e-02,  3.7581e-02,  ...,  5.8613e-02,
         -3.0405e-02, -1.7204e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2314, 96])
Tensor Product Weights tensor([[ 8.6772e-02, -3.9391e-03, -6.6773e-02,  ...,  3.2423e-02,
          1.2161e-01,  1.4257e-01],
        [-1.7395e-01,  1.3912e-01, -5.6419e-02,  ...,  7.3069e-02,
          2.3939e-01,  4.5510e-02],
        [-1.8129e-01,  1.4064e-01, -5.7235e-02,  ...,  7.8497e-02,
          2.3559e-01,  3.1483e-02],
        ...,
        [ 2.2741e-03,  3.0722e-03, -7.7275e-03,  ..., -6.4529e-05,
          2.5728e-03, -3.3721e-03],
        [ 9.0298e-02,  4.1774e-02,  5.3801e-02,  ...,  1.0357e-02,
          8.0138e-02, -5.6595e-02],
        [ 1.1519e-02, -7.9220e-04,  2.7241e-03,  ..., -5.0817e-03,
         -1.9991e-02, -2.5164e-03]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0535, -0.2222, -0.3254,  ...,  0.1616, -0.0780,  0.0982],
        [ 0.0405, -0.1431,  0.0690,  ...,  0.0822,  0.1521,  0.0133],
        [ 0.0862, -0.1964, -0.1818,  ...,  0.0495,  0.1808, -0.0621],
        ...,
        [ 0.0090, -0.2171,  0.0864,  ...,  0.1010,  0.2545,  0.1106],
        [ 0.0481, -0.2357, -0.0190,  ...,  0.2953, -0.0876,  0.0162],
        [ 0.0799, -0.1806,  0.1386,  ...,  0.2372, -0.1661,  0.1018]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5500, -0.3276,  0.9532,  ...,  0.0378,  0.0519, -0.0455],
        [ 0.7542, -0.2056,  0.3130,  ...,  0.1853,  0.1204, -0.1268],
        [ 0.6647, -0.2392,  0.8503,  ...,  0.0837, -0.0021, -0.0452],
        ...,
        [ 0.0926, -0.1067,  0.0156,  ..., -0.0208, -0.0658, -0.0412],
        [ 0.2536, -0.3899,  0.4308,  ..., -0.0623, -0.0890,  0.1143],
        [-0.0115,  0.0031,  0.0517,  ..., -0.0013,  0.0221,  0.0090]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2294])
shifts shape: torch.Size([2294, 3])
sender shape: torch.Size([2294])
receiver shape: torch.Size([2294])
Edge attributes shape: torch.Size([2294, 9])
Edge attributes tensor([[ 1.0000,  1.2074,  0.9914,  ..., -0.0192, -0.9571, -0.5801],
        [ 1.0000, -0.2209,  1.7168,  ...,  2.1773, -0.1370, -0.0290],
        [ 1.0000,  1.4224, -0.7269,  ..., -0.5274,  0.6283, -1.0167],
        ...,
        [ 1.0000,  0.1351,  0.9588,  ..., -0.0901,  1.7777,  1.3195],
        [ 1.0000,  0.3939,  1.0182,  ...,  0.0410,  1.7675,  1.0670],
        [ 1.0000,  1.1050,  1.3192,  ...,  0.8278,  0.3347, -0.7632]])
Edge features shape: torch.Size([2294, 8])
Edge features tensor([[ 0.1692, -0.0633, -0.1456,  ..., -0.1557, -0.0433,  0.1719],
        [ 0.3444,  0.4351,  0.2053,  ..., -0.3641, -0.0326,  0.3229],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3708, -0.0435,  0.3156],
        ...,
        [ 0.0766, -0.0832,  0.0136,  ...,  0.0270,  0.0586, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.1181, -0.0902, -0.0492,  ..., -0.0908,  0.1177,  0.0010]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2294, 96])
Tensor Product Weights tensor([[ 8.7607e-02, -2.8770e-03, -6.6237e-02,  ...,  3.3865e-02,
          1.2328e-01,  1.4098e-01],
        [-1.7861e-01,  1.4005e-01, -5.6963e-02,  ...,  7.6514e-02,
          2.3706e-01,  3.6776e-02],
        [-1.8201e-01,  1.4081e-01, -5.7303e-02,  ...,  7.9032e-02,
          2.3517e-01,  3.0022e-02],
        ...,
        [ 2.1984e-02, -1.4114e-02,  2.6989e-02,  ..., -3.4862e-02,
         -3.3396e-02, -6.4611e-03],
        [ 2.1909e-03,  3.0009e-03, -7.4229e-03,  ..., -2.0723e-04,
          2.4591e-03, -3.5505e-03],
        [ 4.8215e-02, -2.4118e-02, -1.6311e-02,  ..., -2.7187e-02,
          2.5023e-02,  8.1916e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 5.2671e-02, -2.4727e-01, -2.5335e-01,  ...,  1.1738e-01,
         -8.8976e-02,  8.5050e-02],
        [ 4.0994e-02, -1.3918e-01,  6.6164e-02,  ...,  7.1938e-02,
          1.5492e-01,  5.0914e-03],
        [ 8.8336e-02, -1.8035e-01, -1.7691e-01,  ...,  2.6665e-02,
          1.9877e-01,  1.1655e-01],
        ...,
        [ 1.4909e-02, -2.1619e-01,  8.2591e-02,  ...,  5.4860e-02,
          2.1580e-01,  1.7355e-02],
        [ 4.7729e-02, -2.3002e-01, -1.4847e-02,  ..., -2.1838e-04,
          2.2774e-01,  2.4913e-01],
        [ 9.1124e-02, -1.7479e-01,  1.9541e-01,  ..., -9.0752e-02,
          2.2972e-01,  3.0238e-01]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5378, -0.3410,  0.9990,  ...,  0.0553,  0.0441, -0.0311],
        [ 0.7454, -0.1974,  0.3078,  ...,  0.1833,  0.1230, -0.1340],
        [ 0.7050, -0.2177,  0.7861,  ...,  0.0632,  0.0081, -0.0672],
        ...,
        [ 0.1066, -0.1237,  0.0214,  ..., -0.0378,  0.0392,  0.0391],
        [ 0.1166, -0.3685,  0.4321,  ...,  0.0396, -0.0846, -0.1635],
        [-0.0374, -0.0056,  0.0629,  ..., -0.0550,  0.0103,  0.0458]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2310])
shifts shape: torch.Size([2310, 3])
sender shape: torch.Size([2310])
receiver shape: torch.Size([2310])
Edge attributes shape: torch.Size([2310, 9])
Edge attributes tensor([[ 1.0000,  1.2085,  0.9914,  ..., -0.0192, -0.9548, -0.5836],
        [ 1.0000, -0.2291,  1.7150,  ...,  2.1702, -0.1779, -0.0297],
        [ 1.0000,  1.4353, -0.7115,  ..., -0.5520,  0.6049, -1.0499],
        ...,
        [ 1.0000,  0.6734,  1.4747,  ...,  1.3132,  1.1609, -0.0527],
        [ 1.0000,  1.3143,  1.1239,  ...,  0.2943, -0.1406, -1.1090],
        [ 1.0000,  1.3302,  0.9328,  ..., -0.1452,  0.7231, -0.9094]])
Edge features shape: torch.Size([2310, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1426,  ..., -0.1571, -0.0355,  0.1708],
        [ 0.3438,  0.4318,  0.1985,  ..., -0.3547, -0.0178,  0.3324],
        [ 0.3448,  0.4370,  0.2092,  ..., -0.3695, -0.0413,  0.3171],
        ...,
        [ 0.1147, -0.0905, -0.0432,  ..., -0.0811,  0.1192, -0.0130],
        [ 0.2197,  0.0060, -0.2196,  ...,  0.0181, -0.2188, -0.0241],
        [ 0.0427, -0.0586,  0.0379,  ...,  0.0579, -0.0326, -0.0131]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2310, 96])
Tensor Product Weights tensor([[ 0.0868, -0.0039, -0.0668,  ...,  0.0324,  0.1216,  0.1426],
        [-0.1738,  0.1391, -0.0564,  ...,  0.0730,  0.2395,  0.0457],
        [-0.1813,  0.1407, -0.0572,  ...,  0.0785,  0.2356,  0.0314],
        ...,
        [ 0.0455, -0.0242, -0.0106,  ..., -0.0303,  0.0179,  0.0729],
        [ 0.0914,  0.0392,  0.0435,  ...,  0.0157,  0.0863, -0.0410],
        [ 0.0112, -0.0004,  0.0013,  ..., -0.0039, -0.0186, -0.0015]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0536, -0.2222, -0.3246,  ...,  0.1607, -0.0785,  0.0975],
        [ 0.0396, -0.1412,  0.0686,  ...,  0.0787,  0.1533,  0.0102],
        [ 0.0863, -0.1964, -0.1818,  ...,  0.0495,  0.1813, -0.0633],
        ...,
        [ 0.0090, -0.2189,  0.0887,  ..., -0.0993,  0.0140, -0.2273],
        [ 0.0411, -0.2364, -0.0048,  ..., -0.1397, -0.0958,  0.3276],
        [ 0.0648, -0.1902,  0.1233,  ..., -0.2455, -0.1617,  0.3725]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5501, -0.3276,  0.9532,  ...,  0.0380,  0.0515, -0.0458],
        [ 0.7390, -0.2026,  0.3141,  ...,  0.1888,  0.1160, -0.1293],
        [ 0.6650, -0.2390,  0.8502,  ...,  0.0836, -0.0018, -0.0454],
        ...,
        [ 0.0944, -0.1067,  0.0151,  ..., -0.0731, -0.0188, -0.0257],
        [ 0.3031, -0.3597,  0.3875,  ..., -0.0298,  0.0476, -0.1617],
        [-0.0358, -0.0432,  0.1000,  ...,  0.0100, -0.0020,  0.0134]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2336])
shifts shape: torch.Size([2336, 3])
sender shape: torch.Size([2336])
receiver shape: torch.Size([2336])
Edge attributes shape: torch.Size([2336, 9])
Edge attributes tensor([[ 1.0000,  1.2038,  1.0012,  ...,  0.0027, -0.9572, -0.5814],
        [ 1.0000, -0.2377,  1.7144,  ...,  2.1680, -0.1457, -0.0337],
        [ 1.0000,  1.4341, -0.7024,  ..., -0.5665,  0.6084, -1.0369],
        ...,
        [ 1.0000,  0.7290,  1.3139,  ...,  0.8120, -1.4615,  0.1362],
        [ 1.0000,  1.0107,  1.3734,  ...,  0.9909, -0.5382, -0.5999],
        [ 1.0000,  1.0998,  1.3376,  ...,  0.8824, -0.0573, -0.7801]])
Edge features shape: torch.Size([2336, 8])
Edge features tensor([[ 1.6791e-01, -6.4527e-02, -1.4311e-01,  ..., -1.5687e-01,
         -3.6896e-02,  1.7105e-01],
        [ 3.4383e-01,  4.3177e-01,  1.9837e-01,  ..., -3.5449e-01,
         -1.7401e-02,  3.3264e-01],
        [ 3.4480e-01,  4.3715e-01,  2.0943e-01,  ..., -3.6977e-01,
         -4.1783e-02,  3.1680e-01],
        ...,
        [ 2.4735e-02, -3.8375e-02,  3.4803e-02,  ...,  3.2016e-02,
         -3.9105e-02,  2.8655e-02],
        [ 7.6203e-02, -8.2958e-02,  1.4110e-02,  ...,  2.7877e-02,
          5.7352e-02, -9.0313e-02],
        [ 5.9102e-03, -1.0659e-02,  1.3312e-02,  ..., -6.0578e-03,
          1.6418e-04,  5.7617e-03]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2336, 96])
Tensor Product Weights tensor([[ 8.6928e-02, -3.7459e-03, -6.6689e-02,  ...,  3.2693e-02,
          1.2192e-01,  1.4230e-01],
        [-1.7371e-01,  1.3908e-01, -5.6388e-02,  ...,  7.2889e-02,
          2.3951e-01,  4.5949e-02],
        [-1.8148e-01,  1.4069e-01, -5.7253e-02,  ...,  7.8639e-02,
          2.3548e-01,  3.1097e-02],
        ...,
        [ 7.5823e-03,  3.9384e-03, -1.4924e-02,  ...,  6.9472e-03,
         -6.3121e-04,  8.0874e-03],
        [ 2.1803e-02, -1.3933e-02,  2.6975e-02,  ..., -3.4603e-02,
         -3.3561e-02, -6.8420e-03],
        [ 2.2775e-03,  3.0752e-03, -7.7402e-03,  ..., -5.8486e-05,
          2.5775e-03, -3.3645e-03]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0536, -0.2235, -0.3214,  ...,  0.1576, -0.0649, -0.0052],
        [ 0.0409, -0.1439,  0.0705,  ...,  0.0816,  0.1548,  0.0138],
        [ 0.0864, -0.1969, -0.1818,  ...,  0.0354,  0.1769,  0.0665],
        ...,
        [ 0.0080, -0.1792,  0.0935,  ..., -0.0383,  0.0007, -0.1519],
        [ 0.0484, -0.2358, -0.0201,  ...,  0.2968, -0.0876,  0.0182],
        [ 0.0800, -0.1810,  0.1342,  ...,  0.2350, -0.1722,  0.1008]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 5.4797e-01, -3.2859e-01,  9.5589e-01,  ...,  4.5603e-02,
          5.2901e-02, -3.2375e-02],
        [ 7.5847e-01, -2.0678e-01,  3.1158e-01,  ...,  1.8279e-01,
          1.2178e-01, -1.2754e-01],
        [ 6.7006e-01, -2.3991e-01,  8.5456e-01,  ...,  7.6216e-02,
         -3.0021e-03, -5.3558e-02],
        ...,
        [ 7.6488e-02, -1.1003e-01,  1.5403e-02,  ..., -8.3866e-02,
          5.5598e-02, -4.9043e-02],
        [ 2.5579e-01, -3.9088e-01,  4.3183e-01,  ..., -6.1258e-02,
         -8.7476e-02,  1.1535e-01],
        [-1.3282e-02,  4.4572e-03,  5.4438e-02,  ..., -7.1016e-04,
          2.4184e-02,  1.0762e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2314])
shifts shape: torch.Size([2314, 3])
sender shape: torch.Size([2314])
receiver shape: torch.Size([2314])
Edge attributes shape: torch.Size([2314, 9])
Edge attributes tensor([[ 1.0000,  1.2091,  0.9978,  ..., -0.0049, -0.9487, -0.5936],
        [ 1.0000, -0.2230,  1.7169,  ...,  2.1777, -0.1097, -0.0305],
        [ 1.0000,  1.4258, -0.7198,  ..., -0.5388,  0.6226, -1.0225],
        ...,
        [ 1.0000,  1.0136,  1.3696,  ...,  0.9791, -0.5503, -0.6006],
        [ 1.0000,  1.1018,  1.3358,  ...,  0.8770, -0.0696, -0.7826],
        [ 1.0000,  0.6856,  0.6284,  ..., -0.6765,  1.1855,  1.0748]])
Edge features shape: torch.Size([2314, 8])
Edge features tensor([[ 1.6908e-01, -6.3455e-02, -1.4526e-01,  ..., -1.5587e-01,
         -4.2491e-02,  1.7182e-01],
        [ 3.4446e-01,  4.3526e-01,  2.0554e-01,  ..., -3.6447e-01,
         -3.3190e-02,  3.2253e-01],
        [ 3.4486e-01,  4.3748e-01,  2.1011e-01,  ..., -3.7069e-01,
         -4.3292e-02,  3.1577e-01],
        ...,
        [ 7.6210e-02, -8.2962e-02,  1.4101e-02,  ...,  2.7861e-02,
          5.7373e-02, -9.0317e-02],
        [ 5.9053e-03, -1.0650e-02,  1.3303e-02,  ..., -6.0618e-03,
          1.7414e-04,  5.7477e-03],
        [ 2.2223e-01,  1.0671e-02, -2.2172e-01,  ...,  3.1914e-02,
         -2.1916e-01, -4.2438e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2314, 96])
Tensor Product Weights tensor([[ 8.7527e-02, -2.9821e-03, -6.6298e-02,  ...,  3.3727e-02,
          1.2312e-01,  1.4115e-01],
        [-1.7879e-01,  1.4009e-01, -5.6983e-02,  ...,  7.6646e-02,
          2.3697e-01,  3.6429e-02],
        [-1.8195e-01,  1.4080e-01, -5.7297e-02,  ...,  7.8986e-02,
          2.3521e-01,  3.0149e-02],
        ...,
        [ 2.1807e-02, -1.3936e-02,  2.6975e-02,  ..., -3.4608e-02,
         -3.3558e-02, -6.8354e-03],
        [ 2.2757e-03,  3.0736e-03, -7.7333e-03,  ..., -6.1764e-05,
          2.5750e-03, -3.3687e-03],
        [ 9.0393e-02,  4.1567e-02,  5.2975e-02,  ...,  1.0799e-02,
          8.0634e-02, -5.5349e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0526, -0.2471, -0.2540,  ...,  0.1196, -0.0878,  0.0847],
        [ 0.0416, -0.1402,  0.0622,  ...,  0.0784,  0.1530,  0.0123],
        [ 0.0880, -0.1799, -0.1754,  ...,  0.0256,  0.1967,  0.1149],
        ...,
        [ 0.0090, -0.2172,  0.0862,  ...,  0.1043,  0.2526,  0.1078],
        [ 0.0480, -0.2358, -0.0190,  ...,  0.2918, -0.0931,  0.0165],
        [ 0.0798, -0.1804,  0.1393,  ...,  0.2342, -0.1669,  0.1053]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5374, -0.3410,  0.9978,  ...,  0.0550,  0.0448, -0.0302],
        [ 0.7563, -0.2009,  0.3070,  ...,  0.1818,  0.1260, -0.1319],
        [ 0.7025, -0.2158,  0.7834,  ...,  0.0631,  0.0107, -0.0676],
        ...,
        [ 0.0925, -0.1066,  0.0158,  ..., -0.0211, -0.0661, -0.0405],
        [ 0.2530, -0.3898,  0.4303,  ..., -0.0625, -0.0883,  0.1151],
        [-0.0109,  0.0028,  0.0506,  ..., -0.0015,  0.0213,  0.0081]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2332])
shifts shape: torch.Size([2332, 3])
sender shape: torch.Size([2332])
receiver shape: torch.Size([2332])
Edge attributes shape: torch.Size([2332, 9])
Edge attributes tensor([[ 1.0000e+00,  1.2028e+00,  1.0005e+00,  ...,  1.0394e-03,
         -9.5993e-01, -5.7730e-01],
        [ 1.0000e+00, -2.3752e-01,  1.7144e+00,  ...,  2.1680e+00,
         -1.4817e-01, -3.3523e-02],
        [ 1.0000e+00,  1.4327e+00, -7.0320e-01,  ..., -5.6517e-01,
          6.1087e-01, -1.0328e+00],
        ...,
        [ 1.0000e+00,  9.7835e-01,  1.2121e+00,  ...,  5.2462e-01,
          1.1851e+00, -2.4761e-01],
        [ 1.0000e+00,  7.9896e-01,  1.5311e+00,  ...,  1.5030e+00,
          2.6049e-01, -4.0083e-01],
        [ 1.0000e+00,  1.5104e+00,  8.1945e-01,  ..., -3.6728e-01,
          2.2994e-01, -1.4421e+00]])
Edge features shape: torch.Size([2332, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1431,  ..., -0.1569, -0.0368,  0.1710],
        [ 0.3438,  0.4318,  0.1983,  ..., -0.3545, -0.0173,  0.3327],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0416,  0.3169],
        ...,
        [ 0.0434, -0.0593,  0.0377,  ...,  0.0583, -0.0314, -0.0153],
        [ 0.2213,  0.0089, -0.2209,  ...,  0.0266, -0.2191, -0.0354],
        [ 0.1128, -0.0907, -0.0399,  ..., -0.0754,  0.1195, -0.0206]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2332, 96])
Tensor Product Weights tensor([[ 0.0869, -0.0038, -0.0667,  ...,  0.0327,  0.1219,  0.1423],
        [-0.1737,  0.1391, -0.0564,  ...,  0.0729,  0.2395,  0.0460],
        [-0.1814,  0.1407, -0.0572,  ...,  0.0786,  0.2355,  0.0312],
        ...,
        [ 0.0114, -0.0006,  0.0020,  ..., -0.0045, -0.0194, -0.0021],
        [ 0.0908,  0.0406,  0.0493,  ...,  0.0127,  0.0828, -0.0498],
        [ 0.0440, -0.0242, -0.0073,  ..., -0.0318,  0.0139,  0.0677]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0536, -0.2235, -0.3214,  ...,  0.1571, -0.0652, -0.0061],
        [ 0.0408, -0.1433,  0.0717,  ...,  0.0804,  0.1537,  0.0105],
        [ 0.0865, -0.1968, -0.1820,  ...,  0.0356,  0.1775,  0.0661],
        ...,
        [ 0.0080, -0.1788,  0.0937,  ..., -0.0922,  0.0436, -0.1394],
        [ 0.0412, -0.2367, -0.0081,  ..., -0.1131, -0.0875,  0.3436],
        [ 0.0645, -0.1918,  0.1123,  ..., -0.2057, -0.1422,  0.3877]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5475, -0.3287,  0.9559,  ...,  0.0455,  0.0528, -0.0325],
        [ 0.7572, -0.2051,  0.3124,  ...,  0.1845,  0.1201, -0.1282],
        [ 0.6705, -0.2399,  0.8546,  ...,  0.0762, -0.0031, -0.0536],
        ...,
        [ 0.0766, -0.1099,  0.0150,  ..., -0.0909, -0.0167,  0.0631],
        [ 0.3042, -0.3617,  0.3900,  ..., -0.0254,  0.0448, -0.1631],
        [-0.0438, -0.0415,  0.1077,  ...,  0.0149, -0.0053,  0.0122]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2306])
shifts shape: torch.Size([2306, 3])
sender shape: torch.Size([2306])
receiver shape: torch.Size([2306])
Edge attributes shape: torch.Size([2306, 9])
Edge attributes tensor([[ 1.0000,  1.2056,  0.9980,  ..., -0.0044, -0.9560, -0.5828],
        [ 1.0000, -0.2271,  1.7162,  ...,  2.1750, -0.1235, -0.0313],
        [ 1.0000,  1.4269, -0.7191,  ..., -0.5399,  0.6206, -1.0257],
        ...,
        [ 1.0000,  0.9878,  1.2079,  ...,  0.5133,  1.1724, -0.2649],
        [ 1.0000,  0.7872,  1.5365,  ...,  1.5216,  0.2758, -0.3876],
        [ 1.0000,  1.5123,  0.8175,  ..., -0.3709,  0.2227, -1.4476]])
Edge features shape: torch.Size([2306, 8])
Edge features tensor([[ 0.1691, -0.0635, -0.1453,  ..., -0.1559, -0.0425,  0.1718],
        [ 0.3444,  0.4351,  0.2053,  ..., -0.3641, -0.0326,  0.3229],
        [ 0.3449,  0.4375,  0.2101,  ..., -0.3706, -0.0432,  0.3158],
        ...,
        [ 0.0419, -0.0579,  0.0380,  ...,  0.0574, -0.0337, -0.0109],
        [ 0.2183,  0.0034, -0.2182,  ...,  0.0101, -0.2180, -0.0134],
        [ 0.1174, -0.0902, -0.0481,  ..., -0.0891,  0.1181, -0.0017]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2306, 96])
Tensor Product Weights tensor([[ 8.7525e-02, -2.9851e-03, -6.6300e-02,  ...,  3.3723e-02,
          1.2312e-01,  1.4116e-01],
        [-1.7860e-01,  1.4005e-01, -5.6962e-02,  ...,  7.6502e-02,
          2.3707e-01,  3.6806e-02],
        [-1.8192e-01,  1.4079e-01, -5.7294e-02,  ...,  7.8966e-02,
          2.3522e-01,  3.0202e-02],
        ...,
        [ 1.1068e-02, -1.4377e-04,  4.5673e-04,  ..., -3.2347e-03,
         -1.7891e-02, -9.7132e-04],
        [ 9.1943e-02,  3.7730e-02,  3.8058e-02,  ...,  1.8361e-02,
          8.9501e-02, -3.2693e-02],
        [ 4.7699e-02, -2.4150e-02, -1.5233e-02,  ..., -2.7787e-02,
          2.3671e-02,  8.0243e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0526, -0.2471, -0.2533,  ...,  0.1182, -0.0886,  0.0847],
        [ 0.0406, -0.1381,  0.0621,  ...,  0.0746,  0.1540,  0.0086],
        [ 0.0880, -0.1800, -0.1759,  ...,  0.0250,  0.1965,  0.1151],
        ...,
        [ 0.0077, -0.1785,  0.0911,  ..., -0.0935,  0.0437, -0.1123],
        [ 0.0413, -0.2364, -0.0026,  ..., -0.1152, -0.0747,  0.3510],
        [ 0.0651, -0.1900,  0.1288,  ..., -0.2089, -0.1322,  0.4116]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5373, -0.3411,  0.9974,  ...,  0.0550,  0.0443, -0.0306],
        [ 0.7382, -0.1975,  0.3088,  ...,  0.1859,  0.1209, -0.1347],
        [ 0.7011, -0.2158,  0.7845,  ...,  0.0628,  0.0113, -0.0679],
        ...,
        [ 0.0742, -0.1100,  0.0180,  ..., -0.0900, -0.0139,  0.0671],
        [ 0.3060, -0.3582,  0.3852,  ..., -0.0234,  0.0409, -0.1656],
        [-0.0341, -0.0453,  0.0972,  ...,  0.0129, -0.0068,  0.0100]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2306])
shifts shape: torch.Size([2306, 3])
sender shape: torch.Size([2306])
receiver shape: torch.Size([2306])
Edge attributes shape: torch.Size([2306, 9])
Edge attributes tensor([[ 1.0000,  1.2033,  0.9950,  ..., -0.0111, -0.9630, -0.5718],
        [ 1.0000, -0.2334,  1.7147,  ...,  2.1691, -0.1623, -0.0317],
        [ 1.0000,  1.4286, -0.7098,  ..., -0.5548,  0.6183, -1.0235],
        ...,
        [ 1.0000,  0.4005,  1.0091,  ...,  0.0205,  1.7582,  1.0721],
        [ 1.0000,  1.2835,  0.8014,  ..., -0.4000,  0.8720, -0.6048],
        [ 1.0000,  1.1076,  1.3177,  ...,  0.8232,  0.3271, -0.7680]])
Edge features shape: torch.Size([2306, 8])
Edge features tensor([[ 0.1681, -0.0644, -0.1434,  ..., -0.1567, -0.0376,  0.1712],
        [ 0.3438,  0.4317,  0.1982,  ..., -0.3543, -0.0171,  0.3328],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3699, -0.0420,  0.3166],
        ...,
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.0421, -0.0581,  0.0380,  ...,  0.0575, -0.0334, -0.0114],
        [ 0.1201, -0.0899, -0.0528,  ..., -0.0965,  0.1162,  0.0095]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        ...,
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460],
        [ 0.0269,  0.1162,  0.4332,  ..., -1.0983, -0.7037,  0.5071],
        [-0.0908, -0.2430, -0.0634,  ..., -0.1056,  0.6191,  0.5460]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2306, 96])
Tensor Product Weights tensor([[ 8.7009e-02, -3.6458e-03, -6.6643e-02,  ...,  3.2832e-02,
          1.2209e-01,  1.4216e-01],
        [-1.7362e-01,  1.3906e-01, -5.6377e-02,  ...,  7.2821e-02,
          2.3955e-01,  4.6117e-02],
        [-1.8155e-01,  1.4070e-01, -5.7260e-02,  ...,  7.8691e-02,
          2.3544e-01,  3.0957e-02],
        ...,
        [ 2.1901e-03,  3.0002e-03, -7.4199e-03,  ..., -2.0856e-04,
          2.4579e-03, -3.5521e-03],
        [ 1.1106e-02, -1.9780e-04,  6.4882e-04,  ..., -3.3886e-03,
         -1.8072e-02, -1.1027e-03],
        [ 4.9881e-02, -2.3969e-02, -1.9764e-02,  ..., -2.5190e-02,
          2.9392e-02,  8.7214e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.0536, -0.2235, -0.3217,  ...,  0.1562, -0.0672, -0.0074],
        [ 0.0411, -0.1442,  0.0755,  ...,  0.0769,  0.1552,  0.0058],
        [ 0.0867, -0.1968, -0.1828,  ...,  0.0369,  0.1796,  0.0647],
        ...,
        [ 0.0075, -0.1785,  0.0921,  ...,  0.1012, -0.2751,  0.0826],
        [ 0.0478, -0.2300, -0.0127,  ..., -0.0027,  0.2295,  0.2527],
        [ 0.0906, -0.1746,  0.2002,  ..., -0.0986,  0.2318,  0.3086]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.5475, -0.3288,  0.9560,  ...,  0.0456,  0.0525, -0.0333],
        [ 0.7621, -0.2049,  0.3108,  ...,  0.1815,  0.1223, -0.1279],
        [ 0.6729, -0.2406,  0.8552,  ...,  0.0755, -0.0053, -0.0534],
        ...,
        [ 0.0734, -0.1104,  0.0194,  ..., -0.0428, -0.0750,  0.0743],
        [ 0.1175, -0.3674,  0.4306,  ...,  0.0378, -0.0840, -0.1638],
        [-0.0354, -0.0071,  0.0624,  ..., -0.0563,  0.0085,  0.0461]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
process_conformer_ensemble input shape: torch.Size([32, 96, 32])
Num conformers: 32, Total dim: 3072
Scalar dim: 768, Vector dim: 768
mean_pooling:
  Scalar shape: torch.Size([32, 768])
  Vector shape: torch.Size([32, 768, 3])
  Scalar: tensor([[-0.3392,  0.2136, -0.0858,  ..., -0.0042,  0.0312, -0.0605],
        [-0.3394,  0.2136, -0.0859,  ..., -0.0035,  0.0316, -0.0603],
        [-0.3396,  0.2137, -0.0859,  ..., -0.0037,  0.0312, -0.0606],
        ...,
        [-0.2749,  0.1967, -0.0962,  ..., -0.0314,  0.0319, -0.0611],
        [-0.3390,  0.2136, -0.0861,  ..., -0.0031,  0.0305, -0.0610],
        [-0.2750,  0.1967, -0.0961,  ..., -0.0323,  0.0320, -0.0605]],
       grad_fn=<DivBackward0>)
  Vector: tensor([[[-0.2923, -0.0328,  0.0818],
         [ 0.1544,  0.0779, -0.0303],
         [ 0.1655,  0.0532,  0.3974],
         ...,
         [-0.0248, -0.0122, -0.0608],
         [-0.0963,  0.0071,  0.1888],
         [ 0.0246, -0.0564, -0.0680]],

        [[-0.2931, -0.0330,  0.0822],
         [ 0.1552,  0.0775, -0.0301],
         [ 0.1658,  0.0532,  0.4011],
         ...,
         [-0.0682, -0.0356,  0.0004],
         [ 0.1627,  0.0038, -0.0634],
         [-0.1169,  0.0013,  0.0510]],

        [[-0.2925, -0.0328,  0.0818],
         [ 0.1539,  0.0782, -0.0304],
         [ 0.1656,  0.0535,  0.3991],
         ...,
         [-0.0646, -0.0435,  0.0093],
         [ 0.1533,  0.0043, -0.1091],
         [-0.1088, -0.0181,  0.0696]],

        ...,

        [[-0.2624, -0.0348,  0.0735],
         [ 0.1683,  0.0555, -0.0288],
         [ 0.1395,  0.0258,  0.2028],
         ...,
         [-0.0481, -0.0231, -0.0638],
         [ 0.0537, -0.0489,  0.1573],
         [-0.0671,  0.0413, -0.1044]],

        [[-0.2921, -0.0327,  0.0815],
         [ 0.1520,  0.0793, -0.0308],
         [ 0.1655,  0.0542,  0.4004],
         ...,
         [-0.0465, -0.0249, -0.0631],
         [ 0.0520, -0.0492,  0.1583],
         [-0.0630,  0.0381, -0.1039]],

        [[-0.2640, -0.0349,  0.0736],
         [ 0.1706,  0.0552, -0.0290],
         [ 0.1404,  0.0250,  0.2045],
         ...,
         [-0.0252, -0.0154, -0.0616],
         [-0.0886,  0.0084,  0.1855],
         [ 0.0308, -0.0502, -0.0753]]], grad_fn=<DivBackward0>)
--------------------------------------------------
deep_sets:
  Scalar shape: torch.Size([32, 768])
  Vector shape: torch.Size([32, 768, 3])
  Scalar: tensor([[ 0.0066,  0.0162, -0.0034,  ...,  0.0119, -0.0064, -0.0002],
        [ 0.0066,  0.0162, -0.0034,  ...,  0.0119, -0.0064, -0.0002],
        [ 0.0066,  0.0162, -0.0034,  ...,  0.0119, -0.0064, -0.0002],
        ...,
        [ 0.0069,  0.0164, -0.0035,  ...,  0.0119, -0.0061, -0.0002],
        [ 0.0065,  0.0162, -0.0034,  ...,  0.0119, -0.0065, -0.0001],
        [ 0.0070,  0.0164, -0.0035,  ...,  0.0120, -0.0060, -0.0003]],
       grad_fn=<SiluBackward0>)
  Vector: tensor([[[ 0.0085, -0.0073, -0.0033],
         [ 0.0055, -0.0048, -0.0045],
         [ 0.0051,  0.0086, -0.0114],
         ...,
         [ 0.0043, -0.0065, -0.0092],
         [-0.0100, -0.0047,  0.0075],
         [-0.0010, -0.0061, -0.0110]],

        [[ 0.0078, -0.0068, -0.0029],
         [ 0.0069, -0.0059, -0.0052],
         [ 0.0055,  0.0096, -0.0114],
         ...,
         [ 0.0050, -0.0054, -0.0090],
         [-0.0102, -0.0044,  0.0079],
         [-0.0013, -0.0056, -0.0108]],

        [[ 0.0085, -0.0080, -0.0027],
         [ 0.0062, -0.0061, -0.0051],
         [ 0.0052,  0.0081, -0.0115],
         ...,
         [ 0.0054, -0.0051, -0.0092],
         [-0.0097, -0.0052,  0.0079],
         [-0.0016, -0.0053, -0.0102]],

        ...,

        [[ 0.0089, -0.0079, -0.0020],
         [ 0.0056, -0.0062, -0.0058],
         [ 0.0056,  0.0079, -0.0123],
         ...,
         [ 0.0047, -0.0063, -0.0085],
         [-0.0086, -0.0049,  0.0072],
         [-0.0013, -0.0063, -0.0096]],

        [[ 0.0074, -0.0078, -0.0023],
         [ 0.0062, -0.0059, -0.0064],
         [ 0.0048,  0.0090, -0.0115],
         ...,
         [ 0.0053, -0.0057, -0.0087],
         [-0.0093, -0.0054,  0.0083],
         [-0.0014, -0.0056, -0.0101]],

        [[ 0.0082, -0.0065, -0.0031],
         [ 0.0050, -0.0050, -0.0050],
         [ 0.0046,  0.0087, -0.0117],
         ...,
         [ 0.0037, -0.0066, -0.0091],
         [-0.0100, -0.0039,  0.0085],
         [-0.0005, -0.0065, -0.0105]]], grad_fn=<ViewBackward0>)
--------------------------------------------------
self_attention:
  Scalar shape: torch.Size([32, 768])
  Vector shape: torch.Size([32, 768, 3])
  Scalar: tensor([[-0.0041,  0.0190, -0.0208,  ..., -0.0202, -0.0162,  0.0173],
        [-0.0041,  0.0190, -0.0208,  ..., -0.0202, -0.0162,  0.0173],
        [-0.0041,  0.0190, -0.0208,  ..., -0.0202, -0.0162,  0.0172],
        ...,
        [-0.0043,  0.0187, -0.0211,  ..., -0.0206, -0.0165,  0.0171],
        [-0.0042,  0.0190, -0.0209,  ..., -0.0203, -0.0162,  0.0174],
        [-0.0042,  0.0187, -0.0210,  ..., -0.0205, -0.0165,  0.0169]],
       grad_fn=<SiluBackward0>)
  Vector: tensor([[[-0.0048,  0.0030, -0.0009],
         [ 0.0075, -0.0052, -0.0071],
         [-0.0003,  0.0041,  0.0029],
         ...,
         [ 0.0093,  0.0029, -0.0018],
         [ 0.0087, -0.0038, -0.0109],
         [ 0.0049, -0.0034,  0.0091]],

        [[-0.0041,  0.0002, -0.0018],
         [ 0.0077, -0.0058, -0.0078],
         [-0.0003,  0.0050,  0.0046],
         ...,
         [ 0.0084,  0.0025, -0.0032],
         [ 0.0088, -0.0050, -0.0105],
         [ 0.0050, -0.0026,  0.0092]],

        [[-0.0044,  0.0014, -0.0013],
         [ 0.0076, -0.0058, -0.0075],
         [-0.0009,  0.0043,  0.0043],
         ...,
         [ 0.0086,  0.0025, -0.0032],
         [ 0.0094, -0.0047, -0.0096],
         [ 0.0054, -0.0011,  0.0085]],

        ...,

        [[-0.0046,  0.0029, -0.0009],
         [ 0.0066, -0.0062, -0.0068],
         [ 0.0003,  0.0039,  0.0030],
         ...,
         [ 0.0091,  0.0034, -0.0022],
         [ 0.0083, -0.0042, -0.0098],
         [ 0.0053, -0.0029,  0.0096]],

        [[-0.0037,  0.0013, -0.0019],
         [ 0.0080, -0.0055, -0.0078],
         [ 0.0002,  0.0045,  0.0046],
         ...,
         [ 0.0089,  0.0034, -0.0032],
         [ 0.0092, -0.0047, -0.0099],
         [ 0.0045, -0.0022,  0.0094]],

        [[-0.0042,  0.0018, -0.0012],
         [ 0.0073, -0.0056, -0.0072],
         [ 0.0003,  0.0034,  0.0034],
         ...,
         [ 0.0099,  0.0037, -0.0015],
         [ 0.0094, -0.0038, -0.0113],
         [ 0.0053, -0.0031,  0.0088]]], grad_fn=<ViewBackward0>)
--------------------------------------------------
==================================================

Batch 6 in Ensemble: 102_vi
Number of conformers in this batch: 18
Unique Atomic Numbers: [6, 1, 8, 15]
Average number of neighbors: 24.09
Processing batch of 18 conformers
Initialized CustomNonLinearReadout with input irreps: 32x0e+32x1o
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2312])
shifts shape: torch.Size([2312, 3])
sender shape: torch.Size([2312])
receiver shape: torch.Size([2312])
Edge attributes shape: torch.Size([2312, 9])
Edge attributes tensor([[ 1.0000,  1.2109,  0.9919,  ..., -0.0180, -0.9495, -0.5916],
        [ 1.0000, -0.2272,  1.7154,  ...,  2.1719, -0.1688, -0.0296],
        [ 1.0000,  1.4356, -0.7113,  ..., -0.5523,  0.6044, -1.0507],
        ...,
        [ 1.0000,  1.0058,  1.3797,  ...,  1.0101, -0.5187, -0.5983],
        [ 1.0000,  1.0931,  1.3432,  ...,  0.8992, -0.0480, -0.7708],
        [ 1.0000,  0.6690,  0.6313,  ..., -0.6725,  1.1961,  1.1014]])
Edge features shape: torch.Size([2312, 8])
Edge features tensor([[ 0.1676, -0.0648, -0.1426,  ..., -0.1571, -0.0356,  0.1708],
        [ 0.3439,  0.4319,  0.1986,  ..., -0.3548, -0.0179,  0.3323],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3695, -0.0414,  0.3171],
        ...,
        [ 0.0766, -0.0831,  0.0137,  ...,  0.0271,  0.0584, -0.0905],
        [ 0.0056, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.2195,  0.0055, -0.2193,  ...,  0.0166, -0.2186, -0.0221]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2312, 96])
Tensor Product Weights tensor([[-0.0093, -0.0639, -0.0976,  ...,  0.1208, -0.0160, -0.0549],
        [ 0.1456, -0.0737, -0.0869,  ...,  0.1672,  0.0904, -0.5811],
        [ 0.1565, -0.0830, -0.0690,  ...,  0.1684,  0.0949, -0.5835],
        ...,
        [ 0.0047, -0.0176, -0.0593,  ...,  0.0361,  0.0535, -0.0246],
        [ 0.0039, -0.0100, -0.0093,  ...,  0.0085, -0.0018, -0.0028],
        [-0.1191, -0.0654,  0.0927,  ..., -0.1358, -0.1046,  0.2693]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.3443,  0.2009,  0.0123,  ...,  0.1168, -0.0097, -0.0306],
        [ 0.0126,  0.4126,  0.1012,  ...,  0.0374, -0.2239, -0.6865],
        [ 0.2092,  0.2266,  0.0514,  ...,  0.1037, -0.0096,  0.0250],
        ...,
        [ 0.2403,  0.3044, -0.2173,  ...,  0.0749,  0.0242, -0.0443],
        [-0.3175,  0.1420,  0.0994,  ...,  0.1709,  0.3474,  0.1095],
        [ 0.0700,  0.4314, -0.0568,  ...,  0.0060,  0.0096, -0.0105]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.2040, -0.0931, -0.2547,  ...,  0.2350, -0.0661, -0.1047],
        [ 0.0247,  0.0127, -0.1323,  ...,  0.1566,  0.3156,  0.0812],
        [ 0.1968, -0.1260, -0.2800,  ...,  0.2836,  0.1338, -0.0806],
        ...,
        [-0.4559,  0.1811,  0.1726,  ..., -0.0342,  0.0958, -0.1891],
        [ 0.0760, -0.0367, -0.0308,  ..., -0.3365, -0.5705,  0.0975],
        [-0.1958,  0.2258,  0.1995,  ...,  0.1081,  0.3497, -0.0102]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2328])
shifts shape: torch.Size([2328, 3])
sender shape: torch.Size([2328])
receiver shape: torch.Size([2328])
Edge attributes shape: torch.Size([2328, 9])
Edge attributes tensor([[ 1.0000,  1.2039,  1.0013,  ...,  0.0028, -0.9569, -0.5818],
        [ 1.0000, -0.2372,  1.7145,  ...,  2.1684, -0.1436, -0.0336],
        [ 1.0000,  1.4338, -0.7026,  ..., -0.5662,  0.6088, -1.0362],
        ...,
        [ 1.0000,  1.0050,  1.3781,  ...,  1.0053, -0.5363, -0.5933],
        [ 1.0000,  1.0932,  1.3429,  ...,  0.8982, -0.0659, -0.7705],
        [ 1.0000,  0.6784,  0.6330,  ..., -0.6700,  1.1952,  1.0836]])
Edge features shape: torch.Size([2328, 8])
Edge features tensor([[ 0.1679, -0.0645, -0.1431,  ..., -0.1569, -0.0369,  0.1710],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3546, -0.0175,  0.3326],
        [ 0.3448,  0.4371,  0.2094,  ..., -0.3697, -0.0417,  0.3169],
        ...,
        [ 0.0766, -0.0831,  0.0137,  ...,  0.0271,  0.0584, -0.0905],
        [ 0.0056, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.2200,  0.0064, -0.2198,  ...,  0.0193, -0.2188, -0.0257]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2328, 96])
Tensor Product Weights tensor([[-0.0096, -0.0639, -0.0968,  ...,  0.1201, -0.0164, -0.0538],
        [ 0.1454, -0.0736, -0.0872,  ...,  0.1672,  0.0903, -0.5810],
        [ 0.1566, -0.0831, -0.0688,  ...,  0.1684,  0.0950, -0.5835],
        ...,
        [ 0.0047, -0.0176, -0.0593,  ...,  0.0361,  0.0535, -0.0247],
        [ 0.0039, -0.0100, -0.0093,  ...,  0.0085, -0.0018, -0.0028],
        [-0.1204, -0.0653,  0.0941,  ..., -0.1385, -0.1056,  0.2722]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.3476,  0.2021,  0.0147,  ...,  0.1167, -0.0084, -0.0773],
        [ 0.0101,  0.4110,  0.1008,  ...,  0.0460, -0.2264, -0.6803],
        [ 0.2175,  0.2269,  0.0589,  ...,  0.1003, -0.0168,  0.0734],
        ...,
        [ 0.1343,  0.3152, -0.2014,  ...,  0.0071,  0.0035, -0.0340],
        [-0.3173,  0.1423,  0.0993,  ...,  0.1748,  0.3449,  0.1060],
        [ 0.0717,  0.4336, -0.0576,  ...,  0.0031, -0.0057, -0.0188]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.2001, -0.0957, -0.2542,  ...,  0.2292, -0.0620, -0.1158],
        [ 0.0256,  0.0118, -0.1326,  ...,  0.1530,  0.3134,  0.0824],
        [ 0.1904, -0.1290, -0.2749,  ...,  0.2847,  0.1296, -0.0640],
        ...,
        [-0.6232,  0.2004,  0.1912,  ..., -0.0402,  0.0272, -0.1825],
        [ 0.0762, -0.0359, -0.0313,  ..., -0.3369, -0.5700,  0.1014],
        [-0.1949,  0.2269,  0.2020,  ...,  0.1070,  0.3520, -0.0107]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2310])
shifts shape: torch.Size([2310, 3])
sender shape: torch.Size([2310])
receiver shape: torch.Size([2310])
Edge attributes shape: torch.Size([2310, 9])
Edge attributes tensor([[ 1.0000,  1.2089,  0.9976,  ..., -0.0053, -0.9493, -0.5926],
        [ 1.0000, -0.2227,  1.7170,  ...,  2.1779, -0.1085, -0.0305],
        [ 1.0000,  1.4252, -0.7200,  ..., -0.5384,  0.6238, -1.0205],
        ...,
        [ 1.0000,  1.0030,  1.3789,  ...,  1.0077, -0.5420, -0.5895],
        [ 1.0000,  1.0889,  1.3463,  ...,  0.9086, -0.0696, -0.7644],
        [ 1.0000,  0.6295,  1.0696,  ...,  0.1611,  1.6683,  0.6864]])
Edge features shape: torch.Size([2310, 8])
Edge features tensor([[ 0.1691, -0.0635, -0.1453,  ..., -0.1559, -0.0425,  0.1718],
        [ 0.3445,  0.4352,  0.2054,  ..., -0.3643, -0.0330,  0.3227],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3707, -0.0434,  0.3157],
        ...,
        [ 0.0766, -0.0831,  0.0137,  ...,  0.0271,  0.0584, -0.0905],
        [ 0.0056, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.1101, -0.0908, -0.0352,  ..., -0.0674,  0.1191, -0.0309]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2310, 96])
Tensor Product Weights tensor([[-0.0110, -0.0640, -0.0932,  ...,  0.1167, -0.0180, -0.0487],
        [ 0.1526, -0.0796, -0.0755,  ...,  0.1680,  0.0933, -0.5827],
        [ 0.1574, -0.0838, -0.0675,  ...,  0.1684,  0.0953, -0.5837],
        ...,
        [ 0.0047, -0.0176, -0.0593,  ...,  0.0360,  0.0535, -0.0246],
        [ 0.0039, -0.0100, -0.0093,  ...,  0.0085, -0.0018, -0.0028],
        [ 0.0124, -0.0487, -0.1374,  ...,  0.1156,  0.0481, -0.1039]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.3915,  0.2245,  0.0401,  ...,  0.1071, -0.0128, -0.0296],
        [ 0.0042,  0.4020,  0.0916,  ...,  0.0461, -0.2183, -0.6801],
        [ 0.1606,  0.2228,  0.0031,  ...,  0.0899,  0.0018,  0.0768],
        ...,
        [ 0.1346,  0.3154, -0.2017,  ...,  0.0017,  0.0320, -0.0065],
        [-0.3160,  0.1417,  0.0999,  ...,  0.1749,  0.3422,  0.1027],
        [ 0.0761,  0.4332, -0.0537,  ...,  0.0033,  0.0125, -0.0128]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.1644, -0.1588, -0.2503,  ...,  0.2442, -0.0248, -0.0824],
        [ 0.0290,  0.0170, -0.1408,  ...,  0.1625,  0.3070,  0.1051],
        [ 0.2292, -0.1083, -0.3232,  ...,  0.3282,  0.1187, -0.0052],
        ...,
        [-0.6211,  0.1997,  0.1909,  ..., -0.0569,  0.0409, -0.1752],
        [ 0.0789, -0.0391, -0.0320,  ..., -0.3413, -0.5654,  0.1047],
        [-0.1840,  0.2226,  0.1992,  ...,  0.0947,  0.3593, -0.0091]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2308])
shifts shape: torch.Size([2308, 3])
sender shape: torch.Size([2308])
receiver shape: torch.Size([2308])
Edge attributes shape: torch.Size([2308, 9])
Edge attributes tensor([[ 1.0000,  1.2066,  0.9981,  ..., -0.0042, -0.9538, -0.5861],
        [ 1.0000, -0.2264,  1.7163,  ...,  2.1754, -0.1206, -0.0312],
        [ 1.0000,  1.4273, -0.7189,  ..., -0.5401,  0.6199, -1.0270],
        ...,
        [ 1.0000,  0.7193,  1.3191,  ...,  0.8273, -1.4675,  0.1454],
        [ 1.0000,  1.0022,  1.3794,  ...,  1.0094, -0.5421, -0.5886],
        [ 1.0000,  1.0922,  1.3438,  ...,  0.9009, -0.0595, -0.7693]])
Edge features shape: torch.Size([2308, 8])
Edge features tensor([[ 1.6905e-01, -6.3478e-02, -1.4522e-01,  ..., -1.5590e-01,
         -4.2371e-02,  1.7181e-01],
        [ 3.4444e-01,  4.3516e-01,  2.0534e-01,  ..., -3.6419e-01,
         -3.2738e-02,  3.2283e-01],
        [ 3.4486e-01,  4.3750e-01,  2.1016e-01,  ..., -3.7075e-01,
         -4.3383e-02,  3.1571e-01],
        ...,
        [ 2.4739e-02, -3.8380e-02,  3.4806e-02,  ...,  3.2025e-02,
         -3.9109e-02,  2.8651e-02],
        [ 7.6211e-02, -8.2962e-02,  1.4101e-02,  ...,  2.7860e-02,
          5.7374e-02, -9.0317e-02],
        [ 5.9093e-03, -1.0657e-02,  1.3310e-02,  ..., -6.0584e-03,
          1.6578e-04,  5.7594e-03]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2308, 96])
Tensor Product Weights tensor([[-0.0110, -0.0640, -0.0933,  ...,  0.1168, -0.0180, -0.0488],
        [ 0.1525, -0.0795, -0.0757,  ...,  0.1680,  0.0933, -0.5827],
        [ 0.1574, -0.0838, -0.0675,  ...,  0.1684,  0.0953, -0.5837],
        ...,
        [-0.0018,  0.0025,  0.0160,  ..., -0.0009,  0.0155,  0.0246],
        [ 0.0046, -0.0172, -0.0584,  ...,  0.0353,  0.0534, -0.0238],
        [ 0.0039, -0.0101, -0.0092,  ...,  0.0086, -0.0017, -0.0026]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 3.9111e-01,  2.2381e-01,  3.9801e-02,  ...,  1.0691e-01,
         -1.3985e-02, -2.9725e-02],
        [ 2.4630e-05,  4.0404e-01,  8.8498e-02,  ...,  4.0996e-02,
         -2.2041e-01, -6.8221e-01],
        [ 1.6037e-01,  2.2243e-01,  2.5349e-03,  ...,  9.0144e-02,
          1.2197e-03,  7.7205e-02],
        ...,
        [ 2.4743e-01,  3.0695e-01, -2.2029e-01,  ...,  1.9056e-02,
          1.1022e-02, -8.2353e-02],
        [-3.1515e-01,  1.4153e-01,  1.0009e-01,  ...,  1.7563e-01,
          3.4611e-01,  1.0580e-01],
        [ 7.9059e-02,  4.3427e-01, -5.3056e-02,  ...,  5.2332e-03,
          1.2421e-02, -7.6847e-03]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.1641, -0.1591, -0.2507,  ...,  0.2438, -0.0239, -0.0832],
        [ 0.0351,  0.0222, -0.1463,  ...,  0.1638,  0.3119,  0.0982],
        [ 0.2290, -0.1085, -0.3237,  ...,  0.3276,  0.1190, -0.0058],
        ...,
        [-0.4490,  0.1839,  0.1780,  ..., -0.1052,  0.0046, -0.1899],
        [ 0.0780, -0.0362, -0.0316,  ..., -0.3362, -0.5708,  0.1027],
        [-0.1855,  0.2246,  0.2020,  ...,  0.1070,  0.3498, -0.0144]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2304])
shifts shape: torch.Size([2304, 3])
sender shape: torch.Size([2304])
receiver shape: torch.Size([2304])
Edge attributes shape: torch.Size([2304, 9])
Edge attributes tensor([[ 1.0000,  1.2001,  0.9958,  ..., -0.0095, -0.9691, -0.5628],
        [ 1.0000, -0.2381,  1.7138,  ...,  2.1656, -0.1760, -0.0325],
        [ 1.0000,  1.4304, -0.7083,  ..., -0.5572,  0.6149, -1.0288],
        ...,
        [ 1.0000,  0.1376,  0.9485,  ..., -0.1121,  1.7666,  1.3313],
        [ 1.0000,  0.4024,  1.0099,  ...,  0.0222,  1.7580,  1.0691],
        [ 1.0000,  1.1006,  1.3201,  ...,  0.8303,  0.3652, -0.7523]])
Edge features shape: torch.Size([2304, 8])
Edge features tensor([[ 1.6804e-01, -6.4411e-02, -1.4335e-01,  ..., -1.5677e-01,
         -3.7507e-02,  1.7114e-01],
        [ 3.4380e-01,  4.3160e-01,  1.9803e-01,  ..., -3.5402e-01,
         -1.6670e-02,  3.3309e-01],
        [ 3.4481e-01,  4.3718e-01,  2.0949e-01,  ..., -3.6985e-01,
         -4.1908e-02,  3.1671e-01],
        ...,
        [ 7.6270e-02, -8.2990e-02,  1.4033e-02,  ...,  2.7729e-02,
          5.7549e-02, -9.0348e-02],
        [ 5.9556e-03, -1.0735e-02,  1.3396e-02,  ..., -6.0197e-03,
          7.1164e-05,  5.8914e-03],
        [ 1.1543e-01, -9.0470e-02, -4.4523e-02,  ..., -8.3251e-02,
          1.1898e-01, -1.0002e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2304, 96])
Tensor Product Weights tensor([[-0.0098, -0.0639, -0.0964,  ...,  0.1197, -0.0165, -0.0533],
        [ 0.1450, -0.0732, -0.0879,  ...,  0.1672,  0.0901, -0.5809],
        [ 0.1568, -0.0832, -0.0687,  ...,  0.1684,  0.0950, -0.5835],
        ...,
        [ 0.0046, -0.0173, -0.0585,  ...,  0.0355,  0.0534, -0.0239],
        [ 0.0039, -0.0101, -0.0092,  ...,  0.0086, -0.0017, -0.0025],
        [ 0.0128, -0.0521, -0.1449,  ...,  0.1269,  0.0445, -0.1129]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.3477,  0.2016,  0.0147,  ...,  0.1171, -0.0110, -0.0759],
        [ 0.0110,  0.4156,  0.0991,  ...,  0.0488, -0.2100, -0.6791],
        [ 0.2165,  0.2281,  0.0609,  ...,  0.1011, -0.0182,  0.0731],
        ...,
        [ 0.2464,  0.3152, -0.2011,  ...,  0.0872,  0.0548,  0.0453],
        [-0.3111,  0.1595,  0.1146,  ...,  0.3132,  0.0575, -0.0939],
        [ 0.0663,  0.4496, -0.0408,  ..., -0.3446, -0.3258,  0.0640]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.1996, -0.0960, -0.2544,  ...,  0.2275, -0.0628, -0.1177],
        [ 0.0258,  0.0181, -0.1342,  ...,  0.1555,  0.3198,  0.0681],
        [ 0.1922, -0.1290, -0.2742,  ...,  0.2829,  0.1286, -0.0678],
        ...,
        [-0.4518,  0.1761,  0.1714,  ..., -0.1817, -0.0506,  0.0553],
        [ 0.0805, -0.0612, -0.0201,  ...,  0.0117, -0.4558, -0.5239],
        [-0.1921,  0.2220,  0.1856,  ..., -0.1139,  0.4675,  0.2609]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2326])
shifts shape: torch.Size([2326, 3])
sender shape: torch.Size([2326])
receiver shape: torch.Size([2326])
Edge attributes shape: torch.Size([2326, 9])
Edge attributes tensor([[ 1.0000,  1.1993,  1.0012,  ...,  0.0028, -0.9665, -0.5676],
        [ 1.0000, -0.2424,  1.7134,  ...,  2.1643, -0.1626, -0.0344],
        [ 1.0000,  1.4346, -0.7016,  ..., -0.5676,  0.6074, -1.0382],
        ...,
        [ 1.0000,  1.2857,  1.1557,  ...,  0.3752, -0.1586, -1.0598],
        [ 1.0000,  1.3514,  0.9174,  ..., -0.1770,  0.6825, -0.9645],
        [ 1.0000,  0.6880,  1.4584,  ...,  1.2599,  1.1904, -0.0475]])
Edge features shape: torch.Size([2326, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0366,  0.1710],
        [ 0.3438,  0.4316,  0.1980,  ..., -0.3540, -0.0167,  0.3331],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0416,  0.3169],
        ...,
        [ 0.2234,  0.0129, -0.2226,  ...,  0.0384, -0.2190, -0.0510],
        [ 0.0446, -0.0605,  0.0374,  ...,  0.0589, -0.0293, -0.0192],
        [ 0.1085, -0.0908, -0.0325,  ..., -0.0626,  0.1186, -0.0367]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2326, 96])
Tensor Product Weights tensor([[-0.0095, -0.0639, -0.0969,  ...,  0.1203, -0.0163, -0.0541],
        [ 0.1450, -0.0732, -0.0879,  ...,  0.1672,  0.0901, -0.5809],
        [ 0.1566, -0.0830, -0.0689,  ...,  0.1684,  0.0949, -0.5835],
        ...,
        [-0.1291, -0.0649,  0.1030,  ..., -0.1568, -0.1123,  0.2920],
        [-0.0036,  0.0062,  0.0122,  ..., -0.0051,  0.0341,  0.0298],
        [ 0.0123, -0.0475, -0.1348,  ...,  0.1120,  0.0491, -0.1009]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.3477,  0.2016,  0.0151,  ...,  0.1167, -0.0102, -0.0770],
        [ 0.0073,  0.4149,  0.0978,  ...,  0.0366, -0.2285, -0.6839],
        [ 0.2159,  0.2259,  0.0579,  ...,  0.1003, -0.0175,  0.0741],
        ...,
        [ 0.1349,  0.3151, -0.2021,  ...,  0.0206,  0.0236, -0.0115],
        [-0.3168,  0.0770,  0.0166,  ..., -0.0073,  0.0267, -0.0763],
        [ 0.1777,  0.3756, -0.0670,  ..., -0.0124,  0.0042, -0.0241]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.2000, -0.0960, -0.2540,  ...,  0.2286, -0.0616, -0.1170],
        [ 0.0303,  0.0189, -0.1386,  ...,  0.1559,  0.3225,  0.0743],
        [ 0.1909, -0.1289, -0.2751,  ...,  0.2834,  0.1300, -0.0661],
        ...,
        [-0.6200,  0.1991,  0.1894,  ..., -0.0810, -0.1417,  0.0947],
        [ 0.0839, -0.0752, -0.0634,  ..., -0.2062, -0.0409, -0.5487],
        [-0.1172,  0.1915,  0.1775,  ...,  0.0773, -0.0307,  0.3116]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2304])
shifts shape: torch.Size([2304, 3])
sender shape: torch.Size([2304])
receiver shape: torch.Size([2304])
Edge attributes shape: torch.Size([2304, 9])
Edge attributes tensor([[ 1.0000,  1.2068,  0.9971,  ..., -0.0066, -0.9541, -0.5855],
        [ 1.0000, -0.2245,  1.7166,  ...,  2.1765, -0.1185, -0.0307],
        [ 1.0000,  1.4252, -0.7204,  ..., -0.5379,  0.6238, -1.0207],
        ...,
        [ 1.0000,  0.9843,  1.2103,  ...,  0.5197,  1.1759, -0.2598],
        [ 1.0000,  0.7831,  1.5386,  ...,  1.5286,  0.2774, -0.3833],
        [ 1.0000,  1.5097,  0.8226,  ..., -0.3615,  0.2229, -1.4428]])
Edge features shape: torch.Size([2304, 8])
Edge features tensor([[ 0.1691, -0.0635, -0.1452,  ..., -0.1559, -0.0424,  0.1718],
        [ 0.3444,  0.4352,  0.2053,  ..., -0.3642, -0.0327,  0.3228],
        [ 0.3449,  0.4375,  0.2102,  ..., -0.3708, -0.0434,  0.3157],
        ...,
        [ 0.0421, -0.0580,  0.0380,  ...,  0.0575, -0.0335, -0.0113],
        [ 0.2185,  0.0038, -0.2185,  ...,  0.0114, -0.2181, -0.0152],
        [ 0.1170, -0.0903, -0.0473,  ..., -0.0878,  0.1183, -0.0036]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2304, 96])
Tensor Product Weights tensor([[-0.0110, -0.0640, -0.0932,  ...,  0.1168, -0.0180, -0.0488],
        [ 0.1525, -0.0795, -0.0757,  ...,  0.1680,  0.0933, -0.5827],
        [ 0.1575, -0.0838, -0.0675,  ...,  0.1684,  0.0953, -0.5837],
        ...,
        [-0.0038,  0.0068,  0.0150,  ..., -0.0057,  0.0320,  0.0311],
        [-0.1166, -0.0654,  0.0899,  ..., -0.1305, -0.1027,  0.2635],
        [ 0.0129, -0.0531, -0.1468,  ...,  0.1300,  0.0433, -0.1152]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 3.9173e-01,  2.2434e-01,  4.0211e-02,  ...,  1.0709e-01,
         -1.3590e-02, -2.9330e-02],
        [ 5.0539e-04,  4.0404e-01,  8.8755e-02,  ...,  4.0657e-02,
         -2.1876e-01, -6.8247e-01],
        [ 1.6051e-01,  2.2259e-01,  3.0839e-03,  ...,  9.0061e-02,
          1.2851e-03,  7.7442e-02],
        ...,
        [ 1.3417e-01,  3.1498e-01, -2.0164e-01,  ..., -2.0978e-02,
          1.9502e-02, -2.0775e-02],
        [-3.2017e-01,  7.6626e-02,  1.5231e-02,  ..., -4.9293e-03,
          2.6660e-02, -7.4226e-02],
        [ 1.6100e-01,  3.7287e-01, -7.1387e-02,  ..., -5.2226e-03,
          8.2151e-03, -1.8534e-02]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.1639, -0.1592, -0.2506,  ...,  0.2430, -0.0239, -0.0833],
        [ 0.0349,  0.0222, -0.1463,  ...,  0.1636,  0.3134,  0.0977],
        [ 0.2291, -0.1086, -0.3234,  ...,  0.3279,  0.1190, -0.0061],
        ...,
        [-0.6242,  0.2006,  0.1912,  ..., -0.0654, -0.1543,  0.0874],
        [ 0.0804, -0.0756, -0.0599,  ..., -0.1941, -0.0549, -0.5551],
        [-0.1358,  0.1955,  0.1772,  ...,  0.0818, -0.0294,  0.3098]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2298])
shifts shape: torch.Size([2298, 3])
sender shape: torch.Size([2298])
receiver shape: torch.Size([2298])
Edge attributes shape: torch.Size([2298, 9])
Edge attributes tensor([[ 1.0000,  1.2001,  0.9965,  ..., -0.0078, -0.9684, -0.5640],
        [ 1.0000, -0.2381,  1.7138,  ...,  2.1659, -0.1721, -0.0327],
        [ 1.0000,  1.4312, -0.7074,  ..., -0.5585,  0.6135, -1.0309],
        ...,
        [ 1.0000,  0.1458,  0.9482,  ..., -0.1127,  1.7654,  1.3286],
        [ 1.0000,  0.4041,  1.0079,  ...,  0.0177,  1.7558,  1.0700],
        [ 1.0000,  1.1095,  1.3159,  ...,  0.8180,  0.3278, -0.7706]])
Edge features shape: torch.Size([2298, 8])
Edge features tensor([[ 0.1680, -0.0644, -0.1434,  ..., -0.1568, -0.0375,  0.1711],
        [ 0.3438,  0.4316,  0.1979,  ..., -0.3539, -0.0165,  0.3332],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3699, -0.0419,  0.3167],
        ...,
        [ 0.0766, -0.0832,  0.0136,  ...,  0.0269,  0.0586, -0.0905],
        [ 0.0057, -0.0103,  0.0129,  ..., -0.0062,  0.0006,  0.0051],
        [ 0.1196, -0.0899, -0.0520,  ..., -0.0952,  0.1166,  0.0076]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2298, 96])
Tensor Product Weights tensor([[-0.0098, -0.0639, -0.0964,  ...,  0.1197, -0.0165, -0.0533],
        [ 0.1449, -0.0731, -0.0881,  ...,  0.1672,  0.0901, -0.5809],
        [ 0.1568, -0.0832, -0.0686,  ...,  0.1684,  0.0950, -0.5835],
        ...,
        [ 0.0047, -0.0177, -0.0595,  ...,  0.0362,  0.0535, -0.0248],
        [ 0.0039, -0.0100, -0.0093,  ...,  0.0086, -0.0018, -0.0028],
        [ 0.0129, -0.0545, -0.1494,  ...,  0.1348,  0.0411, -0.1186]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.3476,  0.2016,  0.0147,  ...,  0.1171, -0.0106, -0.0762],
        [ 0.0110,  0.4158,  0.0991,  ...,  0.0492, -0.2105, -0.6787],
        [ 0.2169,  0.2282,  0.0613,  ...,  0.1012, -0.0182,  0.0731],
        ...,
        [ 0.2418,  0.3170, -0.1973,  ...,  0.0937,  0.0566,  0.0411],
        [-0.3129,  0.1609,  0.1152,  ...,  0.3174,  0.0574, -0.0946],
        [ 0.0604,  0.4491, -0.0424,  ..., -0.3487, -0.3219,  0.0681]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.1997, -0.0960, -0.2544,  ...,  0.2277, -0.0628, -0.1174],
        [ 0.0257,  0.0183, -0.1343,  ...,  0.1552,  0.3200,  0.0679],
        [ 0.1922, -0.1291, -0.2741,  ...,  0.2831,  0.1286, -0.0674],
        ...,
        [-0.4528,  0.1755,  0.1676,  ..., -0.1791, -0.0497,  0.0578],
        [ 0.0793, -0.0616, -0.0189,  ...,  0.0089, -0.4552, -0.5233],
        [-0.1981,  0.2229,  0.1832,  ..., -0.1132,  0.4690,  0.2596]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2324])
shifts shape: torch.Size([2324, 3])
sender shape: torch.Size([2324])
receiver shape: torch.Size([2324])
Edge attributes shape: torch.Size([2324, 9])
Edge attributes tensor([[ 1.0000e+00,  1.2025e+00,  1.0004e+00,  ...,  8.7392e-04,
         -9.6049e-01, -5.7645e-01],
        [ 1.0000e+00, -2.3729e-01,  1.7144e+00,  ...,  2.1681e+00,
         -1.4774e-01, -3.3469e-02],
        [ 1.0000e+00,  1.4316e+00, -7.0345e-01,  ..., -5.6478e-01,
          6.1298e-01, -1.0289e+00],
        ...,
        [ 1.0000e+00,  1.0009e+00,  1.1966e+00,  ...,  4.8294e-01,
          1.1626e+00, -2.8103e-01],
        [ 1.0000e+00,  7.7293e-01,  1.5419e+00,  ...,  1.5399e+00,
          3.1618e-01, -3.6935e-01],
        [ 1.0000e+00,  1.5127e+00,  8.2061e-01,  ..., -3.6516e-01,
          2.0708e-01, -1.4525e+00]])
Edge features shape: torch.Size([2324, 8])
Edge features tensor([[ 1.6788e-01, -6.4555e-02, -1.4306e-01,  ..., -1.5689e-01,
         -3.6751e-02,  1.7103e-01],
        [ 3.4383e-01,  4.3176e-01,  1.9835e-01,  ..., -3.5446e-01,
         -1.7357e-02,  3.3266e-01],
        [ 3.4480e-01,  4.3713e-01,  2.0940e-01,  ..., -3.6973e-01,
         -4.1709e-02,  3.1685e-01],
        ...,
        [ 4.1132e-02, -5.7090e-02,  3.8108e-02,  ...,  5.6782e-02,
         -3.4879e-02, -8.3699e-03],
        [ 2.1628e-01, -2.3908e-04, -2.1628e-01,  ..., -7.1718e-04,
         -2.1628e-01,  9.5631e-04],
        [ 1.2119e-01, -8.9675e-02, -5.4835e-02,  ..., -9.9510e-02,
          1.1518e-01,  1.4285e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2324, 96])
Tensor Product Weights tensor([[-0.0096, -0.0639, -0.0969,  ...,  0.1202, -0.0163, -0.0539],
        [ 0.1453, -0.0735, -0.0874,  ...,  0.1672,  0.0903, -0.5810],
        [ 0.1567, -0.0831, -0.0688,  ...,  0.1684,  0.0950, -0.5835],
        ...,
        [-0.0039,  0.0069,  0.0159,  ..., -0.0059,  0.0311,  0.0315],
        [-0.1107, -0.0656,  0.0830,  ..., -0.1178, -0.0983,  0.2492],
        [ 0.0129, -0.0553, -0.1508,  ...,  0.1375,  0.0398, -0.1203]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.3476,  0.2020,  0.0148,  ...,  0.1168, -0.0087, -0.0769],
        [ 0.0120,  0.4123,  0.1016,  ...,  0.0431, -0.2249, -0.6817],
        [ 0.2170,  0.2267,  0.0587,  ...,  0.1002, -0.0169,  0.0739],
        ...,
        [ 0.1343,  0.3150, -0.2017,  ..., -0.0203,  0.0213, -0.0175],
        [-0.3221,  0.0762,  0.0140,  ..., -0.0077,  0.0260, -0.0742],
        [ 0.1548,  0.3733, -0.0733,  ..., -0.0059,  0.0082, -0.0175]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.2002, -0.0956, -0.2541,  ...,  0.2290, -0.0623, -0.1164],
        [ 0.0240,  0.0124, -0.1317,  ...,  0.1549,  0.3159,  0.0829],
        [ 0.1907, -0.1290, -0.2751,  ...,  0.2844,  0.1298, -0.0648],
        ...,
        [-0.6234,  0.2005,  0.1910,  ..., -0.0664, -0.1546,  0.0866],
        [ 0.0791, -0.0762, -0.0606,  ..., -0.1943, -0.0538, -0.5551],
        [-0.1427,  0.1973,  0.1752,  ...,  0.0804, -0.0294,  0.3102]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2324])
shifts shape: torch.Size([2324, 3])
sender shape: torch.Size([2324])
receiver shape: torch.Size([2324])
Edge attributes shape: torch.Size([2324, 9])
Edge attributes tensor([[ 1.0000e+00,  1.2007e+00,  1.0007e+00,  ...,  1.4589e-03,
         -9.6411e-01, -5.7109e-01],
        [ 1.0000e+00, -2.4006e-01,  1.7139e+00,  ...,  2.1660e+00,
         -1.5644e-01, -3.3974e-02],
        [ 1.0000e+00,  1.4330e+00, -7.0267e-01,  ..., -5.6601e-01,
          6.1046e-01, -1.0331e+00],
        ...,
        [ 1.0000e+00,  1.5095e+00,  8.2005e-01,  ..., -3.6617e-01,
          2.3411e-01, -1.4393e+00],
        [ 1.0000e+00,  9.7570e-01,  1.2125e+00,  ...,  5.2552e-01,
          1.1900e+00, -2.4144e-01],
        [ 1.0000e+00,  7.9909e-01,  1.5309e+00,  ...,  1.5023e+00,
          2.6363e-01, -4.0070e-01]])
Edge features shape: torch.Size([2324, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0366,  0.1710],
        [ 0.3438,  0.4317,  0.1982,  ..., -0.3543, -0.0171,  0.3328],
        [ 0.3448,  0.4372,  0.2095,  ..., -0.3698, -0.0419,  0.3167],
        ...,
        [ 0.1124, -0.0907, -0.0393,  ..., -0.0744,  0.1195, -0.0220],
        [ 0.0435, -0.0594,  0.0377,  ...,  0.0584, -0.0312, -0.0157],
        [ 0.2215,  0.0093, -0.2211,  ...,  0.0279, -0.2192, -0.0372]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2324, 96])
Tensor Product Weights tensor([[-0.0095, -0.0639, -0.0969,  ...,  0.1203, -0.0163, -0.0541],
        [ 0.1452, -0.0734, -0.0876,  ...,  0.1672,  0.0902, -0.5810],
        [ 0.1567, -0.0831, -0.0687,  ...,  0.1684,  0.0950, -0.5835],
        ...,
        [ 0.0126, -0.0503, -0.1410,  ...,  0.1207,  0.0466, -0.1081],
        [-0.0037,  0.0065,  0.0135,  ..., -0.0054,  0.0332,  0.0305],
        [-0.1244, -0.0651,  0.0983,  ..., -0.1469, -0.1086,  0.2814]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.3481,  0.2021,  0.0153,  ...,  0.1168, -0.0096, -0.0769],
        [ 0.0081,  0.4145,  0.0985,  ...,  0.0378, -0.2268, -0.6839],
        [ 0.2163,  0.2262,  0.0583,  ...,  0.1003, -0.0173,  0.0743],
        ...,
        [ 0.2431,  0.3051, -0.2203,  ..., -0.0565,  0.0381, -0.0230],
        [-0.3177,  0.0771,  0.0164,  ..., -0.0019,  0.0282, -0.0737],
        [ 0.1736,  0.3746, -0.0686,  ..., -0.0043,  0.0080, -0.0179]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.1998, -0.0961, -0.2541,  ...,  0.2276, -0.0613, -0.1170],
        [ 0.0303,  0.0179, -0.1379,  ...,  0.1555,  0.3227,  0.0753],
        [ 0.1908, -0.1290, -0.2750,  ...,  0.2838,  0.1299, -0.0656],
        ...,
        [-0.4542,  0.1832,  0.1765,  ..., -0.1272, -0.1639,  0.0621],
        [ 0.0823, -0.0751, -0.0602,  ..., -0.2018, -0.0458, -0.5521],
        [-0.1233,  0.1939,  0.1814,  ...,  0.0859, -0.0365,  0.3076]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2304])
shifts shape: torch.Size([2304, 3])
sender shape: torch.Size([2304])
receiver shape: torch.Size([2304])
Edge attributes shape: torch.Size([2304, 9])
Edge attributes tensor([[ 1.0000,  1.2062,  0.9984,  ..., -0.0035, -0.9545, -0.5851],
        [ 1.0000, -0.2265,  1.7163,  ...,  2.1755, -0.1193, -0.0313],
        [ 1.0000,  1.4270, -0.7187,  ..., -0.5406,  0.6205, -1.0257],
        ...,
        [ 1.0000,  1.0051,  1.3771,  ...,  1.0021, -0.5433, -0.5919],
        [ 1.0000,  1.0928,  1.3432,  ...,  0.8990, -0.0726, -0.7697],
        [ 1.0000,  0.6717,  0.6445,  ..., -0.6536,  1.2153,  1.0858]])
Edge features shape: torch.Size([2304, 8])
Edge features tensor([[ 0.1691, -0.0635, -0.1452,  ..., -0.1559, -0.0424,  0.1718],
        [ 0.3444,  0.4351,  0.2053,  ..., -0.3641, -0.0327,  0.3229],
        [ 0.3449,  0.4375,  0.2101,  ..., -0.3707, -0.0433,  0.3158],
        ...,
        [ 0.0766, -0.0831,  0.0137,  ...,  0.0271,  0.0584, -0.0905],
        [ 0.0056, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.2195,  0.0055, -0.2193,  ...,  0.0166, -0.2186, -0.0221]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2304, 96])
Tensor Product Weights tensor([[-0.0110, -0.0640, -0.0932,  ...,  0.1168, -0.0180, -0.0488],
        [ 0.1524, -0.0795, -0.0758,  ...,  0.1680,  0.0933, -0.5827],
        [ 0.1574, -0.0837, -0.0676,  ...,  0.1684,  0.0953, -0.5837],
        ...,
        [ 0.0047, -0.0176, -0.0593,  ...,  0.0361,  0.0535, -0.0246],
        [ 0.0039, -0.0100, -0.0093,  ...,  0.0085, -0.0018, -0.0028],
        [-0.1191, -0.0654,  0.0927,  ..., -0.1358, -0.1046,  0.2692]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 3.9102e-01,  2.2381e-01,  3.9799e-02,  ...,  1.0691e-01,
         -1.3934e-02, -2.9589e-02],
        [ 1.2841e-04,  4.0414e-01,  8.8550e-02,  ...,  4.1776e-02,
         -2.1993e-01, -6.8177e-01],
        [ 1.6042e-01,  2.2246e-01,  2.7132e-03,  ...,  9.0135e-02,
          1.2633e-03,  7.7172e-02],
        ...,
        [ 2.4145e-01,  3.0771e-01, -2.1761e-01,  ...,  1.4304e-02,
          9.2127e-03, -8.0810e-02],
        [-3.1750e-01,  1.4176e-01,  9.9446e-02,  ...,  1.7615e-01,
          3.4591e-01,  1.0628e-01],
        [ 7.1476e-02,  4.3236e-01, -5.5159e-02,  ...,  7.5924e-03,
          1.8799e-02, -5.2078e-03]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.1642, -0.1590, -0.2507,  ...,  0.2437, -0.0240, -0.0833],
        [ 0.0348,  0.0222, -0.1461,  ...,  0.1636,  0.3118,  0.0980],
        [ 0.2291, -0.1085, -0.3236,  ...,  0.3275,  0.1190, -0.0059],
        ...,
        [-0.4521,  0.1836,  0.1743,  ..., -0.1051,  0.0064, -0.1884],
        [ 0.0765, -0.0373, -0.0308,  ..., -0.3365, -0.5694,  0.1035],
        [-0.1940,  0.2253,  0.1988,  ...,  0.1084,  0.3480, -0.0150]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2306])
shifts shape: torch.Size([2306, 3])
sender shape: torch.Size([2306])
receiver shape: torch.Size([2306])
Edge attributes shape: torch.Size([2306, 9])
Edge attributes tensor([[ 1.0000,  1.2066,  0.9985,  ..., -0.0033, -0.9535, -0.5866],
        [ 1.0000, -0.2266,  1.7163,  ...,  2.1754, -0.1193, -0.0313],
        [ 1.0000,  1.4269, -0.7187,  ..., -0.5406,  0.6206, -1.0255],
        ...,
        [ 1.0000,  1.1088,  1.3301,  ...,  0.8598, -0.0682, -0.7925],
        [ 1.0000,  0.9492,  1.0837,  ...,  0.1950,  1.3452,  0.0151],
        [ 1.0000,  0.6752,  0.6370,  ..., -0.6644,  1.2026,  1.0860]])
Edge features shape: torch.Size([2306, 8])
Edge features tensor([[ 1.6907e-01, -6.3465e-02, -1.4524e-01,  ..., -1.5588e-01,
         -4.2436e-02,  1.7181e-01],
        [ 3.4445e-01,  4.3518e-01,  2.0536e-01,  ..., -3.6422e-01,
         -3.2798e-02,  3.2279e-01],
        [ 3.4486e-01,  4.3749e-01,  2.1014e-01,  ..., -3.7073e-01,
         -4.3347e-02,  3.1574e-01],
        ...,
        [ 5.9004e-03, -1.0642e-02,  1.3294e-02,  ..., -6.0656e-03,
          1.8383e-04,  5.7341e-03],
        [ 4.3615e-02, -5.9539e-02,  3.7662e-02,  ...,  5.8430e-02,
         -3.1006e-02, -1.6103e-02],
        [ 2.2186e-01,  9.9621e-03, -2.2141e-01,  ...,  2.9806e-02,
         -2.1918e-01, -3.9648e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2306, 96])
Tensor Product Weights tensor([[-0.0110, -0.0640, -0.0932,  ...,  0.1167, -0.0180, -0.0488],
        [ 0.1525, -0.0795, -0.0756,  ...,  0.1680,  0.0933, -0.5827],
        [ 0.1574, -0.0837, -0.0676,  ...,  0.1684,  0.0953, -0.5837],
        ...,
        [ 0.0039, -0.0101, -0.0092,  ...,  0.0086, -0.0017, -0.0026],
        [-0.0037,  0.0065,  0.0133,  ..., -0.0054,  0.0333,  0.0304],
        [-0.1253, -0.0651,  0.0992,  ..., -0.1487, -0.1093,  0.2834]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 3.9134e-01,  2.2399e-01,  3.9928e-02,  ...,  1.0687e-01,
         -1.3854e-02, -2.9641e-02],
        [ 2.3972e-04,  4.0414e-01,  8.8745e-02,  ...,  4.1340e-02,
         -2.2014e-01, -6.8207e-01],
        [ 1.6037e-01,  2.2236e-01,  2.4303e-03,  ...,  9.0114e-02,
          1.2669e-03,  7.6929e-02],
        ...,
        [ 2.4568e-01,  3.0703e-01, -2.1965e-01,  ...,  1.7115e-02,
          9.6982e-03, -8.3583e-02],
        [-3.1557e-01,  1.4072e-01,  1.0007e-01,  ...,  1.7800e-01,
          3.4690e-01,  1.0705e-01],
        [ 7.8522e-02,  4.3072e-01, -4.7238e-02,  ...,  1.6963e-02,
          7.0592e-02,  2.4010e-02]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.1640, -0.1593, -0.2508,  ...,  0.2432, -0.0235, -0.0830],
        [ 0.0353,  0.0220, -0.1466,  ...,  0.1634,  0.3137,  0.0979],
        [ 0.2290, -0.1085, -0.3237,  ...,  0.3276,  0.1190, -0.0056],
        ...,
        [-0.4501,  0.1839,  0.1773,  ..., -0.1024,  0.0038, -0.1910],
        [ 0.0780, -0.0386, -0.0309,  ..., -0.3427, -0.5648,  0.1066],
        [-0.1832,  0.2207,  0.1944,  ...,  0.1143,  0.3375, -0.0249]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2322])
shifts shape: torch.Size([2322, 3])
sender shape: torch.Size([2322])
receiver shape: torch.Size([2322])
Edge attributes shape: torch.Size([2322, 9])
Edge attributes tensor([[ 1.0000,  1.2036,  1.0011,  ...,  0.0024, -0.9578, -0.5805],
        [ 1.0000, -0.2377,  1.7144,  ...,  2.1680, -0.1463, -0.0337],
        [ 1.0000,  1.4334, -0.7026,  ..., -0.5662,  0.6097, -1.0345],
        ...,
        [ 1.0000,  1.0196,  1.3652,  ...,  0.9658, -0.5475, -0.6088],
        [ 1.0000,  1.1073,  1.3313,  ...,  0.8636, -0.0680, -0.7904],
        [ 1.0000,  0.6874,  0.6247,  ..., -0.6817,  1.1790,  1.0746]])
Edge features shape: torch.Size([2322, 8])
Edge features tensor([[ 1.6786e-01, -6.4570e-02, -1.4302e-01,  ..., -1.5691e-01,
         -3.6669e-02,  1.7101e-01],
        [ 3.4383e-01,  4.3178e-01,  1.9840e-01,  ..., -3.5453e-01,
         -1.7464e-02,  3.3260e-01],
        [ 3.4479e-01,  4.3711e-01,  2.0936e-01,  ..., -3.6967e-01,
         -4.1622e-02,  3.1691e-01],
        ...,
        [ 7.6179e-02, -8.2947e-02,  1.4136e-02,  ...,  2.7928e-02,
          5.7283e-02, -9.0300e-02],
        [ 5.9006e-03, -1.0642e-02,  1.3294e-02,  ..., -6.0655e-03,
          1.8341e-04,  5.7346e-03],
        [ 2.2241e-01,  1.1008e-02, -2.2186e-01,  ...,  3.2916e-02,
         -2.1915e-01, -4.3762e-02]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2322, 96])
Tensor Product Weights tensor([[-0.0096, -0.0639, -0.0969,  ...,  0.1202, -0.0163, -0.0540],
        [ 0.1453, -0.0735, -0.0873,  ...,  0.1672,  0.0903, -0.5810],
        [ 0.1566, -0.0830, -0.0689,  ...,  0.1684,  0.0950, -0.5835],
        ...,
        [ 0.0045, -0.0172, -0.0583,  ...,  0.0353,  0.0534, -0.0237],
        [ 0.0039, -0.0101, -0.0092,  ...,  0.0086, -0.0017, -0.0026],
        [-0.1267, -0.0650,  0.1006,  ..., -0.1517, -0.1104,  0.2865]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.3476,  0.2020,  0.0148,  ...,  0.1167, -0.0086, -0.0772],
        [ 0.0118,  0.4122,  0.1018,  ...,  0.0440, -0.2258, -0.6816],
        [ 0.2171,  0.2268,  0.0585,  ...,  0.1002, -0.0169,  0.0734],
        ...,
        [ 0.1348,  0.3149, -0.2016,  ...,  0.0043,  0.0025, -0.0359],
        [-0.3153,  0.1413,  0.1001,  ...,  0.1778,  0.3459,  0.1059],
        [ 0.0789,  0.4324, -0.0497,  ...,  0.0114,  0.0435,  0.0094]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.2001, -0.0957, -0.2541,  ...,  0.2291, -0.0620, -0.1161],
        [ 0.0245,  0.0122, -0.1318,  ...,  0.1542,  0.3158,  0.0829],
        [ 0.1906, -0.1289, -0.2750,  ...,  0.2844,  0.1297, -0.0643],
        ...,
        [-0.6212,  0.1998,  0.1893,  ..., -0.0380,  0.0257, -0.1837],
        [ 0.0779, -0.0370, -0.0314,  ..., -0.3422, -0.5659,  0.1057],
        [-0.1840,  0.2223,  0.1979,  ...,  0.1122,  0.3427, -0.0201]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2316])
shifts shape: torch.Size([2316, 3])
sender shape: torch.Size([2316])
receiver shape: torch.Size([2316])
Edge attributes shape: torch.Size([2316, 9])
Edge attributes tensor([[ 1.0000,  1.1995,  1.0014,  ...,  0.0031, -0.9661, -0.5682],
        [ 1.0000, -0.2420,  1.7135,  ...,  2.1647, -0.1606, -0.0344],
        [ 1.0000,  1.4341, -0.7016,  ..., -0.5676,  0.6084, -1.0364],
        ...,
        [ 1.0000,  1.5151,  0.8130,  ..., -0.3790,  0.2190, -1.4536],
        [ 1.0000,  0.9946,  1.2009,  ...,  0.4945,  1.1690, -0.2716],
        [ 1.0000,  0.7890,  1.5350,  ...,  1.5163,  0.2893, -0.3880]])
Edge features shape: torch.Size([2316, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0367,  0.1710],
        [ 0.3438,  0.4316,  0.1981,  ..., -0.3541, -0.0168,  0.3330],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0415,  0.3170],
        ...,
        [ 0.1182, -0.0901, -0.0495,  ..., -0.0913,  0.1176,  0.0017],
        [ 0.0418, -0.0577,  0.0380,  ...,  0.0573, -0.0340, -0.0103],
        [ 0.2179,  0.0026, -0.2179,  ...,  0.0079, -0.2177, -0.0105]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2316, 96])
Tensor Product Weights tensor([[-0.0096, -0.0639, -0.0969,  ...,  0.1202, -0.0163, -0.0540],
        [ 0.1450, -0.0733, -0.0878,  ...,  0.1672,  0.0902, -0.5809],
        [ 0.1566, -0.0830, -0.0690,  ...,  0.1684,  0.0949, -0.5835],
        ...,
        [ 0.0129, -0.0537, -0.1481,  ...,  0.1323,  0.0423, -0.1169],
        [-0.0039,  0.0068,  0.0153,  ..., -0.0058,  0.0317,  0.0313],
        [-0.1149, -0.0655,  0.0880,  ..., -0.1269, -0.1015,  0.2594]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.3478,  0.2016,  0.0152,  ...,  0.1167, -0.0100, -0.0770],
        [ 0.0074,  0.4147,  0.0980,  ...,  0.0379, -0.2277, -0.6835],
        [ 0.2158,  0.2260,  0.0577,  ...,  0.1002, -0.0173,  0.0740],
        ...,
        [ 0.2366,  0.3062, -0.2175,  ..., -0.0528,  0.0336, -0.0236],
        [-0.3217,  0.0756,  0.0138,  ..., -0.0098,  0.0252, -0.0744],
        [ 0.1564,  0.3740, -0.0723,  ..., -0.0058,  0.0081, -0.0177]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.1999, -0.0961, -0.2540,  ...,  0.2283, -0.0615, -0.1173],
        [ 0.0302,  0.0185, -0.1383,  ...,  0.1559,  0.3218,  0.0749],
        [ 0.1911, -0.1289, -0.2752,  ...,  0.2832,  0.1300, -0.0662],
        ...,
        [-0.4576,  0.1830,  0.1726,  ..., -0.1301, -0.1592,  0.0642],
        [ 0.0801, -0.0755, -0.0613,  ..., -0.1934, -0.0539, -0.5557],
        [-0.1401,  0.1971,  0.1766,  ...,  0.0792, -0.0300,  0.3103]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2300])
shifts shape: torch.Size([2300, 3])
sender shape: torch.Size([2300])
receiver shape: torch.Size([2300])
Edge attributes shape: torch.Size([2300, 9])
Edge attributes tensor([[ 1.0000,  1.2064,  0.9983,  ..., -0.0038, -0.9541, -0.5857],
        [ 1.0000, -0.2263,  1.7164,  ...,  2.1756, -0.1188, -0.0312],
        [ 1.0000,  1.4264, -0.7190,  ..., -0.5401,  0.6215, -1.0240],
        ...,
        [ 1.0000,  1.0092,  1.3748,  ...,  0.9950, -0.5372, -0.5982],
        [ 1.0000,  1.0941,  1.3422,  ...,  0.8962, -0.0657, -0.7717],
        [ 1.0000,  0.6273,  1.0687,  ...,  0.1590,  1.6696,  0.6912]])
Edge features shape: torch.Size([2300, 8])
Edge features tensor([[ 0.1691, -0.0635, -0.1453,  ..., -0.1559, -0.0425,  0.1718],
        [ 0.3444,  0.4352,  0.2053,  ..., -0.3642, -0.0327,  0.3228],
        [ 0.3449,  0.4375,  0.2101,  ..., -0.3707, -0.0433,  0.3158],
        ...,
        [ 0.0765, -0.0831,  0.0137,  ...,  0.0271,  0.0584, -0.0905],
        [ 0.0056, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.1105, -0.0908, -0.0359,  ..., -0.0687,  0.1192, -0.0293]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2300, 96])
Tensor Product Weights tensor([[-0.0110, -0.0640, -0.0932,  ...,  0.1167, -0.0180, -0.0488],
        [ 0.1525, -0.0795, -0.0757,  ...,  0.1680,  0.0933, -0.5827],
        [ 0.1574, -0.0837, -0.0676,  ...,  0.1684,  0.0953, -0.5837],
        ...,
        [ 0.0047, -0.0176, -0.0593,  ...,  0.0360,  0.0535, -0.0246],
        [ 0.0039, -0.0100, -0.0093,  ...,  0.0085, -0.0018, -0.0028],
        [ 0.0125, -0.0490, -0.1381,  ...,  0.1165,  0.0479, -0.1047]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 3.9140e-01,  2.2402e-01,  4.0016e-02,  ...,  1.0691e-01,
         -1.3747e-02, -2.9516e-02],
        [ 3.3024e-04,  4.0422e-01,  8.8696e-02,  ...,  4.1962e-02,
         -2.1990e-01, -6.8151e-01],
        [ 1.6046e-01,  2.2241e-01,  2.6487e-03,  ...,  9.0046e-02,
          1.3161e-03,  7.6920e-02],
        ...,
        [ 1.3457e-01,  3.1540e-01, -2.0171e-01,  ...,  1.6715e-03,
          3.1799e-02, -6.8649e-03],
        [-3.1614e-01,  1.4160e-01,  9.9816e-02,  ...,  1.7452e-01,
          3.4273e-01,  1.0369e-01],
        [ 7.5988e-02,  4.3229e-01, -5.2470e-02,  ...,  5.9611e-03,
          2.5797e-02, -5.5796e-03]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.1640, -0.1592, -0.2507,  ...,  0.2431, -0.0235, -0.0831],
        [ 0.0350,  0.0221, -0.1465,  ...,  0.1635,  0.3136,  0.0979],
        [ 0.2291, -0.1084, -0.3236,  ...,  0.3277,  0.1190, -0.0058],
        ...,
        [-0.6213,  0.1997,  0.1910,  ..., -0.0561,  0.0407, -0.1754],
        [ 0.0788, -0.0397, -0.0320,  ..., -0.3434, -0.5638,  0.1043],
        [-0.1836,  0.2218,  0.1977,  ...,  0.0965,  0.3564, -0.0110]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2320])
shifts shape: torch.Size([2320, 3])
sender shape: torch.Size([2320])
receiver shape: torch.Size([2320])
Edge attributes shape: torch.Size([2320, 9])
Edge attributes tensor([[ 1.0000,  1.2031,  1.0010,  ...,  0.0022, -0.9589, -0.5789],
        [ 1.0000, -0.2382,  1.7143,  ...,  2.1676, -0.1488, -0.0337],
        [ 1.0000,  1.4337, -0.7026,  ..., -0.5661,  0.6091, -1.0356],
        ...,
        [ 1.0000,  1.0059,  1.3777,  ...,  1.0040, -0.5340, -0.5950],
        [ 1.0000,  1.0940,  1.3423,  ...,  0.8964, -0.0638, -0.7717],
        [ 1.0000,  0.6775,  0.6324,  ..., -0.6710,  1.1946,  1.0859]])
Edge features shape: torch.Size([2320, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1431,  ..., -0.1569, -0.0368,  0.1710],
        [ 0.3438,  0.4318,  0.1984,  ..., -0.3545, -0.0174,  0.3326],
        [ 0.3448,  0.4371,  0.2094,  ..., -0.3697, -0.0417,  0.3169],
        ...,
        [ 0.0766, -0.0831,  0.0137,  ...,  0.0271,  0.0584, -0.0905],
        [ 0.0056, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.2199,  0.0064, -0.2198,  ...,  0.0192, -0.2188, -0.0255]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2320, 96])
Tensor Product Weights tensor([[-0.0096, -0.0639, -0.0968,  ...,  0.1202, -0.0163, -0.0539],
        [ 0.1453, -0.0735, -0.0874,  ...,  0.1672,  0.0903, -0.5810],
        [ 0.1567, -0.0831, -0.0688,  ...,  0.1684,  0.0950, -0.5835],
        ...,
        [ 0.0047, -0.0176, -0.0593,  ...,  0.0361,  0.0535, -0.0247],
        [ 0.0039, -0.0100, -0.0093,  ...,  0.0085, -0.0018, -0.0028],
        [-0.1203, -0.0653,  0.0940,  ..., -0.1384, -0.1055,  0.2721]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.3476,  0.2020,  0.0148,  ...,  0.1167, -0.0089, -0.0772],
        [ 0.0117,  0.4126,  0.1014,  ...,  0.0432, -0.2262, -0.6815],
        [ 0.2168,  0.2266,  0.0584,  ...,  0.1003, -0.0169,  0.0734],
        ...,
        [ 0.2394,  0.3046, -0.2171,  ...,  0.0749,  0.0235, -0.0438],
        [-0.3173,  0.1423,  0.0994,  ...,  0.1746,  0.3451,  0.1064],
        [ 0.0717,  0.4336, -0.0573,  ...,  0.0036, -0.0027, -0.0172]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.2001, -0.0957, -0.2541,  ...,  0.2291, -0.0620, -0.1162],
        [ 0.0243,  0.0126, -0.1321,  ...,  0.1545,  0.3165,  0.0823],
        [ 0.1907, -0.1289, -0.2750,  ...,  0.2843,  0.1297, -0.0646],
        ...,
        [-0.4564,  0.1811,  0.1722,  ..., -0.0353,  0.0949, -0.1892],
        [ 0.0763, -0.0360, -0.0312,  ..., -0.3372, -0.5699,  0.1011],
        [-0.1948,  0.2268,  0.2017,  ...,  0.1073,  0.3515, -0.0109]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2314])
shifts shape: torch.Size([2314, 3])
sender shape: torch.Size([2314])
receiver shape: torch.Size([2314])
Edge attributes shape: torch.Size([2314, 9])
Edge attributes tensor([[ 1.0000e+00,  1.2003e+00,  1.0008e+00,  ...,  1.7860e-03,
         -9.6488e-01, -5.6997e-01],
        [ 1.0000e+00, -2.3944e-01,  1.7140e+00,  ...,  2.1666e+00,
         -1.5308e-01, -3.3919e-02],
        [ 1.0000e+00,  1.4313e+00, -7.0274e-01,  ..., -5.6590e-01,
          6.1374e-01, -1.0269e+00],
        ...,
        [ 1.0000e+00,  1.5156e+00,  8.1197e-01,  ..., -3.8092e-01,
          2.1874e-01, -1.4547e+00],
        [ 1.0000e+00,  9.9494e-01,  1.2023e+00,  ...,  4.9801e-01,
          1.1663e+00, -2.7451e-01],
        [ 1.0000e+00,  7.8949e-01,  1.5350e+00,  ...,  1.5164e+00,
          2.8289e-01, -3.8918e-01]])
Edge features shape: torch.Size([2314, 8])
Edge features tensor([[ 0.1678, -0.0646, -0.1430,  ..., -0.1569, -0.0366,  0.1710],
        [ 0.3438,  0.4317,  0.1983,  ..., -0.3543, -0.0172,  0.3328],
        [ 0.3448,  0.4371,  0.2093,  ..., -0.3696, -0.0416,  0.3169],
        ...,
        [ 0.1186, -0.0901, -0.0501,  ..., -0.0923,  0.1174,  0.0031],
        [ 0.0417, -0.0576,  0.0380,  ...,  0.0572, -0.0341, -0.0100],
        [ 0.2177,  0.0022, -0.2176,  ...,  0.0066, -0.2175, -0.0088]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2314, 96])
Tensor Product Weights tensor([[-0.0095, -0.0639, -0.0970,  ...,  0.1203, -0.0163, -0.0541],
        [ 0.1452, -0.0734, -0.0875,  ...,  0.1672,  0.0902, -0.5810],
        [ 0.1566, -0.0830, -0.0689,  ...,  0.1684,  0.0949, -0.5835],
        ...,
        [ 0.0129, -0.0539, -0.1484,  ...,  0.1329,  0.0420, -0.1173],
        [-0.0039,  0.0068,  0.0154,  ..., -0.0058,  0.0316,  0.0313],
        [-0.1143, -0.0655,  0.0873,  ..., -0.1255, -0.1010,  0.2579]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.3480,  0.2021,  0.0152,  ...,  0.1168, -0.0092, -0.0766],
        [ 0.0086,  0.4143,  0.0991,  ...,  0.0403, -0.2247, -0.6830],
        [ 0.2167,  0.2263,  0.0584,  ...,  0.1001, -0.0171,  0.0742],
        ...,
        [ 0.2362,  0.3063, -0.2174,  ..., -0.0523,  0.0335, -0.0234],
        [-0.3222,  0.0753,  0.0134,  ..., -0.0111,  0.0246, -0.0746],
        [ 0.1536,  0.3741, -0.0727,  ..., -0.0061,  0.0080, -0.0178]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.1999, -0.0960, -0.2541,  ...,  0.2275, -0.0614, -0.1170],
        [ 0.0299,  0.0172, -0.1370,  ...,  0.1554,  0.3215,  0.0761],
        [ 0.1907, -0.1291, -0.2751,  ...,  0.2840,  0.1299, -0.0656],
        ...,
        [-0.4579,  0.1830,  0.1725,  ..., -0.1305, -0.1586,  0.0647],
        [ 0.0800, -0.0753, -0.0615,  ..., -0.1918, -0.0565, -0.5565],
        [-0.1425,  0.1975,  0.1758,  ...,  0.0779, -0.0283,  0.3108]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
positions shape: torch.Size([96, 3])
edge_index shape: torch.Size([2, 2314])
shifts shape: torch.Size([2314, 3])
sender shape: torch.Size([2314])
receiver shape: torch.Size([2314])
Edge attributes shape: torch.Size([2314, 9])
Edge attributes tensor([[ 1.0000,  1.1997,  1.0021,  ...,  0.0046, -0.9652, -0.5697],
        [ 1.0000, -0.2421,  1.7136,  ...,  2.1649, -0.1571, -0.0346],
        [ 1.0000,  1.4344, -0.7010,  ..., -0.5686,  0.6079, -1.0369],
        ...,
        [ 1.0000,  1.0061,  1.3775,  ...,  1.0033, -0.5346, -0.5950],
        [ 1.0000,  1.0943,  1.3421,  ...,  0.8957, -0.0645, -0.7721],
        [ 1.0000,  0.6854,  0.6221,  ..., -0.6853,  1.1757,  1.0801]])
Edge features shape: torch.Size([2314, 8])
Edge features tensor([[ 0.1679, -0.0646, -0.1430,  ..., -0.1569, -0.0367,  0.1710],
        [ 0.3438,  0.4316,  0.1981,  ..., -0.3541, -0.0168,  0.3330],
        [ 0.3448,  0.4371,  0.2094,  ..., -0.3697, -0.0417,  0.3169],
        ...,
        [ 0.0766, -0.0831,  0.0137,  ...,  0.0271,  0.0584, -0.0905],
        [ 0.0056, -0.0102,  0.0128,  ..., -0.0063,  0.0007,  0.0050],
        [ 0.2210,  0.0083, -0.2207,  ...,  0.0248, -0.2191, -0.0330]])
Node attributes shape: torch.Size([96, 4])
Node attributes tensor([[1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 0., 0., 1.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 0., 1., 0.],
        [0., 0., 1., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [0., 1., 0., 0.],
        [1., 0., 0., 0.],
        [0., 1., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([128])
Initial node features shape: torch.Size([96, 32])
Initial node features tensor([[ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        ...,
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463],
        [ 0.3319,  0.4753, -0.2009,  ...,  0.4078,  0.7150,  0.6905],
        [ 0.2070,  0.3052, -0.2567,  ...,  0.3704,  0.3570,  0.4463]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([96, 32])
Tensor product weights shape: torch.Size([2314, 96])
Tensor Product Weights tensor([[-0.0096, -0.0639, -0.0969,  ...,  0.1202, -0.0163, -0.0540],
        [ 0.1450, -0.0733, -0.0878,  ...,  0.1672,  0.0902, -0.5809],
        [ 0.1567, -0.0831, -0.0688,  ...,  0.1684,  0.0950, -0.5835],
        ...,
        [ 0.0047, -0.0176, -0.0593,  ...,  0.0361,  0.0535, -0.0246],
        [ 0.0039, -0.0100, -0.0093,  ...,  0.0085, -0.0018, -0.0028],
        [-0.1230, -0.0652,  0.0968,  ..., -0.1439, -0.1075,  0.2782]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([96, 288])
Message tensor([[ 0.3477,  0.2017,  0.0151,  ...,  0.1167, -0.0097, -0.0770],
        [ 0.0078,  0.4146,  0.0985,  ...,  0.0395, -0.2274, -0.6828],
        [ 0.2162,  0.2260,  0.0579,  ...,  0.1002, -0.0173,  0.0737],
        ...,
        [ 0.2443,  0.3074, -0.2186,  ...,  0.0162,  0.0104, -0.0813],
        [-0.3167,  0.1422,  0.0996,  ...,  0.1746,  0.3447,  0.1062],
        [ 0.0741,  0.4342, -0.0566,  ...,  0.0031, -0.0036, -0.0177]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([96, 32, 9])
Node features shape torch.Size([96, 128])
Node features tensor([[ 0.2000, -0.0960, -0.2540,  ...,  0.2286, -0.0614, -0.1169],
        [ 0.0299,  0.0178, -0.1376,  ...,  0.1554,  0.3211,  0.0753],
        [ 0.1908, -0.1289, -0.2751,  ...,  0.2835,  0.1300, -0.0656],
        ...,
        [-0.4503,  0.1836,  0.1754,  ..., -0.1056,  0.0061, -0.1886],
        [ 0.0770, -0.0357, -0.0315,  ..., -0.3374, -0.5699,  0.1012],
        [-0.1919,  0.2265,  0.2028,  ...,  0.1071,  0.3518, -0.0112]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([96, 128])
Input shape to CustomNonLinearReadout: torch.Size([96, 128])
Final output shape after NonLinearReadout: torch.Size([96, 32])
Conformer embeddings shape: torch.Size([96, 32])
process_conformer_ensemble input shape: torch.Size([18, 96, 32])
Num conformers: 18, Total dim: 3072
Scalar dim: 768, Vector dim: 768
mean_pooling:
  Scalar shape: torch.Size([18, 768])
  Vector shape: torch.Size([18, 768, 3])
  Scalar: tensor([[-0.0582,  0.0605,  0.1469,  ..., -0.0993,  0.0589, -0.0768],
        [-0.0619,  0.0603,  0.1417,  ..., -0.0972,  0.0562, -0.0729],
        [-0.1068,  0.0783,  0.1208,  ..., -0.0323,  0.0855, -0.1379],
        ...,
        [-0.0618,  0.0603,  0.1418,  ..., -0.0973,  0.0564, -0.0730],
        [-0.0624,  0.0605,  0.1414,  ..., -0.0976,  0.0563, -0.0729],
        [-0.0619,  0.0604,  0.1419,  ..., -0.0974,  0.0566, -0.0731]],
       grad_fn=<DivBackward0>)
  Vector: tensor([[[-0.1383,  0.0231, -0.0960],
         [-0.0470,  0.1106, -0.0514],
         [ 0.1656, -0.1595,  0.0602],
         ...,
         [ 0.0554,  0.0746,  0.3072],
         [-0.0839,  0.0526, -0.1233],
         [ 0.0476, -0.0255,  0.3014]],

        [[-0.1595,  0.0278, -0.1070],
         [-0.0428,  0.1168, -0.0586],
         [ 0.1615, -0.1539,  0.0413],
         ...,
         [ 0.0567,  0.0773,  0.3065],
         [-0.0852,  0.0535, -0.1214],
         [ 0.0507, -0.0231,  0.3010]],

        [[-0.1168,  0.0437, -0.1360],
         [-0.0676,  0.1223, -0.0579],
         [ 0.1542, -0.1658,  0.1099],
         ...,
         [ 0.0444,  0.0815,  0.3028],
         [-0.0738,  0.0455, -0.1227],
         [ 0.0176,  0.0059,  0.3147]],

        ...,

        [[-0.1595,  0.0278, -0.1070],
         [-0.0428,  0.1169, -0.0586],
         [ 0.1615, -0.1539,  0.0415],
         ...,
         [ 0.0565,  0.0770,  0.3064],
         [-0.0850,  0.0532, -0.1218],
         [ 0.0503, -0.0231,  0.3012]],

        [[-0.1595,  0.0282, -0.1073],
         [-0.0429,  0.1170, -0.0589],
         [ 0.1614, -0.1539,  0.0407],
         ...,
         [ 0.0215,  0.1318, -0.0831],
         [-0.0640, -0.1415,  0.0676],
         [ 0.0668,  0.1460, -0.1763]],

        [[-0.1593,  0.0279, -0.1070],
         [-0.0429,  0.1169, -0.0586],
         [ 0.1615, -0.1540,  0.0412],
         ...,
         [ 0.0544,  0.0760,  0.3035],
         [-0.0832,  0.0544, -0.1192],
         [ 0.0500, -0.0228,  0.3004]]], grad_fn=<DivBackward0>)
--------------------------------------------------
deep_sets:
  Scalar shape: torch.Size([18, 768])
  Vector shape: torch.Size([18, 768, 3])
  Scalar: tensor([[ 0.0005, -0.0145,  0.0156,  ..., -0.0134,  0.0032, -0.0005],
        [ 0.0004, -0.0145,  0.0156,  ..., -0.0134,  0.0032, -0.0007],
        [ 0.0005, -0.0143,  0.0159,  ..., -0.0131,  0.0030, -0.0003],
        ...,
        [ 0.0004, -0.0145,  0.0156,  ..., -0.0134,  0.0032, -0.0007],
        [ 0.0003, -0.0145,  0.0156,  ..., -0.0134,  0.0032, -0.0007],
        [ 0.0003, -0.0145,  0.0156,  ..., -0.0134,  0.0032, -0.0007]],
       grad_fn=<SiluBackward0>)
  Vector: tensor([[[-0.0096,  0.0061, -0.0049],
         [ 0.0019, -0.0008, -0.0102],
         [-0.0074,  0.0068,  0.0038],
         ...,
         [ 0.0063, -0.0010, -0.0053],
         [ 0.0025,  0.0020,  0.0095],
         [-0.0077,  0.0074, -0.0094]],

        [[-0.0091,  0.0059, -0.0058],
         [ 0.0020, -0.0011, -0.0098],
         [-0.0087,  0.0065,  0.0038],
         ...,
         [ 0.0057, -0.0018, -0.0068],
         [ 0.0023,  0.0014,  0.0088],
         [-0.0065,  0.0082, -0.0083]],

        [[-0.0098,  0.0058, -0.0053],
         [ 0.0023, -0.0004, -0.0101],
         [-0.0075,  0.0067,  0.0039],
         ...,
         [ 0.0054, -0.0009, -0.0062],
         [ 0.0015,  0.0019,  0.0098],
         [-0.0072,  0.0078, -0.0083]],

        ...,

        [[-0.0094,  0.0057, -0.0053],
         [ 0.0029, -0.0006, -0.0092],
         [-0.0082,  0.0062,  0.0036],
         ...,
         [ 0.0045, -0.0015, -0.0066],
         [ 0.0024,  0.0024,  0.0097],
         [-0.0065,  0.0089, -0.0080]],

        [[-0.0098,  0.0049, -0.0055],
         [ 0.0019, -0.0009, -0.0096],
         [-0.0087,  0.0080,  0.0045],
         ...,
         [ 0.0061, -0.0021, -0.0067],
         [ 0.0016,  0.0030,  0.0086],
         [-0.0072,  0.0087, -0.0082]],

        [[-0.0103,  0.0052, -0.0065],
         [ 0.0004, -0.0011, -0.0101],
         [-0.0082,  0.0065,  0.0029],
         ...,
         [ 0.0055, -0.0009, -0.0066],
         [ 0.0020,  0.0021,  0.0086],
         [-0.0092,  0.0079, -0.0080]]], grad_fn=<ViewBackward0>)
--------------------------------------------------
self_attention:
  Scalar shape: torch.Size([18, 768])
  Vector shape: torch.Size([18, 768, 3])
  Scalar: tensor([[-0.0008, -0.0148,  0.0168,  ...,  0.0043, -0.0094, -0.0095],
        [-0.0009, -0.0149,  0.0167,  ...,  0.0043, -0.0094, -0.0092],
        [-0.0009, -0.0146,  0.0168,  ...,  0.0045, -0.0091, -0.0095],
        ...,
        [-0.0009, -0.0149,  0.0166,  ...,  0.0043, -0.0095, -0.0092],
        [-0.0009, -0.0149,  0.0166,  ...,  0.0043, -0.0095, -0.0092],
        [-0.0009, -0.0149,  0.0166,  ...,  0.0043, -0.0095, -0.0092]],
       grad_fn=<SiluBackward0>)
  Vector: tensor([[[ 8.2408e-04,  8.4471e-03, -6.1079e-03],
         [-3.2184e-03, -5.8081e-03,  1.1592e-02],
         [-3.4220e-03, -2.6943e-03,  6.9460e-03],
         ...,
         [ 3.5639e-03,  1.7223e-03, -6.3977e-03],
         [-8.6771e-04, -3.8655e-03,  5.9174e-03],
         [-5.7772e-03, -8.4852e-03, -1.0314e-02]],

        [[ 1.1145e-03,  6.8843e-03, -6.2345e-03],
         [-2.6970e-03, -5.0297e-03,  1.0492e-02],
         [-5.4470e-03, -4.0717e-03,  6.1735e-03],
         ...,
         [ 5.2309e-03,  1.0774e-03, -5.8562e-03],
         [ 3.3700e-05, -5.0918e-03,  6.4027e-03],
         [-4.3157e-03, -8.7593e-03, -1.0197e-02]],

        [[ 6.5638e-04,  7.8702e-03, -5.9239e-03],
         [-2.7896e-03, -6.4035e-03,  1.1178e-02],
         [-3.8887e-03, -2.7450e-03,  6.7687e-03],
         ...,
         [ 3.2517e-03,  2.3455e-03, -6.1131e-03],
         [-8.7799e-04, -4.0568e-03,  5.2999e-03],
         [-5.0400e-03, -9.0536e-03, -9.7941e-03]],

        ...,

        [[ 2.0043e-03,  6.5487e-03, -6.9329e-03],
         [-3.1138e-03, -4.6293e-03,  1.0424e-02],
         [-6.3815e-03, -4.5615e-03,  6.4204e-03],
         ...,
         [ 5.0823e-03,  1.2197e-03, -5.5907e-03],
         [ 2.1911e-04, -4.9950e-03,  6.0660e-03],
         [-4.8373e-03, -8.7968e-03, -9.9914e-03]],

        [[ 9.1959e-04,  8.6119e-03, -5.7331e-03],
         [-1.7370e-03, -5.5937e-03,  1.2208e-02],
         [-6.2606e-03, -4.5322e-03,  6.3833e-03],
         ...,
         [ 4.8032e-03,  8.5882e-04, -6.1953e-03],
         [-1.7088e-03, -3.1905e-03,  5.3898e-03],
         [-4.9687e-03, -8.0585e-03, -1.0637e-02]],

        [[ 1.9923e-03,  8.6509e-03, -6.3998e-03],
         [-2.7785e-03, -5.3676e-03,  1.3383e-02],
         [-5.7408e-03, -3.8538e-03,  6.0378e-03],
         ...,
         [ 3.6702e-03,  1.1595e-03, -4.3909e-03],
         [-1.9689e-03, -3.6014e-03,  5.4213e-03],
         [-6.0528e-03, -8.5296e-03, -1.0747e-02]]], grad_fn=<ViewBackward0>)
--------------------------------------------------
==================================================

Finished processing Conformer Ensemble: 102_vi
==================================================
Retrieved conformer ensemble 347_i with 33 conformers
Atomic Numbers: tensor([ 6,  6,  6,  6,  6,  6,  1,  6,  6,  6,  6,  1,  1,  1,  1,  6,  6,  6,
         6,  6,  6,  1,  6,  6,  6,  6,  1,  1,  1,  1,  8,  8, 15,  8,  8,  1,
         6,  6,  7,  1,  8,  6,  1,  6,  6,  9,  6,  1,  6,  1,  6,  1,  6,  1,
         6,  1,  6,  6,  1,  6,  1,  6,  6,  7,  1,  8,  6,  1,  6,  6,  9,  6,
         1,  6,  1,  6,  1,  6,  1,  6,  1,  6,  6,  1,  6,  1])

Processing Conformer Ensemble: 347_i
Number of conformers in this ensemble: 33

Batch 7 in Ensemble: 347_i
Number of conformers in this batch: 32
Unique Atomic Numbers: [6, 1, 8, 15, 7, 9]
Average number of neighbors: 20.82
Processing batch of 32 conformers
Initialized CustomNonLinearReadout with input irreps: 32x0e+32x1o
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1938])
shifts shape: torch.Size([1938, 3])
sender shape: torch.Size([1938])
receiver shape: torch.Size([1938])
Edge attributes shape: torch.Size([1938, 9])
Edge attributes tensor([[ 1.0000,  1.2197,  0.9932,  ..., -0.0152, -0.9298, -0.6209],
        [ 1.0000, -0.1703,  1.7234,  ...,  2.2027,  0.0637, -0.0182],
        [ 1.0000,  1.3432, -0.7294,  ..., -0.5233,  0.7671, -0.7362],
        ...,
        [ 1.0000,  1.4951,  0.8325,  ..., -0.3431,  0.2877, -1.3966],
        [ 1.0000,  0.6714,  1.2829,  ...,  0.7221,  1.5742,  0.2922],
        [ 1.0000,  0.9070,  1.2249,  ...,  0.5595,  1.3011, -0.0940]])
Edge features shape: torch.Size([1938, 8])
Edge features tensor([[ 0.1679, -0.0645, -0.1431,  ..., -0.1569, -0.0368,  0.1710],
        [ 0.3439,  0.4320,  0.1989,  ..., -0.3552, -0.0186,  0.3319],
        [ 0.3449,  0.4378,  0.2109,  ..., -0.3717, -0.0449,  0.3147],
        ...,
        [ 0.2182,  0.0032, -0.2181,  ...,  0.0096, -0.2179, -0.0128],
        [ 0.0764, -0.0831,  0.0138,  ...,  0.0274,  0.0580, -0.0904],
        [ 0.0054, -0.0097,  0.0123,  ..., -0.0065,  0.0012,  0.0042]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1938, 96])
Tensor Product Weights tensor([[-0.0153,  0.0918,  0.0905,  ...,  0.0299,  0.0276, -0.1006],
        [ 0.0708, -0.1810, -0.0937,  ..., -0.1029, -0.0357,  0.0825],
        [ 0.0778, -0.1780, -0.1022,  ..., -0.0930, -0.0255,  0.0729],
        ...,
        [-0.0587,  0.1528,  0.1144,  ...,  0.1004,  0.0151, -0.1023],
        [-0.0057,  0.0005, -0.0448,  ...,  0.0518, -0.0024,  0.0305],
        [-0.0135, -0.0076,  0.0019,  ..., -0.0009,  0.0027, -0.0010]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1287, -0.1163,  0.2571,  ...,  0.1278,  0.0475,  0.2381],
        [ 0.1807, -0.0904,  0.3431,  ..., -0.1417,  0.1605,  0.1751],
        [ 0.1258, -0.1152,  0.2809,  ..., -0.0389,  0.0746,  0.2726],
        ...,
        [-0.1146, -0.0999, -0.3612,  ..., -0.0798, -0.0070,  0.0079],
        [ 0.0588, -0.1165,  0.1924,  ..., -0.1835, -0.3756, -0.2389],
        [-0.1810, -0.1132, -0.2965,  ..., -0.0381,  0.0598, -0.0850]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5740e+00,  1.1232e+00, -5.5128e-01,  ...,  2.9968e-02,
          9.3489e-03, -1.0603e-03],
        [ 1.4009e+00,  6.6590e-01, -5.6391e-01,  ...,  4.5434e-02,
          4.9347e-02, -3.2421e-02],
        [ 1.6055e+00,  1.0892e+00, -6.3060e-01,  ...,  8.7050e-03,
          9.0416e-02, -5.6301e-02],
        ...,
        [ 4.0765e-01,  2.1745e-02, -2.7549e-01,  ..., -1.2743e-01,
         -5.6352e-02, -4.3753e-02],
        [ 1.0022e+00,  6.4266e-01, -3.6967e-01,  ..., -2.0269e-02,
         -6.4499e-02, -7.3072e-02],
        [ 3.0290e-01, -1.4031e-02, -1.9712e-01,  ..., -5.9816e-03,
         -1.0704e-01, -8.2173e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1864])
shifts shape: torch.Size([1864, 3])
sender shape: torch.Size([1864])
receiver shape: torch.Size([1864])
Edge attributes shape: torch.Size([1864, 9])
Edge attributes tensor([[ 1.0000,  1.1980,  1.0198,  ...,  0.0448, -0.9537, -0.5877],
        [ 1.0000, -0.2373,  1.7157,  ...,  2.1729, -0.0352, -0.0362],
        [ 1.0000,  1.4175, -0.6942,  ..., -0.5793,  0.6392, -0.9686],
        ...,
        [ 1.0000, -1.4056, -0.9895,  ..., -0.0233, -0.2713, -1.2462],
        [ 1.0000, -0.2553, -1.3754,  ...,  0.9969,  1.8136,  0.6313],
        [ 1.0000, -1.2735,  0.4658,  ..., -0.8755,  0.6480, -0.2973]])
Edge features shape: torch.Size([1864, 8])
Edge features tensor([[ 1.6901e-01, -6.3522e-02, -1.4513e-01,  ..., -1.5594e-01,
         -4.2140e-02,  1.7178e-01],
        [ 3.4385e-01,  4.3191e-01,  1.9866e-01,  ..., -3.5490e-01,
         -1.8036e-02,  3.3224e-01],
        [ 3.4486e-01,  4.3748e-01,  2.1012e-01,  ..., -3.7069e-01,
         -4.3294e-02,  3.1577e-01],
        ...,
        [ 3.6688e-01,  5.7114e-01,  5.2227e-01,  ..., -4.6868e-01,
         -5.8397e-01, -4.4043e-01],
        [ 2.1758e-01,  2.0801e-03, -2.1756e-01,  ...,  6.2394e-03,
         -2.1746e-01, -8.3184e-03],
        [ 3.9720e-05, -7.8888e-05,  1.1696e-04,  ..., -2.1943e-04,
          2.4808e-04, -2.7329e-04]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1864, 96])
Tensor Product Weights tensor([[-1.6729e-02,  9.3608e-02,  9.2447e-02,  ...,  3.0529e-02,
          2.7494e-02, -1.0181e-01],
        [ 7.0705e-02, -1.8103e-01, -9.3571e-02,  ..., -1.0313e-01,
         -3.5926e-02,  8.2663e-02],
        [ 7.7379e-02, -1.7819e-01, -1.0168e-01,  ..., -9.3661e-02,
         -2.6182e-02,  7.3511e-02],
        ...,
        [ 5.0407e-01,  8.6313e-02, -2.8099e-01,  ...,  1.3736e-01,
          1.9552e-01, -7.3240e-02],
        [-5.8451e-02,  1.5241e-01,  1.1493e-01,  ...,  9.9231e-02,
          1.5560e-02, -1.0304e-01],
        [-8.5401e-05, -1.3267e-04, -4.1715e-05,  ...,  1.0172e-04,
          6.5989e-05,  2.0727e-05]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1311, -0.1165,  0.2583,  ...,  0.1291,  0.0617,  0.2677],
        [ 0.1935, -0.0863,  0.3385,  ..., -0.1841,  0.1288,  0.1934],
        [ 0.1261, -0.1138,  0.2766,  ..., -0.0385,  0.0850,  0.3044],
        ...,
        [-0.1947,  0.0029, -0.1872,  ...,  0.0227,  0.0827,  0.0879],
        [ 0.0017, -0.1199,  0.1758,  ...,  0.0028,  0.1300,  0.2775],
        [-0.2190, -0.1185, -0.3042,  ...,  0.0018,  0.0960,  0.0153]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5769e+00,  1.1216e+00, -5.5069e-01,  ...,  2.7088e-02,
          1.1917e-02, -5.2576e-03],
        [ 1.4204e+00,  6.9164e-01, -5.8077e-01,  ...,  3.1286e-02,
          4.9745e-02, -3.5963e-02],
        [ 1.5975e+00,  1.0859e+00, -6.2597e-01,  ...,  8.8591e-03,
          9.1294e-02, -5.5844e-02],
        ...,
        [ 1.9710e-01, -1.0331e-01, -1.1656e-01,  ...,  2.3380e-02,
          1.1722e-01,  8.6074e-02],
        [ 9.5152e-01,  6.2800e-01, -3.8490e-01,  ...,  7.2502e-02,
          6.3169e-02,  1.4411e-04],
        [ 3.0628e-01, -1.3115e-02, -2.0749e-01,  ...,  1.1293e-01,
          7.8529e-02, -1.7739e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1838])
shifts shape: torch.Size([1838, 3])
sender shape: torch.Size([1838])
receiver shape: torch.Size([1838])
Edge attributes shape: torch.Size([1838, 9])
Edge attributes tensor([[ 1.0000,  1.2479,  0.9932,  ..., -0.0152, -0.8663, -0.7105],
        [ 1.0000, -0.1548,  1.7245,  ...,  2.2070,  0.1014, -0.0141],
        [ 1.0000,  1.3647, -0.7351,  ..., -0.5140,  0.7334, -0.8167],
        ...,
        [ 1.0000,  0.3681, -1.6778,  ...,  2.0292,  0.4818, -0.0555],
        [ 1.0000, -1.0658, -1.2125,  ...,  0.5256, -0.9825, -0.4789],
        [ 1.0000, -1.2733,  0.3888,  ..., -0.9490,  0.5561, -0.2542]])
Edge features shape: torch.Size([1838, 8])
Edge features tensor([[ 1.6783e-01, -6.4596e-02, -1.4297e-01,  ..., -1.5693e-01,
         -3.6530e-02,  1.7099e-01],
        [ 3.4376e-01,  4.3137e-01,  1.9755e-01,  ..., -3.5333e-01,
         -1.5603e-02,  3.3375e-01],
        [ 3.4487e-01,  4.3751e-01,  2.1017e-01,  ..., -3.7077e-01,
         -4.3416e-02,  3.1569e-01],
        ...,
        [ 2.1799e-01,  2.8153e-03, -2.1795e-01,  ...,  8.4440e-03,
         -2.1777e-01, -1.1257e-02],
        [ 3.6688e-01,  5.7115e-01,  5.2229e-01,  ..., -4.6866e-01,
         -5.8398e-01, -4.4048e-01],
        [ 5.7691e-05, -1.1441e-04,  1.6921e-04,  ..., -3.1308e-04,
          3.5150e-04, -3.8401e-04]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1838, 96])
Tensor Product Weights tensor([[-1.5234e-02,  9.1724e-02,  9.0361e-02,  ...,  2.9895e-02,
          2.7580e-02, -1.0052e-01],
        [ 7.0085e-02, -1.8126e-01, -9.2795e-02,  ..., -1.0402e-01,
         -3.6850e-02,  8.3563e-02],
        [ 7.7412e-02, -1.7818e-01, -1.0172e-01,  ..., -9.3614e-02,
         -2.6135e-02,  7.3467e-02],
        ...,
        [-5.8598e-02,  1.5269e-01,  1.1461e-01,  ...,  9.9996e-02,
          1.5254e-02, -1.0258e-01],
        [ 5.0410e-01,  8.6334e-02, -2.8099e-01,  ...,  1.3736e-01,
          1.9552e-01, -7.3245e-02],
        [-1.2512e-04, -1.9021e-04, -5.7939e-05,  ...,  1.4320e-04,
          9.4272e-05,  2.8732e-05]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 1.2661e-01, -1.1606e-01,  2.5971e-01,  ...,  1.2506e-01,
          4.3215e-02,  2.6418e-01],
        [ 1.8032e-01, -1.0357e-01,  3.3009e-01,  ..., -1.3934e-01,
          1.6207e-01,  2.2995e-01],
        [ 1.2740e-01, -1.1684e-01,  2.8720e-01,  ..., -4.1456e-02,
          6.6783e-02,  3.0652e-01],
        ...,
        [-1.9095e-01, -7.7013e-05, -1.8159e-01,  ...,  2.7411e-02,
          8.5003e-02, -3.7876e-03],
        [ 2.3440e-03, -1.2032e-01,  1.7530e-01,  ..., -7.5836e-02,
          2.3031e-01,  6.9265e-02],
        [-2.1892e-01, -1.1854e-01, -3.0413e-01,  ...,  5.2811e-02,
          2.8517e-02, -4.4042e-02]], grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5753e+00,  1.1248e+00, -5.5656e-01,  ...,  3.0128e-02,
          8.8265e-03,  1.2138e-03],
        [ 1.3872e+00,  6.5954e-01, -5.7984e-01,  ...,  6.7841e-02,
          5.4311e-02, -1.8230e-02],
        [ 1.6135e+00,  1.0961e+00, -6.3727e-01,  ...,  8.8198e-03,
          8.8779e-02, -5.4785e-02],
        ...,
        [ 1.9298e-01, -1.0365e-01, -1.0836e-01,  ..., -3.0615e-02,
          1.4116e-01,  1.8129e-02],
        [ 9.5196e-01,  6.2814e-01, -3.8491e-01,  ...,  4.9444e-02,
          7.7449e-02, -2.8874e-02],
        [ 3.0638e-01, -1.3125e-02, -2.0764e-01,  ...,  8.6095e-02,
          9.6243e-02, -5.0447e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1778])
shifts shape: torch.Size([1778, 3])
sender shape: torch.Size([1778])
receiver shape: torch.Size([1778])
Edge attributes shape: torch.Size([1778, 9])
Edge attributes tensor([[ 1.0000,  1.2479,  0.9915,  ..., -0.0189, -0.8678, -0.7085],
        [ 1.0000, -0.1594,  1.7244,  ...,  2.2064,  0.0746, -0.0157],
        [ 1.0000,  1.3733, -0.7351,  ..., -0.5139,  0.7188, -0.8470],
        ...,
        [ 1.0000, -0.9939, -1.2724,  ...,  0.6920, -1.0300, -0.3838],
        [ 1.0000, -1.1808,  0.2956,  ..., -1.0203,  0.4702,  0.0802],
        [ 1.0000, -1.3432,  0.3943,  ..., -0.9442,  0.5193, -0.4929]])
Edge features shape: torch.Size([1778, 8])
Edge features tensor([[ 1.6754e-01, -6.4862e-02, -1.4243e-01,  ..., -1.5716e-01,
         -3.5128e-02,  1.7076e-01],
        [ 3.4379e-01,  4.3156e-01,  1.9795e-01,  ..., -3.5389e-01,
         -1.6475e-02,  3.3321e-01],
        [ 3.4492e-01,  4.3779e-01,  2.1076e-01,  ..., -3.7157e-01,
         -4.4729e-02,  3.1479e-01],
        ...,
        [ 3.6687e-01,  5.7114e-01,  5.2226e-01,  ..., -4.6869e-01,
         -5.8396e-01, -4.4040e-01],
        [ 5.6905e-05, -1.1286e-04,  1.6693e-04,  ..., -3.0902e-04,
          3.4705e-04, -3.7927e-04],
        [ 2.2347e-01,  1.3032e-02, -2.2271e-01,  ...,  3.8918e-02,
         -2.1892e-01, -5.1685e-02]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1778, 96])
Tensor Product Weights tensor([[-1.4859e-02,  9.1250e-02,  8.9830e-02,  ...,  2.9745e-02,
          2.7601e-02, -1.0019e-01],
        [ 7.0307e-02, -1.8118e-01, -9.3073e-02,  ..., -1.0370e-01,
         -3.6519e-02,  8.3240e-02],
        [ 7.7771e-02, -1.7801e-01, -1.0215e-01,  ..., -9.3110e-02,
         -2.5621e-02,  7.3001e-02],
        ...,
        [ 5.0404e-01,  8.6295e-02, -2.8099e-01,  ...,  1.3736e-01,
          1.9552e-01, -7.3236e-02],
        [-1.2337e-04, -1.8771e-04, -5.7250e-05,  ...,  1.4142e-04,
          9.3047e-05,  2.8392e-05],
        [-6.0527e-02,  1.5613e-01,  1.0983e-01,  ...,  1.1019e-01,
          1.0457e-02, -9.5560e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1253, -0.1160,  0.2575,  ...,  0.1255,  0.0432,  0.2674],
        [ 0.1774, -0.0982,  0.3280,  ..., -0.1422,  0.1692,  0.2223],
        [ 0.1273, -0.1165,  0.2865,  ..., -0.0401,  0.0688,  0.3114],
        ...,
        [-0.1889,  0.0013, -0.1786,  ...,  0.0162,  0.1007,  0.0072],
        [ 0.0021, -0.1201,  0.1752,  ..., -0.1155,  0.2501,  0.0648],
        [-0.2188, -0.1186, -0.3039,  ...,  0.0476,  0.0424, -0.0239]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5732e+00,  1.1228e+00, -5.5645e-01,  ...,  2.9886e-02,
          9.5667e-03,  3.4336e-04],
        [ 1.3881e+00,  6.5402e-01, -5.7726e-01,  ...,  6.8080e-02,
          5.2781e-02, -1.9361e-02],
        [ 1.6123e+00,  1.0955e+00, -6.3690e-01,  ...,  8.8603e-03,
          8.9515e-02, -5.4783e-02],
        ...,
        [ 1.9131e-01, -1.0690e-01, -1.0611e-01,  ..., -3.2259e-02,
          1.3899e-01,  3.6661e-02],
        [ 9.5229e-01,  6.2837e-01, -3.8512e-01,  ...,  4.6205e-02,
          8.0170e-02, -2.7001e-02],
        [ 3.0618e-01, -1.3157e-02, -2.0703e-01,  ...,  8.0427e-02,
          1.0120e-01, -5.0549e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1734])
shifts shape: torch.Size([1734, 3])
sender shape: torch.Size([1734])
receiver shape: torch.Size([1734])
Edge attributes shape: torch.Size([1734, 9])
Edge attributes tensor([[ 1.0000,  1.2388,  0.9870,  ..., -0.0289, -0.8930, -0.6736],
        [ 1.0000, -0.1516,  1.7249,  ...,  2.2084,  0.0944, -0.0137],
        [ 1.0000,  1.3428, -0.7351,  ..., -0.5139,  0.7690, -0.7400],
        ...,
        [ 1.0000,  0.3533, -1.6451,  ...,  1.9078,  0.8724,  0.0283],
        [ 1.0000, -1.1568,  0.2853,  ..., -1.0270,  0.4630,  0.1564],
        [ 1.0000, -1.3199,  0.3800,  ..., -0.9566,  0.5176, -0.4058]])
Edge features shape: torch.Size([1734, 8])
Edge features tensor([[ 1.6747e-01, -6.4928e-02, -1.4229e-01,  ..., -1.5721e-01,
         -3.4778e-02,  1.7070e-01],
        [ 3.4390e-01,  4.3214e-01,  1.9913e-01,  ..., -3.5556e-01,
         -1.9073e-02,  3.3159e-01],
        [ 3.4497e-01,  4.3807e-01,  2.1134e-01,  ..., -3.7235e-01,
         -4.6013e-02,  3.1392e-01],
        ...,
        [ 2.1805e-01,  2.9313e-03, -2.1801e-01,  ...,  8.7918e-03,
         -2.1782e-01, -1.1720e-02],
        [ 5.6165e-05, -1.1140e-04,  1.6478e-04,  ..., -3.0522e-04,
          3.4288e-04, -3.7484e-04],
        [ 2.2357e-01,  1.3230e-02, -2.2279e-01,  ...,  3.9504e-02,
         -2.1889e-01, -5.2457e-02]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1734, 96])
Tensor Product Weights tensor([[-1.4766e-02,  9.1131e-02,  8.9696e-02,  ...,  2.9708e-02,
          2.7606e-02, -1.0011e-01],
        [ 7.0970e-02, -1.8093e-01, -9.3902e-02,  ..., -1.0275e-01,
         -3.5531e-02,  8.2281e-02],
        [ 7.8124e-02, -1.7784e-01, -1.0256e-01,  ..., -9.2616e-02,
         -2.5118e-02,  7.2545e-02],
        ...,
        [-5.8622e-02,  1.5273e-01,  1.1455e-01,  ...,  1.0012e-01,
          1.5205e-02, -1.0251e-01],
        [-1.2173e-04, -1.8537e-04, -5.6607e-05,  ...,  1.3976e-04,
          9.1899e-05,  2.8076e-05],
        [-6.0564e-02,  1.5619e-01,  1.0974e-01,  ...,  1.1037e-01,
          1.0354e-02, -9.5412e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1253, -0.1146,  0.2549,  ...,  0.1259,  0.0421,  0.2477],
        [ 0.1698, -0.1115,  0.2898,  ..., -0.1696,  0.1462,  0.1431],
        [ 0.1259, -0.1159,  0.2837,  ..., -0.0396,  0.0711,  0.2838],
        ...,
        [-0.1881,  0.0015, -0.1777,  ...,  0.0151,  0.1038,  0.0078],
        [ 0.0020, -0.1201,  0.1751,  ..., -0.1224,  0.2606,  0.0558],
        [-0.2187, -0.1186, -0.3038,  ...,  0.0470,  0.0424, -0.0195]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5734e+00,  1.1216e+00, -5.5967e-01,  ...,  3.1757e-02,
          8.1063e-03, -1.1755e-03],
        [ 1.3691e+00,  6.0690e-01, -5.6926e-01,  ...,  4.6131e-02,
          6.7530e-02, -2.7315e-02],
        [ 1.6099e+00,  1.0926e+00, -6.3463e-01,  ...,  8.5982e-03,
          9.0364e-02, -5.5478e-02],
        ...,
        [ 1.9076e-01, -1.0761e-01, -1.0523e-01,  ..., -3.3610e-02,
          1.3863e-01,  3.8579e-02],
        [ 9.5232e-01,  6.2838e-01, -3.8511e-01,  ...,  4.4676e-02,
          8.0674e-02, -2.8140e-02],
        [ 3.0608e-01, -1.3178e-02, -2.0679e-01,  ...,  7.8030e-02,
          1.0209e-01, -5.2544e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1732])
shifts shape: torch.Size([1732, 3])
sender shape: torch.Size([1732])
receiver shape: torch.Size([1732])
Edge attributes shape: torch.Size([1732, 9])
Edge attributes tensor([[ 1.0000,  1.2375,  0.9884,  ..., -0.0258, -0.8948, -0.6710],
        [ 1.0000, -0.1570,  1.7245,  ...,  2.2070,  0.0813, -0.0151],
        [ 1.0000,  1.3485, -0.7339,  ..., -0.5158,  0.7597, -0.7589],
        ...,
        [ 1.0000,  0.9784,  1.2787,  ...,  0.7100, -1.0540, -0.3548],
        [ 1.0000,  0.3624,  1.6889,  ...,  2.0710, -0.2786, -0.0742],
        [ 1.0000, -0.3386,  1.6489,  ...,  1.9217,  0.8687,  0.0335]])
Edge features shape: torch.Size([1732, 8])
Edge features tensor([[ 1.6754e-01, -6.4864e-02, -1.4243e-01,  ..., -1.5716e-01,
         -3.5118e-02,  1.7076e-01],
        [ 3.4389e-01,  4.3208e-01,  1.9901e-01,  ..., -3.5539e-01,
         -1.8804e-02,  3.3176e-01],
        [ 3.4496e-01,  4.3804e-01,  2.1128e-01,  ..., -3.7225e-01,
         -4.5859e-02,  3.1402e-01],
        ...,
        [ 2.1790e-01,  2.6642e-03, -2.1787e-01,  ...,  7.9911e-03,
         -2.1771e-01, -1.0653e-02],
        [ 5.3405e-03, -9.6888e-03,  1.2237e-02,  ..., -6.4690e-03,
          1.2738e-03,  4.1580e-03],
        [ 1.5475e-08, -3.0946e-08,  4.6409e-08,  ..., -9.2712e-08,
          1.0811e-07, -1.2347e-07]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1732, 96])
Tensor Product Weights tensor([[-1.4857e-02,  9.1247e-02,  8.9826e-02,  ...,  2.9744e-02,
          2.7601e-02, -1.0019e-01],
        [ 7.0901e-02, -1.8095e-01, -9.3816e-02,  ..., -1.0285e-01,
         -3.5633e-02,  8.2380e-02],
        [ 7.8082e-02, -1.7786e-01, -1.0251e-01,  ..., -9.2675e-02,
         -2.5178e-02,  7.2599e-02],
        ...,
        [-5.8568e-02,  1.5263e-01,  1.1467e-01,  ...,  9.9839e-02,
          1.5317e-02, -1.0268e-01],
        [-1.3434e-02, -7.5635e-03,  1.9128e-03,  ..., -8.7968e-04,
          2.7132e-03, -9.8519e-04],
        [-3.1819e-08, -5.4883e-08, -1.9751e-08,  ...,  4.5583e-08,
          2.7737e-08,  9.8889e-09]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1249, -0.1147,  0.2549,  ...,  0.1258,  0.0430,  0.2496],
        [ 0.1695, -0.1104,  0.2896,  ..., -0.1714,  0.1462,  0.1423],
        [ 0.1262, -0.1158,  0.2834,  ..., -0.0389,  0.0717,  0.2862],
        ...,
        [-0.1485, -0.0805, -0.2976,  ..., -0.0397,  0.0393, -0.0803],
        [-0.0078, -0.1158,  0.1722,  ..., -0.3995, -0.1964, -0.0322],
        [-0.2194, -0.1169, -0.3049,  ...,  0.0129, -0.0122, -0.0305]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5729,  1.1212, -0.5597,  ...,  0.0313,  0.0085, -0.0017],
        [ 1.3709,  0.6064, -0.5678,  ...,  0.0469,  0.0676, -0.0270],
        [ 1.6093,  1.0923, -0.6342,  ...,  0.0086,  0.0905, -0.0556],
        ...,
        [ 0.3521,  0.0194, -0.2087,  ..., -0.0773, -0.1133,  0.0547],
        [ 0.9473,  0.6274, -0.3887,  ...,  0.0019, -0.0936, -0.0107],
        [ 0.3078, -0.0124, -0.2103,  ...,  0.0270, -0.1312, -0.0333]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1864])
shifts shape: torch.Size([1864, 3])
sender shape: torch.Size([1864])
receiver shape: torch.Size([1864])
Edge attributes shape: torch.Size([1864, 9])
Edge attributes tensor([[ 1.0000,  1.1967,  1.0206,  ...,  0.0466, -0.9559, -0.5847],
        [ 1.0000, -0.2307,  1.7166,  ...,  2.1766, -0.0034, -0.0343],
        [ 1.0000,  1.4060, -0.6947,  ..., -0.5784,  0.6594, -0.9271],
        ...,
        [ 1.0000, -0.2707, -1.3701,  ...,  0.9807,  1.8121,  0.6302],
        [ 1.0000, -1.4265, -0.9625,  ..., -0.0823, -0.2450, -1.2883],
        [ 1.0000, -1.2815,  0.4937,  ..., -0.8455,  0.6727, -0.3410]])
Edge features shape: torch.Size([1864, 8])
Edge features tensor([[ 1.6902e-01, -6.3510e-02, -1.4515e-01,  ..., -1.5593e-01,
         -4.2204e-02,  1.7179e-01],
        [ 3.4387e-01,  4.3199e-01,  1.9882e-01,  ..., -3.5513e-01,
         -1.8404e-02,  3.3201e-01],
        [ 3.4486e-01,  4.3746e-01,  2.1008e-01,  ..., -3.7064e-01,
         -4.3212e-02,  3.1583e-01],
        ...,
        [ 2.1759e-01,  2.0898e-03, -2.1757e-01,  ...,  6.2686e-03,
         -2.1747e-01, -8.3572e-03],
        [ 3.6687e-01,  5.7112e-01,  5.2222e-01,  ..., -4.6872e-01,
         -5.8393e-01, -4.4031e-01],
        [ 3.8841e-05, -7.7150e-05,  1.1440e-04,  ..., -2.1479e-04,
          2.4294e-04, -2.6775e-04]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1864, 96])
Tensor Product Weights tensor([[-1.6746e-02,  9.3629e-02,  9.2471e-02,  ...,  3.0537e-02,
          2.7493e-02, -1.0183e-01],
        [ 7.0799e-02, -1.8099e-01, -9.3688e-02,  ..., -1.0299e-01,
         -3.5786e-02,  8.2528e-02],
        [ 7.7356e-02, -1.7820e-01, -1.0166e-01,  ..., -9.3692e-02,
         -2.6214e-02,  7.3540e-02],
        ...,
        [-5.8453e-02,  1.5241e-01,  1.1493e-01,  ...,  9.9241e-02,
          1.5556e-02, -1.0304e-01],
        [ 5.0397e-01,  8.6252e-02, -2.8099e-01,  ...,  1.3736e-01,
          1.9552e-01, -7.3227e-02],
        [-8.3471e-05, -1.2984e-04, -4.0895e-05,  ...,  9.9649e-05,
          6.4590e-05,  2.0322e-05]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1316, -0.1164,  0.2596,  ...,  0.1285,  0.0607,  0.2611],
        [ 0.1922, -0.0875,  0.3186,  ..., -0.1880,  0.1259,  0.1920],
        [ 0.1252, -0.1151,  0.2765,  ..., -0.0413,  0.0856,  0.2956],
        ...,
        [-0.1947,  0.0025, -0.1874,  ...,  0.0249,  0.0819,  0.0872],
        [ 0.0017, -0.1199,  0.1757,  ...,  0.0153,  0.1254,  0.2853],
        [-0.2189, -0.1185, -0.3042,  ...,  0.0011,  0.0975,  0.0135]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5787e+00,  1.1232e+00, -5.5075e-01,  ...,  2.7662e-02,
          1.0851e-02, -4.1169e-03],
        [ 1.3959e+00,  6.6802e-01, -5.9459e-01,  ...,  5.3192e-02,
          5.8983e-02, -1.6324e-02],
        [ 1.5992e+00,  1.0869e+00, -6.2672e-01,  ...,  8.2482e-03,
          9.0878e-02, -5.6090e-02],
        ...,
        [ 1.9726e-01, -1.0252e-01, -1.1643e-01,  ...,  2.5287e-02,
          1.1647e-01,  8.5828e-02],
        [ 9.5133e-01,  6.2788e-01, -3.8477e-01,  ...,  7.3700e-02,
          6.1758e-02,  9.8136e-04],
        [ 3.0629e-01, -1.3097e-02, -2.0756e-01,  ...,  1.1464e-01,
          7.6333e-02, -1.6499e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1742])
shifts shape: torch.Size([1742, 3])
sender shape: torch.Size([1742])
receiver shape: torch.Size([1742])
Edge attributes shape: torch.Size([1742, 9])
Edge attributes tensor([[ 1.0000,  1.2392,  0.9851,  ..., -0.0331, -0.8939, -0.6723],
        [ 1.0000, -0.1502,  1.7251,  ...,  2.2090,  0.0902, -0.0135],
        [ 1.0000,  1.3408, -0.7369,  ..., -0.5110,  0.7724, -0.7348],
        ...,
        [ 1.0000,  0.3206, -1.6390,  ...,  1.8854,  0.9716,  0.0698],
        [ 1.0000, -1.1666,  0.2801,  ..., -1.0303,  0.4518,  0.1288],
        [ 1.0000, -1.3124,  0.3755,  ..., -0.9604,  0.5168, -0.3781]])
Edge features shape: torch.Size([1742, 8])
Edge features tensor([[ 1.6735e-01, -6.5032e-02, -1.4208e-01,  ..., -1.5730e-01,
         -3.4228e-02,  1.7060e-01],
        [ 3.4391e-01,  4.3222e-01,  1.9929e-01,  ..., -3.5578e-01,
         -1.9420e-02,  3.3138e-01],
        [ 3.4498e-01,  4.3812e-01,  2.1145e-01,  ..., -3.7248e-01,
         -4.6239e-02,  3.1376e-01],
        ...,
        [ 2.1803e-01,  2.8849e-03, -2.1799e-01,  ...,  8.6526e-03,
         -2.1780e-01, -1.1535e-02],
        [ 5.6127e-05, -1.1132e-04,  1.6467e-04,  ..., -3.0504e-04,
          3.4268e-04, -3.7463e-04],
        [ 2.2379e-01,  1.3639e-02, -2.2296e-01,  ...,  4.0714e-02,
         -2.1881e-01, -5.4050e-02]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1742, 96])
Tensor Product Weights tensor([[-1.4619e-02,  9.0945e-02,  8.9487e-02,  ...,  2.9651e-02,
          2.7614e-02, -9.9977e-02],
        [ 7.1059e-02, -1.8089e-01, -9.4013e-02,  ..., -1.0262e-01,
         -3.5399e-02,  8.2154e-02],
        [ 7.8187e-02, -1.7781e-01, -1.0263e-01,  ..., -9.2529e-02,
         -2.5029e-02,  7.2465e-02],
        ...,
        [-5.8612e-02,  1.5272e-01,  1.1457e-01,  ...,  1.0007e-01,
          1.5225e-02, -1.0254e-01],
        [-1.2164e-04, -1.8525e-04, -5.6579e-05,  ...,  1.3968e-04,
          9.1843e-05,  2.8063e-05],
        [-6.0639e-02,  1.5631e-01,  1.0954e-01,  ...,  1.1076e-01,
          1.0140e-02, -9.5106e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1251, -0.1146,  0.2543,  ...,  0.1261,  0.0414,  0.2470],
        [ 0.1703, -0.1107,  0.2929,  ..., -0.1674,  0.1465,  0.1429],
        [ 0.1257, -0.1157,  0.2832,  ..., -0.0389,  0.0710,  0.2828],
        ...,
        [-0.1885,  0.0023, -0.1780,  ...,  0.0140,  0.1046,  0.0134],
        [ 0.0019, -0.1200,  0.1752,  ..., -0.1226,  0.2505,  0.0706],
        [-0.2187, -0.1187, -0.3037,  ...,  0.0462,  0.0472, -0.0175]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5732e+00,  1.1213e+00, -5.5978e-01,  ...,  3.1798e-02,
          8.1572e-03, -1.3482e-03],
        [ 1.3714e+00,  6.0934e-01, -5.7075e-01,  ...,  4.4992e-02,
          6.7569e-02, -2.7185e-02],
        [ 1.6093e+00,  1.0920e+00, -6.3412e-01,  ...,  8.7817e-03,
          9.0530e-02, -5.5611e-02],
        ...,
        [ 1.9096e-01, -1.0860e-01, -1.0623e-01,  ..., -3.1549e-02,
          1.3846e-01,  4.3345e-02],
        [ 9.5250e-01,  6.2850e-01, -3.8525e-01,  ...,  4.6304e-02,
          8.0557e-02, -2.5769e-02],
        [ 3.0600e-01, -1.3179e-02, -2.0655e-01,  ...,  8.0059e-02,
          1.0207e-01, -4.9556e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1736])
shifts shape: torch.Size([1736, 3])
sender shape: torch.Size([1736])
receiver shape: torch.Size([1736])
Edge attributes shape: torch.Size([1736, 9])
Edge attributes tensor([[ 1.0000,  1.2436,  0.9834,  ..., -0.0368, -0.8855, -0.6842],
        [ 1.0000, -0.1497,  1.7252,  ...,  2.2095,  0.0813, -0.0136],
        [ 1.0000,  1.3468, -0.7390,  ..., -0.5075,  0.7633, -0.7576],
        ...,
        [ 1.0000, -0.0554, -1.4330,  ...,  1.1778,  1.7969,  0.6070],
        [ 1.0000, -1.3546, -1.0733,  ...,  0.1699, -0.1586, -1.1760],
        [ 1.0000, -1.3729,  0.4013,  ..., -0.9380,  0.5061, -0.6008]])
Edge features shape: torch.Size([1736, 8])
Edge features tensor([[ 1.6736e-01, -6.5022e-02, -1.4210e-01,  ..., -1.5729e-01,
         -3.4282e-02,  1.7061e-01],
        [ 3.4391e-01,  4.3220e-01,  1.9924e-01,  ..., -3.5572e-01,
         -1.9327e-02,  3.3143e-01],
        [ 3.4497e-01,  4.3811e-01,  2.1141e-01,  ..., -3.7244e-01,
         -4.6164e-02,  3.1381e-01],
        ...,
        [ 2.1803e-01,  2.8989e-03, -2.1800e-01,  ...,  8.6945e-03,
         -2.1780e-01, -1.1590e-02],
        [ 3.6687e-01,  5.7113e-01,  5.2223e-01,  ..., -4.6871e-01,
         -5.8394e-01, -4.4034e-01],
        [ 5.6109e-05, -1.1129e-04,  1.6462e-04,  ..., -3.0493e-04,
          3.4255e-04, -3.7448e-04]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1736, 96])
Tensor Product Weights tensor([[-1.4633e-02,  9.0963e-02,  8.9507e-02,  ...,  2.9657e-02,
          2.7613e-02, -9.9990e-02],
        [ 7.1035e-02, -1.8090e-01, -9.3983e-02,  ..., -1.0265e-01,
         -3.5434e-02,  8.2188e-02],
        [ 7.8166e-02, -1.7782e-01, -1.0261e-01,  ..., -9.2558e-02,
         -2.5059e-02,  7.2491e-02],
        ...,
        [-5.8615e-02,  1.5272e-01,  1.1457e-01,  ...,  1.0008e-01,
          1.5219e-02, -1.0253e-01],
        [ 5.0400e-01,  8.6269e-02, -2.8099e-01,  ...,  1.3736e-01,
          1.9552e-01, -7.3231e-02],
        [-1.2161e-04, -1.8519e-04, -5.6554e-05,  ...,  1.3962e-04,
          9.1809e-05,  2.8050e-05]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1248, -0.1146,  0.2543,  ...,  0.1263,  0.0409,  0.2523],
        [ 0.1704, -0.1109,  0.2934,  ..., -0.1661,  0.1462,  0.1475],
        [ 0.1258, -0.1156,  0.2833,  ..., -0.0384,  0.0697,  0.2896],
        ...,
        [-0.1924,  0.0051, -0.1834,  ...,  0.0207,  0.0809,  0.0786],
        [ 0.0015, -0.1197,  0.1756,  ..., -0.0319,  0.1009,  0.2473],
        [-0.2186, -0.1188, -0.3034,  ...,  0.0110,  0.0917, -0.0032]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5729e+00,  1.1211e+00, -5.5982e-01,  ...,  3.1536e-02,
          8.4005e-03, -1.4175e-03],
        [ 1.3725e+00,  6.0987e-01, -5.7113e-01,  ...,  4.5974e-02,
          6.7274e-02, -2.6948e-02],
        [ 1.6090e+00,  1.0919e+00, -6.3403e-01,  ...,  9.0901e-03,
          9.0624e-02, -5.5516e-02],
        ...,
        [ 1.9377e-01, -1.0999e-01, -1.1424e-01,  ..., -2.0300e-04,
          1.2336e-01,  8.6355e-02],
        [ 9.5306e-01,  6.2888e-01, -3.8576e-01,  ...,  6.8026e-02,
          6.8203e-02,  3.9845e-03],
        [ 3.0573e-01, -1.3197e-02, -2.0566e-01,  ...,  1.0917e-01,
          8.5691e-02, -1.0132e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1942])
shifts shape: torch.Size([1942, 3])
sender shape: torch.Size([1942])
receiver shape: torch.Size([1942])
Edge attributes shape: torch.Size([1942, 9])
Edge attributes tensor([[ 1.0000e+00,  1.1818e+00,  9.9921e-01,  ..., -1.7746e-03,
         -1.0033e+00, -5.1105e-01],
        [ 1.0000e+00, -1.8898e-01,  1.7215e+00,  ...,  2.1953e+00,
          5.9364e-02, -2.2592e-02],
        [ 1.0000e+00,  1.3108e+00, -7.1807e-01,  ..., -5.4155e-01,
          8.1150e-01, -6.1437e-01],
        ...,
        [ 1.0000e+00,  2.2360e-01,  1.7175e+00,  ...,  2.1801e+00,
          2.1453e-02, -3.2212e-02],
        [ 1.0000e+00,  4.4329e-01,  1.6680e+00,  ...,  1.9927e+00,
         -3.1338e-01, -1.1318e-01],
        [ 1.0000e+00, -2.8794e-01,  1.6720e+00,  ...,  2.0077e+00,
          7.5205e-01,  2.4833e-02]])
Edge features shape: torch.Size([1942, 8])
Edge features tensor([[ 1.6818e-01, -6.4283e-02, -1.4361e-01,  ..., -1.5665e-01,
         -3.8175e-02,  1.7125e-01],
        [ 3.4404e-01,  4.3293e-01,  2.0076e-01,  ..., -3.5784e-01,
         -2.2649e-02,  3.2934e-01],
        [ 3.4494e-01,  4.3793e-01,  2.1104e-01,  ..., -3.7194e-01,
         -4.5342e-02,  3.1437e-01],
        ...,
        [ 7.6274e-02, -8.2992e-02,  1.4027e-02,  ...,  2.7719e-02,
          5.7562e-02, -9.0351e-02],
        [ 5.3094e-03, -9.6356e-03,  1.2177e-02,  ..., -6.4878e-03,
          1.3311e-03,  4.0719e-03],
        [ 1.1363e-08, -2.2724e-08,  3.4079e-08,  ..., -6.8083e-08,
          7.9389e-08, -9.0675e-08]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1942, 96])
Tensor Product Weights tensor([[-1.5674e-02,  9.2278e-02,  9.0979e-02,  ...,  3.0075e-02,
          2.7555e-02, -1.0091e-01],
        [ 7.1890e-02, -1.8057e-01, -9.5044e-02,  ..., -1.0143e-01,
         -3.4166e-02,  8.0968e-02],
        [ 7.7940e-02, -1.7793e-01, -1.0234e-01,  ..., -9.2874e-02,
         -2.5381e-02,  7.2783e-02],
        ...,
        [-5.9279e-03,  5.4444e-04, -4.4801e-02,  ...,  5.1705e-02,
         -2.4605e-03,  3.0581e-02],
        [-1.3360e-02, -7.5448e-03,  1.8944e-03,  ..., -8.5252e-04,
          2.7118e-03, -9.7637e-04],
        [-2.3364e-08, -4.0303e-08, -1.4506e-08,  ...,  3.3477e-08,
          2.0369e-08,  7.2626e-09]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1330, -0.1160,  0.2581,  ...,  0.1303,  0.0510,  0.2020],
        [ 0.1870, -0.0981,  0.3410,  ..., -0.1644,  0.1340,  0.1251],
        [ 0.1223, -0.1139,  0.2724,  ..., -0.0395,  0.0845,  0.2237],
        ...,
        [-0.0981, -0.0901, -0.3424,  ..., -0.0499,  0.0785, -0.1081],
        [ 0.1820, -0.1046,  0.1552,  ..., -0.4270, -0.1975, -0.0189],
        [-0.1619, -0.1151, -0.4538,  ..., -0.0509, -0.1211,  0.0790]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5819e+00,  1.1245e+00, -5.4828e-01,  ...,  2.9482e-02,
          8.2062e-03, -3.1531e-03],
        [ 1.3993e+00,  6.8554e-01, -5.7136e-01,  ...,  3.6145e-02,
          5.6278e-02, -3.3384e-02],
        [ 1.5957e+00,  1.0813e+00, -6.2359e-01,  ...,  8.8548e-03,
          9.1922e-02, -5.8181e-02],
        ...,
        [ 3.2699e-01,  4.0210e-02, -1.9813e-01,  ..., -1.5667e-01,
         -3.1934e-02, -1.1490e-02],
        [ 1.0116e+00,  6.0131e-01, -3.3814e-01,  ...,  3.2225e-03,
         -9.4288e-02, -8.9714e-04],
        [ 3.8880e-01,  1.1106e-01, -2.5982e-01,  ..., -3.0946e-02,
          1.2458e-02, -2.3958e-01]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1742])
shifts shape: torch.Size([1742, 3])
sender shape: torch.Size([1742])
receiver shape: torch.Size([1742])
Edge attributes shape: torch.Size([1742, 9])
Edge attributes tensor([[ 1.0000,  1.2366,  0.9872,  ..., -0.0284, -0.8977, -0.6669],
        [ 1.0000, -0.1570,  1.7246,  ...,  2.2073,  0.0746, -0.0152],
        [ 1.0000,  1.3465, -0.7351,  ..., -0.5139,  0.7632, -0.7528],
        ...,
        [ 1.0000,  0.9977,  1.2765,  ...,  0.7038, -1.0093, -0.4005],
        [ 1.0000,  0.3924,  1.6848,  ...,  2.0554, -0.1899, -0.0945],
        [ 1.0000, -0.3057,  1.6440,  ...,  1.9036,  0.9584,  0.0713]])
Edge features shape: torch.Size([1742, 8])
Edge features tensor([[ 1.6745e-01, -6.4945e-02, -1.4226e-01,  ..., -1.5723e-01,
         -3.4691e-02,  1.7068e-01],
        [ 3.4389e-01,  4.3211e-01,  1.9908e-01,  ..., -3.5549e-01,
         -1.8961e-02,  3.3166e-01],
        [ 3.4497e-01,  4.3806e-01,  2.1132e-01,  ..., -3.7231e-01,
         -4.5960e-02,  3.1395e-01],
        ...,
        [ 2.1790e-01,  2.6495e-03, -2.1786e-01,  ...,  7.9468e-03,
         -2.1770e-01, -1.0594e-02],
        [ 5.3400e-03, -9.6879e-03,  1.2236e-02,  ..., -6.4693e-03,
          1.2748e-03,  4.1566e-03],
        [ 1.5651e-08, -3.1298e-08,  4.6937e-08,  ..., -9.3763e-08,
          1.0933e-07, -1.2487e-07]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1742, 96])
Tensor Product Weights tensor([[-1.4742e-02,  9.1102e-02,  8.9663e-02,  ...,  2.9699e-02,
          2.7607e-02, -1.0009e-01],
        [ 7.0941e-02, -1.8094e-01, -9.3866e-02,  ..., -1.0279e-01,
         -3.5574e-02,  8.2323e-02],
        [ 7.8110e-02, -1.7785e-01, -1.0254e-01,  ..., -9.2636e-02,
         -2.5139e-02,  7.2564e-02],
        ...,
        [-5.8565e-02,  1.5263e-01,  1.1468e-01,  ...,  9.9824e-02,
          1.5323e-02, -1.0269e-01],
        [-1.3433e-02, -7.5632e-03,  1.9125e-03,  ..., -8.7924e-04,
          2.7132e-03, -9.8504e-04],
        [-3.2182e-08, -5.5506e-08, -1.9975e-08,  ...,  4.6100e-08,
          2.8052e-08,  1.0001e-08]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1246, -0.1147,  0.2546,  ...,  0.1260,  0.0427,  0.2483],
        [ 0.1699, -0.1097,  0.2933,  ..., -0.1697,  0.1467,  0.1416],
        [ 0.1262, -0.1156,  0.2829,  ..., -0.0380,  0.0713,  0.2843],
        ...,
        [-0.1486, -0.0784, -0.2973,  ..., -0.0415,  0.0410, -0.0727],
        [-0.0078, -0.1158,  0.1723,  ..., -0.3957, -0.2131, -0.0395],
        [-0.2194, -0.1169, -0.3049,  ...,  0.0122, -0.0090, -0.0300]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5728e+00,  1.1210e+00, -5.6000e-01,  ...,  3.1121e-02,
          8.7328e-03, -1.9138e-03],
        [ 1.3739e+00,  6.0957e-01, -5.6950e-01,  ...,  4.5623e-02,
          6.8029e-02, -2.6464e-02],
        [ 1.6084e+00,  1.0914e+00, -6.3325e-01,  ...,  8.6667e-03,
          9.0722e-02, -5.5758e-02],
        ...,
        [ 3.5402e-01,  1.8654e-02, -2.0695e-01,  ..., -7.9798e-02,
         -1.1308e-01,  5.2972e-02],
        [ 9.4763e-01,  6.2760e-01, -3.8887e-01,  ...,  2.6271e-04,
         -9.3398e-02, -1.3081e-02],
        [ 3.0783e-01, -1.2375e-02, -2.1022e-01,  ...,  2.4528e-02,
         -1.3082e-01, -3.6875e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1860])
shifts shape: torch.Size([1860, 3])
sender shape: torch.Size([1860])
receiver shape: torch.Size([1860])
Edge attributes shape: torch.Size([1860, 9])
Edge attributes tensor([[ 1.0000,  1.1901,  1.0086,  ...,  0.0194, -0.9800, -0.5486],
        [ 1.0000, -0.1734,  1.7221,  ...,  2.1975,  0.1480, -0.0165],
        [ 1.0000,  1.3026, -0.7106,  ..., -0.5535,  0.8196, -0.5799],
        ...,
        [ 1.0000,  0.9653,  1.1831,  ...,  0.4469, -1.2488, -0.1700],
        [ 1.0000,  0.0929,  1.7099,  ...,  2.1507, -0.5746,  0.0382],
        [ 1.0000,  0.3136,  1.6529,  ...,  1.9367, -0.8784,  0.0459]])
Edge features shape: torch.Size([1860, 8])
Edge features tensor([[ 0.1684, -0.0641, -0.1440,  ..., -0.1565, -0.0391,  0.1714],
        [ 0.3439,  0.4323,  0.1995,  ..., -0.3560, -0.0198,  0.3311],
        [ 0.3449,  0.4376,  0.2104,  ..., -0.3710, -0.0439,  0.3154],
        ...,
        [ 0.2182,  0.0033, -0.2182,  ...,  0.0098, -0.2179, -0.0131],
        [ 0.0764, -0.0830,  0.0139,  ...,  0.0275,  0.0579, -0.0904],
        [ 0.0053, -0.0097,  0.0122,  ..., -0.0065,  0.0013,  0.0041]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1860, 96])
Tensor Product Weights tensor([[-0.0159,  0.0926,  0.0913,  ...,  0.0302,  0.0275, -0.1011],
        [ 0.0712, -0.1809, -0.0941,  ..., -0.1025, -0.0352,  0.0820],
        [ 0.0775, -0.1781, -0.1019,  ..., -0.0934, -0.0260,  0.0733],
        ...,
        [-0.0587,  0.1529,  0.1144,  ...,  0.1005,  0.0151, -0.1023],
        [-0.0058,  0.0005, -0.0448,  ...,  0.0518, -0.0024,  0.0306],
        [-0.0134, -0.0076,  0.0019,  ..., -0.0009,  0.0027, -0.0010]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1339, -0.1160,  0.2607,  ...,  0.1270,  0.0505,  0.2022],
        [ 0.1843, -0.0958,  0.3228,  ..., -0.1656,  0.1386,  0.1463],
        [ 0.1236, -0.1172,  0.2788,  ..., -0.0453,  0.0830,  0.2250],
        ...,
        [-0.1068, -0.0772, -0.2790,  ..., -0.0381,  0.0360, -0.1124],
        [ 0.1565, -0.1071,  0.1898,  ..., -0.4365, -0.0642, -0.0044],
        [-0.3163, -0.1355, -0.2196,  ..., -0.2781, -0.1747, -0.0637]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5812e+00,  1.1277e+00, -5.4832e-01,  ...,  3.1326e-02,
          6.4446e-03, -4.8254e-04],
        [ 1.3739e+00,  6.5738e-01, -5.7423e-01,  ...,  5.6010e-02,
          6.2138e-02, -1.6460e-02],
        [ 1.6063e+00,  1.0895e+00, -6.3047e-01,  ...,  6.7607e-03,
          8.9462e-02, -5.7052e-02],
        ...,
        [ 3.6501e-01,  1.3880e-02, -1.9252e-01,  ..., -8.1682e-02,
         -1.1678e-01,  7.5448e-02],
        [ 1.0273e+00,  6.4488e-01, -3.6918e-01,  ..., -2.7649e-03,
         -7.0510e-02,  8.2142e-03],
        [-3.2641e-02, -1.6255e-01,  3.4104e-02,  ..., -8.4628e-02,
          7.2480e-02,  4.0678e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1750])
shifts shape: torch.Size([1750, 3])
sender shape: torch.Size([1750])
receiver shape: torch.Size([1750])
Edge attributes shape: torch.Size([1750, 9])
Edge attributes tensor([[ 1.0000,  1.1902,  1.0095,  ...,  0.0214, -0.9791, -0.5500],
        [ 1.0000, -0.2359,  1.7155,  ...,  2.1721, -0.0879, -0.0349],
        [ 1.0000,  1.4033, -0.7054,  ..., -0.5618,  0.6650, -0.9268],
        ...,
        [ 1.0000,  1.0160,  1.2729,  ...,  0.6934, -0.9689, -0.4419],
        [ 1.0000,  0.4197,  1.6796,  ...,  2.0360, -0.1154, -0.1119],
        [ 1.0000, -0.2763,  1.6388,  ...,  1.8848,  1.0318,  0.1042]])
Edge features shape: torch.Size([1750, 8])
Edge features tensor([[ 1.6817e-01, -6.4294e-02, -1.4358e-01,  ..., -1.5666e-01,
         -3.8119e-02,  1.7124e-01],
        [ 3.4384e-01,  4.3181e-01,  1.9845e-01,  ..., -3.5461e-01,
         -1.7589e-02,  3.3252e-01],
        [ 3.4489e-01,  4.3766e-01,  2.1048e-01,  ..., -3.7118e-01,
         -4.4093e-02,  3.1523e-01],
        ...,
        [ 2.1786e-01,  2.5894e-03, -2.1783e-01,  ...,  7.7666e-03,
         -2.1768e-01, -1.0354e-02],
        [ 5.3504e-03, -9.7058e-03,  1.2256e-02,  ..., -6.4628e-03,
          1.2553e-03,  4.1856e-03],
        [ 1.1939e-08, -2.3875e-08,  3.5804e-08,  ..., -7.1521e-08,
          8.3393e-08, -9.5241e-08]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1750, 96])
Tensor Product Weights tensor([[-1.5659e-02,  9.2259e-02,  9.0958e-02,  ...,  3.0068e-02,
          2.7556e-02, -1.0089e-01],
        [ 7.0591e-02, -1.8107e-01, -9.3429e-02,  ..., -1.0329e-01,
         -3.6096e-02,  8.2828e-02],
        [ 7.7597e-02, -1.7809e-01, -1.0194e-01,  ..., -9.3354e-02,
         -2.5870e-02,  7.3226e-02],
        ...,
        [-5.8553e-02,  1.5260e-01,  1.1471e-01,  ...,  9.9761e-02,
          1.5349e-02, -1.0272e-01],
        [-1.3458e-02, -7.5693e-03,  1.9187e-03,  ..., -8.8840e-04,
          2.7136e-03, -9.8800e-04],
        [-2.4550e-08, -4.2339e-08, -1.5235e-08,  ...,  3.5163e-08,
          2.1398e-08,  7.6279e-09]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1230, -0.1148,  0.2516,  ...,  0.1282,  0.0622,  0.2507],
        [ 0.1726, -0.0687,  0.3486,  ..., -0.1651,  0.1267,  0.1425],
        [ 0.1292, -0.1125,  0.2781,  ..., -0.0308,  0.0835,  0.2918],
        ...,
        [-0.1502, -0.0758, -0.2964,  ..., -0.0425,  0.0429, -0.0636],
        [-0.0078, -0.1159,  0.1724,  ..., -0.3920, -0.2267, -0.0463],
        [-0.2195, -0.1169, -0.3049,  ...,  0.0118, -0.0065, -0.0298]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5681e+00,  1.1156e+00, -5.6548e-01,  ...,  2.8621e-02,
          1.3765e-02, -6.7545e-03],
        [ 1.4137e+00,  6.7590e-01, -6.1558e-01,  ...,  3.0777e-02,
          5.1105e-02, -1.7921e-02],
        [ 1.5976e+00,  1.0846e+00, -6.2430e-01,  ...,  8.8395e-03,
          9.2466e-02, -5.6336e-02],
        ...,
        [ 3.5318e-01,  1.6440e-02, -2.0563e-01,  ..., -8.2401e-02,
         -1.1263e-01,  5.1161e-02],
        [ 9.4776e-01,  6.2774e-01, -3.8891e-01,  ..., -1.2766e-03,
         -9.3118e-02, -1.5045e-02],
        [ 3.0792e-01, -1.2350e-02, -2.1035e-01,  ...,  2.2196e-02,
         -1.3053e-01, -3.9780e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1758])
shifts shape: torch.Size([1758, 3])
sender shape: torch.Size([1758])
receiver shape: torch.Size([1758])
Edge attributes shape: torch.Size([1758, 9])
Edge attributes tensor([[ 1.0000,  1.1972,  1.0112,  ...,  0.0252, -0.9631, -0.5738],
        [ 1.0000, -0.2350,  1.7157,  ...,  2.1730, -0.0750, -0.0349],
        [ 1.0000,  1.4113, -0.7025,  ..., -0.5663,  0.6507, -0.9533],
        ...,
        [ 1.0000,  0.2846, -1.6396,  ...,  1.8875,  1.0168,  0.0967],
        [ 1.0000, -1.1471,  0.2910,  ..., -1.0234,  0.4751,  0.1829],
        [ 1.0000, -1.2858,  0.3867,  ..., -0.9508,  0.5462, -0.2945]])
Edge features shape: torch.Size([1758, 8])
Edge features tensor([[ 1.6842e-01, -6.4058e-02, -1.4406e-01,  ..., -1.5645e-01,
         -3.9352e-02,  1.7142e-01],
        [ 3.4387e-01,  4.3199e-01,  1.9883e-01,  ..., -3.5513e-01,
         -1.8409e-02,  3.3201e-01],
        [ 3.4490e-01,  4.3773e-01,  2.1063e-01,  ..., -3.7138e-01,
         -4.4427e-02,  3.1500e-01],
        ...,
        [ 2.1796e-01,  2.7715e-03, -2.1793e-01,  ...,  8.3126e-03,
         -2.1775e-01, -1.1082e-02],
        [ 5.0587e-05, -1.0038e-04,  1.4859e-04,  ..., -2.7637e-04,
          3.1112e-04, -3.4097e-04],
        [ 2.2374e-01,  1.3554e-02, -2.2292e-01,  ...,  4.0463e-02,
         -2.1883e-01, -5.3719e-02]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1758, 96])
Tensor Product Weights tensor([[-1.5987e-02,  9.2674e-02,  9.1418e-02,  ...,  3.0207e-02,
          2.7537e-02, -1.0118e-01],
        [ 7.0800e-02, -1.8099e-01, -9.3690e-02,  ..., -1.0299e-01,
         -3.5784e-02,  8.2526e-02],
        [ 7.7689e-02, -1.7805e-01, -1.0205e-01,  ..., -9.3226e-02,
         -2.5739e-02,  7.3108e-02],
        ...,
        [-5.8590e-02,  1.5267e-01,  1.1462e-01,  ...,  9.9950e-02,
          1.5272e-02, -1.0261e-01],
        [-1.0936e-04, -1.6761e-04, -5.1673e-05,  ...,  1.2706e-04,
          8.3181e-05,  2.5644e-05],
        [-6.0623e-02,  1.5628e-01,  1.0958e-01,  ...,  1.1068e-01,
          1.0185e-02, -9.5170e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1287, -0.1166,  0.2549,  ...,  0.1299,  0.0609,  0.2632],
        [ 0.1889, -0.0847,  0.3332,  ..., -0.1809,  0.1350,  0.1818],
        [ 0.1274, -0.1130,  0.2764,  ..., -0.0330,  0.0840,  0.3002],
        ...,
        [-0.1887,  0.0025, -0.1785,  ...,  0.0152,  0.1061,  0.0174],
        [ 0.0018, -0.1200,  0.1754,  ..., -0.1164,  0.2536,  0.0754],
        [-0.2188, -0.1187, -0.3038,  ...,  0.0469,  0.0503, -0.0130]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5715,  1.1188, -0.5502,  ...,  0.0269,  0.0133, -0.0063],
        [ 1.4154,  0.6823, -0.5754,  ...,  0.0360,  0.0459, -0.0350],
        [ 1.5965,  1.0843, -0.6242,  ...,  0.0091,  0.0923, -0.0563],
        ...,
        [ 0.1913, -0.1082, -0.1068,  ..., -0.0283,  0.1385,  0.0451],
        [ 0.9525,  0.6285, -0.3854,  ...,  0.0471,  0.0800, -0.0258],
        [ 0.3061, -0.0132, -0.2068,  ...,  0.0807,  0.1013, -0.0500]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1748])
shifts shape: torch.Size([1748, 3])
sender shape: torch.Size([1748])
receiver shape: torch.Size([1748])
Edge attributes shape: torch.Size([1748, 9])
Edge attributes tensor([[ 1.0000,  1.1914,  1.0092,  ...,  0.0208, -0.9768, -0.5534],
        [ 1.0000, -0.2363,  1.7154,  ...,  2.1717, -0.0919, -0.0349],
        [ 1.0000,  1.4055, -0.7056,  ..., -0.5615,  0.6611, -0.9351],
        ...,
        [ 1.0000, -0.0604, -1.4364,  ...,  1.1889,  1.7912,  0.5999],
        [ 1.0000, -1.3589, -1.0675,  ...,  0.1560, -0.1625, -1.1830],
        [ 1.0000, -1.3698,  0.4086,  ..., -0.9314,  0.5160, -0.5937]])
Edge features shape: torch.Size([1748, 8])
Edge features tensor([[ 1.6820e-01, -6.4262e-02, -1.4365e-01,  ..., -1.5664e-01,
         -3.8286e-02,  1.7126e-01],
        [ 3.4383e-01,  4.3176e-01,  1.9836e-01,  ..., -3.5448e-01,
         -1.7382e-02,  3.3265e-01],
        [ 3.4489e-01,  4.3764e-01,  2.1045e-01,  ..., -3.7115e-01,
         -4.4037e-02,  3.1527e-01],
        ...,
        [ 2.1807e-01,  2.9577e-03, -2.1803e-01,  ...,  8.8710e-03,
         -2.1783e-01, -1.1825e-02],
        [ 3.6687e-01,  5.7113e-01,  5.2224e-01,  ..., -4.6870e-01,
         -5.8395e-01, -4.4036e-01],
        [ 5.6375e-05, -1.1181e-04,  1.6539e-04,  ..., -3.0631e-04,
          3.4408e-04, -3.7612e-04]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1748, 96])
Tensor Product Weights tensor([[-1.5703e-02,  9.2316e-02,  9.1020e-02,  ...,  3.0087e-02,
          2.7553e-02, -1.0093e-01],
        [ 7.0538e-02, -1.8109e-01, -9.3363e-02,  ..., -1.0337e-01,
         -3.6174e-02,  8.2905e-02],
        [ 7.7582e-02, -1.7810e-01, -1.0192e-01,  ..., -9.3376e-02,
         -2.5892e-02,  7.3246e-02],
        ...,
        [-5.8627e-02,  1.5274e-01,  1.1454e-01,  ...,  1.0014e-01,
          1.5194e-02, -1.0249e-01],
        [ 5.0401e-01,  8.6277e-02, -2.8099e-01,  ...,  1.3736e-01,
          1.9552e-01, -7.3233e-02],
        [-1.2219e-04, -1.8604e-04, -5.6795e-05,  ...,  1.4024e-04,
          9.2228e-05,  2.8168e-05]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1229, -0.1148,  0.2516,  ...,  0.1283,  0.0622,  0.2526],
        [ 0.1722, -0.0689,  0.3484,  ..., -0.1649,  0.1277,  0.1442],
        [ 0.1294, -0.1125,  0.2782,  ..., -0.0304,  0.0829,  0.2943],
        ...,
        [-0.1925,  0.0053, -0.1837,  ...,  0.0216,  0.0814,  0.0788],
        [ 0.0015, -0.1197,  0.1756,  ..., -0.0282,  0.1015,  0.2485],
        [-0.2187, -0.1188, -0.3034,  ...,  0.0117,  0.0920, -0.0038]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5679e+00,  1.1154e+00, -5.6550e-01,  ...,  2.8487e-02,
          1.3926e-02, -6.8607e-03],
        [ 1.4146e+00,  6.7501e-01, -6.1647e-01,  ...,  3.1648e-02,
          5.1219e-02, -1.7130e-02],
        [ 1.5975e+00,  1.0845e+00, -6.2407e-01,  ...,  8.9622e-03,
          9.2442e-02, -5.6291e-02],
        ...,
        [ 1.9383e-01, -1.1006e-01, -1.1449e-01,  ...,  1.6015e-04,
          1.2374e-01,  8.5952e-02],
        [ 9.5306e-01,  6.2887e-01, -3.8576e-01,  ...,  6.8328e-02,
          6.7895e-02,  3.8436e-03],
        [ 3.0570e-01, -1.3205e-02, -2.0558e-01,  ...,  1.0959e-01,
          8.5230e-02, -1.0303e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1762])
shifts shape: torch.Size([1762, 3])
sender shape: torch.Size([1762])
receiver shape: torch.Size([1762])
Edge attributes shape: torch.Size([1762, 9])
Edge attributes tensor([[ 1.0000,  1.1978,  1.0136,  ...,  0.0305, -0.9597, -0.5789],
        [ 1.0000, -0.2303,  1.7166,  ...,  2.1763, -0.0435, -0.0340],
        [ 1.0000,  1.4056, -0.7010,  ..., -0.5686,  0.6607, -0.9313],
        ...,
        [ 1.0000,  0.1983, -1.6248,  ...,  1.8336,  1.1878,  0.1816],
        [ 1.0000, -1.1508,  0.3040,  ..., -1.0147,  0.4938,  0.1670],
        [ 1.0000, -1.2508,  0.3933,  ..., -0.9451,  0.5746, -0.1832]])
Edge features shape: torch.Size([1762, 8])
Edge features tensor([[ 1.6851e-01, -6.3976e-02, -1.4423e-01,  ..., -1.5637e-01,
         -3.9783e-02,  1.7148e-01],
        [ 3.4388e-01,  4.3206e-01,  1.9896e-01,  ..., -3.5532e-01,
         -1.8705e-02,  3.3182e-01],
        [ 3.4489e-01,  4.3767e-01,  2.1050e-01,  ..., -3.7121e-01,
         -4.4150e-02,  3.1519e-01],
        ...,
        [ 2.1800e-01,  2.8286e-03, -2.1796e-01,  ...,  8.4840e-03,
         -2.1778e-01, -1.1310e-02],
        [ 5.0321e-05, -9.9852e-05,  1.4782e-04,  ..., -2.7498e-04,
          3.0958e-04, -3.3931e-04],
        [ 2.2427e-01,  1.4565e-02, -2.2332e-01,  ...,  4.3450e-02,
         -2.1861e-01, -5.7648e-02]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1762, 96])
Tensor Product Weights tensor([[-1.6102e-02,  9.2819e-02,  9.1578e-02,  ...,  3.0255e-02,
          2.7530e-02, -1.0128e-01],
        [ 7.0876e-02, -1.8096e-01, -9.3785e-02,  ..., -1.0288e-01,
         -3.5671e-02,  8.2417e-02],
        [ 7.7613e-02, -1.7808e-01, -1.0196e-01,  ..., -9.3332e-02,
         -2.5847e-02,  7.3206e-02],
        ...,
        [-5.8601e-02,  1.5269e-01,  1.1460e-01,  ...,  1.0001e-01,
          1.5248e-02, -1.0257e-01],
        [-1.0877e-04, -1.6675e-04, -5.1430e-05,  ...,  1.2644e-04,
          8.2760e-05,  2.5524e-05],
        [-6.0809e-02,  1.5657e-01,  1.0909e-01,  ...,  1.1164e-01,
          9.6503e-03, -9.4406e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1297, -0.1165,  0.2566,  ...,  0.1293,  0.0599,  0.2609],
        [ 0.1891, -0.0872,  0.3127,  ..., -0.1875,  0.1318,  0.1864],
        [ 0.1263, -0.1142,  0.2761,  ..., -0.0361,  0.0845,  0.2964],
        ...,
        [-0.1896,  0.0040, -0.1796,  ...,  0.0159,  0.1079,  0.0298],
        [ 0.0017, -0.1198,  0.1758,  ..., -0.1062,  0.2393,  0.1035],
        [-0.2188, -0.1188, -0.3036,  ...,  0.0444,  0.0594, -0.0066]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5744,  1.1206, -0.5502,  ...,  0.0274,  0.0121, -0.0052],
        [ 1.3907,  0.6610, -0.5880,  ...,  0.0560,  0.0553, -0.0175],
        [ 1.5977,  1.0851, -0.6251,  ...,  0.0087,  0.0918, -0.0564],
        ...,
        [ 0.1917, -0.1097, -0.1090,  ..., -0.0220,  0.1381,  0.0536],
        [ 0.9530,  0.6289, -0.3857,  ...,  0.0507,  0.0789, -0.0225],
        [ 0.3059, -0.0132, -0.2061,  ...,  0.0851,  0.0998, -0.0462]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1760])
shifts shape: torch.Size([1760, 3])
sender shape: torch.Size([1760])
receiver shape: torch.Size([1760])
Edge attributes shape: torch.Size([1760, 9])
Edge attributes tensor([[ 1.0000,  1.1966,  1.0095,  ...,  0.0214, -0.9657, -0.5699],
        [ 1.0000, -0.2363,  1.7154,  ...,  2.1718, -0.0900, -0.0350],
        [ 1.0000,  1.4127, -0.7037,  ..., -0.5644,  0.6482, -0.9596],
        ...,
        [ 1.0000,  0.1885, -1.6090,  ...,  1.7765,  1.2730,  0.2195],
        [ 1.0000, -1.1754,  0.2842,  ..., -1.0277,  0.4550,  0.1008],
        [ 1.0000, -1.2645,  0.3737,  ..., -0.9619,  0.5418, -0.2180]])
Edge features shape: torch.Size([1760, 8])
Edge features tensor([[ 1.6827e-01, -6.4199e-02, -1.4378e-01,  ..., -1.5658e-01,
         -3.8614e-02,  1.7131e-01],
        [ 3.4387e-01,  4.3200e-01,  1.9884e-01,  ..., -3.5515e-01,
         -1.8434e-02,  3.3199e-01],
        [ 3.4490e-01,  4.3769e-01,  2.1054e-01,  ..., -3.7127e-01,
         -4.4243e-02,  3.1513e-01],
        ...,
        [ 2.1798e-01,  2.8085e-03, -2.1795e-01,  ...,  8.4237e-03,
         -2.1777e-01, -1.1229e-02],
        [ 5.1302e-05, -1.0179e-04,  1.5067e-04,  ..., -2.8008e-04,
          3.1520e-04, -3.4533e-04],
        [ 2.2437e-01,  1.4760e-02, -2.2340e-01,  ...,  4.4024e-02,
         -2.1856e-01, -5.8403e-02]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1760, 96])
Tensor Product Weights tensor([[-1.5791e-02,  9.2426e-02,  9.1143e-02,  ...,  3.0124e-02,
          2.7548e-02, -1.0101e-01],
        [ 7.0807e-02, -1.8099e-01, -9.3698e-02,  ..., -1.0298e-01,
         -3.5774e-02,  8.2517e-02],
        [ 7.7638e-02, -1.7807e-01, -1.0199e-01,  ..., -9.3297e-02,
         -2.5811e-02,  7.3173e-02],
        ...,
        [-5.8597e-02,  1.5269e-01,  1.1461e-01,  ...,  9.9989e-02,
          1.5257e-02, -1.0259e-01],
        [-1.1094e-04, -1.6989e-04, -5.2310e-05,  ...,  1.2869e-04,
          8.4301e-05,  2.5958e-05],
        [-6.0845e-02,  1.5663e-01,  1.0899e-01,  ...,  1.1182e-01,
          9.5463e-03, -9.4258e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1278, -0.1166,  0.2539,  ...,  0.1299,  0.0611,  0.2628],
        [ 0.1884, -0.0819,  0.3345,  ..., -0.1800,  0.1380,  0.1777],
        [ 0.1281, -0.1123,  0.2767,  ..., -0.0313,  0.0835,  0.3013],
        ...,
        [-0.1897,  0.0043, -0.1798,  ...,  0.0129,  0.1060,  0.0344],
        [ 0.0016, -0.1198,  0.1756,  ..., -0.1104,  0.2228,  0.1179],
        [-0.2188, -0.1188, -0.3035,  ...,  0.0413,  0.0626, -0.0075]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5695,  1.1177, -0.5504,  ...,  0.0266,  0.0139, -0.0069],
        [ 1.4141,  0.6800, -0.5698,  ...,  0.0359,  0.0448, -0.0350],
        [ 1.5961,  1.0838, -0.6238,  ...,  0.0094,  0.0926, -0.0562],
        ...,
        [ 0.1918, -0.1102, -0.1095,  ..., -0.0216,  0.1369,  0.0577],
        [ 0.9530,  0.6288, -0.3857,  ...,  0.0520,  0.0788, -0.0192],
        [ 0.3059, -0.0132, -0.2060,  ...,  0.0870,  0.1001, -0.0417]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1858])
shifts shape: torch.Size([1858, 3])
sender shape: torch.Size([1858])
receiver shape: torch.Size([1858])
Edge attributes shape: torch.Size([1858, 9])
Edge attributes tensor([[ 1.0000,  1.1828,  1.0134,  ...,  0.0302, -0.9911, -0.5326],
        [ 1.0000, -0.1858,  1.7211,  ...,  2.1938,  0.1275, -0.0202],
        [ 1.0000,  1.3107, -0.7065,  ..., -0.5600,  0.8070, -0.6036],
        ...,
        [ 1.0000,  0.9993,  1.1605,  ...,  0.3877, -1.2121, -0.2222],
        [ 1.0000,  0.0945,  1.6996,  ...,  2.1117, -0.7019,  0.0603],
        [ 1.0000,  0.3237,  1.6392,  ...,  1.8860, -0.9658,  0.0668]])
Edge features shape: torch.Size([1858, 8])
Edge features tensor([[ 0.1686, -0.0639, -0.1443,  ..., -0.1563, -0.0400,  0.1715],
        [ 0.3439,  0.4320,  0.1988,  ..., -0.3551, -0.0183,  0.3321],
        [ 0.3449,  0.4374,  0.2100,  ..., -0.3706, -0.0431,  0.3159],
        ...,
        [ 0.2181,  0.0030, -0.2181,  ...,  0.0090, -0.2178, -0.0120],
        [ 0.0763, -0.0830,  0.0140,  ...,  0.0277,  0.0575, -0.0903],
        [ 0.0053, -0.0096,  0.0122,  ..., -0.0065,  0.0013,  0.0041]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1858, 96])
Tensor Product Weights tensor([[-0.0162,  0.0929,  0.0917,  ...,  0.0303,  0.0275, -0.1013],
        [ 0.0708, -0.1810, -0.0937,  ..., -0.1030, -0.0358,  0.0826],
        [ 0.0773, -0.1782, -0.1016,  ..., -0.0937, -0.0263,  0.0736],
        ...,
        [-0.0586,  0.1528,  0.1145,  ...,  0.1002,  0.0152, -0.1025],
        [-0.0059,  0.0005, -0.0448,  ...,  0.0517, -0.0025,  0.0306],
        [-0.0134, -0.0075,  0.0019,  ..., -0.0009,  0.0027, -0.0010]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1324, -0.1162,  0.2606,  ...,  0.1263,  0.0552,  0.2026],
        [ 0.1826, -0.0844,  0.3399,  ..., -0.1584,  0.1567,  0.1454],
        [ 0.1258, -0.1166,  0.2796,  ..., -0.0434,  0.0826,  0.2273],
        ...,
        [-0.1272, -0.0782, -0.2995,  ..., -0.0343,  0.0219, -0.1299],
        [ 0.1380, -0.1070,  0.1754,  ..., -0.4270, -0.0161, -0.0076],
        [-0.3117, -0.1253, -0.2602,  ..., -0.1656, -0.2779, -0.1198]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5788e+00,  1.1266e+00, -5.4977e-01,  ...,  3.0670e-02,
          7.7348e-03, -1.1356e-03],
        [ 1.4010e+00,  6.6488e-01, -5.6296e-01,  ...,  3.5714e-02,
          5.1681e-02, -3.6939e-02],
        [ 1.6055e+00,  1.0887e+00, -6.2922e-01,  ...,  6.6171e-03,
          8.9808e-02, -5.6839e-02],
        ...,
        [ 3.6011e-01,  2.0373e-02, -2.1130e-01,  ..., -7.7680e-02,
         -1.0558e-01,  6.8188e-02],
        [ 1.0080e+00,  6.3150e-01, -3.6770e-01,  ...,  9.5044e-04,
         -8.1203e-02,  6.5692e-03],
        [ 3.4166e-02, -1.2765e-01, -1.2806e-02,  ..., -8.1474e-02,
          1.0430e-01,  9.2399e-03]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1742])
shifts shape: torch.Size([1742, 3])
sender shape: torch.Size([1742])
receiver shape: torch.Size([1742])
Edge attributes shape: torch.Size([1742, 9])
Edge attributes tensor([[ 1.0000,  1.1937,  1.0077,  ...,  0.0173, -0.9731, -0.5586],
        [ 1.0000, -0.2325,  1.7159,  ...,  2.1739, -0.0868, -0.0339],
        [ 1.0000,  1.4039, -0.7071,  ..., -0.5590,  0.6640, -0.9306],
        ...,
        [ 1.0000,  0.9993,  1.2763,  ...,  0.7032, -1.0057, -0.4041],
        [ 1.0000,  0.3904,  1.6851,  ...,  2.0567, -0.1953, -0.0932],
        [ 1.0000, -0.3105,  1.6447,  ...,  1.9063,  0.9463,  0.0660]])
Edge features shape: torch.Size([1742, 8])
Edge features tensor([[ 1.6808e-01, -6.4375e-02, -1.4342e-01,  ..., -1.5674e-01,
         -3.7693e-02,  1.7117e-01],
        [ 3.4385e-01,  4.3187e-01,  1.9857e-01,  ..., -3.5477e-01,
         -1.7849e-02,  3.3236e-01],
        [ 3.4490e-01,  4.3771e-01,  2.1058e-01,  ..., -3.7132e-01,
         -4.4331e-02,  3.1507e-01],
        ...,
        [ 2.1784e-01,  2.5530e-03, -2.1781e-01,  ...,  7.6577e-03,
         -2.1766e-01, -1.0209e-02],
        [ 5.3380e-03, -9.6846e-03,  1.2232e-02,  ..., -6.4705e-03,
          1.2784e-03,  4.1512e-03],
        [ 1.1800e-08, -2.3596e-08,  3.5386e-08,  ..., -7.0689e-08,
          8.2425e-08, -9.4136e-08]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1742, 96])
Tensor Product Weights tensor([[-1.5545e-02,  9.2116e-02,  9.0798e-02,  ...,  3.0021e-02,
          2.7562e-02, -1.0079e-01],
        [ 7.0657e-02, -1.8105e-01, -9.3511e-02,  ..., -1.0320e-01,
         -3.5997e-02,  8.2733e-02],
        [ 7.7662e-02, -1.7806e-01, -1.0202e-01,  ..., -9.3263e-02,
         -2.5777e-02,  7.3142e-02],
        ...,
        [-5.8546e-02,  1.5259e-01,  1.1472e-01,  ...,  9.9723e-02,
          1.5364e-02, -1.0275e-01],
        [-1.3428e-02, -7.5620e-03,  1.9114e-03,  ..., -8.7752e-04,
          2.7131e-03, -9.8448e-04],
        [-2.4263e-08, -4.1846e-08, -1.5059e-08,  ...,  3.4755e-08,
          2.1149e-08,  7.5395e-09]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1231, -0.1148,  0.2516,  ...,  0.1285,  0.0609,  0.2532],
        [ 0.1730, -0.0696,  0.3506,  ..., -0.1618,  0.1222,  0.1443],
        [ 0.1287, -0.1127,  0.2779,  ..., -0.0308,  0.0830,  0.2944],
        ...,
        [-0.1497, -0.0778, -0.2967,  ..., -0.0417,  0.0411, -0.0728],
        [-0.0078, -0.1158,  0.1723,  ..., -0.3962, -0.2106, -0.0394],
        [-0.2195, -0.1169, -0.3049,  ...,  0.0121, -0.0089, -0.0311]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5687e+00,  1.1159e+00, -5.6571e-01,  ...,  2.8722e-02,
          1.3568e-02, -6.4914e-03],
        [ 1.4134e+00,  6.7900e-01, -6.1917e-01,  ...,  3.1964e-02,
          5.1150e-02, -1.5944e-02],
        [ 1.5977e+00,  1.0846e+00, -6.2440e-01,  ...,  9.0152e-03,
          9.2447e-02, -5.6384e-02],
        ...,
        [ 3.5133e-01,  1.7428e-02, -2.0658e-01,  ..., -8.0278e-02,
         -1.1264e-01,  5.2587e-02],
        [ 9.4761e-01,  6.2758e-01, -3.8881e-01,  ...,  4.5430e-04,
         -9.3422e-02, -1.2820e-02],
        [ 3.0784e-01, -1.2371e-02, -2.1025e-01,  ...,  2.5047e-02,
         -1.3091e-01, -3.6521e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1772])
shifts shape: torch.Size([1772, 3])
sender shape: torch.Size([1772])
receiver shape: torch.Size([1772])
Edge attributes shape: torch.Size([1772, 9])
Edge attributes tensor([[ 1.0000,  1.2010,  1.0114,  ...,  0.0257, -0.9548, -0.5858],
        [ 1.0000, -0.2265,  1.7171,  ...,  2.1783, -0.0406, -0.0329],
        [ 1.0000,  1.4054, -0.7032,  ..., -0.5651,  0.6612, -0.9325],
        ...,
        [ 1.0000,  1.3959,  1.0135,  ...,  0.0305, -0.2041, -1.2420],
        [ 1.0000,  0.6896,  1.4470,  ...,  1.2228,  1.2261, -0.0289],
        [ 1.0000,  0.8962,  1.4011,  ...,  1.0768,  0.8743, -0.3677]])
Edge features shape: torch.Size([1772, 8])
Edge features tensor([[ 0.1685, -0.0640, -0.1442,  ..., -0.1564, -0.0397,  0.1715],
        [ 0.3439,  0.4322,  0.1992,  ..., -0.3556, -0.0192,  0.3315],
        [ 0.3449,  0.4377,  0.2105,  ..., -0.3713, -0.0443,  0.3151],
        ...,
        [ 0.2176,  0.0020, -0.2175,  ...,  0.0061, -0.2174, -0.0081],
        [ 0.0763, -0.0830,  0.0140,  ...,  0.0277,  0.0575, -0.0903],
        [ 0.0053, -0.0096,  0.0122,  ..., -0.0065,  0.0014,  0.0040]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1772, 96])
Tensor Product Weights tensor([[-0.0161,  0.0928,  0.0915,  ...,  0.0302,  0.0275, -0.1012],
        [ 0.0710, -0.1809, -0.0939,  ..., -0.1027, -0.0355,  0.0822],
        [ 0.0776, -0.1781, -0.1020,  ..., -0.0933, -0.0258,  0.0732],
        ...,
        [-0.0584,  0.1524,  0.1150,  ...,  0.0992,  0.0156, -0.1031],
        [-0.0059,  0.0005, -0.0448,  ...,  0.0517, -0.0025,  0.0306],
        [-0.0133, -0.0075,  0.0019,  ..., -0.0008,  0.0027, -0.0010]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1300, -0.1164,  0.2567,  ...,  0.1296,  0.0590,  0.2627],
        [ 0.1893, -0.0873,  0.3172,  ..., -0.1854,  0.1305,  0.1889],
        [ 0.1257, -0.1141,  0.2761,  ..., -0.0369,  0.0843,  0.2984],
        ...,
        [-0.1404, -0.0834, -0.2866,  ..., -0.0672,  0.0576,  0.0115],
        [-0.0081, -0.1157,  0.1722,  ..., -0.2569, -0.3546, -0.1655],
        [-0.2091, -0.1242, -0.2936,  ..., -0.0273,  0.0312, -0.0508]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5752,  1.1209, -0.5501,  ...,  0.0276,  0.0118, -0.0049],
        [ 1.3939,  0.6653, -0.5902,  ...,  0.0553,  0.0563, -0.0168],
        [ 1.5979,  1.0854, -0.6256,  ...,  0.0089,  0.0917, -0.0564],
        ...,
        [ 0.3497,  0.0107, -0.1898,  ..., -0.1198, -0.0866,  0.0140],
        [ 0.9480,  0.6279, -0.3891,  ..., -0.0264, -0.0797, -0.0433],
        [ 0.3132, -0.0138, -0.1949,  ..., -0.0126, -0.1156, -0.0813]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1742])
shifts shape: torch.Size([1742, 3])
sender shape: torch.Size([1742])
receiver shape: torch.Size([1742])
Edge attributes shape: torch.Size([1742, 9])
Edge attributes tensor([[ 1.0000,  1.1919,  1.0083,  ...,  0.0187, -0.9764, -0.5539],
        [ 1.0000, -0.2325,  1.7160,  ...,  2.1741, -0.0823, -0.0340],
        [ 1.0000,  1.4010, -0.7069,  ..., -0.5594,  0.6691, -0.9200],
        ...,
        [ 1.0000, -0.1192, -1.3577,  ...,  0.9429,  1.8735,  0.7283],
        [ 1.0000, -1.4224, -0.9883,  ..., -0.0261, -0.0115, -1.3059],
        [ 1.0000, -1.3995,  0.4508,  ..., -0.8909,  0.5328, -0.7233]])
Edge features shape: torch.Size([1742, 8])
Edge features tensor([[ 1.6814e-01, -6.4318e-02, -1.4354e-01,  ..., -1.5669e-01,
         -3.7995e-02,  1.7122e-01],
        [ 3.4385e-01,  4.3187e-01,  1.9857e-01,  ..., -3.5478e-01,
         -1.7850e-02,  3.3236e-01],
        [ 3.4490e-01,  4.3772e-01,  2.1060e-01,  ..., -3.7135e-01,
         -4.4376e-02,  3.1503e-01],
        ...,
        [ 2.1807e-01,  2.9545e-03, -2.1803e-01,  ...,  8.8614e-03,
         -2.1783e-01, -1.1813e-02],
        [ 3.6687e-01,  5.7111e-01,  5.2217e-01,  ..., -4.6877e-01,
         -5.8390e-01, -4.4019e-01],
        [ 5.6235e-05, -1.1154e-04,  1.6499e-04,  ..., -3.0558e-04,
          3.4327e-04, -3.7525e-04]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1742, 96])
Tensor Product Weights tensor([[-1.5625e-02,  9.2218e-02,  9.0911e-02,  ...,  3.0055e-02,
          2.7558e-02, -1.0087e-01],
        [ 7.0657e-02, -1.8105e-01, -9.3512e-02,  ..., -1.0320e-01,
         -3.5996e-02,  8.2732e-02],
        [ 7.7675e-02, -1.7805e-01, -1.0203e-01,  ..., -9.3246e-02,
         -2.5759e-02,  7.3126e-02],
        ...,
        [-5.8626e-02,  1.5274e-01,  1.1454e-01,  ...,  1.0014e-01,
          1.5195e-02, -1.0250e-01],
        [ 5.0388e-01,  8.6198e-02, -2.8100e-01,  ...,  1.3735e-01,
          1.9551e-01, -7.3216e-02],
        [-1.2189e-04, -1.8559e-04, -5.6667e-05,  ...,  1.3991e-04,
          9.2007e-05,  2.8105e-05]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1231, -0.1148,  0.2519,  ...,  0.1282,  0.0614,  0.2506],
        [ 0.1715, -0.0684,  0.3254,  ..., -0.1694,  0.1293,  0.1433],
        [ 0.1289, -0.1131,  0.2780,  ..., -0.0316,  0.0834,  0.2914],
        ...,
        [-0.1923,  0.0037, -0.1837,  ...,  0.0233,  0.0742,  0.0847],
        [ 0.0016, -0.1199,  0.1752,  ...,  0.0016,  0.0734,  0.2769],
        [-0.2186, -0.1187, -0.3036,  ..., -0.0011,  0.0971, -0.0009]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5688e+00,  1.1160e+00, -5.6542e-01,  ...,  2.8817e-02,
          1.3368e-02, -6.3431e-03],
        [ 1.3838e+00,  6.4900e-01, -6.2277e-01,  ...,  5.2671e-02,
          5.8452e-02,  6.5081e-04],
        [ 1.5982e+00,  1.0849e+00, -6.2455e-01,  ...,  8.7656e-03,
          9.2326e-02, -5.6517e-02],
        ...,
        [ 1.9429e-01, -1.0756e-01, -1.1324e-01,  ...,  7.3856e-03,
          1.1623e-01,  9.2765e-02],
        [ 9.5243e-01,  6.2845e-01, -3.8532e-01,  ...,  7.2075e-02,
          6.3116e-02,  1.0363e-02],
        [ 3.0585e-01, -1.3186e-02, -2.0618e-01,  ...,  1.1452e-01,
          7.8747e-02, -1.5732e-03]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1758])
shifts shape: torch.Size([1758, 3])
sender shape: torch.Size([1758])
receiver shape: torch.Size([1758])
Edge attributes shape: torch.Size([1758, 9])
Edge attributes tensor([[ 1.0000,  1.2061,  1.0031,  ...,  0.0070, -0.9508, -0.5911],
        [ 1.0000, -0.2238,  1.7171,  ...,  2.1783, -0.0877, -0.0313],
        [ 1.0000,  1.4100, -0.7125,  ..., -0.5504,  0.6531, -0.9580],
        ...,
        [ 1.0000, -0.1069, -1.3656,  ...,  0.9670,  1.8688,  0.7180],
        [ 1.0000, -1.4102, -1.0055,  ...,  0.0123, -0.0276, -1.2833],
        [ 1.0000, -1.3906,  0.4286,  ..., -0.9126,  0.5198, -0.6787]])
Edge features shape: torch.Size([1758, 8])
Edge features tensor([[ 1.6793e-01, -6.4511e-02, -1.4315e-01,  ..., -1.5686e-01,
         -3.6981e-02,  1.7106e-01],
        [ 3.4385e-01,  4.3191e-01,  1.9865e-01,  ..., -3.5489e-01,
         -1.8024e-02,  3.3225e-01],
        [ 3.4492e-01,  4.3780e-01,  2.1077e-01,  ..., -3.7157e-01,
         -4.4737e-02,  3.1479e-01],
        ...,
        [ 2.1807e-01,  2.9577e-03, -2.1803e-01,  ...,  8.8712e-03,
         -2.1783e-01, -1.1826e-02],
        [ 3.6687e-01,  5.7113e-01,  5.2222e-01,  ..., -4.6872e-01,
         -5.8394e-01, -4.4032e-01],
        [ 5.3948e-05, -1.0702e-04,  1.5835e-04,  ..., -2.9378e-04,
          3.3029e-04, -3.6143e-04]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1758, 96])
Tensor Product Weights tensor([[-1.5355e-02,  9.1876e-02,  9.0531e-02,  ...,  2.9944e-02,
          2.7573e-02, -1.0063e-01],
        [ 7.0702e-02, -1.8103e-01, -9.3567e-02,  ..., -1.0313e-01,
         -3.5930e-02,  8.2668e-02],
        [ 7.7774e-02, -1.7801e-01, -1.0215e-01,  ..., -9.3107e-02,
         -2.5618e-02,  7.2997e-02],
        ...,
        [-5.8627e-02,  1.5274e-01,  1.1454e-01,  ...,  1.0014e-01,
          1.5194e-02, -1.0249e-01],
        [ 5.0398e-01,  8.6256e-02, -2.8099e-01,  ...,  1.3736e-01,
          1.9552e-01, -7.3228e-02],
        [-1.1681e-04, -1.7832e-04, -5.4658e-05,  ...,  1.3473e-04,
          8.8441e-05,  2.7116e-05]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1232, -0.1148,  0.2512,  ...,  0.1286,  0.0581,  0.2632],
        [ 0.1706, -0.0716,  0.3274,  ..., -0.1656,  0.1299,  0.1568],
        [ 0.1286, -0.1129,  0.2787,  ..., -0.0309,  0.0801,  0.3073],
        ...,
        [-0.1925,  0.0042, -0.1837,  ...,  0.0213,  0.0758,  0.0843],
        [ 0.0015, -0.1198,  0.1754,  ..., -0.0061,  0.0760,  0.2719],
        [-0.2187, -0.1188, -0.3036,  ...,  0.0005,  0.0964, -0.0005]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5684,  1.1156, -0.5656,  ...,  0.0293,  0.0133, -0.0060],
        [ 1.3855,  0.6512, -0.6244,  ...,  0.0554,  0.0583,  0.0026],
        [ 1.5988,  1.0855, -0.6255,  ...,  0.0095,  0.0924, -0.0560],
        ...,
        [ 0.1943, -0.1082, -0.1138,  ...,  0.0056,  0.1171,  0.0926],
        [ 0.9526,  0.6286, -0.3855,  ...,  0.0712,  0.0641,  0.0097],
        [ 0.3058, -0.0132, -0.2061,  ...,  0.1135,  0.0803, -0.0025]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1746])
shifts shape: torch.Size([1746, 3])
sender shape: torch.Size([1746])
receiver shape: torch.Size([1746])
Edge attributes shape: torch.Size([1746, 9])
Edge attributes tensor([[ 1.0000,  1.1920,  1.0088,  ...,  0.0198, -0.9758, -0.5548],
        [ 1.0000, -0.2315,  1.7162,  ...,  2.1749, -0.0746, -0.0339],
        [ 1.0000,  1.3993, -0.7063,  ..., -0.5603,  0.6719, -0.9135],
        ...,
        [ 1.0000,  1.1366,  1.2295,  ...,  0.5720, -0.7037, -0.7070],
        [ 1.0000,  0.5759,  1.6278,  ...,  1.8445,  0.2864, -0.2021],
        [ 1.0000, -0.1241,  1.5929,  ...,  1.7186,  1.3754,  0.2788]])
Edge features shape: torch.Size([1746, 8])
Edge features tensor([[ 1.6808e-01, -6.4376e-02, -1.4342e-01,  ..., -1.5674e-01,
         -3.7687e-02,  1.7117e-01],
        [ 3.4386e-01,  4.3192e-01,  1.9868e-01,  ..., -3.5493e-01,
         -1.8093e-02,  3.3220e-01],
        [ 3.4491e-01,  4.3774e-01,  2.1065e-01,  ..., -3.7142e-01,
         -4.4483e-02,  3.1496e-01],
        ...,
        [ 2.1790e-01,  2.6603e-03, -2.1787e-01,  ...,  7.9794e-03,
         -2.1771e-01, -1.0637e-02],
        [ 5.3750e-03, -9.7478e-03,  1.2303e-02,  ..., -6.4475e-03,
          1.2095e-03,  4.2540e-03],
        [ 2.0608e-08, -4.1210e-08,  6.1800e-08,  ..., -1.2344e-07,
          1.4392e-07, -1.6437e-07]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1746, 96])
Tensor Product Weights tensor([[-1.5543e-02,  9.2114e-02,  9.0796e-02,  ...,  3.0021e-02,
          2.7562e-02, -1.0079e-01],
        [ 7.0719e-02, -1.8102e-01, -9.3589e-02,  ..., -1.0311e-01,
         -3.5904e-02,  8.2642e-02],
        [ 7.7704e-02, -1.7804e-01, -1.0207e-01,  ..., -9.3205e-02,
         -2.5717e-02,  7.3088e-02],
        ...,
        [-5.8567e-02,  1.5263e-01,  1.1467e-01,  ...,  9.9835e-02,
          1.5319e-02, -1.0268e-01],
        [-1.3516e-02, -7.5839e-03,  1.9333e-03,  ..., -9.0998e-04,
          2.7145e-03, -9.9495e-04],
        [-4.2379e-08, -7.3077e-08, -2.6291e-08,  ...,  6.0684e-08,
          3.6931e-08,  1.3163e-08]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1233, -0.1147,  0.2519,  ...,  0.1282,  0.0610,  0.2499],
        [ 0.1723, -0.0687,  0.3266,  ..., -0.1688,  0.1255,  0.1424],
        [ 0.1286, -0.1132,  0.2776,  ..., -0.0319,  0.0831,  0.2901],
        ...,
        [-0.1520, -0.0698, -0.2958,  ..., -0.0502,  0.0466, -0.0351],
        [-0.0079, -0.1159,  0.1726,  ..., -0.3612, -0.2876, -0.0864],
        [-0.2194, -0.1169, -0.3047,  ...,  0.0055,  0.0086, -0.0350]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5692e+00,  1.1163e+00, -5.6553e-01,  ...,  2.9011e-02,
          1.3171e-02, -6.1494e-03],
        [ 1.3823e+00,  6.5165e-01, -6.2318e-01,  ...,  5.2159e-02,
          5.8031e-02,  4.3443e-04],
        [ 1.5981e+00,  1.0847e+00, -6.2442e-01,  ...,  8.6997e-03,
          9.2461e-02, -5.6490e-02],
        ...,
        [ 3.5750e-01,  1.4002e-02, -2.0081e-01,  ..., -9.4209e-02,
         -1.0745e-01,  3.7353e-02],
        [ 9.4848e-01,  6.2836e-01, -3.8930e-01,  ..., -9.6203e-03,
         -9.0556e-02, -2.5339e-02],
        [ 3.0782e-01, -1.2322e-02, -2.0992e-01,  ...,  1.0119e-02,
         -1.2696e-01, -5.4009e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1748])
shifts shape: torch.Size([1748, 3])
sender shape: torch.Size([1748])
receiver shape: torch.Size([1748])
Edge attributes shape: torch.Size([1748, 9])
Edge attributes tensor([[ 1.0000e+00,  1.1965e+00,  1.0104e+00,  ...,  2.3445e-02,
         -9.6522e-01, -5.7063e-01],
        [ 1.0000e+00, -2.3363e-01,  1.7158e+00,  ...,  2.1734e+00,
         -8.4565e-02, -3.4292e-02],
        [ 1.0000e+00,  1.4117e+00, -7.0463e-01,  ..., -5.6292e-01,
          6.4996e-01, -9.5694e-01],
        ...,
        [ 1.0000e+00,  1.0420e+00,  1.2702e+00,  ...,  6.8567e-01,
         -8.9969e-01, -5.0648e-01],
        [ 1.0000e+00,  4.5370e-01,  1.6716e+00,  ...,  2.0059e+00,
          1.1534e-03, -1.3287e-01],
        [ 1.0000e+00, -2.4248e-01,  1.6277e+00,  ...,  1.8442e+00,
          1.1349e+00,  1.5032e-01]])
Edge features shape: torch.Size([1748, 8])
Edge features tensor([[ 1.6805e-01, -6.4398e-02, -1.4337e-01,  ..., -1.5676e-01,
         -3.7571e-02,  1.7115e-01],
        [ 3.4381e-01,  4.3167e-01,  1.9816e-01,  ..., -3.5420e-01,
         -1.6948e-02,  3.3292e-01],
        [ 3.4488e-01,  4.3761e-01,  2.1038e-01,  ..., -3.7105e-01,
         -4.3885e-02,  3.1537e-01],
        ...,
        [ 2.1794e-01,  2.7255e-03, -2.1790e-01,  ...,  8.1748e-03,
         -2.1773e-01, -1.0898e-02],
        [ 5.3542e-03, -9.7122e-03,  1.2263e-02,  ..., -6.4604e-03,
          1.2482e-03,  4.1962e-03],
        [ 1.9794e-08, -3.9583e-08,  5.9362e-08,  ..., -1.1858e-07,
          1.3826e-07, -1.5791e-07]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1748, 96])
Tensor Product Weights tensor([[-1.5512e-02,  9.2075e-02,  9.0753e-02,  ...,  3.0008e-02,
          2.7564e-02, -1.0077e-01],
        [ 7.0427e-02, -1.8113e-01, -9.3224e-02,  ..., -1.0353e-01,
         -3.6340e-02,  8.3065e-02],
        [ 7.7540e-02, -1.7812e-01, -1.0187e-01,  ..., -9.3434e-02,
         -2.5951e-02,  7.3300e-02],
        ...,
        [-5.8580e-02,  1.5266e-01,  1.1465e-01,  ...,  9.9902e-02,
          1.5292e-02, -1.0264e-01],
        [-1.3467e-02, -7.5715e-03,  1.9210e-03,  ..., -8.9173e-04,
          2.7137e-03, -9.8907e-04],
        [-4.0702e-08, -7.0197e-08, -2.5260e-08,  ...,  5.8300e-08,
          3.5477e-08,  1.2646e-08]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1221, -0.1148,  0.2517,  ...,  0.1272,  0.0615,  0.2579],
        [ 0.1685, -0.0674,  0.3236,  ..., -0.1778,  0.1506,  0.1564],
        [ 0.1299, -0.1130,  0.2793,  ..., -0.0307,  0.0811,  0.3029],
        ...,
        [-0.1525, -0.0736, -0.2956,  ..., -0.0461,  0.0441, -0.0561],
        [-0.0079, -0.1157,  0.1724,  ..., -0.3837, -0.2456, -0.0567],
        [-0.2192, -0.1170, -0.3047,  ...,  0.0110, -0.0030, -0.0308]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5671e+00,  1.1153e+00, -5.6458e-01,  ...,  2.8528e-02,
          1.4082e-02, -6.5654e-03],
        [ 1.4012e+00,  6.4047e-01, -6.2479e-01,  ...,  5.4532e-02,
          6.0257e-02, -2.1446e-04],
        [ 1.5993e+00,  1.0858e+00, -6.2514e-01,  ...,  8.7604e-03,
          9.2306e-02, -5.5913e-02],
        ...,
        [ 3.5504e-01,  1.3846e-02, -2.0472e-01,  ..., -8.3274e-02,
         -1.0995e-01,  4.3678e-02],
        [ 9.4804e-01,  6.2787e-01, -3.8909e-01,  ..., -3.0792e-03,
         -9.2627e-02, -1.8041e-02],
        [ 3.0760e-01, -1.2374e-02, -2.0962e-01,  ...,  1.9451e-02,
         -1.2954e-01, -4.3830e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1764])
shifts shape: torch.Size([1764, 3])
sender shape: torch.Size([1764])
receiver shape: torch.Size([1764])
Edge attributes shape: torch.Size([1764, 9])
Edge attributes tensor([[ 1.0000,  1.2054,  1.0043,  ...,  0.0097, -0.9513, -0.5904],
        [ 1.0000, -0.2238,  1.7171,  ...,  2.1786, -0.0807, -0.0315],
        [ 1.0000,  1.4092, -0.7111,  ..., -0.5526,  0.6546, -0.9537],
        ...,
        [ 1.0000, -1.1416, -1.2356,  ...,  0.5888, -0.6579, -0.7314],
        [ 1.0000, -1.2162,  0.2790,  ..., -1.0310,  0.4327, -0.0233],
        [ 1.0000, -1.2695,  0.3591,  ..., -0.9738,  0.5203, -0.2275]])
Edge features shape: torch.Size([1764, 8])
Edge features tensor([[ 1.6790e-01, -6.4540e-02, -1.4309e-01,  ..., -1.5688e-01,
         -3.6828e-02,  1.7104e-01],
        [ 3.4386e-01,  4.3192e-01,  1.9868e-01,  ..., -3.5493e-01,
         -1.8097e-02,  3.3220e-01],
        [ 3.4492e-01,  4.3779e-01,  2.1076e-01,  ..., -3.7156e-01,
         -4.4710e-02,  3.1481e-01],
        ...,
        [ 3.6687e-01,  5.7112e-01,  5.2221e-01,  ..., -4.6873e-01,
         -5.8393e-01, -4.4029e-01],
        [ 5.4276e-05, -1.0767e-04,  1.5930e-04,  ..., -2.9548e-04,
          3.3216e-04, -3.6342e-04],
        [ 2.2482e-01,  1.5644e-02, -2.2373e-01,  ...,  4.6628e-02,
         -2.1832e-01, -6.1819e-02]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1764, 96])
Tensor Product Weights tensor([[-1.5314e-02,  9.1824e-02,  9.0473e-02,  ...,  2.9927e-02,
          2.7575e-02, -1.0059e-01],
        [ 7.0721e-02, -1.8102e-01, -9.3591e-02,  ..., -1.0311e-01,
         -3.5902e-02,  8.2641e-02],
        [ 7.7766e-02, -1.7801e-01, -1.0214e-01,  ..., -9.3117e-02,
         -2.5628e-02,  7.3007e-02],
        ...,
        [ 5.0396e-01,  8.6244e-02, -2.8099e-01,  ...,  1.3736e-01,
          1.9552e-01, -7.3226e-02],
        [-1.1754e-04, -1.7936e-04, -5.4948e-05,  ...,  1.3548e-04,
          8.8953e-05,  2.7258e-05],
        [-6.1009e-02,  1.5687e-01,  1.0856e-01,  ...,  1.1265e-01,
          9.0698e-03, -9.3580e-02]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1232, -0.1148,  0.2514,  ...,  0.1285,  0.0582,  0.2625],
        [ 0.1713, -0.0716,  0.3282,  ..., -0.1659,  0.1276,  0.1558],
        [ 0.1285, -0.1130,  0.2783,  ..., -0.0311,  0.0799,  0.3060],
        ...,
        [-0.1908,  0.0054, -0.1812,  ...,  0.0103,  0.1027,  0.0466],
        [ 0.0014, -0.1197,  0.1756,  ..., -0.1027,  0.1899,  0.1521],
        [-0.2186, -0.1189, -0.3033,  ...,  0.0351,  0.0709, -0.0061]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5688,  1.1158, -0.5656,  ...,  0.0294,  0.0132, -0.0059],
        [ 1.3848,  0.6525, -0.6248,  ...,  0.0549,  0.0580,  0.0024],
        [ 1.5987,  1.0853, -0.6254,  ...,  0.0093,  0.0925, -0.0560],
        ...,
        [ 0.1921, -0.1114, -0.1116,  ..., -0.0175,  0.1345,  0.0668],
        [ 0.9533,  0.6290, -0.3858,  ...,  0.0559,  0.0775, -0.0131],
        [ 0.3056, -0.0132, -0.2053,  ...,  0.0924,  0.0986, -0.0336]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1748])
shifts shape: torch.Size([1748, 3])
sender shape: torch.Size([1748])
receiver shape: torch.Size([1748])
Edge attributes shape: torch.Size([1748, 9])
Edge attributes tensor([[ 1.0000,  1.1989,  1.0079,  ...,  0.0178, -0.9620, -0.5751],
        [ 1.0000, -0.2317,  1.7160,  ...,  2.1742, -0.0906, -0.0336],
        [ 1.0000,  1.4122, -0.7071,  ..., -0.5590,  0.6491, -0.9610],
        ...,
        [ 1.0000,  1.3947,  1.0258,  ...,  0.0585, -0.0675, -1.2539],
        [ 1.0000,  0.6357,  1.4393,  ...,  1.1981,  1.3454,  0.0776],
        [ 1.0000,  0.8535,  1.3979,  ...,  1.0667,  1.0168, -0.2653]])
Edge features shape: torch.Size([1748, 8])
Edge features tensor([[ 0.1680, -0.0644, -0.1433,  ..., -0.1568, -0.0375,  0.1711],
        [ 0.3438,  0.4317,  0.1983,  ..., -0.3544, -0.0172,  0.3327],
        [ 0.3449,  0.4376,  0.2104,  ..., -0.3711, -0.0440,  0.3153],
        ...,
        [ 0.2179,  0.0027, -0.2179,  ...,  0.0081, -0.2177, -0.0107],
        [ 0.0765, -0.0831,  0.0138,  ...,  0.0272,  0.0582, -0.0905],
        [ 0.0054, -0.0097,  0.0123,  ..., -0.0065,  0.0012,  0.0042]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1748, 96])
Tensor Product Weights tensor([[-0.0155,  0.0920,  0.0907,  ...,  0.0300,  0.0276, -0.1007],
        [ 0.0705, -0.1811, -0.0933,  ..., -0.1034, -0.0362,  0.0830],
        [ 0.0776, -0.1781, -0.1019,  ..., -0.0934, -0.0259,  0.0732],
        ...,
        [-0.0586,  0.1526,  0.1147,  ...,  0.0999,  0.0153, -0.1027],
        [-0.0057,  0.0005, -0.0448,  ...,  0.0519, -0.0024,  0.0305],
        [-0.0135, -0.0076,  0.0019,  ..., -0.0009,  0.0027, -0.0010]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1222, -0.1148,  0.2515,  ...,  0.1277,  0.0607,  0.2596],
        [ 0.1688, -0.0681,  0.3246,  ..., -0.1747,  0.1464,  0.1567],
        [ 0.1296, -0.1129,  0.2791,  ..., -0.0304,  0.0810,  0.3048],
        ...,
        [-0.1522, -0.0742, -0.2874,  ..., -0.0675,  0.0544, -0.0119],
        [-0.0079, -0.1160,  0.1724,  ..., -0.2458, -0.3608, -0.1844],
        [-0.2193, -0.1169, -0.3047,  ..., -0.0237,  0.0405, -0.0587]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5672e+00,  1.1152e+00, -5.6479e-01,  ...,  2.8607e-02,
          1.4013e-02, -6.5615e-03],
        [ 1.3987e+00,  6.4299e-01, -6.2489e-01,  ...,  5.4438e-02,
          5.9858e-02,  4.3218e-04],
        [ 1.5990e+00,  1.0856e+00, -6.2508e-01,  ...,  9.1105e-03,
          9.2354e-02, -5.6026e-02],
        ...,
        [ 3.4348e-01,  4.1507e-03, -1.9653e-01,  ..., -1.1713e-01,
         -8.7722e-02,  3.3479e-03],
        [ 9.4800e-01,  6.2799e-01, -3.8905e-01,  ..., -2.3210e-02,
         -7.9036e-02, -4.6223e-02],
        [ 3.0768e-01, -1.2347e-02, -2.0975e-01,  ..., -7.0746e-03,
         -1.1157e-01, -8.1215e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1766])
shifts shape: torch.Size([1766, 3])
sender shape: torch.Size([1766])
receiver shape: torch.Size([1766])
Edge attributes shape: torch.Size([1766, 9])
Edge attributes tensor([[ 1.0000,  1.2018,  1.0081,  ...,  0.0181, -0.9559, -0.5841],
        [ 1.0000, -0.1942,  1.7210,  ...,  2.1932,  0.0546, -0.0239],
        [ 1.0000,  1.3558, -0.7131,  ..., -0.5495,  0.7440, -0.7649],
        ...,
        [ 1.0000,  0.1241,  1.7262,  ...,  2.2133, -0.1571, -0.0067],
        [ 1.0000,  0.3400,  1.6823,  ...,  2.0462, -0.5054, -0.0397],
        [ 1.0000, -0.3716,  1.6665,  ...,  1.9872,  0.6255, -0.0346]])
Edge features shape: torch.Size([1766, 8])
Edge features tensor([[ 1.6802e-01, -6.4429e-02, -1.4331e-01,  ..., -1.5678e-01,
         -3.7410e-02,  1.7113e-01],
        [ 3.4384e-01,  4.3183e-01,  1.9850e-01,  ..., -3.5468e-01,
         -1.7694e-02,  3.3245e-01],
        [ 3.4489e-01,  4.3764e-01,  2.1045e-01,  ..., -3.7114e-01,
         -4.4023e-02,  3.1528e-01],
        ...,
        [ 7.6432e-02, -8.3067e-02,  1.3846e-02,  ...,  2.7371e-02,
          5.8023e-02, -9.0431e-02],
        [ 5.3383e-03, -9.6850e-03,  1.2233e-02,  ..., -6.4702e-03,
          1.2777e-03,  4.1521e-03],
        [ 1.1428e-08, -2.2854e-08,  3.4274e-08,  ..., -6.8472e-08,
          7.9843e-08, -9.1191e-08]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1766, 96])
Tensor Product Weights tensor([[-1.5469e-02,  9.2021e-02,  9.0692e-02,  ...,  2.9990e-02,
          2.7567e-02, -1.0073e-01],
        [ 7.0617e-02, -1.8106e-01, -9.3462e-02,  ..., -1.0325e-01,
         -3.6056e-02,  8.2790e-02],
        [ 7.7578e-02, -1.7810e-01, -1.0192e-01,  ..., -9.3381e-02,
         -2.5897e-02,  7.3251e-02],
        ...,
        [-5.7578e-03,  5.3772e-04, -4.4812e-02,  ...,  5.1824e-02,
         -2.4021e-03,  3.0546e-02],
        [-1.3429e-02, -7.5621e-03,  1.9115e-03,  ..., -8.7781e-04,
          2.7130e-03, -9.8457e-04],
        [-2.3498e-08, -4.0533e-08, -1.4588e-08,  ...,  3.3667e-08,
          2.0485e-08,  7.3041e-09]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1255, -0.1163,  0.2572,  ...,  0.1254,  0.0548,  0.2337],
        [ 0.1759, -0.0768,  0.3158,  ..., -0.1593,  0.1924,  0.1698],
        [ 0.1275, -0.1157,  0.2816,  ..., -0.0395,  0.0793,  0.2690],
        ...,
        [-0.1497, -0.0775, -0.2933,  ..., -0.0357,  0.0390, -0.0920],
        [-0.0080, -0.1141,  0.1716,  ..., -0.4143, -0.1483, -0.0204],
        [-0.1780, -0.1130, -0.2873,  ...,  0.0075, -0.0202, -0.0336]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5732e+00,  1.1221e+00, -5.5593e-01,  ...,  2.8890e-02,
          1.0473e-02, -1.4043e-03],
        [ 1.3890e+00,  6.2678e-01, -5.6977e-01,  ...,  5.8855e-02,
          5.4815e-02, -2.5958e-02],
        [ 1.6065e+00,  1.0900e+00, -6.3049e-01,  ...,  7.2148e-03,
          9.0624e-02, -5.6134e-02],
        ...,
        [ 3.5662e-01,  1.3265e-02, -2.0894e-01,  ..., -7.5962e-02,
         -1.1016e-01,  5.7488e-02],
        [ 9.4595e-01,  6.2589e-01, -3.8973e-01,  ...,  3.8205e-03,
         -9.5654e-02, -4.4073e-03],
        [ 3.1292e-01, -6.8026e-03, -1.8687e-01,  ...,  3.7562e-02,
         -1.6972e-01, -2.0644e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1760])
shifts shape: torch.Size([1760, 3])
sender shape: torch.Size([1760])
receiver shape: torch.Size([1760])
Edge attributes shape: torch.Size([1760, 9])
Edge attributes tensor([[ 1.0000,  1.1968,  1.0077,  ...,  0.0172, -0.9668, -0.5680],
        [ 1.0000, -0.2345,  1.7155,  ...,  2.1724, -0.0984, -0.0342],
        [ 1.0000,  1.4110, -0.7071,  ..., -0.5591,  0.6513, -0.9565],
        ...,
        [ 1.0000,  1.0131,  1.2797,  ...,  0.7128, -0.9576, -0.4457],
        [ 1.0000,  0.4092,  1.6823,  ...,  2.0462, -0.1060, -0.1065],
        [ 1.0000, -0.2918,  1.6368,  ...,  1.8775,  1.0257,  0.0971]])
Edge features shape: torch.Size([1760, 8])
Edge features tensor([[ 1.6819e-01, -6.4272e-02, -1.4363e-01,  ..., -1.5664e-01,
         -3.8235e-02,  1.7125e-01],
        [ 3.4384e-01,  4.3183e-01,  1.9850e-01,  ..., -3.5468e-01,
         -1.7696e-02,  3.3245e-01],
        [ 3.4490e-01,  4.3768e-01,  2.1052e-01,  ..., -3.7124e-01,
         -4.4195e-02,  3.1516e-01],
        ...,
        [ 2.1787e-01,  2.6032e-03, -2.1784e-01,  ...,  7.8082e-03,
         -2.1768e-01, -1.0409e-02],
        [ 5.3530e-03, -9.7102e-03,  1.2261e-02,  ..., -6.4610e-03,
          1.2503e-03,  4.1931e-03],
        [ 1.1980e-08, -2.3956e-08,  3.5926e-08,  ..., -7.1765e-08,
          8.3678e-08, -9.5566e-08]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1760, 96])
Tensor Product Weights tensor([[-1.5690e-02,  9.2299e-02,  9.1001e-02,  ...,  3.0081e-02,
          2.7554e-02, -1.0092e-01],
        [ 7.0618e-02, -1.8106e-01, -9.3463e-02,  ..., -1.0325e-01,
         -3.6055e-02,  8.2789e-02],
        [ 7.7625e-02, -1.7808e-01, -1.0197e-01,  ..., -9.3316e-02,
         -2.5830e-02,  7.3190e-02],
        ...,
        [-5.8556e-02,  1.5261e-01,  1.1470e-01,  ...,  9.9776e-02,
          1.5343e-02, -1.0272e-01],
        [-1.3464e-02, -7.5708e-03,  1.9203e-03,  ..., -8.9075e-04,
          2.7136e-03, -9.8875e-04],
        [-2.4634e-08, -4.2484e-08, -1.5287e-08,  ...,  3.5283e-08,
          2.1471e-08,  7.6537e-09]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1231, -0.1137,  0.2516,  ...,  0.1285,  0.0610,  0.2587],
        [ 0.1723, -0.1042,  0.2662,  ..., -0.1986,  0.1222,  0.1183],
        [ 0.1289, -0.1115,  0.2780,  ..., -0.0307,  0.0826,  0.3013],
        ...,
        [-0.1496, -0.0759, -0.2969,  ..., -0.0413,  0.0421, -0.0700],
        [-0.0077, -0.1159,  0.1724,  ..., -0.3903, -0.2256, -0.0462],
        [-0.2197, -0.1169, -0.3049,  ...,  0.0124, -0.0070, -0.0317]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5675e+00,  1.1150e+00, -5.6659e-01,  ...,  2.9059e-02,
          1.4010e-02, -6.7353e-03],
        [ 1.3379e+00,  6.2046e-01, -5.7740e-01,  ...,  4.6302e-02,
          5.7074e-02, -6.0257e-03],
        [ 1.5965e+00,  1.0841e+00, -6.2496e-01,  ...,  9.8938e-03,
          9.2379e-02, -5.6219e-02],
        ...,
        [ 3.5535e-01,  1.6871e-02, -2.0708e-01,  ..., -8.1921e-02,
         -1.1382e-01,  5.0215e-02],
        [ 9.4767e-01,  6.2771e-01, -3.8893e-01,  ..., -6.0665e-04,
         -9.3090e-02, -1.5044e-02],
        [ 3.0805e-01, -1.2371e-02, -2.1067e-01,  ...,  2.3316e-02,
         -1.3039e-01, -3.9523e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1756])
shifts shape: torch.Size([1756, 3])
sender shape: torch.Size([1756])
receiver shape: torch.Size([1756])
Edge attributes shape: torch.Size([1756, 9])
Edge attributes tensor([[ 1.0000,  1.1992,  1.0064,  ...,  0.0143, -0.9629, -0.5737],
        [ 1.0000, -0.2337,  1.7156,  ...,  2.1726, -0.1041, -0.0338],
        [ 1.0000,  1.4130, -0.7086,  ..., -0.5567,  0.6478, -0.9651],
        ...,
        [ 1.0000,  1.4056,  1.0119,  ...,  0.0268, -0.0222, -1.2752],
        [ 1.0000,  0.6487,  1.4108,  ...,  1.1072,  1.3976,  0.1084],
        [ 1.0000,  0.8665,  1.3716,  ...,  0.9853,  1.0740, -0.2472]])
Edge features shape: torch.Size([1756, 8])
Edge features tensor([[ 0.1682, -0.0642, -0.1437,  ..., -0.1566, -0.0384,  0.1713],
        [ 0.3438,  0.4319,  0.1985,  ..., -0.3547, -0.0178,  0.3324],
        [ 0.3449,  0.4377,  0.2106,  ..., -0.3713, -0.0443,  0.3151],
        ...,
        [ 0.2178,  0.0025, -0.2178,  ...,  0.0075, -0.2176, -0.0100],
        [ 0.0765, -0.0831,  0.0138,  ...,  0.0273,  0.0582, -0.0905],
        [ 0.0053, -0.0097,  0.0122,  ..., -0.0065,  0.0013,  0.0042]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1756, 96])
Tensor Product Weights tensor([[-0.0157,  0.0924,  0.0911,  ...,  0.0301,  0.0276, -0.1010],
        [ 0.0706, -0.1811, -0.0935,  ..., -0.1032, -0.0360,  0.0828],
        [ 0.0777, -0.1781, -0.1020,  ..., -0.0933, -0.0258,  0.0732],
        ...,
        [-0.0585,  0.1526,  0.1147,  ...,  0.0997,  0.0154, -0.1028],
        [-0.0057,  0.0005, -0.0448,  ...,  0.0519, -0.0024,  0.0305],
        [-0.0134, -0.0076,  0.0019,  ..., -0.0009,  0.0027, -0.0010]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1231, -0.1139,  0.2515,  ...,  0.1287,  0.0606,  0.2612],
        [ 0.1722, -0.1032,  0.2675,  ..., -0.1974,  0.1233,  0.1195],
        [ 0.1290, -0.1116,  0.2780,  ..., -0.0302,  0.0820,  0.3044],
        ...,
        [-0.1516, -0.0757, -0.2864,  ..., -0.0683,  0.0565, -0.0096],
        [-0.0077, -0.1161,  0.1724,  ..., -0.2286, -0.3663, -0.1955],
        [-0.2195, -0.1169, -0.3049,  ..., -0.0268,  0.0421, -0.0586]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5676e+00,  1.1150e+00, -5.6643e-01,  ...,  2.8765e-02,
          1.4032e-02, -6.8182e-03],
        [ 1.3380e+00,  6.2012e-01, -5.7741e-01,  ...,  4.6462e-02,
          5.7165e-02, -5.7820e-03],
        [ 1.5965e+00,  1.0841e+00, -6.2457e-01,  ...,  9.8934e-03,
          9.2412e-02, -5.6243e-02],
        ...,
        [ 3.4293e-01,  2.1608e-03, -1.9829e-01,  ..., -1.1829e-01,
         -8.7906e-02,  8.5648e-04],
        [ 9.4775e-01,  6.2782e-01, -3.8899e-01,  ..., -2.3892e-02,
         -7.7371e-02, -4.8426e-02],
        [ 3.0797e-01, -1.2351e-02, -2.1043e-01,  ..., -7.8804e-03,
         -1.0913e-01, -8.4402e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1744])
shifts shape: torch.Size([1744, 3])
sender shape: torch.Size([1744])
receiver shape: torch.Size([1744])
Edge attributes shape: torch.Size([1744, 9])
Edge attributes tensor([[ 1.0000,  1.1908,  1.0108,  ...,  0.0242, -0.9767, -0.5538],
        [ 1.0000, -0.2321,  1.7161,  ...,  2.1748, -0.0693, -0.0341],
        [ 1.0000,  1.4002, -0.7050,  ..., -0.5623,  0.6703, -0.9155],
        ...,
        [ 1.0000,  0.9993,  1.2718,  ...,  0.6903, -1.0172, -0.3969],
        [ 1.0000,  0.3944,  1.6838,  ...,  2.0517, -0.2108, -0.0943],
        [ 1.0000, -0.3036,  1.6469,  ...,  1.9142,  0.9405,  0.0668]])
Edge features shape: torch.Size([1744, 8])
Edge features tensor([[ 1.6816e-01, -6.4304e-02, -1.4357e-01,  ..., -1.5667e-01,
         -3.8068e-02,  1.7123e-01],
        [ 3.4382e-01,  4.3173e-01,  1.9829e-01,  ..., -3.5438e-01,
         -1.7236e-02,  3.3274e-01],
        [ 3.4488e-01,  4.3757e-01,  2.1029e-01,  ..., -3.7093e-01,
         -4.3682e-02,  3.1551e-01],
        ...,
        [ 2.1787e-01,  2.6058e-03, -2.1784e-01,  ...,  7.8157e-03,
         -2.1769e-01, -1.0419e-02],
        [ 5.3373e-03, -9.6834e-03,  1.2231e-02,  ..., -6.4708e-03,
          1.2795e-03,  4.1494e-03],
        [ 1.1704e-08, -2.3404e-08,  3.5099e-08,  ..., -7.0116e-08,
          8.1757e-08, -9.3375e-08]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1744, 96])
Tensor Product Weights tensor([[-1.5645e-02,  9.2242e-02,  9.0939e-02,  ...,  3.0063e-02,
          2.7557e-02, -1.0088e-01],
        [ 7.0501e-02, -1.8110e-01, -9.3316e-02,  ..., -1.0342e-01,
         -3.6230e-02,  8.2959e-02],
        [ 7.7484e-02, -1.7814e-01, -1.0181e-01,  ..., -9.3512e-02,
         -2.6031e-02,  7.3373e-02],
        ...,
        [-5.8557e-02,  1.5261e-01,  1.1470e-01,  ...,  9.9778e-02,
          1.5342e-02, -1.0271e-01],
        [-1.3427e-02, -7.5615e-03,  1.9110e-03,  ..., -8.7698e-04,
          2.7130e-03, -9.8430e-04],
        [-2.4065e-08, -4.1507e-08, -1.4937e-08,  ...,  3.4474e-08,
          2.0977e-08,  7.4787e-09]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1226, -0.1148,  0.2524,  ...,  0.1274,  0.0619,  0.2492],
        [ 0.1698, -0.0694,  0.3397,  ..., -0.1711,  0.1356,  0.1464],
        [ 0.1294, -0.1132,  0.2786,  ..., -0.0316,  0.0818,  0.2912],
        ...,
        [-0.1503, -0.0773, -0.2964,  ..., -0.0429,  0.0412, -0.0698],
        [-0.0079, -0.1157,  0.1722,  ..., -0.3978, -0.2094, -0.0386],
        [-0.2192, -0.1169, -0.3048,  ...,  0.0119, -0.0089, -0.0300]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5684e+00,  1.1162e+00, -5.6495e-01,  ...,  2.8797e-02,
          1.3565e-02, -6.1740e-03],
        [ 1.4122e+00,  6.6056e-01, -6.2487e-01,  ...,  4.2145e-02,
          5.6449e-02, -6.9897e-03],
        [ 1.5989e+00,  1.0853e+00, -6.2467e-01,  ...,  8.5795e-03,
          9.2216e-02, -5.6167e-02],
        ...,
        [ 3.5082e-01,  1.6905e-02, -2.0645e-01,  ..., -8.0750e-02,
         -1.1201e-01,  5.3633e-02],
        [ 9.4768e-01,  6.2759e-01, -3.8882e-01,  ...,  2.2874e-04,
         -9.3521e-02, -1.2592e-02],
        [ 3.0761e-01, -1.2360e-02, -2.0972e-01,  ...,  2.4556e-02,
         -1.3104e-01, -3.6281e-02]], grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1980])
shifts shape: torch.Size([1980, 3])
sender shape: torch.Size([1980])
receiver shape: torch.Size([1980])
Edge attributes shape: torch.Size([1980, 9])
Edge attributes tensor([[ 1.0000,  1.1511,  0.9949,  ..., -0.0113, -1.0631, -0.4132],
        [ 1.0000, -0.2158,  1.7185,  ...,  2.1837, -0.0326, -0.0299],
        [ 1.0000,  1.3031, -0.7202,  ..., -0.5382,  0.8228, -0.5905],
        ...,
        [ 1.0000, -0.4926, -1.6187,  ...,  1.8114, -0.7742, -0.0680],
        [ 1.0000, -1.2290, -1.1235,  ...,  0.2931, -0.6918, -0.8281],
        [ 1.0000, -1.5162,  0.5151,  ..., -0.8214,  0.4391, -1.2024]])
Edge features shape: torch.Size([1980, 8])
Edge features tensor([[ 1.6856e-01, -6.3932e-02, -1.4431e-01,  ..., -1.5633e-01,
         -4.0009e-02,  1.7151e-01],
        [ 3.4410e-01,  4.3324e-01,  2.0139e-01,  ..., -3.5873e-01,
         -2.4050e-02,  3.2845e-01],
        [ 3.4493e-01,  4.3786e-01,  2.1090e-01,  ..., -3.7175e-01,
         -4.5026e-02,  3.1459e-01],
        ...,
        [ 5.3456e-03, -9.6976e-03,  1.2247e-02,  ..., -6.4658e-03,
          1.2642e-03,  4.1724e-03],
        [ 3.6688e-01,  5.7118e-01,  5.2236e-01,  ..., -4.6859e-01,
         -5.8403e-01, -4.4065e-01],
        [ 9.2771e-05, -1.8355e-04,  2.7038e-04,  ..., -4.8918e-04,
          5.4298e-04, -5.8511e-04]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1980, 96])
Tensor Product Weights tensor([[-1.6162e-02,  9.2895e-02,  9.1662e-02,  ...,  3.0281e-02,
          2.7527e-02, -1.0133e-01],
        [ 7.2254e-02, -1.8042e-01, -9.5493e-02,  ..., -1.0091e-01,
         -3.3630e-02,  8.0454e-02],
        [ 7.7853e-02, -1.7797e-01, -1.0224e-01,  ..., -9.2996e-02,
         -2.5505e-02,  7.2895e-02],
        ...,
        [-1.3446e-02, -7.5665e-03,  1.9159e-03,  ..., -8.8422e-04,
          2.7134e-03, -9.8665e-04],
        [ 5.0424e-01,  8.6418e-02, -2.8098e-01,  ...,  1.3737e-01,
          1.9553e-01, -7.3262e-02],
        [-2.0387e-04, -2.9954e-04, -8.6544e-05,  ...,  2.1886e-04,
          1.4762e-04,  4.2771e-05]], grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1338, -0.1160,  0.2575,  ...,  0.1331,  0.0575,  0.1828],
        [ 0.1895, -0.0845,  0.3381,  ..., -0.1650,  0.1396,  0.0983],
        [ 0.1229, -0.1118,  0.2681,  ..., -0.0352,  0.0929,  0.2003],
        ...,
        [-0.1950,  0.0011, -0.1882,  ...,  0.0376,  0.0393, -0.0174],
        [ 0.0652, -0.1197,  0.1913,  ..., -0.0228,  0.1298,  0.1102],
        [-0.2107, -0.1136, -0.3065,  ...,  0.0551, -0.0168, -0.0802]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5846,  1.1223, -0.5499,  ...,  0.0271,  0.0099, -0.0053],
        [ 1.4026,  0.6825, -0.5670,  ...,  0.0274,  0.0599, -0.0404],
        [ 1.5872,  1.0749, -0.6180,  ...,  0.0114,  0.0934, -0.0601],
        ...,
        [ 0.1975, -0.1009, -0.1137,  ..., -0.0270,  0.1446, -0.0142],
        [ 0.9968,  0.6433, -0.3847,  ...,  0.0618,  0.0770, -0.0197],
        [ 0.3067, -0.0115, -0.2058,  ...,  0.1009,  0.0931, -0.0326]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1862])
shifts shape: torch.Size([1862, 3])
sender shape: torch.Size([1862])
receiver shape: torch.Size([1862])
Edge attributes shape: torch.Size([1862, 9])
Edge attributes tensor([[ 1.0000,  1.2277,  1.0049,  ...,  0.0110, -0.9015, -0.6613],
        [ 1.0000, -0.2084,  1.7195,  ...,  2.1875, -0.0125, -0.0280],
        [ 1.0000,  1.4156, -0.7120,  ..., -0.5513,  0.6428, -0.9779],
        ...,
        [ 1.0000, -1.1753, -0.1936,  ..., -1.0761, -0.3142,  0.1291],
        [ 1.0000,  0.5062, -0.4886,  ..., -0.8511, -0.9984,  1.4516],
        [ 1.0000,  1.6765, -0.2950,  ..., -1.0207, -0.1218, -1.7483]])
Edge features shape: torch.Size([1862, 8])
Edge features tensor([[ 0.1692, -0.0633, -0.1455,  ..., -0.1557, -0.0432,  0.1719],
        [ 0.3439,  0.4322,  0.1994,  ..., -0.3559, -0.0196,  0.3313],
        [ 0.3449,  0.4376,  0.2103,  ..., -0.3710, -0.0438,  0.3155],
        ...,
        [ 0.2208,  0.0080, -0.2205,  ...,  0.0239, -0.2191, -0.0318],
        [ 0.3669,  0.5711,  0.5221,  ..., -0.4688, -0.5839, -0.4401],
        [ 0.2180,  0.0029, -0.2180,  ...,  0.0086, -0.2178, -0.0115]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        ...,
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483],
        [ 0.2604, -0.3726,  0.0656,  ..., -0.6095, -0.0313,  0.0906],
        [-0.4959,  0.3995,  0.2413,  ..., -0.1706,  0.1510,  0.1483]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1862, 96])
Tensor Product Weights tensor([[-0.0170,  0.0940,  0.0928,  ...,  0.0307,  0.0275, -0.1021],
        [ 0.0711, -0.1809, -0.0941,  ..., -0.1026, -0.0353,  0.0821],
        [ 0.0775, -0.1781, -0.1018,  ..., -0.0935, -0.0260,  0.0733],
        ...,
        [-0.0596,  0.1545,  0.1122,  ...,  0.1052,  0.0130, -0.0992],
        [ 0.5038,  0.0861, -0.2810,  ...,  0.1373,  0.1955, -0.0732],
        [-0.0586,  0.1527,  0.1146,  ...,  0.1001,  0.0152, -0.1025]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[ 0.1330, -0.1162,  0.2604,  ...,  0.1309,  0.0533,  0.2875],
        [ 0.1922, -0.0963,  0.3448,  ..., -0.1693,  0.1144,  0.2172],
        [ 0.1223, -0.1147,  0.2758,  ..., -0.0420,  0.0804,  0.3237],
        ...,
        [-0.1829, -0.1795, -0.2537,  ..., -0.0990, -0.0580,  0.0403],
        [ 0.0323, -0.1314,  0.1371,  ...,  0.1576,  0.1808, -0.3418],
        [-0.2047, -0.1147, -0.2819,  ..., -0.1106, -0.0185, -0.0522]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 1.5822,  1.1242, -0.5510,  ...,  0.0278,  0.0099, -0.0025],
        [ 1.4230,  0.7020, -0.6008,  ...,  0.0407,  0.0574, -0.0277],
        [ 1.5977,  1.0868, -0.6276,  ...,  0.0114,  0.0904, -0.0561],
        ...,
        [ 0.2769, -0.0324, -0.1675,  ..., -0.1229,  0.0221, -0.0361],
        [ 0.9283,  0.6017, -0.3487,  ..., -0.0462,  0.0334, -0.0812],
        [ 0.3003, -0.0245, -0.1817,  ..., -0.0404,  0.0191, -0.1147]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
process_conformer_ensemble input shape: torch.Size([32, 86, 32])
Num conformers: 32, Total dim: 2752
Scalar dim: 688, Vector dim: 688
mean_pooling:
  Scalar shape: torch.Size([32, 688])
  Vector shape: torch.Size([32, 688, 3])
  Scalar: tensor([[-0.3057, -0.2120, -0.4171,  ..., -0.0996, -0.0135, -0.1414],
        [-0.3065, -0.2106, -0.4176,  ..., -0.0781, -0.0141, -0.1395],
        [-0.3061, -0.2130, -0.4178,  ..., -0.0957, -0.0131, -0.1410],
        ...,
        [-0.3040, -0.2109, -0.4124,  ..., -0.0876, -0.0136, -0.1394],
        [-0.3086, -0.2112, -0.4201,  ..., -0.0877, -0.0136, -0.1506],
        [-0.3080, -0.2115, -0.4203,  ..., -0.1010, -0.0149, -0.1403]],
       grad_fn=<DivBackward0>)
  Vector: tensor([[[-0.0319, -0.0930,  0.0060],
         [-0.0597,  0.0406,  0.0752],
         [ 0.0285, -0.0139,  0.0918],
         ...,
         [-0.0061, -0.1135, -0.0922],
         [-0.0078, -0.1041, -0.0720],
         [ 0.0084,  0.1791,  0.1451]],

        [[-0.0146, -0.0988,  0.0076],
         [-0.0519,  0.0473,  0.0743],
         [ 0.0291, -0.0206,  0.0937],
         ...,
         [ 0.1206,  0.0850, -0.0180],
         [ 0.1054,  0.0762, -0.0138],
         [-0.1898, -0.1338,  0.0282]],

        [[-0.0270, -0.0955,  0.0063],
         [-0.0584,  0.0430,  0.0752],
         [ 0.0297, -0.0167,  0.0922],
         ...,
         [ 0.0916,  0.1040, -0.0537],
         [ 0.0792,  0.0931, -0.0464],
         [-0.1440, -0.1639,  0.0845]],

        ...,

        [[-0.0217, -0.0964,  0.0081],
         [-0.0553,  0.0448,  0.0739],
         [ 0.0303, -0.0188,  0.0926],
         ...,
         [ 0.0260, -0.1406, -0.0386],
         [ 0.0215, -0.1247, -0.0331],
         [-0.0405,  0.2213,  0.0606]],

        [[-0.0507, -0.0698,  0.0007],
         [-0.0632,  0.0194,  0.0772],
         [ 0.0142, -0.0019,  0.0941],
         ...,
         [ 0.1047,  0.0962, -0.0406],
         [ 0.0929,  0.0897, -0.0325],
         [-0.1661, -0.1552,  0.0604]],

        [[-0.0309, -0.1005,  0.0080],
         [-0.0623,  0.0466,  0.0741],
         [ 0.0332, -0.0178,  0.0917],
         ...,
         [-0.0435,  0.0239, -0.1287],
         [-0.0400,  0.0052, -0.1061],
         [ 0.0693, -0.0384,  0.1994]]], grad_fn=<DivBackward0>)
--------------------------------------------------
deep_sets:
  Scalar shape: torch.Size([32, 688])
  Vector shape: torch.Size([32, 688, 3])
  Scalar: tensor([[ 0.0106, -0.0059,  0.0120,  ..., -0.0036, -0.0046, -0.0078],
        [ 0.0105, -0.0059,  0.0119,  ..., -0.0038, -0.0046, -0.0079],
        [ 0.0106, -0.0059,  0.0120,  ..., -0.0037, -0.0046, -0.0077],
        ...,
        [ 0.0105, -0.0060,  0.0119,  ..., -0.0037, -0.0046, -0.0078],
        [ 0.0104, -0.0059,  0.0119,  ..., -0.0037, -0.0044, -0.0079],
        [ 0.0105, -0.0059,  0.0119,  ..., -0.0037, -0.0046, -0.0079]],
       grad_fn=<SiluBackward0>)
  Vector: tensor([[[-0.0022,  0.0116,  0.0021],
         [ 0.0059, -0.0052, -0.0070],
         [ 0.0018, -0.0031, -0.0050],
         ...,
         [-0.0012,  0.0017,  0.0087],
         [ 0.0047, -0.0061, -0.0001],
         [-0.0045,  0.0011, -0.0063]],

        [[-0.0031,  0.0120,  0.0013],
         [ 0.0059, -0.0059, -0.0068],
         [ 0.0010, -0.0026, -0.0041],
         ...,
         [-0.0032,  0.0018,  0.0096],
         [ 0.0040, -0.0061, -0.0002],
         [-0.0051,  0.0009, -0.0065]],

        [[-0.0030,  0.0113,  0.0021],
         [ 0.0061, -0.0054, -0.0063],
         [ 0.0013, -0.0030, -0.0034],
         ...,
         [-0.0032,  0.0015,  0.0097],
         [ 0.0040, -0.0060, -0.0006],
         [-0.0045,  0.0015, -0.0066]],

        ...,

        [[-0.0028,  0.0109,  0.0023],
         [ 0.0059, -0.0055, -0.0070],
         [ 0.0016, -0.0028, -0.0044],
         ...,
         [-0.0024,  0.0018,  0.0086],
         [ 0.0048, -0.0059, -0.0006],
         [-0.0052,  0.0003, -0.0063]],

        [[-0.0028,  0.0120,  0.0014],
         [ 0.0061, -0.0061, -0.0071],
         [ 0.0020, -0.0028, -0.0040],
         ...,
         [-0.0022,  0.0019,  0.0093],
         [ 0.0045, -0.0059, -0.0001],
         [-0.0046,  0.0010, -0.0062]],

        [[-0.0018,  0.0122,  0.0015],
         [ 0.0062, -0.0054, -0.0073],
         [ 0.0015, -0.0027, -0.0044],
         ...,
         [-0.0014,  0.0025,  0.0094],
         [ 0.0046, -0.0061, -0.0003],
         [-0.0044,  0.0010, -0.0053]]], grad_fn=<ViewBackward0>)
--------------------------------------------------
self_attention:
  Scalar shape: torch.Size([32, 688])
  Vector shape: torch.Size([32, 688, 3])
  Scalar: tensor([[-0.0175, -0.0046, -0.0058,  ..., -0.0046,  0.0173,  0.0117],
        [-0.0173, -0.0046, -0.0058,  ..., -0.0045,  0.0173,  0.0116],
        [-0.0176, -0.0046, -0.0059,  ..., -0.0045,  0.0174,  0.0117],
        ...,
        [-0.0175, -0.0046, -0.0058,  ..., -0.0047,  0.0174,  0.0116],
        [-0.0173, -0.0045, -0.0057,  ..., -0.0046,  0.0172,  0.0117],
        [-0.0173, -0.0045, -0.0059,  ..., -0.0045,  0.0173,  0.0117]],
       grad_fn=<SiluBackward0>)
  Vector: tensor([[[-3.7508e-03,  5.3626e-03,  1.0659e-02],
         [-1.0096e-02,  8.1238e-03,  7.4853e-04],
         [ 8.4744e-03,  1.0756e-02,  6.9820e-03],
         ...,
         [ 4.6806e-03, -7.0752e-03, -1.2831e-02],
         [ 9.1762e-03, -1.0792e-02, -2.4503e-04],
         [-9.9618e-03, -6.7647e-03, -3.8031e-04]],

        [[-3.6258e-03,  4.9435e-03,  1.0369e-02],
         [-1.0145e-02,  7.8863e-03,  5.7033e-04],
         [ 9.2867e-03,  1.1214e-02,  7.0639e-03],
         ...,
         [ 3.1794e-03, -6.7866e-03, -1.1501e-02],
         [ 9.3064e-03, -9.4761e-03, -5.9048e-04],
         [-9.6501e-03, -6.4762e-03, -3.6894e-04]],

        [[-3.0091e-03,  5.0532e-03,  1.0914e-02],
         [-1.0673e-02,  8.2065e-03,  6.6040e-04],
         [ 1.0186e-02,  1.1074e-02,  7.7777e-03],
         ...,
         [ 3.9083e-03, -6.3669e-03, -1.2577e-02],
         [ 9.3234e-03, -1.0666e-02, -1.3785e-03],
         [-1.0462e-02, -6.4012e-03, -3.1140e-04]],

        ...,

        [[-4.4172e-03,  5.5113e-03,  1.0533e-02],
         [-1.0153e-02,  7.6496e-03,  9.6168e-04],
         [ 9.3172e-03,  1.0818e-02,  7.6451e-03],
         ...,
         [ 4.3926e-03, -6.8653e-03, -1.3358e-02],
         [ 8.2509e-03, -1.0131e-02, -6.9146e-04],
         [-1.0274e-02, -7.0097e-03, -9.0467e-04]],

        [[-4.0664e-03,  5.1341e-03,  1.0075e-02],
         [-1.0173e-02,  8.1040e-03,  4.7419e-04],
         [ 8.3142e-03,  1.0633e-02,  6.7592e-03],
         ...,
         [ 4.1330e-03, -6.4239e-03, -1.2439e-02],
         [ 9.6852e-03, -1.0625e-02, -4.7446e-04],
         [-9.1430e-03, -6.5569e-03, -4.8703e-04]],

        [[-3.3777e-03,  4.9213e-03,  1.0758e-02],
         [-1.0656e-02,  8.6704e-03,  5.6811e-04],
         [ 8.9656e-03,  1.0965e-02,  7.5435e-03],
         ...,
         [ 4.0866e-03, -7.4709e-03, -1.1924e-02],
         [ 9.2532e-03, -9.9468e-03,  1.2631e-05],
         [-9.2496e-03, -6.7283e-03,  5.7688e-04]]], grad_fn=<ViewBackward0>)
--------------------------------------------------
==================================================

Batch 8 in Ensemble: 347_i
Number of conformers in this batch: 1
Unique Atomic Numbers: [6, 1, 8, 15, 7, 9]
Average number of neighbors: 21.58
Processing batch of 1 conformers
Initialized CustomNonLinearReadout with input irreps: 32x0e+32x1o
positions shape: torch.Size([86, 3])
edge_index shape: torch.Size([2, 1856])
shifts shape: torch.Size([1856, 3])
sender shape: torch.Size([1856])
receiver shape: torch.Size([1856])
Edge attributes shape: torch.Size([1856, 9])
Edge attributes tensor([[ 1.0000,  1.2247,  1.0058,  ...,  0.0130, -0.9074, -0.6530],
        [ 1.0000, -0.2058,  1.7198,  ...,  2.1887,  0.0033, -0.0273],
        [ 1.0000,  1.4075, -0.7119,  ..., -0.5514,  0.6578, -0.9480],
        ...,
        [ 1.0000, -1.1662, -0.1753,  ..., -1.0837, -0.2871,  0.1609],
        [ 1.0000,  0.5058, -0.5453,  ..., -0.7855, -1.1012,  1.4142],
        [ 1.0000,  1.6671, -0.3693,  ..., -0.9655, -0.1384, -1.7396]])
Edge features shape: torch.Size([1856, 8])
Edge features tensor([[ 0.1692, -0.0634, -0.1454,  ..., -0.1558, -0.0430,  0.1719],
        [ 0.3439,  0.4323,  0.1994,  ..., -0.3559, -0.0196,  0.3313],
        [ 0.3449,  0.4376,  0.2103,  ..., -0.3709, -0.0437,  0.3155],
        ...,
        [ 0.2208,  0.0080, -0.2205,  ...,  0.0238, -0.2191, -0.0317],
        [ 0.3669,  0.5710,  0.5220,  ..., -0.4689, -0.5838, -0.4398],
        [ 0.2180,  0.0029, -0.2180,  ...,  0.0086, -0.2178, -0.0114]])
Node attributes shape: torch.Size([86, 6])
Node attributes tensor([[1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 0., 1., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 1., 0.],
        [0., 1., 0., 0., 0., 0.],
        [0., 0., 1., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 0., 0., 0., 0., 1.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.],
        [1., 0., 0., 0., 0., 0.],
        [0., 1., 0., 0., 0., 0.]])
Weights are internally flattened and have a shape torch.Size([192])
Initial node features shape: torch.Size([86, 32])
Initial node features tensor([[ 0.4144, -0.1869, -0.5406,  ...,  0.1294, -0.3249, -0.9489],
        [ 0.4144, -0.1869, -0.5406,  ...,  0.1294, -0.3249, -0.9489],
        [ 0.4144, -0.1869, -0.5406,  ...,  0.1294, -0.3249, -0.9489],
        ...,
        [ 0.6368, -0.7364, -0.1292,  ...,  0.5445, -0.1897,  0.0443],
        [ 0.4144, -0.1869, -0.5406,  ...,  0.1294, -0.3249, -0.9489],
        [ 0.6368, -0.7364, -0.1292,  ...,  0.5445, -0.1897,  0.0443]],
       grad_fn=<ViewBackward0>)
Node features after linear_up shape: torch.Size([86, 32])
Tensor product weights shape: torch.Size([1856, 96])
Tensor Product Weights tensor([[-0.0103,  0.0335, -0.0532,  ...,  0.0852,  0.0148,  0.0121],
        [-0.1939,  0.0097,  0.0164,  ...,  0.1747, -0.1582,  0.1601],
        [-0.2036,  0.0044,  0.0180,  ...,  0.1747, -0.1639,  0.1625],
        ...,
        [-0.0191, -0.0487, -0.0742,  ...,  0.0688,  0.0165,  0.0817],
        [-0.2747,  0.0132,  0.0139,  ...,  0.0643, -0.2864,  0.4652],
        [-0.0182, -0.0429, -0.0750,  ...,  0.0722,  0.0161,  0.0783]],
       grad_fn=<MmBackward0>)
Message shape: torch.Size([86, 288])
Message tensor([[-0.0976, -0.0459,  0.0155,  ..., -0.1465, -0.0016,  0.0049],
        [-0.1790, -0.0167, -0.0745,  ...,  0.0840,  0.0162, -0.0048],
        [-0.0989, -0.0239,  0.0057,  ...,  0.0108, -0.0418, -0.0319],
        ...,
        [-0.0322, -0.0471,  0.1447,  ...,  0.0385,  0.1094, -0.2459],
        [-0.0615, -0.0292,  0.0784,  ...,  0.4073,  0.3345, -0.2721],
        [-0.0374, -0.0435,  0.1671,  ...,  0.0390, -0.0674,  0.1813]],
       grad_fn=<ScatterAddBackward0>)
Input shape torch.Size([86, 32, 9])
Node features shape torch.Size([86, 128])
Node features tensor([[ 0.0908,  0.2151,  0.0033,  ..., -0.0059,  0.1466, -0.0053],
        [ 0.0899,  0.2064,  0.0746,  ...,  0.0356,  0.0534, -0.0399],
        [ 0.0207,  0.2330,  0.0752,  ...,  0.0634, -0.1038,  0.0070],
        ...,
        [ 0.1749, -0.0967,  0.2253,  ...,  0.1501, -0.0120, -0.0453],
        [-0.7791, -0.0016, -0.1542,  ..., -0.0622,  0.0928, -0.2334],
        [ 0.1807, -0.0562,  0.2155,  ...,  0.0678, -0.0472,  0.2104]],
       grad_fn=<ViewBackward0>)
EQUICAT output shape: torch.Size([86, 128])
Input shape to CustomNonLinearReadout: torch.Size([86, 128])
Final output shape after NonLinearReadout: torch.Size([86, 32])
Conformer embeddings shape: torch.Size([86, 32])
process_conformer_ensemble input shape: torch.Size([1, 86, 32])
Num conformers: 1, Total dim: 2752
Scalar dim: 688, Vector dim: 688
mean_pooling:
  Scalar shape: torch.Size([1, 688])
  Vector shape: torch.Size([1, 688, 3])
  Scalar: tensor([[ 6.2977e-02,  4.5934e-02,  1.0165e-01,  3.3528e-02, -3.2902e-01,
         -5.0951e-02,  1.3444e-01,  1.5684e-01, -6.6821e-02,  2.7432e-01,
         -6.8545e-03,  1.4169e-02, -2.7786e-02, -3.0150e-03, -1.5666e-02,
          1.1935e-01, -3.2080e-03, -3.7260e-02,  1.5951e-03, -4.2372e-03,
          4.1959e-02, -9.7850e-02,  1.4507e-03,  2.2301e-02, -1.3334e-01,
          1.0429e-03, -7.1700e-02,  1.0822e-01,  8.9270e-03, -4.6967e-02,
          2.4672e-02,  1.0670e-02, -2.5727e-02, -4.2541e-02,  2.1422e-01,
          1.2117e-01, -1.1580e-01,  3.8264e-02,  1.2019e-01,  3.8156e-02,
         -2.7841e-01, -1.5861e-01,  7.4096e-02, -3.3644e-02,  5.6832e-02,
          6.6754e-02,  6.4139e-02,  9.4537e-02, -1.1882e-03, -3.6577e-01,
         -2.4318e-01,  9.5643e-02,  1.5940e-01,  9.3702e-02, -2.4603e-02,
          3.2851e-02,  1.0133e-02, -2.4511e-02, -3.2537e-01, -2.5353e-01,
          8.4206e-02, -1.8533e-01, -1.8922e-01,  2.8803e-02,  1.0446e-02,
          4.5611e-03,  1.5538e-01,  7.7909e-02, -2.2347e-01, -6.3744e-02,
          1.6630e-01,  1.0378e-01,  1.2858e-01, -1.9017e-01,  5.3788e-02,
         -2.7393e-02, -3.3208e-04,  4.4911e-02,  3.6539e-02, -7.7335e-02,
          1.7850e-02,  2.7988e-02, -1.8579e-02,  5.6620e-02, -2.7140e-02,
          7.1516e-02, -2.9367e-02, -7.2726e-02,  7.9108e-02, -8.4073e-03,
          2.4789e-02, -4.7329e-02,  6.5103e-03, -2.6670e-03, -2.1802e-02,
         -1.1711e-02, -8.2214e-02, -2.4023e-01,  2.9485e-01,  2.0266e-01,
         -1.8561e-01,  2.0862e-01,  1.2256e-01,  6.3412e-02,  4.6414e-02,
         -6.8424e-01, -1.2365e-02,  4.0529e-02, -1.9300e-01,  1.4027e-02,
         -2.3627e-02, -3.1439e-01,  1.5596e-02,  7.8656e-02, -2.2691e-01,
         -2.4391e-02, -1.1130e-02,  2.7232e-01,  1.9490e-03, -4.9355e-02,
          2.8455e-01,  1.6209e-02,  1.8331e-01, -3.2646e-01, -5.8194e-02,
          7.9825e-02, -1.3283e-01, -4.1217e-02, -3.8418e-02, -5.6446e-02,
          1.2320e-01,  8.5585e-02, -1.3415e-01, -4.5700e-02,  1.6125e-01,
          8.3798e-02,  1.1351e-01,  2.7545e-01, -5.6199e-02, -6.2146e-02,
         -3.3848e-02,  4.3399e-02,  2.5254e-02,  5.9962e-02, -2.9258e-02,
          5.0331e-02,  1.0900e-01,  1.2331e-02, -3.7425e-02, -1.1840e-01,
          3.2252e-02, -5.3095e-02, -1.3360e-01,  7.1206e-03, -4.1255e-03,
          2.2575e-01,  1.6504e-02, -6.0349e-04,  1.9491e-01, -2.3089e-02,
         -6.5363e-02, -4.2900e-02,  2.2772e-01,  1.2529e-01, -1.0739e-01,
         -3.5300e-03,  2.0421e-01,  5.5432e-02,  2.7181e-01,  7.0043e-03,
          1.7295e-02,  1.0358e-01, -5.5965e-02, -4.4376e-03,  5.5351e-02,
         -3.4498e-03,  3.9611e-02,  2.3609e-01,  3.9357e-03, -1.9586e-02,
         -1.3607e-01, -1.2307e-03, -8.1089e-03, -1.4577e-01, -1.8902e-02,
          2.0930e-03,  3.2278e-01, -2.4991e-04, -1.0567e-01,  1.7224e-01,
          1.5167e-02, -9.6920e-02, -4.4177e-02,  1.9924e-02,  4.7943e-02,
          7.2915e-02, -1.0832e-01, -4.6400e-03,  5.0623e-02,  4.1621e-03,
         -8.0080e-03, -1.1811e-01,  7.3628e-02, -1.4627e-01,  9.3514e-02,
          5.8023e-02, -5.3005e-02,  3.7631e-02,  4.6940e-02, -1.8848e-04,
         -6.6483e-02,  3.6516e-02,  8.2635e-02, -1.6658e-01, -5.1575e-02,
         -8.5138e-02,  3.4544e-01, -9.6913e-03,  1.3962e-01, -4.7294e-01,
          3.3636e-02, -2.7773e-02, -4.1892e-02,  5.8872e-02, -6.4964e-02,
         -3.1416e-01,  3.3386e-01,  2.6779e-01, -2.8334e-01,  2.0564e-01,
          6.5259e-02,  7.1205e-02,  2.8062e-02,  7.0043e-01, -1.4434e-03,
         -2.4816e-02,  1.4483e-01,  8.2070e-02,  1.1542e-02,  2.6983e-01,
          3.0084e-02, -3.3963e-02,  2.5962e-01,  5.3526e-03,  7.6013e-03,
         -2.6457e-01,  2.7144e-03, -4.1560e-02, -3.1812e-01,  2.0199e-02,
          5.2723e-02,  4.6587e-01, -1.2223e-01, -1.2092e-02,  2.3690e-01,
         -8.8310e-02, -2.4035e-02, -5.7086e-01,  4.6735e-01,  4.2215e-01,
         -3.9078e-01,  3.1110e-01, -1.2069e-01,  4.5066e-02, -5.8228e-01,
          2.8034e-01,  3.2394e-01, -1.1072e-01,  5.5341e-02,  7.0001e-02,
         -2.4440e-01,  1.1544e-01,  1.4254e-01, -2.0463e-01,  1.0466e-01,
          1.0144e-01,  2.2887e-01, -1.0073e-01, -1.2794e-01,  2.4853e-01,
         -1.2113e-01, -1.4069e-01, -2.7421e-01,  1.1654e-01,  1.5541e-01,
         -1.2640e-01,  4.3124e-02,  7.1777e-02, -2.4887e-02, -5.8450e-01,
          4.7259e-01,  4.2976e-01, -3.8651e-01,  3.1484e-01, -1.2742e-01,
          4.1519e-02, -5.0968e-01, -4.2270e-01,  3.1011e-01, -9.2369e-02,
         -1.0005e-01,  5.9534e-02, -2.1103e-01, -1.8746e-01,  1.3008e-01,
         -1.7694e-01, -1.3869e-01,  1.0675e-01,  2.0099e-01,  1.5496e-01,
         -1.2189e-01,  2.1516e-01,  1.8456e-01, -1.2982e-01, -2.4177e-01,
         -1.7999e-01,  1.4372e-01, -1.1819e-01, -6.3073e-02,  6.9574e-02,
         -3.9871e-02, -3.1063e-01,  3.2682e-01,  2.4836e-01, -2.9513e-01,
          2.3952e-01,  3.4394e-02,  7.6926e-02,  1.7012e-01, -6.6466e-01,
         -6.0278e-02,  2.0495e-02, -1.3578e-01, -2.0277e-03,  1.1788e-01,
         -2.8710e-01, -4.9005e-02, -3.4837e-02, -2.2500e-01,  2.8855e-02,
         -4.8560e-02,  2.5668e-01,  1.3712e-02, -7.8333e-02,  2.7908e-01,
          3.0730e-02, -2.9387e-02, -2.8595e-01,  2.8224e-02, -6.0776e-02,
         -1.4266e-01,  4.0837e-02, -4.9142e-02,  4.9181e-02,  6.8858e-03,
          5.1937e-02, -9.6638e-02, -2.6036e-02,  7.2574e-02,  2.0011e-02,
         -5.8945e-02,  3.3790e-02, -1.1943e-01,  1.1952e-01, -5.6157e-02,
         -1.6926e-01,  8.5803e-03, -7.5065e-02, -7.9472e-02, -4.8051e-02,
          1.3331e-02, -5.6688e-02,  3.0327e-02,  2.4535e-01,  2.9879e-02,
          7.2290e-02, -3.0817e-01,  2.2014e-02, -7.5363e-02,  3.9755e-01,
         -8.0249e-02, -8.6520e-02, -5.5891e-02,  5.8467e-02, -3.2924e-02,
          2.2134e-02,  8.0531e-02,  7.6374e-02, -1.1780e-01,  3.3940e-02,
          2.3785e-02, -1.2346e-02,  8.3032e-03, -6.7610e-03, -2.4515e-03,
          1.0922e-01, -5.3749e-02, -5.9357e-02,  8.8187e-02, -4.5789e-02,
         -4.8170e-02, -4.4699e-03,  1.8435e-04,  4.3408e-03, -2.0315e-01,
          1.0542e-01,  1.1072e-01,  2.4256e-01, -1.1963e-01, -1.3483e-01,
         -3.2942e-01,  1.6032e-01,  1.8366e-01,  4.2298e-02, -2.0584e-02,
         -2.1169e-02, -3.4836e-02,  2.2406e-02,  8.3074e-02,  8.0020e-02,
         -1.1797e-01,  3.7633e-02,  2.4034e-02, -1.4079e-02,  1.1613e-02,
          8.0532e-03, -5.3400e-03,  9.2483e-02,  8.2059e-02, -5.5544e-02,
          7.6595e-02,  6.7901e-02, -4.6754e-02,  7.3640e-04, -2.5519e-03,
          1.2498e-03, -1.7769e-01, -1.5445e-01,  1.0878e-01,  2.0600e-01,
          1.7968e-01, -1.2732e-01, -2.7679e-01, -2.4219e-01,  1.7160e-01,
          3.8887e-02,  3.0904e-02, -2.2601e-02, -2.4271e-02,  4.1012e-02,
          6.9231e-02,  6.7162e-02, -1.3196e-01,  1.5044e-02,  3.4870e-02,
         -3.7407e-04,  3.0632e-02, -4.2736e-02, -1.2977e-02,  1.3186e-01,
          1.4767e-01, -7.8962e-02,  5.0892e-02,  8.9468e-02, -3.2614e-02,
         -1.3205e-02, -3.8512e-02,  1.0957e-02,  7.3531e-03, -2.1718e-01,
          7.7505e-03, -2.2718e-02,  3.2145e-01, -6.1203e-03,  5.1625e-02,
         -4.2965e-01, -3.8003e-03, -1.2663e-02,  1.5379e-02,  7.3545e-03,
         -5.9933e-02, -3.5391e-02,  2.2114e-01,  1.1979e-01, -1.1328e-01,
         -7.9318e-03,  2.0152e-01,  5.8152e-02,  2.6947e-01,  5.4157e-02,
         -4.9338e-03,  1.0807e-01,  7.7347e-02,  9.3086e-03,  6.8333e-02,
          1.7202e-02, -3.3253e-02,  2.2202e-01,  4.7465e-02,  2.5901e-02,
         -1.3930e-01, -2.9159e-02,  9.4429e-04, -1.4574e-01, -1.6152e-02,
         -7.6418e-03,  3.0849e-01,  7.2456e-02,  1.1181e-01,  1.5734e-01,
          2.0573e-02,  9.8932e-02, -5.9978e-02, -2.4546e-01,  2.9753e-01,
          2.0233e-01, -2.1710e-01,  2.1685e-01,  9.1278e-02,  7.1959e-02,
         -4.3169e-02,  6.9485e-01, -4.9394e-02, -3.1104e-02,  1.7459e-01,
         -2.0270e-02, -6.6122e-02,  3.1599e-01, -4.8445e-02,  5.1481e-02,
          2.2910e-01,  8.5287e-03,  5.7857e-03, -2.7811e-01,  3.1016e-02,
          7.9492e-03, -2.8503e-01,  1.8052e-03,  1.2233e-01,  3.2532e-01,
          6.2967e-02,  7.6827e-02,  1.4311e-01,  2.7799e-02,  8.2839e-03,
          1.0408e-03,  1.5735e-01,  8.0104e-02, -2.1983e-01, -6.3286e-02,
          1.6690e-01,  1.0236e-01,  8.2813e-02,  2.0806e-01, -4.2279e-02,
         -2.4942e-02, -2.6215e-03, -5.0370e-02,  1.9155e-02,  8.2980e-02,
         -1.5625e-02,  2.2615e-02,  1.8942e-02, -5.1388e-02, -9.9107e-03,
         -7.1321e-02,  2.5478e-02, -5.2247e-02, -9.1921e-02,  3.5009e-03,
          8.0577e-03,  4.7277e-02, -5.2226e-03, -1.0966e-02,  1.6846e-02,
          1.1996e-02,  6.7168e-04, -1.0556e-02,  1.6161e-01,  8.3442e-02,
         -1.4001e-01,  2.5901e-03,  1.0180e-01,  5.5341e-02, -2.4977e-01,
          1.2481e-01, -5.5906e-02, -3.4784e-02, -4.8411e-02,  1.1871e-02,
          8.1354e-02, -6.2453e-02,  5.3532e-02, -3.5266e-01,  1.8583e-01,
         -1.1175e-01,  1.3595e-01, -9.1546e-02,  2.9705e-02,  3.3258e-02,
         -8.0129e-04,  4.0641e-03, -3.3531e-01,  2.0766e-01, -1.4605e-01,
         -1.8167e-01,  1.5703e-01, -1.2766e-01, -4.3684e-02, -6.5046e-02,
          1.3762e-01,  9.1593e-02, -1.4550e-01, -1.9785e-02,  1.5479e-01,
          8.5971e-02,  1.4959e-01, -2.6470e-01,  1.4534e-01, -5.2230e-02,
         -1.1568e-02,  4.8681e-02,  4.8472e-02, -5.9082e-02,  4.7149e-02,
          4.2810e-02, -1.1990e-01,  9.4648e-02, -6.9612e-02,  1.1989e-01,
         -6.3988e-02, -5.0701e-02,  1.2653e-01, -6.4424e-02,  1.2521e-02,
         -2.4861e-01,  8.0060e-02,  4.3963e-02, -1.8207e-01, -1.0859e-02,
          6.1639e-02,  4.4473e-02,  1.0406e-01,  3.5587e-02, -3.3094e-01,
         -4.7812e-02,  1.3534e-01,  1.5665e-01, -3.4762e-03, -2.7716e-01,
          6.6079e-03,  5.4429e-03,  2.9311e-02,  5.2206e-03,  9.7016e-03,
         -1.1844e-01,  6.1168e-03, -3.0465e-02, -5.4936e-03, -7.8752e-04,
          1.7542e-02,  1.0162e-01,  7.0306e-04, -9.2310e-03,  1.3267e-01,
         -3.2920e-03, -3.8891e-02, -1.1608e-01, -1.1733e-02, -3.6914e-02,
         -3.2717e-02, -1.5600e-02, -3.5929e-02,  2.5487e-02,  2.2934e-02,
          3.3828e-02, -1.0249e-01, -3.4260e-02,  4.9366e-02,  2.0433e-02,
         -1.0059e-01,  8.8809e-02, -3.6840e-02, -2.1226e-01, -1.0505e-01,
         -1.4129e-01, -1.4075e-01, -4.8443e-02]], grad_fn=<DivBackward0>)
  Vector: tensor([[[-0.0682, -0.0166,  0.0471],
         [-0.0051,  0.1198,  0.1789],
         [ 0.0694, -0.0075, -0.3318],
         ...,
         [ 0.0854, -0.0639,  0.2590],
         [-0.1167,  0.0933, -0.3437],
         [ 0.0133, -0.0329,  0.0577]]], grad_fn=<DivBackward0>)
--------------------------------------------------
deep_sets:
  Scalar shape: torch.Size([1, 688])
  Vector shape: torch.Size([1, 688, 3])
  Scalar: tensor([[-1.2920e-02, -1.3244e-02, -4.8137e-03, -1.2980e-02, -1.3819e-02,
          5.5344e-03,  1.4841e-02,  4.7910e-03,  1.7604e-02,  1.9001e-02,
          1.8350e-02, -1.7191e-02,  1.8738e-02, -3.6925e-03, -8.9425e-03,
         -1.4929e-02, -1.2324e-02, -2.4620e-03,  2.4853e-03,  7.4546e-03,
         -9.0824e-03, -9.1219e-03, -1.7680e-02, -4.6806e-03, -1.2417e-02,
         -1.0023e-02,  2.9429e-03,  2.2157e-02, -9.2250e-03,  4.9264e-03,
          6.5184e-03,  2.4124e-03, -1.0647e-02,  7.4875e-03,  1.3699e-04,
         -5.0447e-04, -3.1969e-03, -2.0087e-02,  1.9339e-02,  2.1000e-03,
          2.1607e-02,  9.6846e-03, -8.2820e-03,  1.6172e-02, -6.0121e-03,
          5.7308e-03, -6.2891e-03,  1.4842e-02, -4.0340e-03,  1.8760e-03,
          1.3296e-02, -1.2297e-02,  5.8467e-03, -1.1169e-02,  1.5186e-03,
         -2.4157e-03, -1.0935e-02,  9.8937e-03,  1.0893e-02,  2.4567e-02,
         -1.6260e-02, -2.1088e-03, -1.4649e-03,  4.6711e-03,  1.6776e-02,
          1.3196e-02,  1.6639e-03,  1.8799e-02, -2.0539e-02, -1.3583e-02,
         -7.6186e-03,  1.8840e-02, -2.4433e-03,  1.3589e-02, -1.1860e-02,
          2.2982e-03,  1.0609e-02, -1.6137e-02, -9.4064e-03, -2.0712e-02,
         -1.0589e-02, -1.1723e-02, -1.4828e-02,  7.1525e-03,  1.6898e-02,
          1.7186e-02, -9.5739e-03,  3.5226e-03,  4.8080e-03, -8.6480e-03,
         -8.0727e-03,  3.8989e-03,  1.1761e-02, -4.0386e-03,  3.8410e-03,
          8.6824e-03, -1.1076e-02, -2.0556e-03,  5.7619e-03,  5.6219e-03,
          1.4453e-02,  2.0141e-03,  1.9660e-02, -1.8260e-03, -9.2225e-03,
          5.6641e-03, -8.4014e-03, -1.7555e-02,  1.7212e-02, -7.9776e-03,
         -8.3758e-04, -1.3177e-02, -1.6011e-02, -5.0803e-03,  7.3909e-03,
         -6.6537e-03, -5.1707e-03, -1.4987e-02,  2.0488e-02, -6.9904e-03,
         -2.5567e-03, -2.2011e-03, -1.6458e-02,  1.6406e-04,  9.4315e-03,
          4.2162e-03, -1.5443e-02,  9.8086e-03,  5.8819e-04,  6.2907e-03,
          1.2753e-02,  1.9267e-02,  1.0891e-02,  2.0788e-02,  1.2756e-02,
         -1.5444e-02, -1.7890e-02,  1.3039e-02, -6.1770e-04,  1.3715e-02,
          5.6506e-03, -3.2754e-03, -3.2646e-03, -1.0035e-02, -4.1766e-03,
          6.3574e-03, -7.6916e-03, -5.8977e-03,  1.6260e-02, -1.2024e-02,
         -1.4562e-02, -1.3677e-02,  1.1201e-02,  2.3687e-02,  5.5024e-03,
         -1.4939e-02,  2.1821e-04, -6.3905e-04, -1.7529e-02, -5.0118e-03,
          1.7335e-02, -3.6012e-03, -3.4735e-03, -5.1370e-03, -9.4341e-03,
          4.9102e-03,  1.2592e-02,  1.5143e-02, -1.1539e-02,  1.3512e-02,
          1.5154e-02, -8.3003e-03,  1.7250e-02,  1.1556e-02,  1.7315e-02,
         -6.5116e-03, -1.4770e-02, -7.0320e-03,  8.6618e-03,  3.4030e-03,
          5.2278e-03, -1.0472e-02,  1.4442e-03,  1.0422e-02, -1.8734e-02,
         -2.4235e-02, -1.5134e-02, -1.5315e-02,  4.7955e-03, -7.1865e-03,
         -1.6259e-02,  9.8906e-03,  9.7217e-04, -1.8662e-02,  1.8804e-02,
         -1.4492e-02,  1.4317e-02,  1.3967e-02,  8.4267e-04, -1.0686e-02,
          3.6477e-03,  3.1057e-03, -1.8809e-02,  1.5348e-02,  5.6369e-03,
          8.7969e-03,  6.5089e-03, -2.1131e-03, -1.6283e-02,  1.6355e-03,
         -1.1500e-02, -9.9716e-03, -9.1251e-03,  7.9792e-03, -5.2765e-03,
         -3.6414e-03, -1.8630e-02, -9.1310e-03, -2.1292e-02,  1.7149e-02,
         -5.4532e-03,  2.4827e-02, -1.4727e-02, -1.7491e-02,  1.7305e-03,
         -9.5038e-03,  1.9225e-02,  6.4932e-03, -8.9427e-03, -3.4306e-03,
          1.5738e-02, -1.2232e-02, -1.6229e-02, -1.0788e-02, -1.7885e-02,
          1.6904e-02,  2.2729e-02,  1.5027e-02,  3.3503e-03,  1.4000e-02,
         -9.2386e-04,  1.0811e-02, -3.5143e-03,  1.3282e-02,  2.2582e-04,
          2.3518e-03,  1.6089e-02,  3.6931e-03,  2.3855e-02,  2.5857e-02,
         -1.6857e-02,  1.4955e-02, -2.0299e-02, -8.0869e-03, -2.6533e-03,
          7.5204e-03,  1.8458e-02, -5.2662e-03,  4.9614e-03, -6.5380e-03,
          7.8752e-04, -1.0848e-02,  1.4449e-02,  1.7068e-02, -1.7275e-02,
         -1.4450e-02,  2.0846e-03,  1.6366e-02,  1.3304e-02,  2.5875e-03,
          7.7306e-03, -1.8894e-02, -1.5768e-02,  1.4822e-02,  1.1272e-03,
          4.6311e-03, -6.6729e-03, -5.6252e-03,  2.9306e-03, -3.8971e-03,
          9.6027e-03, -9.2806e-03,  9.5491e-03,  1.1657e-02,  1.6058e-02,
         -1.2908e-02, -1.4987e-02,  5.1089e-03,  1.7610e-02, -2.6087e-02,
          1.1813e-02,  1.2109e-03,  5.1293e-04,  2.4079e-03, -5.5804e-05,
         -1.4357e-02,  2.1281e-02,  7.9857e-03, -1.3402e-02,  1.3523e-02,
          1.2397e-02,  1.5824e-02, -9.3122e-03, -1.5138e-02, -1.4628e-03,
         -1.3454e-02, -1.4222e-02, -4.7838e-03,  2.9504e-03, -9.2923e-03,
          1.4549e-02,  1.6127e-02, -1.8381e-03,  1.0203e-02,  9.1238e-03,
          1.0897e-02, -5.9726e-03, -1.1154e-02, -4.1938e-03, -1.6166e-02,
          6.0836e-03, -1.3225e-02, -6.1267e-06,  9.9302e-03,  1.4955e-02,
          3.1693e-03, -1.1029e-02,  3.6199e-03,  1.7969e-02, -1.7829e-02,
         -1.7753e-02, -1.3244e-02,  5.4764e-04, -3.3689e-03, -2.0524e-02,
         -5.8864e-03, -8.9850e-03,  1.4771e-02,  1.7296e-02, -4.8215e-03,
         -9.1127e-03,  9.2433e-04,  6.1867e-03,  1.9439e-02,  1.1614e-03,
          1.9660e-02,  1.7547e-02, -1.3067e-02, -2.7787e-03,  8.9702e-03,
         -1.4919e-02, -1.7785e-02, -8.9766e-03,  1.2508e-02, -7.2189e-03,
          9.8562e-03, -6.8665e-03, -3.1325e-03,  4.5689e-03, -2.4405e-03,
         -2.8182e-03,  1.9229e-02,  9.7113e-03, -1.3714e-02,  2.1818e-02,
         -1.3975e-02, -1.1225e-02, -1.2763e-02, -2.3133e-02, -1.5048e-02,
         -1.2397e-02, -3.7908e-03, -1.2340e-02, -1.4765e-02, -9.9409e-03,
         -1.9119e-02, -1.2284e-02, -5.3454e-04, -1.7312e-02, -6.1156e-03,
         -1.5713e-03, -8.1351e-03,  2.3133e-03,  1.2918e-03,  1.9248e-03,
          4.0855e-03, -3.7238e-03, -1.2067e-02, -2.5264e-03,  3.9132e-03,
         -1.0794e-02, -1.7459e-02, -1.1655e-02,  7.3804e-03,  7.5800e-03,
          9.8590e-03, -1.9157e-02, -2.1553e-02,  1.1995e-02, -3.3271e-03,
          1.2279e-02,  6.8276e-03,  7.6220e-03,  2.0999e-02, -1.2410e-02,
         -7.6442e-03, -3.8690e-03,  1.7848e-02, -1.4183e-02, -1.2621e-02,
          1.0159e-02,  5.8777e-03, -2.1614e-02,  1.2078e-02,  1.3092e-02,
         -5.7666e-03, -1.2895e-02,  3.3184e-03,  9.6053e-03,  1.2622e-02,
         -4.9814e-03,  8.7582e-03, -2.0305e-02, -1.8186e-02,  4.7487e-03,
         -1.9225e-02,  1.6548e-02,  1.2224e-02, -2.4425e-02, -9.2040e-03,
         -1.3608e-02,  1.4121e-02,  1.9626e-03, -1.2363e-02, -1.2089e-02,
         -4.1682e-03,  6.8868e-03, -1.3211e-02, -6.6124e-04,  4.9296e-04,
          1.3662e-02,  2.2165e-02, -6.9323e-03,  5.0761e-04,  1.3092e-02,
         -2.6038e-03,  6.4703e-03,  5.0440e-03,  5.2028e-03, -5.7584e-03,
          2.0090e-02,  7.5500e-03, -1.3909e-02,  1.4959e-02,  4.9657e-03,
         -8.0768e-03, -1.6250e-02,  2.0973e-03,  9.2489e-04, -1.7870e-02,
          1.5068e-02, -3.1577e-03,  9.5804e-03,  7.4988e-03,  1.7584e-02,
         -2.5157e-03, -9.4999e-03, -1.5676e-02, -1.2427e-02,  1.5414e-02,
         -1.2170e-02,  4.8926e-03,  1.5088e-02, -1.8990e-02,  2.6046e-02,
         -5.0436e-03, -1.5194e-03,  1.3114e-02,  8.3297e-03,  2.3948e-03,
          4.6331e-03,  2.3872e-02,  1.3463e-02, -9.2526e-03, -1.3625e-02,
         -2.3025e-03, -1.2039e-02,  5.5928e-03,  5.2693e-03,  2.4579e-03,
         -1.6297e-02,  1.2203e-02, -2.2246e-02, -5.5155e-03,  4.3353e-03,
          1.1572e-02, -1.2091e-02, -1.1578e-02,  1.0273e-02,  2.0360e-02,
          1.3444e-02,  1.3952e-02, -1.7957e-03,  7.5700e-03, -1.8020e-02,
          5.8235e-03, -1.1690e-02, -1.6918e-02, -1.7035e-03,  1.8114e-02,
          5.7450e-03,  1.0157e-02, -9.9755e-04, -1.2536e-02,  4.7992e-03,
         -1.0362e-02,  1.6350e-02, -7.4332e-03, -1.6183e-02,  1.6459e-02,
         -1.9360e-02,  5.4063e-03,  1.2870e-02, -1.0915e-02, -2.8569e-04,
         -1.4859e-02, -7.6267e-04,  2.5908e-03, -2.7234e-03,  5.7575e-03,
         -8.4496e-03,  1.5081e-02,  1.7611e-02,  1.3907e-04, -1.2121e-02,
         -2.0449e-02,  7.0883e-03, -6.8067e-03,  4.8852e-03,  3.3684e-03,
         -1.5304e-02,  1.2762e-02,  8.4789e-03, -9.9550e-03, -7.9498e-03,
         -1.1252e-02, -1.2693e-02, -9.6144e-03, -7.7234e-03,  8.4432e-03,
          1.2551e-02, -4.5100e-03,  9.3606e-03,  4.1333e-05, -1.0942e-02,
         -1.8250e-02, -1.1996e-02, -9.1990e-03,  1.9402e-02,  3.5963e-03,
          1.1485e-02,  4.4425e-03,  1.2647e-02, -1.9062e-02, -9.2775e-03,
          1.3864e-02, -1.6456e-02,  1.1008e-02,  5.4304e-03,  1.8293e-02,
          9.1590e-03,  6.8210e-03,  1.1901e-02,  1.6231e-02,  4.6299e-03,
         -1.2100e-02, -1.5388e-02, -9.3840e-03,  6.3007e-03,  1.1022e-02,
         -8.5541e-04,  7.4696e-03,  5.2489e-04,  1.1483e-02, -1.5621e-02,
          8.0812e-03, -1.6794e-02, -5.3445e-03,  7.5608e-03,  1.7735e-02,
         -8.7865e-03, -3.2200e-03,  1.4090e-02, -4.2385e-03, -1.0998e-04,
          8.9246e-03, -8.1996e-04, -2.6910e-02,  6.1368e-03, -2.6995e-03,
         -2.4900e-03, -1.2534e-02,  1.7548e-02, -1.7298e-02, -7.3717e-03,
          1.0520e-02, -9.4731e-03, -1.0041e-02, -3.5128e-03, -2.0650e-02,
          1.0042e-02, -1.7166e-02,  7.6287e-03, -8.6286e-03, -6.0027e-05,
          6.4314e-03,  1.7207e-03,  3.5467e-03, -2.4846e-03,  3.5526e-03,
         -1.1529e-02,  1.5377e-02,  2.0811e-03, -1.2225e-02, -6.6618e-04,
         -9.5838e-03, -1.2801e-02, -1.2985e-02, -2.2517e-02, -1.9810e-02,
          3.4485e-03,  2.1346e-02, -9.6026e-03, -9.8326e-03, -9.3572e-03,
          2.1048e-02,  8.1869e-03,  2.8129e-03, -3.2072e-03, -5.5451e-03,
         -3.6699e-03, -7.1842e-03,  1.2315e-02,  2.0088e-03,  1.7299e-02,
          9.9048e-04, -5.3685e-03, -7.1608e-03, -4.3933e-03, -1.7235e-02,
          7.4699e-03,  2.3482e-03, -1.1929e-02, -1.6750e-03,  1.8569e-02,
         -1.5331e-02, -6.6293e-03, -1.9241e-02,  4.2187e-03,  6.4395e-03,
          1.0793e-02, -9.4483e-03,  7.9052e-03,  1.7774e-02, -2.5445e-03,
         -5.1727e-03, -1.7492e-02,  2.3017e-03, -8.0949e-04,  2.0007e-02,
          3.3146e-03,  2.9421e-02,  1.7442e-02,  6.6417e-03,  1.3974e-03,
         -1.1343e-02, -8.8069e-03, -1.8116e-04, -1.3580e-03,  1.8307e-02,
         -1.1243e-02,  9.4945e-03,  6.4740e-03,  6.8779e-03,  2.6324e-03,
          1.0011e-02,  2.4184e-02,  9.8534e-03]], grad_fn=<SiluBackward0>)
  Vector: tensor([[[ 0.0061,  0.0004, -0.0143],
         [-0.0101, -0.0063,  0.0012],
         [-0.0099,  0.0051, -0.0046],
         ...,
         [-0.0048, -0.0042,  0.0018],
         [ 0.0057, -0.0102, -0.0073],
         [-0.0096, -0.0012,  0.0089]]], grad_fn=<ViewBackward0>)
--------------------------------------------------
self_attention:
  Scalar shape: torch.Size([1, 688])
  Vector shape: torch.Size([1, 688, 3])
  Scalar: tensor([[-7.6185e-03,  4.5525e-04,  1.8055e-02, -2.0972e-02,  9.8676e-03,
          8.8779e-03, -1.6297e-02, -3.7484e-03,  1.3753e-02, -4.2020e-03,
         -1.8707e-03, -3.3368e-03,  2.5740e-03,  2.7970e-03,  5.6419e-03,
         -1.2081e-02, -2.0529e-03, -4.6249e-03,  1.6657e-03,  1.2660e-02,
         -2.0204e-02,  1.8694e-03, -3.2393e-03,  1.3853e-02, -1.5125e-02,
          1.8924e-02, -1.5266e-02, -9.7937e-03,  6.5557e-03, -1.0545e-02,
         -6.2821e-03, -1.9217e-02,  7.6788e-03,  9.1380e-03,  1.3699e-02,
          1.8875e-02,  1.2472e-02, -5.0836e-03, -1.0310e-02, -1.3491e-02,
          2.4738e-02, -1.6703e-03,  3.5740e-03,  1.3758e-02,  8.7887e-03,
          1.1600e-02,  1.2499e-02, -9.1154e-03, -6.2691e-03,  8.0432e-03,
          1.7977e-03,  1.1509e-03, -1.1893e-02, -1.9974e-03,  2.5990e-02,
          1.1020e-02,  8.9602e-03, -4.7870e-03, -1.5459e-03,  1.8265e-02,
         -1.4627e-02, -5.6704e-03, -1.7129e-03, -1.2428e-03, -7.2760e-03,
         -6.5914e-03, -1.9696e-03,  7.9940e-03,  1.2946e-03,  5.4065e-03,
         -5.9081e-03,  1.5497e-03, -1.1056e-02, -5.5910e-03,  1.4816e-02,
          1.3116e-02, -1.0223e-02, -2.7076e-03,  1.1738e-02,  5.3123e-03,
         -5.1299e-03,  1.6645e-02, -1.7273e-02, -2.5775e-04,  2.0811e-03,
          7.8778e-04, -1.0602e-02, -1.3571e-02,  9.9048e-03, -1.1381e-02,
         -8.2419e-03,  9.9712e-03, -3.7576e-03,  1.1190e-02, -1.6691e-02,
          1.9174e-02,  1.8794e-02,  2.9986e-03, -1.4995e-02, -1.7313e-03,
          1.1642e-02,  4.7037e-03, -7.9175e-03,  9.1108e-04, -6.4971e-04,
         -1.1509e-02, -1.5034e-02,  7.0679e-03,  1.4021e-02,  3.1837e-03,
         -1.2677e-02, -5.1708e-03, -1.4904e-02,  1.1810e-02, -1.6452e-02,
         -7.1785e-03,  1.6142e-02,  7.7559e-03, -1.9024e-02,  5.5056e-03,
          1.0292e-02, -2.5959e-03,  1.9478e-02, -1.8943e-02,  5.1498e-03,
          4.8791e-03,  2.4347e-03, -1.1491e-02,  1.4638e-02, -3.3597e-03,
          1.0676e-02,  1.5200e-02, -1.3237e-02, -8.0356e-03, -1.7144e-03,
         -1.7080e-02,  7.7872e-03, -1.5573e-03,  1.4676e-02,  1.8052e-02,
          3.9958e-03, -1.5375e-03, -1.1134e-02,  2.1148e-03, -2.2899e-03,
          9.5838e-03,  1.2358e-02,  1.6010e-02, -2.9006e-03, -1.1176e-02,
         -9.4804e-03, -1.9800e-03,  8.2572e-03, -8.5976e-03,  2.7883e-03,
          8.4457e-03, -8.1772e-03,  7.1071e-03, -1.3774e-02,  3.6160e-03,
          8.5388e-03, -1.4111e-03,  1.2904e-02, -1.3855e-02, -1.3456e-02,
          1.5300e-02, -8.6461e-03,  1.8593e-02, -8.1226e-03, -1.4178e-02,
          2.4391e-03, -9.6264e-03,  1.4621e-02, -3.2558e-04,  1.6690e-02,
          1.0615e-02, -8.0550e-03, -2.1377e-02, -1.7078e-02,  5.5728e-03,
         -4.3039e-03, -3.8244e-03,  1.1401e-02, -3.4620e-04, -1.3800e-02,
          5.1462e-04,  7.8407e-03, -6.7240e-03, -1.6514e-02,  1.0006e-03,
         -1.5129e-02,  8.6052e-03, -1.8375e-03, -1.7787e-03, -1.9871e-02,
          1.6379e-02, -1.1555e-02, -1.6733e-02,  1.9577e-02,  1.5868e-02,
          5.6827e-04,  4.2025e-03,  1.3851e-02,  2.2025e-03, -1.9538e-02,
         -1.8325e-02,  7.9230e-03,  2.5163e-02, -1.1863e-02,  1.5144e-02,
          2.0180e-02, -7.7478e-03, -2.8500e-04, -3.4015e-03,  1.4080e-02,
         -1.3341e-02, -6.2817e-03, -5.8195e-03,  1.2834e-02,  1.4446e-02,
          1.9352e-02,  1.4221e-02, -1.2831e-02,  3.7646e-03, -7.0692e-03,
          5.3753e-05, -5.8930e-03,  1.8751e-02,  2.1369e-03,  1.9081e-02,
         -1.0552e-02,  1.8907e-03,  1.1357e-02,  6.4073e-03,  5.3818e-03,
         -7.0669e-04, -1.0469e-02,  1.6402e-02, -6.1226e-03, -6.7266e-04,
          1.6563e-02,  4.6912e-03, -1.5977e-02, -1.7329e-02,  9.6470e-03,
          1.5278e-02,  7.0685e-03, -1.2307e-03, -1.1893e-02, -6.5953e-04,
          1.3841e-02,  9.7848e-03,  2.1217e-02, -1.7682e-02, -2.3406e-03,
          2.1837e-02,  7.8432e-03,  2.4777e-03,  1.0753e-02,  2.2918e-02,
         -9.2192e-03,  6.3418e-03,  5.6893e-03,  8.9545e-03,  8.9453e-03,
         -9.0244e-03,  4.7501e-03,  1.9642e-02,  1.3041e-02,  1.7143e-02,
          1.5560e-02,  8.2740e-03, -8.3492e-03,  6.9078e-03,  4.7692e-03,
         -6.9499e-03,  2.5630e-03,  1.5020e-02,  1.8788e-02,  2.1144e-02,
         -1.8769e-02, -1.1869e-02,  4.3391e-03,  2.0239e-02, -1.6891e-03,
         -1.7621e-02,  9.0130e-03,  4.5042e-03, -1.0324e-02, -5.1993e-04,
         -5.8834e-03, -1.7029e-02,  1.1733e-02, -4.6542e-03, -4.1813e-03,
          1.3611e-02,  4.1519e-03, -4.8004e-03, -8.6802e-03, -5.2074e-03,
          7.4448e-03, -1.1862e-02, -2.6345e-03,  1.4567e-02,  1.4111e-02,
          1.5309e-02,  1.1764e-02,  5.8925e-04, -3.4929e-03, -1.6784e-02,
          1.3509e-02,  1.7137e-02,  1.4964e-02,  2.0004e-02, -1.1464e-02,
         -8.4086e-03, -7.0798e-03,  1.1106e-02, -1.8888e-02,  1.2371e-02,
          1.0849e-02, -2.2084e-02, -1.3695e-02, -3.1270e-03, -4.0854e-03,
          1.7852e-02, -5.6489e-03, -9.6110e-04,  1.8000e-02,  1.5914e-02,
         -8.1186e-03,  6.8220e-03,  1.1735e-02, -7.7451e-03,  2.0653e-03,
          7.3077e-03,  9.1488e-03, -4.4853e-03,  1.6697e-02,  1.0069e-02,
         -5.9818e-03,  3.5497e-03, -1.3359e-02,  1.7530e-02,  1.9873e-02,
          1.9223e-02, -8.1357e-03,  1.7821e-02,  1.0233e-02, -7.4542e-03,
          1.5411e-02,  1.5580e-03,  1.7695e-02, -1.4436e-02,  4.4199e-03,
          8.7585e-03,  9.5369e-03,  1.4816e-02,  8.7325e-03, -8.0237e-03,
         -3.4652e-03,  7.2011e-03, -3.1060e-03,  1.2575e-02,  1.0077e-03,
         -1.3226e-02,  9.8016e-04, -1.5065e-03,  1.9572e-02,  1.3801e-02,
          1.9373e-02, -9.4715e-03, -3.3109e-03, -1.5770e-02, -9.5301e-03,
          8.1434e-03,  9.5654e-03, -1.2323e-02,  1.4634e-02,  7.5481e-03,
         -7.5106e-03, -4.9175e-03, -2.3746e-03,  1.0236e-02, -1.7454e-02,
         -6.0244e-03, -1.4253e-02, -8.6180e-03,  1.1028e-02, -8.7981e-03,
          1.0282e-02, -1.7758e-02, -1.0933e-02,  1.8263e-02, -6.6251e-03,
         -8.5194e-03, -1.1648e-02, -4.7946e-03, -4.8840e-03, -2.1108e-04,
          2.2288e-02,  3.1192e-03, -1.0764e-02, -3.0066e-03, -4.4042e-03,
         -1.0645e-02,  2.4348e-03, -1.7762e-02,  1.3976e-02, -5.8006e-04,
          8.6783e-03,  2.0313e-03,  1.6009e-02,  7.5954e-03,  1.5817e-02,
          6.1318e-03,  1.2285e-02, -5.0012e-03,  1.4499e-02, -5.2370e-04,
          2.7237e-03, -1.9844e-02, -1.2429e-03, -5.6762e-03,  4.6573e-03,
          1.5371e-02,  9.1031e-03,  1.8314e-02, -4.5394e-03,  2.3026e-02,
          1.7674e-02, -9.7322e-03, -1.4555e-02,  4.9130e-03, -1.0273e-02,
          1.2592e-02, -1.2027e-02, -6.8680e-03, -4.7458e-03,  6.5088e-03,
         -1.6207e-02,  6.2162e-03, -9.2596e-03,  5.1453e-03, -2.2974e-02,
          1.4484e-02, -1.8466e-02, -1.0883e-02,  1.3956e-03, -1.1152e-02,
          6.5532e-03,  4.3779e-03,  7.0922e-03,  1.6384e-02,  2.5150e-02,
         -1.8556e-02,  1.9712e-02,  3.8561e-03,  1.3207e-02,  1.2188e-03,
         -1.3882e-02, -3.6487e-03,  7.4400e-03,  7.3447e-04, -4.0261e-03,
         -1.1979e-02, -4.3743e-03, -1.3476e-02, -2.1477e-02, -1.1056e-02,
         -1.5303e-02,  7.4859e-03,  4.4675e-03, -1.1927e-02, -1.4035e-02,
          1.0525e-02, -1.3206e-02, -2.0427e-03,  8.8426e-04,  2.0240e-02,
          1.6150e-02, -1.5229e-02, -1.0578e-02,  7.5285e-03, -1.6757e-02,
          1.4331e-02, -1.1304e-03, -1.0785e-02,  1.0008e-02,  5.4779e-03,
          7.4906e-03, -2.0205e-02, -1.6399e-02,  1.5873e-02,  1.2702e-02,
          5.1341e-03, -1.9987e-02, -1.2025e-02, -5.7571e-03, -1.3116e-02,
         -2.3413e-02, -1.5734e-03, -1.9302e-02,  6.2159e-03,  3.9633e-03,
          9.2222e-03, -1.2589e-02,  5.0047e-03,  6.7884e-03, -1.8120e-02,
          1.7934e-02,  1.7206e-02,  2.1808e-02,  1.7008e-02,  1.4480e-02,
         -1.0867e-02,  6.5875e-03,  9.8853e-03,  1.7774e-02,  7.4270e-03,
          1.2127e-02,  2.0318e-04,  1.3745e-02,  1.7179e-02, -1.9917e-02,
         -3.6622e-03,  1.6095e-02,  2.0924e-03, -1.1774e-02,  6.2245e-03,
          6.3598e-03,  5.0673e-03, -7.0615e-03,  1.0321e-02, -1.1155e-02,
         -4.9362e-03, -7.9276e-03,  2.4566e-02, -9.5888e-04,  1.0634e-02,
         -1.2192e-02, -1.3943e-02,  1.1320e-02,  1.0734e-03, -1.1914e-02,
         -6.4901e-03, -8.6144e-03, -5.2779e-03, -1.7361e-02,  3.2208e-03,
          1.4528e-02,  1.0976e-02, -1.3426e-02, -1.0298e-02, -2.0617e-02,
         -1.1980e-02,  1.7257e-02,  7.4352e-03, -1.3625e-03,  1.4202e-02,
         -8.9266e-03, -2.8262e-03, -4.7648e-03, -1.1220e-02,  2.2610e-03,
         -3.5922e-03, -3.1504e-03, -1.5372e-02,  1.3309e-02,  2.2815e-02,
          1.5141e-02,  4.4004e-03, -3.8169e-03, -4.1036e-03,  6.9420e-04,
         -1.2046e-02, -1.7702e-03, -1.3339e-02, -1.3919e-02, -7.5692e-03,
         -1.6316e-02, -7.6277e-03,  1.2048e-03, -4.2481e-03,  2.3535e-02,
         -5.9138e-03, -7.6681e-03,  3.9201e-03, -1.1416e-02, -1.0284e-02,
         -1.5859e-02,  1.2009e-02,  3.7478e-03,  1.2719e-02, -8.9993e-03,
         -1.4486e-02,  2.9322e-03, -6.8454e-03, -1.4425e-02, -7.8518e-03,
          6.0677e-03,  7.4830e-03,  1.9670e-02, -2.0878e-02,  1.1056e-03,
          1.4380e-02, -1.2973e-02, -1.5695e-02,  8.2138e-03,  4.8805e-03,
          1.0824e-02,  7.3640e-03, -3.4195e-03,  1.2602e-02,  5.4727e-03,
          9.3113e-03,  1.5357e-02, -1.4524e-02,  6.2631e-03, -1.9491e-02,
          9.6786e-03,  1.6877e-02, -1.3065e-02, -2.5572e-03, -1.6865e-02,
         -2.3782e-03,  2.0321e-03,  8.7051e-03, -2.0328e-02,  5.3864e-03,
          1.6185e-02, -1.2722e-02, -2.0855e-02, -1.0407e-03,  3.0098e-03,
          1.1344e-03,  5.2036e-03,  2.6755e-03,  4.6884e-03, -1.3775e-02,
         -8.1440e-03,  7.1605e-03, -1.0492e-02, -1.8623e-02,  1.0567e-03,
         -2.8932e-03, -2.1035e-02, -1.5620e-02, -7.2764e-03, -1.1755e-02,
          1.4261e-02, -8.3250e-03, -1.6681e-02, -8.9758e-03, -7.5266e-04,
          2.0430e-02,  1.5130e-02, -7.2199e-03, -8.9630e-03,  1.0883e-03,
          7.1772e-03, -5.3660e-04, -2.9778e-03, -9.0945e-03,  8.0786e-03,
         -1.6615e-02, -1.4214e-02, -1.3235e-02,  2.9418e-03,  1.4042e-02,
         -1.9391e-03,  1.0436e-02, -1.6646e-02,  9.2252e-03, -1.7963e-02,
          9.2110e-03,  1.8017e-02, -5.6574e-03,  1.3422e-04,  1.4675e-02,
         -1.2827e-02, -2.0658e-03, -1.9872e-02,  7.4389e-03, -1.3475e-02,
          1.4895e-02,  1.1795e-02, -1.5638e-02]], grad_fn=<SiluBackward0>)
  Vector: tensor([[[ 0.0076, -0.0001,  0.0023],
         [ 0.0070, -0.0031, -0.0074],
         [-0.0096, -0.0100, -0.0128],
         ...,
         [ 0.0061,  0.0033,  0.0073],
         [-0.0007,  0.0013, -0.0044],
         [-0.0014,  0.0018,  0.0031]]], grad_fn=<ViewBackward0>)
--------------------------------------------------
==================================================

Finished processing Conformer Ensemble: 347_i
==================================================

Total number of batches processed: 8
Total number of conformers processed: 211
Finished processing all conformers in all ensembles.
